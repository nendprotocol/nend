{
  "address": "0x5E529a9a459535B0C144310aEF5a8624e79d2e67",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "details",
          "type": "string"
        }
      ],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoRewardsAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoStakeYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endId",
          "type": "uint256"
        }
      ],
      "name": "BatchMigrationCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ILendingPoolStakingV2.EscrowStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "EscrowStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "InflationRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "periodId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "name": "NewPeriodStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inflationReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ifpReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "periodId",
          "type": "uint64"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ILendingPoolStakingV2.StakeStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "StakeStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "start",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "end",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint256[3]",
          "name": "amountsPerDuration",
          "type": "uint256[3]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isEscrow",
          "type": "bool"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "REWARD_PERIOD_LENGTH",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__Testing_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activeStakeTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeStakesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakeToken",
          "type": "address"
        }
      ],
      "name": "addStakeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "authorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_durationId",
          "type": "uint8"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inflationReward",
          "type": "uint256"
        }
      ],
      "name": "distributeInflationRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrowLockPeriod",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getClaimableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "inflationReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ifpReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentPeriodId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolRollOver",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "inflationRewardRemained",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getStakeByUserIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "staker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "start",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "end",
              "type": "uint48"
            },
            {
              "internalType": "uint256[3]",
              "name": "amountsPerDuration",
              "type": "uint256[3]"
            },
            {
              "internalType": "uint256",
              "name": "rewardAllocated",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isEscrow",
              "type": "bool"
            },
            {
              "internalType": "enum ILendingPoolStakingV2.EscrowStatus",
              "name": "escrowStatus",
              "type": "uint8"
            },
            {
              "internalType": "enum ILendingPoolStakingV2.StakeStatus",
              "name": "stakeStatus",
              "type": "uint8"
            }
          ],
          "internalType": "struct ILendingPoolStakingV2.Stake",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "getStakeEntry",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "userIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ],
          "internalType": "struct ILendingPoolStakingV2.StakeMappingEntry",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_userIndex",
          "type": "uint256"
        }
      ],
      "name": "getUserStakeId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "getUserStakeIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getUserStakesTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "inflationRollOver",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nend",
          "type": "address"
        },
        {
          "internalType": "contract Vault",
          "name": "_lendingPool",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "issueEAB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "lastEscrowRewardByToken_Duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingPool",
      "outputs": [
        {
          "internalType": "contract Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "batchSize",
          "type": "uint256"
        }
      ],
      "name": "migrateStakesInBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nend",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextStakeId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolRollOver",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "recentPeriods",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "periodId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "rewardsToDistribute",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardsStaked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakeToken",
          "type": "address"
        }
      ],
      "name": "removeStakeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardAllocations",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[3]",
          "name": "_rewardAllocations",
          "type": "uint8[3]"
        }
      ],
      "name": "setRewardAllocations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_deprecated",
          "type": "bool"
        }
      ],
      "name": "setStakesDeprecated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_testing",
          "type": "bool"
        }
      ],
      "name": "setTesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakeDurations",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "stakeEscrowedReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakeTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "start",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "end",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "rewardAllocated",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isEscrow",
          "type": "bool"
        },
        {
          "internalType": "enum ILendingPoolStakingV2.EscrowStatus",
          "name": "escrowStatus",
          "type": "uint8"
        },
        {
          "internalType": "enum ILendingPoolStakingV2.StakeStatus",
          "name": "stakeStatus",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakesDeprecated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "totalStakedByToken_Duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userStakesById",
      "outputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "start",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "end",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "rewardAllocated",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isEscrow",
          "type": "bool"
        },
        {
          "internalType": "enum ILendingPoolStakingV2.EscrowStatus",
          "name": "escrowStatus",
          "type": "uint8"
        },
        {
          "internalType": "enum ILendingPoolStakingV2.StakeStatus",
          "name": "stakeStatus",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStakesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2fe4f1495cfe152e8d3d16e319d1f4ff65aa59e4184337884e52a3008b7e34ab",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x7E8aE5C72eCA86946b695dCc211863D9721A0961",
    "contractAddress": null,
    "transactionIndex": 214,
    "gasUsed": "5389606",
    "logsBloom": "0x
    "blockHash": "0xf7f1110ff3e517cba299e4e1ab94ac2799512a439567c545e42bd12f8fa08e67",
    "transactionHash": "0x2fe4f1495cfe152e8d3d16e319d1f4ff65aa59e4184337884e52a3008b7e34ab",
    "logs": [
      {
        "transactionIndex": 214,
        "blockNumber": 48326238,
        "transactionHash": "0x2fe4f1495cfe152e8d3d16e319d1f4ff65aa59e4184337884e52a3008b7e34ab",
        "address": "0x5E529a9a459535B0C144310aEF5a8624e79d2e67",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 778,
        "blockHash": "0xf7f1110ff3e517cba299e4e1ab94ac2799512a439567c545e42bd12f8fa08e67"
      }
    ],
    "blockNumber": 48326238,
    "cumulativeGasUsed": "27298393",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 17,
  "solcInputHash": "49b3d9c2bb822e047dc3cc8b353e4c3c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRewardsAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStakeYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endId\",\"type\":\"uint256\"}],\"name\":\"BatchMigrationCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ILendingPoolStakingV2.EscrowStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"EscrowStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InflationRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"periodId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"NewPeriodStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inflationReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ifpReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"periodId\",\"type\":\"uint64\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ILendingPoolStakingV2.StakeStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StakeStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"end\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"amountsPerDuration\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEscrow\",\"type\":\"bool\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REWARD_PERIOD_LENGTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__Testing_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeStakeTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeStakesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"addStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_durationId\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inflationReward\",\"type\":\"uint256\"}],\"name\":\"distributeInflationRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrowLockPeriod\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inflationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ifpReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPeriodId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolRollOver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inflationRewardRemained\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getStakeByUserIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"end\",\"type\":\"uint48\"},{\"internalType\":\"uint256[3]\",\"name\":\"amountsPerDuration\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"rewardAllocated\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEscrow\",\"type\":\"bool\"},{\"internalType\":\"enum ILendingPoolStakingV2.EscrowStatus\",\"name\":\"escrowStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum ILendingPoolStakingV2.StakeStatus\",\"name\":\"stakeStatus\",\"type\":\"uint8\"}],\"internalType\":\"struct ILendingPoolStakingV2.Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"getStakeEntry\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct ILendingPoolStakingV2.StakeMappingEntry\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_userIndex\",\"type\":\"uint256\"}],\"name\":\"getUserStakeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"getUserStakeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUserStakesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inflationRollOver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nend\",\"type\":\"address\"},{\"internalType\":\"contract Vault\",\"name\":\"_lendingPool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"issueEAB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lastEscrowRewardByToken_Duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"}],\"name\":\"migrateStakesInBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextStakeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRollOver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recentPeriods\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"periodId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"rewardsToDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"removeStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardAllocations\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"_rewardAllocations\",\"type\":\"uint8[3]\"}],\"name\":\"setRewardAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_deprecated\",\"type\":\"bool\"}],\"name\":\"setStakesDeprecated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_testing\",\"type\":\"bool\"}],\"name\":\"setTesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeDurations\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"stakeEscrowedReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"end\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"rewardAllocated\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEscrow\",\"type\":\"bool\"},{\"internalType\":\"enum ILendingPoolStakingV2.EscrowStatus\",\"name\":\"escrowStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum ILendingPoolStakingV2.StakeStatus\",\"name\":\"stakeStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakesDeprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"totalStakedByToken_Duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStakesById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"end\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"rewardAllocated\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEscrow\",\"type\":\"bool\"},{\"internalType\":\"enum ILendingPoolStakingV2.EscrowStatus\",\"name\":\"escrowStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum ILendingPoolStakingV2.StakeStatus\",\"name\":\"stakeStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getStakeEntry(uint256)\":{\"params\":{\"_stakeId\":\"Global stake ID\"},\"returns\":{\"_0\":\"The stake mapping entry\"}},\"getUserStakeId(address,uint256)\":{\"params\":{\"_user\":\"Owner address\",\"_userIndex\":\"Index in the user's personal mapping\"},\"returns\":{\"_0\":\"The stake ID\"}},\"getUserStakeIndex(uint256)\":{\"params\":{\"_stakeId\":\"Global stake ID\"},\"returns\":{\"_0\":\"The user index\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"IMPORTANT: When adding new storage variables, add them BELOW this comment and ABOVE the storage gap.\"},\"_oldStakes\":{\"details\":\"DEPRECATED - Do not use. Kept for storage layout compatibility \"},\"activeStakesCount\":{\"details\":\"DEPRECATED - Do not use. Kept for storage layout compatibility \"},\"inflationRollOver\":{\"details\":\"DEPRECATED - Do not use. Kept for storage layout compatibility \"},\"lastEscrowRewardByToken_Duration\":{\"details\":\"DEPRECATED - Do not use. Kept for storage layout compatibility \"},\"poolRollOver\":{\"details\":\"DEPRECATED - Do not use. Kept for storage layout compatibility \"},\"stakes\":{\"details\":\"DEPRECATED - Do not use. Kept for storage layout compatibility \"},\"userToStakeTokenToLastEscrowId\":{\"details\":\"DEPRECATED - Do not use. Kept for storage layout compatibility \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getStakeEntry(uint256)\":{\"notice\":\"Gets stake entry by ID\"},\"getUserStakeId(address,uint256)\":{\"notice\":\"Gets stake ID by user and index\"},\"getUserStakeIndex(uint256)\":{\"notice\":\"Gets user index by stake ID\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/LendingPoolStakingV2.sol\":\"LendingPoolStakingV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x121966b3220d263a6669dcf59c1254bd48ed237adf4d8a595add70a7927eada1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC4906Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"./IERC721Upgradeable.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906Upgradeable is IERC165Upgradeable, IERC721Upgradeable {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x869de080935f0a9f8ae29134bc7bd33176d2912ab13f080ff678a5a26ea542b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x9256117dac3a66dbce2e7245c6ceb7361f8ae7425e3d896ac26ecece3e3d12e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7795808e3899c805254e3ae58074b20f799b466e3f43e057e47bedee5fb771f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xefb41f5c1a00249b7a99f0782f8c557865605426a3fb6e5fe9ae334293ae4f33\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0xd6e2dc520133229f192493fc0a53c0cfb0cbcee1e45bf0817c34e416486d9359\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../interfaces/IERC4906Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, IERC4906Upgradeable, ERC721Upgradeable {\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    function __ERC721URIStorage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x506af6039eb1b43691cff884b946de834f83ca7f53c6a0a18daf24bd21f5adaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd90d7723512df65ae417adaf0801042940f0dabd60039ceeaffe34aa5b238da1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/access/MWOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract MWOwnable is Initializable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {\\n        _transferOwnership(0x7E8aE5C72eCA86946b695dCc211863D9721A0961);\\n    }\\n\\n    function __MWOwnable_init() public virtual onlyInitializing {\\n        _transferOwnership(0x7E8aE5C72eCA86946b695dCc211863D9721A0961);  // Nend Mainnet Main Wallet\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xba21dd9bd966ff167e32aab1834c72f886763125d104a18c5aaea9c8cd25e4f3\",\"license\":\"MIT\"},\"contracts/access/SimpleRoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../access/MWOwnable.sol\\\";\\n\\nabstract contract SimpleRoleAccess is MWOwnable {\\n    mapping(address => mapping(string => bool)) public hasRole;\\n\\n    function authorize(\\n        address operator,\\n        string memory role,\\n        bool authorized\\n    ) public onlyOwner {\\n        hasRole[operator][role] = authorized;\\n    }\\n\\n    modifier onlyRole(string memory _role) virtual {\\n        require(\\n            msg.sender == owner() || hasRole[msg.sender][_role],\\n            \\\"Not authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier hasAllRoles(string[] memory _roles) virtual {\\n        for (uint256 i = 0; i < _roles.length; i++) {\\n            require(hasRole[msg.sender][_roles[i]], \\\"Not authorized\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier hasSomeRoles(string[] memory _roles) virtual {\\n        bool _hasRole;\\n        for (uint256 i = 0; i < _roles.length; i++) {\\n            if (hasRole[msg.sender][_roles[i]]) {\\n                _hasRole = true;\\n                break;\\n            }\\n        }\\n        require(_hasRole, \\\"Not authorized\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x24909d92ce9a95076b1f6cc36da047ddb31d11eef8016ccfaf7139a947443468\",\"license\":\"UNLICENSED\"},\"contracts/access/SimpleRoleAccessV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract SimpleRoleAccessV2 is OwnableUpgradeable {\\n    mapping(address => mapping(string => bool)) public hasRole;\\n\\n    function authorize(\\n        address operator,\\n        string memory role,\\n        bool authorized\\n    ) public onlyOwner {\\n        hasRole[operator][role] = authorized;\\n    }\\n\\n    modifier onlyRole(string memory _role) virtual {\\n        require(\\n            msg.sender == owner() || hasRole[msg.sender][_role],\\n            \\\"Not authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier hasAllRoles(string[] memory _roles) virtual {\\n        for (uint256 i = 0; i < _roles.length; i++) {\\n            require(hasRole[msg.sender][_roles[i]], \\\"Not authorized\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier hasSomeRoles(string[] memory _roles) virtual {\\n        bool _hasRole;\\n        for (uint256 i = 0; i < _roles.length; i++) {\\n            if (hasRole[msg.sender][_roles[i]]) {\\n                _hasRole = true;\\n                break;\\n            }\\n        }\\n        require(_hasRole, \\\"Not authorized\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc1442636641ce7f1e05c205f1edc2642f2799f7b3441124684b1db23939c5eec\",\"license\":\"UNLICENSED\"},\"contracts/helpers/SignatureHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary SignatureHelper {\\n    function recoverSigner(bytes32 messageHash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSig(signature);\\n\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n        bytes32 prefixedHashMessage = keccak256(\\n            abi.encodePacked(prefix, messageHash)\\n        );\\n\\n        return ecrecover(prefixedHashMessage, v, r, s);\\n    }\\n\\n    function splitSig(bytes memory signature)\\n        internal\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        assembly {\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n            v := and(mload(add(signature, 65)), 255)\\n        }\\n        if (v < 27) v += 27;\\n    }\\n}\\n\",\"keccak256\":\"0x8ba70d1d8ef7b41b9339b9cb6f012dba9c1b02f5239a06294b395553210e1dbc\",\"license\":\"UNLICENSED\"},\"contracts/staking/LendingPoolStakingV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\nimport \\\"../vault/Vault.sol\\\";\\nimport \\\"./interfaces/ILendingPoolStakingV2.sol\\\";\\nimport \\\"../test/TestingV2.sol\\\";\\nimport \\\"../access/SimpleRoleAccessV2.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"./StakingLib.sol\\\";\\n\\n// Storage layout v1: Used _oldStakes[] array\\n// Storage layout v2: Uses mapping(uint256 => Stake) stakes\\n// Storage layout v3: Uses userStakesById[user][index] for user-centric access\\n\\ncontract LendingPoolStakingV2 is\\n    ILendingPoolStakingV2,\\n    ERC721URIStorageUpgradeable,\\n    TestingV2,\\n    SimpleRoleAccessV2,\\n    UUPSUpgradeable\\n{\\n    address public nend;\\n    Vault public lendingPool;\\n    mapping(address => bool) public activeStakeTokens;\\n    /** @dev DEPRECATED - Do not use. Kept for storage layout compatibility */\\n    mapping(address => uint256) public inflationRollOver;\\n    address[] public stakeTokens;\\n    uint48 public escrowLockPeriod;\\n    // Active stake token count\\n    uint256 public stakeTokenCount;\\n    /** @dev DEPRECATED - Do not use. Kept for storage layout compatibility */\\n    uint256 public activeStakesCount;\\n    mapping(address => uint256) internal ifpTokenToAmount;\\n    /** @dev DEPRECATED - Do not use. Kept for storage layout compatibility */\\n    mapping(address => mapping(address => uint256)) userToStakeTokenToLastEscrowId;\\n    /** @dev DEPRECATED - Do not use. Kept for storage layout compatibility */\\n    mapping(address => mapping(uint8 => uint256))\\n        public lastEscrowRewardByToken_Duration;\\n    // V1 storage\\n    /** @dev DEPRECATED - Do not use. Kept for storage layout compatibility */\\n    Stake[] private _oldStakes;\\n    uint48[3] public stakeDurations;\\n    // Total staked amount per token and per duration. Token address => duration id => amount\\n    mapping(address => mapping(uint8 => uint256))\\n        public totalStakedByToken_Duration;\\n    uint8[3] public rewardAllocations;\\n    /** @dev DEPRECATED - Do not use. Kept for storage layout compatibility */\\n    uint256 public poolRollOver;\\n\\n    // V2 storage\\n    /** @dev DEPRECATED - Do not use. Kept for storage layout compatibility */\\n    mapping(uint256 => Stake) public stakes;\\n    uint256 public nextStakeId;\\n\\n    // A staker can claim from the previous fee period (7 days) only.\\n    // The periods stored and managed from [0], such that [0] is always\\n    // the current active reward period which is claimable until the\\n    // public function distributeInflationRewards() call the\\n    // current weeks inflated reward. [1] is last weeks feeperiod\\n    // library StakingLib has the same constant\\n    uint8 public constant REWARD_PERIOD_LENGTH = 2;\\n    // current reward period\\n    uint256 private _currentPeriodIdx;\\n    // fee period\\n    RewardPeriod[REWARD_PERIOD_LENGTH] public recentPeriods;\\n    // V3 storage\\n    mapping(address => mapping(uint256 => Stake)) public userStakesById; // user => stakeId ==> stake\\n    mapping(address => uint256) public userStakesCount; // user => stake count\\n    // Track which periods a user has claimed rewards for\\n    mapping(address => mapping(uint64 => mapping(address => bool))) private _userClaimedForPeriod; // user => periodId => claimed\\n    mapping(uint256 => StakeMappingEntry) private _stakeEntries; // stakeId => metadata\\n    mapping(address => mapping(uint256 => uint256)) private _userIndexToId; // user => userIndex => stakeId\\n\\n    // Add this at the contract level\\n    bool public stakesDeprecated;\\n\\n    // Add to contract header\\n    /**\\n     * @dev IMPORTANT: When adding new storage variables, add them BELOW\\n     * this comment and ABOVE the storage gap.\\n     */\\n    // Reserve space for future upgrades\\n    uint256[50] private __gap;\\n\\n    using StakingLib for *;\\n\\n    // Helper functions for working with the optimized mappings\\n\\n    /**\\n     * @notice Gets stake entry by ID\\n     * @param _stakeId Global stake ID\\n     * @return The stake mapping entry\\n     */\\n    function getStakeEntry(\\n        uint256 _stakeId\\n    ) external view returns (StakeMappingEntry memory) {\\n        return _stakeEntries[_stakeId];\\n    }\\n\\n    /**\\n     * @notice Gets stake ID by user and index\\n     * @param _user Owner address\\n     * @param _userIndex Index in the user's personal mapping\\n     * @return The stake ID\\n     */\\n    function getUserStakeId(\\n        address _user,\\n        uint256 _userIndex\\n    ) public view returns (uint256) {\\n        return _userIndexToId[_user][_userIndex];\\n    }\\n\\n    /**\\n     * @notice Gets user index by stake ID\\n     * @param _stakeId Global stake ID\\n     * @return The user index\\n     */\\n    function getUserStakeIndex(uint256 _stakeId) public view returns (uint256) {\\n        StakeMappingEntry memory entry = _stakeEntries[_stakeId];\\n        if (entry.userIndex == 0) revert StakeNotFound();\\n        return entry.userIndex;\\n    }\\n\\n    // Add batch migration capability for safe upgrades\\n    function migrateStakesInBatch(\\n        uint256 startId,\\n        uint256 batchSize\\n    ) external onlyOwner {\\n        require(!stakesDeprecated, \\\"Migration already completed\\\");\\n        uint256 endId = (startId + batchSize) > nextStakeId\\n            ? nextStakeId\\n            : (startId + batchSize);\\n\\n        for (uint256 i = startId; i < endId; ) {\\n            StakingLib.migrateStake(\\n                stakes,\\n                userStakesById[stakes[i].staker],\\n                userStakesCount,\\n                _stakeEntries,\\n                _userIndexToId,\\n                i,\\n                nend\\n            );\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (endId >= nextStakeId) {\\n            stakesDeprecated = true;\\n        }\\n\\n        emit BatchMigrationCompleted(startId, endId);\\n    }\\n\\n    function getCurrentPeriodId() external view returns (uint256) {\\n        return _recentPeriodsStorage(0).periodId;\\n    }\\n\\n    function setStakesDeprecated(\\n        bool _deprecated\\n    ) external virtual onlyRole(\\\"admin\\\") {\\n        stakesDeprecated = _deprecated;\\n    }\\n\\n    function _recentPeriodsStorage(\\n        uint256 index\\n    ) internal view returns (RewardPeriod storage) {\\n        return\\n            recentPeriods[\\n                (_currentPeriodIdx + index) % uint256(REWARD_PERIOD_LENGTH)\\n            ];\\n    }\\n\\n    function setRewardAllocations(\\n        uint8[3] memory _rewardAllocations\\n    ) external virtual onlyRole(\\\"admin\\\") {\\n        if (\\n            _rewardAllocations[0] +\\n                _rewardAllocations[1] +\\n                _rewardAllocations[2] !=\\n            100\\n        ) {\\n            revert InvalidArgument(\\\"Must sum up to 100\\\");\\n        }\\n        rewardAllocations = _rewardAllocations;\\n    }\\n\\n    function initialize(\\n        address _nend,\\n        Vault _lendingPool\\n    ) public virtual initializer {\\n        require(\\n            _nend != address(0) && address(_lendingPool) != address(0),\\n            \\\"Invalid address\\\"\\n        );\\n        nend = _nend;\\n        lendingPool = _lendingPool;\\n\\n        // Set initial values\\n        nextStakeId = 1;\\n\\n        // Add native token\\n        activeStakeTokens[address(0)] = true;\\n        stakeTokens.push(address(0));\\n        stakeTokenCount++;\\n\\n        // Add nend\\n        activeStakeTokens[_nend] = true;\\n        stakeTokens.push(_nend);\\n        stakeTokenCount++;\\n\\n        escrowLockPeriod = 30 weeks;\\n        stakeDurations = [1 weeks, 4 weeks, 12 weeks];\\n        rewardAllocations = [20, 30, 50];\\n\\n        stakesDeprecated = false;\\n\\n        _recentPeriodsStorage(0).periodId = 1;\\n\\n        __ERC721_init(\\\"Escrowed Asset Bond\\\", \\\"EAB\\\");\\n        __Ownable_init();\\n        __Testing_init();\\n\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint8 _durationId\\n    ) external payable virtual override {\\n        StakingLib.validateStake(\\n            activeStakeTokens[_token],\\n            _durationId,\\n            _amount\\n        );\\n\\n        bool isNativeCoin = _token == address(0);\\n\\n        if (!isNativeCoin && IERC20(_token).balanceOf(msg.sender) < _amount) {\\n            revert InsufficientBalance();\\n        }\\n\\n        if (isNativeCoin) {\\n            if (msg.value != _amount) {\\n                revert InvalidArgument(\\\"Incorrect native coin stake amount\\\");\\n            }\\n\\n            (bool sent, ) = address(lendingPool).call{ value: _amount }(\\\"\\\");\\n            require(sent, \\\"Failed to transfer native token\\\");\\n        } else {\\n            IERC20(_token).transferFrom(\\n                msg.sender,\\n                address(lendingPool),\\n                _amount\\n            );\\n        }\\n\\n        uint256[3] memory _amounts;\\n        _amounts[_durationId] = _amount;\\n\\n        uint256 stakeId = nextStakeId++;\\n        uint256 userStakeIdx = ++userStakesCount[msg.sender];\\n        // Directly initialize the stake in storage\\n        Stake storage newStake = userStakesById[msg.sender][userStakeIdx];\\n\\n        // Create the stake\\n        StakingLib._createAndMapStake(\\n            newStake,\\n            msg.sender,\\n            _amounts,\\n            _token,\\n            stakeDurations[_durationId],\\n            false,\\n            stakeId,\\n            userStakeIdx,\\n            _stakeEntries,\\n            _userIndexToId,\\n            testing\\n        );\\n\\n        totalStakedByToken_Duration[_token][_durationId] += _amount;\\n\\n        _emitStaked(stakeId, userStakesById[msg.sender][userStakeIdx]);\\n    }\\n\\n    function getStakeByUserIndex(\\n        address _user,\\n        uint256 _index\\n    ) external view returns (Stake memory) {\\n        if(_index <= 0 || _index > userStakesCount[_user]){\\n            revert StakeNotFound();\\n        }\\n        return userStakesById[_user][_index];\\n    }\\n\\n    function stakeEscrowedReward(uint256 _stakeId) external virtual override {\\n        // uint256 userIndex = stakeIdToUserIndex[_stakeId][msg.sender];\\n        uint256 userIndex = getUserStakeIndex(_stakeId);\\n        if (userIndex == 0) revert StakeNotFound();\\n        Stake storage _stake = userStakesById[msg.sender][userIndex];\\n        if (_stake.staker != msg.sender) revert Unauthorized();\\n\\n        // Stake is not escrow or is already staked\\n        if (!_stake.isEscrow || _stake.stakeStatus != StakeStatus.DEFAULT)\\n            revert InvalidState();\\n\\n        _stake.stakeStatus = StakeStatus.STAKED;\\n\\n        // Update the total staked amount for the escrowed stake\\n        StakingLib._saveStakedRewards(\\n            totalStakedByToken_Duration,\\n            nend,\\n            _stake.amountsPerDuration\\n        );\\n\\n        emit StakeStatusChanged(_stakeId, _stake.stakeStatus);\\n    }\\n\\n    function _createEscrowStake(\\n        address _staker,\\n        uint256 _rewardAmount,\\n        uint256 _ifpReward\\n    ) internal returns (uint256 stakeId) {\\n        uint256[3] memory _amounts;\\n        // Distribute the reward amount across durations and save it in the mapping\\n        for (uint8 i = 0; i < 3; ) {\\n            _amounts[i] = (_rewardAmount * rewardAllocations[i]) / 100;\\n            totalStakedByToken_Duration[nend][i] += _amounts[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        stakeId = nextStakeId;\\n        nextStakeId++;\\n        uint256 userStakeIdx = ++userStakesCount[_staker];\\n        // Directly initialize the stake in storage\\n        Stake storage newStake = userStakesById[_staker][userStakeIdx];\\n\\n        // Create the escrow stake - direct initialization avoids memory/storage copying\\n        StakingLib._createAndMapStake(\\n            newStake,\\n            _staker,\\n            _amounts,\\n            nend,\\n            escrowLockPeriod,\\n            true,\\n            stakeId,\\n            userStakeIdx,\\n            _stakeEntries,\\n            _userIndexToId,\\n            testing\\n        );\\n\\n        // set IFP reward\\n        newStake.rewardAllocated = _ifpReward;\\n        newStake.escrowStatus = EscrowStatus.CLAIMED;\\n\\n        // Emit the event\\n        _emitStaked(stakeId, userStakesById[_staker][userStakeIdx]);\\n    }\\n\\n    function distributeInflationRewards(\\n        uint256 _inflationReward\\n    ) external virtual override {\\n        if (!testing && msg.sender != nend) revert Unauthorized();\\n\\n        // get the pool roll over of the current period\\n        (\\n            uint256 toDistributeReward,\\n            uint256[] memory ifptoDistributeReward\\n        ) = StakingLib.calculatePoolRollOver(\\n                recentPeriods[_currentPeriodIdx],\\n                stakeTokens\\n            );\\n        toDistributeReward += _inflationReward;\\n\\n        // mapping(address => uint256) ifptoDistributeReward;\\n\\n        for (uint256 i = 0; i < stakeTokens.length; ) {\\n            // Get the staked amount for the token\\n            uint256 stakedTokenAmt = StakingLib.getTotalStakesForToken(\\n                totalStakedByToken_Duration,\\n                stakeTokens[i]\\n            );\\n            if (stakedTokenAmt != 0) {\\n                // Get the accrued IFP token balance for the token\\n                uint256 ifpAccredTokenAmt = lendingPool.getNamedBalance(\\n                    \\\"ifp\\\",\\n                    stakeTokens[i]\\n                );\\n                ifptoDistributeReward[i] += ifpAccredTokenAmt;\\n\\n                if (ifpAccredTokenAmt > 0) {\\n                    // subtract the IFP token balance from the pool for backward compatibility\\n                    lendingPool.namedBalanceSpend(\\n                        \\\"ifp\\\",\\n                        stakeTokens[i],\\n                        ifpAccredTokenAmt\\n                    );\\n                    // Transfer the IFP tokens to the contract\\n                    lendingPool.transferERC20(\\n                        stakeTokens[i],\\n                        address(this),\\n                        ifpAccredTokenAmt\\n                    );\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // set inflation and IFP rewards to the current period and get the new current period id\\n        _currentPeriodIdx = StakingLib.closeCurrentPeriod(\\n            recentPeriods,\\n            _currentPeriodIdx,\\n            toDistributeReward,\\n            ifptoDistributeReward,\\n            stakeTokens\\n        );\\n\\n        emit NewPeriodStarted(\\n            _recentPeriodsStorage(0).periodId,\\n            _recentPeriodsStorage(0).startTime\\n        );\\n    }\\n\\n    function getClaimableRewards(\\n        address _user,\\n        address _token\\n    ) external view returns (uint256 inflationReward, uint256 ifpReward) {\\n        return\\n            StakingLib.getClaimableRewards(\\n                userStakesById[_user],\\n                userStakesCount[_user],\\n                recentPeriods,\\n                _userClaimedForPeriod,\\n                totalStakedByToken_Duration,\\n                _currentPeriodIdx,\\n                nend,\\n                _user,\\n                _token\\n            );\\n    }\\n\\n    function claim(address _token) external {\\n        // Get the current period (the claimable one)\\n        RewardPeriod storage period = _recentPeriodsStorage(0);\\n\\n        (\\n            uint256 userInflationReward,\\n            uint256 userIfpReward,\\n            uint64 periodId\\n        ) = StakingLib.processClaim(\\n                userStakesById[msg.sender],\\n                totalStakedByToken_Duration,\\n                userStakesCount[msg.sender],\\n                _userClaimedForPeriod,\\n                period,\\n                _token,\\n                nend,\\n                msg.sender\\n            );\\n\\n        // Create an escrow stake for the inflation reward\\n        uint256 stakeId = _createEscrowStake(\\n            msg.sender,\\n            userInflationReward,\\n            userIfpReward\\n        );\\n\\n        // Transfer the IFP reward to the user\\n        IERC20(_token).transfer(msg.sender, userIfpReward);\\n\\n        emit RewardsClaimed(\\n            stakeId,\\n            msg.sender,\\n            _token,\\n            userInflationReward,\\n            userIfpReward,\\n            periodId\\n        );\\n    }\\n\\n    function getPoolRollOver()\\n        external\\n        view\\n        returns (uint256 inflationRewardRemained)\\n    {\\n        (inflationRewardRemained, ) = StakingLib.calculatePoolRollOver(\\n            recentPeriods[_currentPeriodIdx],\\n            stakeTokens\\n        );\\n    }\\n\\n    // function getToTalStakedForToken(\\n    //     address _token\\n    // ) external view returns (uint256) {\\n    //     return StakingLib.getTotalStakesForToken(\\n    //         totalStakedByToken_Duration,\\n    //         _token\\n    //     );\\n    // }\\n\\n    function getUserStakesTotal(\\n        address _user,\\n        address _token\\n    ) external view returns (uint256) {\\n        return\\n            StakingLib.calculateUserStakesTotal(\\n                userStakesById[_user],\\n                userStakesCount[_user],\\n                _token,\\n                nend\\n            );\\n    }\\n\\n    function issueEAB(uint256 _stakeId) external virtual {\\n        // uint256 userIndex = stakeIdToUserIndex[_stakeId][msg.sender];\\n        uint256 userIndex = getUserStakeIndex(_stakeId);\\n        if (userIndex == 0) revert StakeNotFound();\\n\\n        Stake storage _stake = userStakesById[msg.sender][userIndex];\\n        if (_stake.staker != msg.sender) {\\n            revert Unauthorized();\\n        }\\n\\n        if (\\n            _stake.stakeStatus == StakeStatus.FULFILLED ||\\n            _stake.escrowStatus != EscrowStatus.DEFAULT\\n        ) {\\n            revert InvalidState();\\n        }\\n\\n        _stake.escrowStatus = EscrowStatus.ISSUED;\\n        _mint(msg.sender, _stakeId);\\n\\n        emit EscrowStatusChanged(_stakeId, EscrowStatus.ISSUED);\\n    }\\n\\n    function unstake(uint256 _stakeId) external virtual override {\\n        // Stake storage _stake = stakes[_stakeId];\\n        // uint256 userIndex = stakeIdToUserIndex[_stakeId][msg.sender];\\n        uint256 userIndex = getUserStakeIndex(_stakeId);\\n        if (userIndex == 0) revert StakeNotFound();\\n\\n        Stake storage _stake = userStakesById[msg.sender][userIndex];\\n\\n        // Use library to handle most of the logic\\n        (\\n            uint256 stakedAmount,\\n            address tokenToUse\\n        ) = StakingLib.processUnstake(\\n                _stake,\\n                totalStakedByToken_Duration,\\n                nend,\\n                msg.sender\\n            );\\n\\n        // Handle transfers (kept in contract due to external calls)\\n        if (_stake.isEscrow) {\\n            IERC20(nend).transfer(msg.sender, stakedAmount);\\n        } else {\\n            StakingLib.lendingPoolTransfer(\\n                lendingPool,\\n                tokenToUse,\\n                msg.sender,\\n                stakedAmount\\n            );\\n        }\\n\\n        // Handle events and burns\\n        emit StakeStatusChanged(_stakeId, StakeStatus.FULFILLED);\\n\\n        if (_stake.escrowStatus == EscrowStatus.ISSUED) {\\n            if (_exists(_stakeId)) {\\n                _burn(_stakeId);\\n            }\\n            _stake.escrowStatus = EscrowStatus.CLAIMED;\\n            emit EscrowStatusChanged(_stakeId, EscrowStatus.CLAIMED);\\n        }\\n\\n        _removeUserStake(msg.sender, _stakeId, userIndex);\\n    }\\n\\n    function addStakeToken(\\n        address _stakeToken\\n    ) external virtual override onlyRole(\\\"admin\\\") {\\n        if (!activeStakeTokens[_stakeToken]) {\\n            stakeTokenCount++;\\n            activeStakeTokens[_stakeToken] = true;\\n        }\\n\\n        for (uint8 i = 0; i < stakeTokens.length; ) {\\n            if (stakeTokens[i] == _stakeToken) {\\n                return;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        stakeTokens.push(_stakeToken);\\n    }\\n\\n    function removeStakeToken(\\n        address _stakeToken\\n    ) external override onlyRole(\\\"admin\\\") {\\n        if (activeStakeTokens[_stakeToken]) {\\n            stakeTokenCount--;\\n            activeStakeTokens[_stakeToken] = false;\\n        }\\n    }\\n\\n    function setTokenURI(\\n        uint256 _tokenId,\\n        string memory _tokenURI\\n    ) external virtual onlyOwner {\\n        _setTokenURI(_tokenId, _tokenURI);\\n    }\\n\\n    function _removeUserStake(\\n        address _user,\\n        uint256 _stakeId,\\n        uint256 _userIndex\\n    ) internal virtual {\\n        StakingLib.removeUserStake(\\n            userStakesById[_user],\\n            _stakeEntries,\\n            _userIndexToId,\\n            userStakesCount,\\n            _user,\\n            _stakeId,\\n            _userIndex\\n        );\\n    }\\n\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256\\n    ) internal virtual override {\\n        if (from != address(0) && to != address(0)) {\\n            // Find the user index for the token\\n            uint256 fromUserIndex = getUserStakeIndex(tokenId);\\n            if (fromUserIndex > 0) {\\n                // Get the stake into memory first\\n                Stake memory stakeCopy = userStakesById[from][fromUserIndex];\\n\\n                // Update stake owner in memory\\n                stakeCopy.staker = to;\\n\\n                // Remove stake from original owner using extracted function\\n                _removeUserStake(from, tokenId, fromUserIndex);\\n\\n                // Add to new owner\\n                uint256 toUserIndex = userStakesCount[to] + 1;\\n                userStakesById[to][toUserIndex] = stakeCopy;\\n                StakingLib.setStakeMapping(\\n                    _stakeEntries,\\n                    _userIndexToId,\\n                    tokenId,\\n                    to,\\n                    toUserIndex\\n                );\\n                userStakesCount[to]++;\\n            }\\n        }\\n    }\\n\\n    function _emitStaked(\\n        uint256 _stakeId,\\n        ILendingPoolStakingV2.Stake memory _stake\\n    ) private {\\n        emit Staked(\\n            _stakeId,\\n            _stake.staker,\\n            _stake.token,\\n            _stake.start,\\n            _stake.end,\\n            _stake.amountsPerDuration,\\n            _stake.isEscrow\\n        );\\n    }\\n\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    ) internal virtual override onlyOwner {}\\n}\\n\",\"keccak256\":\"0xd81e35a85a18ea6698ebcb905b297c3ed4cea76d12a2c52e95eb5caa72aad994\",\"license\":\"UNLICENSED\"},\"contracts/staking/StakingLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../vault/Vault.sol\\\";\\nimport \\\"./interfaces/ILendingPoolStakingV2.sol\\\";\\n\\n/**\\n * @title StakingLib\\n * @dev Library containing complete function implementations moved from LendingPoolStakingV2\\n */\\nlibrary StakingLib {\\n    uint8 public constant REWARD_PERIOD_LENGTH = 2;\\n    event Staked(\\n        uint256 stakeId,\\n        address staker,\\n        address token,\\n        uint48 start,\\n        uint48 end,\\n        uint256[3] amountsPerDuration,\\n        bool isEscrow\\n    );\\n\\n    function validateStake(\\n        bool isActiveStakeToken,\\n        uint8 durationId,\\n        uint256 amount\\n    ) external pure {\\n        if (amount == 0) {\\n            revert ILendingPoolStakingV2.InvalidArgument(\\n                \\\"Amount cannot be zero\\\"\\n            );\\n        }\\n        if (!isActiveStakeToken) {\\n            revert ILendingPoolStakingV2.InvalidArgument(\\\"Invalid stake token\\\");\\n        }\\n        if (durationId > 2) {\\n            revert ILendingPoolStakingV2.InvalidArgument(\\\"Invalid duration ID\\\");\\n        }\\n    }\\n\\n    function migrateStake(\\n        mapping(uint256 => ILendingPoolStakingV2.Stake) storage stakes,\\n        mapping(uint256 => ILendingPoolStakingV2.Stake)\\n            storage userSpecificStakes,\\n        mapping(address => uint256) storage userStakesCount,\\n        mapping(uint256 => ILendingPoolStakingV2.StakeMappingEntry)\\n            storage _stakeEntries,\\n        mapping(address => mapping(uint256 => uint256)) storage _userIndexToId,\\n        uint256 stakeId,\\n        address nend\\n    ) external returns (bool migrated) {\\n        ILendingPoolStakingV2.Stake storage stake = stakes[stakeId];\\n\\n        if (\\n            stake.staker != address(0) &&\\n            stake.stakeStatus != ILendingPoolStakingV2.StakeStatus.FULFILLED\\n        ) {\\n            // Skip if already migrated\\n            if (_stakeEntries[stakeId].exists) {\\n                return false;\\n            }\\n\\n            // Create a memory copy of the stake\\n            ILendingPoolStakingV2.Stake memory stakeCopy = stakes[stakeId];\\n\\n            // Modify the token if it's an escrow stake\\n            if (stakeCopy.isEscrow) {\\n                stakeCopy.token = nend;\\n            }\\n\\n            // Get the next available user stake index\\n            uint256 userStakeIdx = userStakesCount[stakeCopy.staker] + 1;\\n\\n            // Store the modified copy, not the original storage reference\\n            userSpecificStakes[userStakeIdx] = stakeCopy;\\n\\n            // Create mapping entry\\n            setStakeMapping(\\n                _stakeEntries,\\n                _userIndexToId,\\n                stakeId,\\n                stakeCopy.staker,\\n                userStakeIdx\\n            );\\n\\n            userStakesCount[stakeCopy.staker]++;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Complete implementation of getClaimableRewards\\n     * @dev Moved entirely from main contract to reduce bytecode\\n     */\\n    function getClaimableRewards(\\n        mapping(uint256 => ILendingPoolStakingV2.Stake)\\n            storage userSpecificStakes,\\n        uint256 userStakeCount,\\n        ILendingPoolStakingV2.RewardPeriod[2] storage _recentPeriods,\\n        mapping(address => mapping(uint64 => mapping(address => bool)))\\n            storage _userClaimedForPeriod,\\n        mapping(address => mapping(uint8 => uint256))\\n            storage totalStakedByToken_Duration,\\n        uint256 _currentPeriodId,\\n        address nend,\\n        address _user,\\n        address _token\\n    ) external view returns (uint256 inflationReward, uint256 ifpReward) {\\n        // Get the current period (the one users can claim from)\\n        //\\n        ILendingPoolStakingV2.RewardPeriod storage period = _recentPeriods[\\n            _currentPeriodId\\n        ];\\n\\n        // If the user already claimed for this period, return zeros\\n        if (_userClaimedForPeriod[_user][period.periodId][_token]) {\\n            return (0, 0);\\n        }\\n\\n        // Get total staked amount for this token\\n        uint256 totalTokenStaked = getTotalStakesForToken(\\n            totalStakedByToken_Duration,\\n            _token\\n        );\\n\\n        // If nothing staked, no rewards\\n        if (totalTokenStaked == 0) {\\n            return (0, 0);\\n        }\\n\\n        // Get user's total stake for this token\\n        uint256 userStakedAmount = calculateUserStakesTotal(\\n            userSpecificStakes,\\n            userStakeCount,\\n            _token,\\n            nend\\n        );\\n\\n        if (userStakedAmount == 0) {\\n            return (0, 0);\\n        }\\n\\n        // Calculate proportional rewards\\n        inflationReward =\\n            (period.rewardsToDistribute * userStakedAmount) /\\n            totalTokenStaked;\\n        ifpReward =\\n            (period.ifpRewardPeriod[_token].rewardToDistribute *\\n                userStakedAmount) /\\n            totalTokenStaked;\\n\\n        return (inflationReward, ifpReward);\\n    }\\n\\n    /**\\n     * @notice Complete implementation of claim function logic\\n     * @dev Moved entirely from main contract to reduce bytecode\\n     */\\n    function processClaim(\\n        mapping(uint256 => ILendingPoolStakingV2.Stake)\\n            storage userSpecificStakes,\\n        mapping(address => mapping(uint8 => uint256))\\n            storage totalStakedByToken_Duration,\\n        uint256 userStakeCount,\\n        mapping(address => mapping(uint64 => mapping(address => bool)))\\n            storage _userClaimedForPeriod,\\n        ILendingPoolStakingV2.RewardPeriod storage period,\\n        address _token,\\n        address nend,\\n        address user\\n    )\\n        external\\n        returns (uint256 inflationReward, uint256 ifpReward, uint64 periodId)\\n    {\\n        // Check if already claimed\\n        if (_userClaimedForPeriod[user][period.periodId][_token]) {\\n            revert ILendingPoolStakingV2.AlreadyClaimed();\\n        }\\n\\n        // Get total staked amount for this token\\n        uint256 totalTokenStakeAmount = getTotalStakesForToken(\\n            totalStakedByToken_Duration,\\n            _token\\n        );\\n\\n        // If nothing staked, no rewards\\n        if (totalTokenStakeAmount == 0) {\\n            revert ILendingPoolStakingV2.NoStakeYet();\\n        }\\n\\n        // Get user's total stake for this token\\n        uint256 userStakeAmount = calculateUserStakesTotal(\\n            userSpecificStakes,\\n            userStakeCount,\\n            _token,\\n            nend\\n        );\\n\\n        if (userStakeAmount == 0) {\\n            revert ILendingPoolStakingV2.StakeNotFound();\\n        }\\n\\n        // Calculate proportional rewards\\n        inflationReward =\\n            (period.rewardsToDistribute * userStakeAmount) /\\n            totalTokenStakeAmount;\\n        ifpReward =\\n            (period.ifpRewardPeriod[_token].rewardToDistribute *\\n                userStakeAmount) /\\n            totalTokenStakeAmount;\\n\\n        if (inflationReward == 0 && ifpReward == 0) {\\n            revert ILendingPoolStakingV2.NoRewardsAvailable();\\n        }\\n\\n        // Update period totals\\n        period.rewardsStaked += inflationReward;\\n        period.ifpRewardPeriod[_token].rewardClaimed += ifpReward;\\n\\n        periodId = period.periodId;\\n\\n        // Mark as claimed for this period\\n        _userClaimedForPeriod[user][period.periodId][_token] = true;\\n\\n        return (inflationReward, ifpReward, periodId);\\n    }\\n\\n    /**\\n     * @notice Process unstake operation completely\\n     * @dev Moved from main contract with all logic intact\\n     */\\n    function processUnstake(\\n        ILendingPoolStakingV2.Stake storage stake,\\n        mapping(address => mapping(uint8 => uint256))\\n            storage totalStakedByToken_Duration,\\n        address nend,\\n        address msgSender\\n    )\\n        external\\n        returns (\\n            uint256 stakedAmount,\\n            address tokenToUse\\n        )\\n    {\\n        // Validate\\n        if (stake.staker != msgSender) {\\n            revert ILendingPoolStakingV2.Unauthorized();\\n        }\\n\\n        if (\\n            stake.end > block.timestamp ||\\n            stake.stakeStatus == ILendingPoolStakingV2.StakeStatus.FULFILLED\\n        ) {\\n            revert ILendingPoolStakingV2.InvalidState();\\n        }\\n\\n        // Calculate amount to return\\n        unchecked {\\n            stakedAmount =\\n                stake.amountsPerDuration[0] +\\n                stake.amountsPerDuration[1] +\\n                stake.amountsPerDuration[2];\\n        }\\n\\n        tokenToUse = stake.isEscrow ? nend : stake.token;\\n\\n        // Update totals if staked\\n        if (stake.stakeStatus == ILendingPoolStakingV2.StakeStatus.STAKED) {\\n            for (uint8 i = 0; i < 3; ) {\\n                totalStakedByToken_Duration[\\n                    stake.isEscrow ? nend : stake.token\\n                ][i] -= stake.amountsPerDuration[i];\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n\\n        // Update state\\n        stake.stakeStatus = ILendingPoolStakingV2.StakeStatus.FULFILLED;\\n    }\\n\\n    /**\\n     * @notice Complete implementation of closing the current period\\n     */\\n    function closeCurrentPeriod(\\n        ILendingPoolStakingV2.RewardPeriod[2] storage _recentPeriods,\\n        uint256 _currentPeriodId,\\n        uint256 _toDistributeReward,\\n        uint[] memory _ifptoDistributeReward,\\n        address[] memory _tokens\\n    ) external returns (uint256 newCurrentPeriod) {\\n        // get new current period index(= previous period != current period)\\n        // when old current period is 0, next period is 1\\n        // when old current period is 1, next period is 0\\n        newCurrentPeriod =\\n            (_currentPeriodId + REWARD_PERIOD_LENGTH - 1) %\\n            REWARD_PERIOD_LENGTH;\\n\\n        // Set up new period\\n        _recentPeriods[newCurrentPeriod].periodId =\\n            _recentPeriods[_currentPeriodId].periodId +\\n            1;\\n        // Set up new period start time\\n        _recentPeriods[newCurrentPeriod].startTime = uint64(block.timestamp);\\n\\n        // Set up new inflation rewards\\n        _recentPeriods[newCurrentPeriod]\\n            .rewardsToDistribute = _toDistributeReward;\\n        _recentPeriods[newCurrentPeriod].rewardsStaked = 0;\\n\\n        // Set up IFP rewards\\n        for (uint8 i = 0; i < _tokens.length; ) {\\n            _recentPeriods[newCurrentPeriod]\\n                .ifpRewardPeriod[_tokens[i]]\\n                .rewardToDistribute = _ifptoDistributeReward[i];\\n            _recentPeriods[newCurrentPeriod]\\n                .ifpRewardPeriod[_tokens[i]]\\n                .rewardClaimed = 0;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return (newCurrentPeriod);\\n    }\\n\\n    /**\\n     * @notice Calculates total staked amount by a user for a specific token\\n     */\\n    function calculateUserStakesTotal(\\n        mapping(uint256 => ILendingPoolStakingV2.Stake)\\n            storage userSpecificStakes,\\n        uint256 userStakesCount,\\n        address _token,\\n        address nend\\n    ) public view returns (uint256 totalAmount) {\\n        for (uint256 i = 0; i < userStakesCount; ) {\\n            // Using storage to avoid unnecessary copying\\n            ILendingPoolStakingV2.Stake storage stake = userSpecificStakes[\\n                i + 1\\n            ];\\n\\n            // Only include active stakes for the specific token\\n            if (stake.stakeStatus == ILendingPoolStakingV2.StakeStatus.STAKED) {\\n                // Check if the token matches:\\n                // 1. For escrow stakes, we use nend token\\n                // 2. For regular stakes, use the actual token\\n                bool isMatchingToken = stake.isEscrow\\n                    ? (_token == nend)\\n                    : (stake.token == _token);\\n\\n                if (isMatchingToken) {\\n                    // Sum up all durations in unchecked block\\n                    unchecked {\\n                        totalAmount +=\\n                            stake.amountsPerDuration[0] +\\n                            stake.amountsPerDuration[1] +\\n                            stake.amountsPerDuration[2];\\n                    }\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets total staked amount for a token across all durations\\n     */\\n    function getTotalStakesForToken(\\n        mapping(address => mapping(uint8 => uint256))\\n            storage totalStakedByToken_Duration,\\n        address _token\\n    ) public view returns (uint256 totalStaked) {\\n        unchecked {\\n            totalStaked =\\n                totalStakedByToken_Duration[_token][0] +\\n                totalStakedByToken_Duration[_token][1] +\\n                totalStakedByToken_Duration[_token][2];\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates pool rollover amounts from previous period\\n     */\\n    function calculatePoolRollOver(\\n        ILendingPoolStakingV2.RewardPeriod storage _currentPeriod,\\n        address[] memory _tokens\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 poolRewardRemained,\\n            uint256[] memory ifpPoolRewardRemained\\n        )\\n    {\\n        // Calculate remaining rewards\\n        poolRewardRemained = _currentPeriod.rewardsToDistribute <=\\n            _currentPeriod.rewardsStaked\\n            ? 0\\n            : _currentPeriod.rewardsToDistribute - _currentPeriod.rewardsStaked;\\n\\n        // Calculate remaining IFP rewards for each token\\n        ifpPoolRewardRemained = new uint256[](_tokens.length);\\n        for (uint8 i = 0; i < _tokens.length; ) {\\n            ifpPoolRewardRemained[i] = _currentPeriod.ifpRewardPeriod[_tokens[i]].rewardToDistribute <=\\n                _currentPeriod.ifpRewardPeriod[_tokens[i]].rewardClaimed\\n                ? 0\\n                : _currentPeriod.ifpRewardPeriod[_tokens[i]].rewardToDistribute -\\n                    _currentPeriod.ifpRewardPeriod[_tokens[i]].rewardClaimed;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely transfers assets from lending pool to recipient\\n     */\\n    function lendingPoolTransfer(\\n        Vault lendingPool,\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) external {\\n        bool isNativeCoin = _token == address(0);\\n\\n        if (isNativeCoin) {\\n            require(\\n                address(lendingPool).balance >= _amount,\\n                \\\"Insufficient balance\\\"\\n            );\\n            lendingPool.transferNative(payable(_to), _amount);\\n        } else {\\n            require(\\n                IERC20(_token).balanceOf(address(lendingPool)) >= _amount,\\n                \\\"Insufficient balance\\\"\\n            );\\n            lendingPool.transferERC20(_token, _to, _amount);\\n        }\\n    }\\n\\n    function setStakeMapping(\\n        mapping(uint256 => ILendingPoolStakingV2.StakeMappingEntry)\\n            storage _stakeEntries,\\n        mapping(address => mapping(uint256 => uint256)) storage _userIndexToId,\\n        uint256 _stakeId,\\n        address _user,\\n        uint256 _userIndex\\n    ) public {\\n        // Create and store the mapping entry\\n        _stakeEntries[_stakeId] = ILendingPoolStakingV2.StakeMappingEntry({\\n            user: _user,\\n            userIndex: _userIndex,\\n            stakeId: _stakeId,\\n            exists: true\\n        });\\n\\n        // Update the reverse lookup\\n        _userIndexToId[_user][_userIndex] = _stakeId;\\n    }\\n\\n    function removeUserStake(\\n        mapping(uint256 => ILendingPoolStakingV2.Stake)\\n            storage userSpecificStakes,\\n        mapping(uint256 => ILendingPoolStakingV2.StakeMappingEntry)\\n            storage _stakeEntries,\\n        mapping(address => mapping(uint256 => uint256)) storage _userIndexToId,\\n        mapping(address => uint256) storage userStakesCount,\\n        address _user,\\n        uint256 _stakeId,\\n        uint256 _userIndex\\n    ) external {\\n        // Get the last stake index for this user\\n        uint256 lastUserStakeIdx = userStakesCount[_user];\\n\\n        // If not the last element, swap with the last element\\n        if (_userIndex != lastUserStakeIdx) {\\n            // Get the last stake\\n            ILendingPoolStakingV2.Stake storage lastStake = userSpecificStakes[\\n                lastUserStakeIdx\\n            ];\\n\\n            // Get last stake ID using the reverse mapping\\n            uint256 lastStakeId = _userIndexToId[_user][lastUserStakeIdx];\\n\\n            // Move last stake to current position\\n            userSpecificStakes[_userIndex] = lastStake;\\n\\n            // Update the stake ID mapping for the moved stake\\n            setStakeMapping(\\n                _stakeEntries,\\n                _userIndexToId,\\n                lastStakeId,\\n                _user,\\n                _userIndex\\n            );\\n        }\\n\\n        // Clean up the last position\\n        delete userSpecificStakes[lastUserStakeIdx];\\n\\n        // Delete the original stake mapping\\n        delete _userIndexToId[_user][lastUserStakeIdx];\\n        delete _stakeEntries[_stakeId];\\n\\n        // Decrement the user's stake count\\n        userStakesCount[_user]--;\\n    }\\n\\n    function _saveStakedRewards(\\n        mapping(address => mapping(uint8 => uint256))\\n            storage totalStakedByToken_Duration,\\n        address nend,\\n        uint256[3] memory _amounts\\n    ) internal {\\n        for (uint8 i = 0; i < 3; ) {\\n            totalStakedByToken_Duration[nend][i] += _amounts[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _createAndMapStake(\\n        ILendingPoolStakingV2.Stake storage newStake,\\n        address _staker,\\n        uint256[3] memory _amounts,\\n        address _token,\\n        uint48 _duration,\\n        bool _isEscrow,\\n        uint256 stakeId,\\n        uint256 userStakeIdx,\\n        mapping(uint256 => ILendingPoolStakingV2.StakeMappingEntry)\\n            storage _stakeEntries,\\n        mapping(address => mapping(uint256 => uint256)) storage _userIndexToId,\\n        bool testing\\n    ) internal returns (uint256) {\\n        // Get lock period for escrow\\n        uint48 start = uint48(block.timestamp);\\n\\n        newStake.staker = _staker;\\n        newStake.token = _token;\\n        newStake.start = start;\\n        newStake.end = start + _duration / (testing ? 1008 : 1);\\n        newStake.amountsPerDuration = _amounts;\\n        newStake.rewardAllocated = 0;\\n        newStake.isEscrow = _isEscrow;\\n        newStake.escrowStatus = ILendingPoolStakingV2.EscrowStatus.DEFAULT;\\n        newStake.stakeStatus = ILendingPoolStakingV2.StakeStatus.STAKED;\\n\\n        // Map the stake ID to the user and index\\n        setStakeMapping(\\n            _stakeEntries,\\n            _userIndexToId,\\n            stakeId,\\n            _staker,\\n            userStakeIdx\\n        );\\n\\n        return userStakeIdx;\\n    }\\n}\\n\",\"keccak256\":\"0x141d7c8698c7668b49be7fe1615241a5b77dd708ad9c144a9300c7a978025852\",\"license\":\"UNLICENSED\"},\"contracts/staking/interfaces/ILendingPoolStakingV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface ILendingPoolStakingV2 {\\n    error InsufficientBalance();\\n    error InvalidArgument(string details);\\n    error InvalidState();\\n    error Unauthorized();\\n    error AlreadyClaimed();\\n    error NoRewardsAvailable();\\n    error StakeNotFound();\\n    error NotOwned();\\n    error NoStakeYet();\\n\\n    enum StakeStatus {\\n        DEFAULT, // Not staked, only applicable to escrowed reward\\n        STAKED, // Stake ongoing\\n        FULFILLED // Stake ended gracefully\\n    }\\n\\n    enum EscrowStatus {\\n        DEFAULT, // Not issued\\n        ISSUED,\\n        CLAIMED\\n    }\\n    struct IFPRewardPeriod {\\n        uint256 rewardToDistribute;\\n        uint256 rewardClaimed;\\n    }\\n\\n    struct RewardPeriod {\\n        uint64 periodId;\\n        uint64 startTime;\\n        uint256 rewardsToDistribute;\\n        uint256 rewardsStaked;\\n        mapping(address => IFPRewardPeriod) ifpRewardPeriod;\\n    }\\n\\n    /**\\n     * @notice Combined stake mapping data structure\\n     * @dev Used to optimize storage by consolidating bidirectional mappings\\n     */\\n    struct StakeMappingEntry {\\n        address user; // Owner of the stake\\n        uint256 userIndex; // Index in user's personal mapping\\n        uint256 stakeId; // Global stake ID\\n        bool exists; // Flag to confirm entry exists\\n    }\\n\\n    struct Stake {\\n        // Staker address\\n        address staker;\\n        // Stake token address\\n        address token;\\n        // The time of deposit\\n        uint48 start;\\n        // The time of withdrawal\\n        uint48 end;\\n        // The amount staked by each stake duration\\n        uint256[3] amountsPerDuration;\\n        // The amount of stake token that will be rewarded upon finishing the stake duration\\n        uint256 rewardAllocated;\\n        // Stake is escrow\\n        bool isEscrow;\\n        // Status of eab\\n        EscrowStatus escrowStatus;\\n        // Status of stake\\n        StakeStatus stakeStatus;\\n    }\\n\\n    event Staked(\\n        uint256 indexed stakeId,\\n        address indexed staker,\\n        address indexed token,\\n        uint48 start,\\n        uint48 end,\\n        uint256[3] amountsPerDuration,\\n        bool isEscrow\\n    );\\n    event StakeStatusChanged(uint256 indexed stakeId, StakeStatus status);\\n    event EscrowStatusChanged(uint256 indexed stakeId, EscrowStatus status);\\n    event InflationRewardDistributed();\\n    event BatchMigrationCompleted(uint256 indexed startId, uint256 endId);\\n\\n    event NewPeriodStarted(\\n        uint64 periodId,\\n        uint64 timestamp\\n    );\\n\\n    event RewardsClaimed(\\n        uint256 indexed stakeId,\\n        address indexed user,\\n        address indexed token,\\n        uint256 inflationReward,\\n        uint256 ifpReward,\\n        uint64 periodId\\n    );\\n    function deposit(\\n        address _stakeToken,\\n        uint256 _amount,\\n        uint8 _durationId\\n    ) external payable;\\n\\n    function stakeEscrowedReward(uint256 _stakeId) external;\\n\\n    function distributeInflationRewards(uint256 _inflationReward) external;\\n\\n    function unstake(uint256 _stakeId) external;\\n\\n    function addStakeToken(address _stakeToken) external;\\n\\n    function removeStakeToken(address _stakeToken) external;\\n}\\n\",\"keccak256\":\"0xe63dde8633958065cc2390c0ef7e12a055df03ff2901314909ab950cf18d7505\",\"license\":\"UNLICENSED\"},\"contracts/test/TestingV2.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract TestingV2 is OwnableUpgradeable {\\n    bool public testing;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {\\n        testing = false;\\n    }\\n\\n    function __Testing_init() public virtual onlyInitializing {\\n        testing = false;\\n    }\\n\\n    function setTesting(bool _testing) external onlyOwner {\\n        testing = _testing;\\n    }\\n}\\n\",\"keccak256\":\"0x24aeaf7b9ee298db1dc8c8b5919c5e7fb882e0e154371e119d24789fc9a2aac1\",\"license\":\"Unlicense\"},\"contracts/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"../helpers/SignatureHelper.sol\\\";\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\ncontract Vault is SimpleRoleAccess, UUPSUpgradeable {\\n    using SignatureHelper for bytes32;\\n\\n    event Claimed(bytes _hash);\\n\\n    bytes4 private ERC1155_INTERFACE_ID;\\n    string public name;\\n\\n    mapping(bytes => bool) public claimed;\\n    // Balance name => token => amount\\n    mapping(string => mapping(address => uint256)) public namedBalances;\\n\\n    function initialize(string memory _name) public virtual initializer {\\n        __Vault_init(_name);\\n        __MWOwnable_init();\\n    }\\n\\n    function __Vault_init(\\n        string memory _name\\n    ) internal virtual onlyInitializing {\\n        name = _name;\\n        ERC1155_INTERFACE_ID = 0xd9b67a26;\\n    }\\n\\n    function approveERC20Transfer(\\n        address _tokenAddress,\\n        address _spender,\\n        uint256 _amount\\n    ) external virtual onlyRole(\\\"spender\\\") returns (bool) {\\n        IERC20 erc20 = IERC20(_tokenAddress);\\n        return erc20.approve(_spender, _amount);\\n    }\\n\\n    function transferERC20(\\n        address _tokenAddress,\\n        address _to,\\n        uint256 _amount\\n    ) external virtual onlyRole(\\\"spender\\\") returns (bool) {\\n        IERC20 erc20 = IERC20(_tokenAddress);\\n        return erc20.transfer(_to, _amount);\\n    }\\n\\n    function setERC721ApprovalForAll(\\n        address _tokenAddress,\\n        address _operator,\\n        bool _approved\\n    ) external virtual onlyRole(\\\"spender\\\") {\\n        IERC721 erc721 = IERC721(_tokenAddress);\\n        erc721.setApprovalForAll(_operator, _approved);\\n    }\\n\\n    function transferERC721(\\n        address _tokenAddress,\\n        address _to,\\n        uint256 _tokenId\\n    ) external virtual onlyRole(\\\"spender\\\") {\\n        IERC721 erc721 = IERC721(_tokenAddress);\\n        erc721.transferFrom(address(this), _to, _tokenId);\\n    }\\n\\n    function transferERC1155(\\n        address _tokenAddress,\\n        address _to,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external virtual onlyRole(\\\"spender\\\") {\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\n        require(\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\n            \\\"given token address doesn't support ERC1155\\\"\\n        );\\n        erc1155.safeTransferFrom(address(this), _to, _id, _value, _data);\\n    }\\n\\n    function transferERC1155Batch(\\n        address _tokenAddress,\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external virtual onlyRole(\\\"spender\\\") {\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\n        require(\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\n            \\\"given token address doesn't support ERC1155\\\"\\n        );\\n        erc1155.safeBatchTransferFrom(address(this), _to, _ids, _values, _data);\\n    }\\n\\n    function setERC1155ApprovalForAll(\\n        address _tokenAddress,\\n        address _operator,\\n        bool _approved\\n    ) external virtual onlyRole(\\\"spender\\\") {\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\n        require(\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\n            \\\"given token address doesn't support ERC1155\\\"\\n        );\\n        erc1155.setApprovalForAll(_operator, _approved);\\n    }\\n\\n    function getNativeBalance() external view virtual returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function transferNative(\\n        address payable _to,\\n        uint256 _amount\\n    ) public payable virtual onlyRole(\\\"spender\\\") {\\n        (bool sent, ) = _to.call{ value: _amount }(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    function burn(\\n        address _token,\\n        uint256 _amount\\n    ) public virtual onlyRole(\\\"spender\\\") {\\n        ERC20Burnable(_token).burn(_amount);\\n    }\\n\\n    function namedBalanceReceive(\\n        string memory _name,\\n        address _token,\\n        uint256 _amount\\n    ) external virtual onlyRole(\\\"spender\\\") {\\n        namedBalances[_name][_token] += _amount;\\n    }\\n\\n    function namedBalanceSpend(\\n        string memory _name,\\n        address _token,\\n        uint256 _amount\\n    ) external virtual onlyRole(\\\"spender\\\") {\\n        require(\\n            namedBalances[_name][_token] >= _amount,\\n            \\\"Insufficient balance\\\"\\n        );\\n        namedBalances[_name][_token] -= _amount;\\n    }\\n\\n    function getNamedBalance(\\n        string memory _name,\\n        address _token\\n    ) external view virtual returns (uint256) {\\n        uint256 balance = namedBalances[_name][_token];\\n        uint256 actualBalance = _token == address(0)\\n            ? payable(this).balance\\n            : IERC20(_token).balanceOf(address(this));\\n\\n        return balance <= actualBalance ? balance : actualBalance;\\n    }\\n\\n    function claim(\\n        bytes[] memory _hashes,\\n        bytes[] memory _signatures\\n    ) external virtual {\\n        require(\\n            _hashes.length == _signatures.length,\\n            \\\"Not matching hash and signature count\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _hashes.length; i++) {\\n            if (claimed[_hashes[i]]) {\\n                continue;\\n            }\\n\\n            (\\n                address _recipientAddress,\\n                address _tokenAddress,\\n                uint256 _amount,\\n                uint48 _timestamp\\n            ) = abi.decode(_hashes[i], (address, address, uint256, uint48));\\n\\n            bytes32 _messageHash = keccak256(\\n                abi.encodePacked(\\n                    _recipientAddress,\\n                    _tokenAddress,\\n                    _amount,\\n                    _timestamp\\n                )\\n            );\\n\\n            require(\\n                _messageHash.recoverSigner(_signatures[i]) == owner(),\\n                \\\"Invalid signature\\\"\\n            );\\n\\n            require(_recipientAddress == msg.sender, \\\"Not recipient\\\");\\n            require(block.timestamp >= _timestamp, \\\"Invalid timestamp\\\");\\n            require(\\n                IERC20(_tokenAddress).balanceOf(address(this)) >= _amount,\\n                \\\"Insufficient pool balance\\\"\\n            );\\n\\n            claimed[_hashes[i]] = true;\\n            IERC20(_tokenAddress).transfer(msg.sender, _amount);\\n            emit Claimed(_hashes[i]);\\n        }\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x82c8a4ad6ba1e44ed334c926557b9dfd8cb3b0595842ae792e57c7d8d78d0e93\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a71461052757806306fdde031461051e578063081812fc1461051557806308ed8d161461050c578063095ea7b314610503578063125cc42f146104fa578063162094c4146104f1578063166866c7146104e8578063193cf2bf146104df5780631dbd2086146104d65780631e83409a146104cd5780631fecb71a146104c4578063217fe6c6146104bb5780632372b28a146104b257806323b872dd146104a9578063273d87e2146104a05780632e17de78146104975780633431d6311461048e5780633659cfe614610485578063396b62471461047c57806339d2525f146104735780633c661b8b1461046a5780633de15c121461046157806342842e0e14610458578063485cc9551461044f5780634f1ef28614610446578063528a9e4d1461043d57806352d1902d146104345780635413aa3b1461042b5780636352211e1461042257806370a0823114610419578063715018a61461041057806372a4db4a146104075780637547c7a3146103fe57806375506c96146103f557806382952200146103ec578063848778b4146103e35780638d03b102146103da5780638da5cb5b146103d157806395d89b41146103c85780639db5fa65146103bf578063a22cb465146103b6578063a59a9973146103ad578063b5bc8534146103a4578063b88d4fde1461039b578063ba5e4bad14610392578063bad7edab14610389578063bf02155014610380578063c1592dbc14610377578063c436e3181461036e578063c51046a314610365578063c87b56dd1461035c578063d2438c2a14610353578063d495caaa1461034a578063d5a44f8614610341578063d88fe69914610338578063d909087e1461032f578063de3e3eff14610326578063e25b7d821461031d578063e985e9c514610314578063ef7bd7f31461030b578063f19ed6be14610302578063f2fde38b146102f9578063f56f4f0f146102f05763fe863ac1146102e857600080fd5b61000e6137f4565b5061000e6136a8565b5061000e613616565b5061000e613259565b5061000e613239565b5061000e6131e9565b5061000e6131c1565b5061000e61317d565b5061000e6130c3565b5061000e613063565b5061000e612fc9565b5061000e612e7a565b5061000e612d4b565b5061000e612d17565b5061000e612cf0565b5061000e612cd0565b5061000e612c90565b5061000e612c3c565b5061000e612b4e565b5061000e612b2e565b5061000e612ad6565b5061000e612ab1565b5061000e612a88565b5061000e612996565b5061000e612939565b5061000e612891565b5061000e612869565b5061000e612845565b5061000e612805565b5061000e6127dc565b5061000e6127bc565b5061000e612760565b5061000e6126be565b5061000e612630565b5061000e61258a565b5061000e61256b565b5061000e6124a6565b5061000e6123ce565b5061000e6122a4565b5061000e61210a565b5061000e612010565b5061000e611fe7565b5061000e611b4a565b5061000e611b0e565b5061000e611a32565b5061000e611a03565b5061000e611870565b5061000e61182e565b5061000e6114c5565b5061000e6112eb565b5061000e6112c1565b5061000e611193565b5061000e6110df565b5061000e611040565b5061000e610e21565b5061000e610e04565b5061000e610d49565b5061000e610c75565b5061000e610a5c565b5061000e6108a2565b5061000e6107a9565b5061000e61075b565b5061000e610721565b5061000e610644565b5061000e610542565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e57602060043561056281610530565b63ffffffff60e01b16632483248360e11b8114908115610588575b506040519015158152f35b6380ac58cd60e01b8114915081156105ba575b81156105a9575b503861057d565b6301ffc9a760e01b149050386105a2565b635b5e139f60e01b8114915061059b565b600091031261000e57565b918091926000905b8282106105f65750116105ef575050565b6000910152565b915080602091830151818601520182916105de565b90602091610624815180928185528580860191016105d6565b601f01601f1916010190565b90602061064192818152019061060b565b90565b503461000e5760008060031936011261071e57604051908060655461066881613c52565b808552916001918083169081156106fd57506001146106a2575b61069e85610692818703826109ac565b60405191829182610630565b0390f35b9250606583527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c75b8284106106e55750505081016020016106928261069e610682565b805460208587018101919091529093019281016106ca565b60ff191660208701525050604084019250610692915083905061069e610682565b80fd5b503461000e57602036600319011261000e576020610740600435613cfe565b6001600160a01b0360405191168152f35b8015150361000e57565b503461000e57602036600319011261000e5760043561077981610751565b610781613842565b60ff801960fb5416911515161760fb556000604051f35b6001600160a01b0381160361000e57565b503461000e57604036600319011261000e576004356107c781610798565b6024356107d381613c30565b916001600160a01b0380841680918316146108535761080593610800913314908115610807575b50613c8c565b614073565b005b61084d91506108469061082e33916001600160a01b0316600052606a602052604060002090565b906001600160a01b0316600052602052604060002090565b5460ff1690565b386107fa565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b503461000e57602036600319011261000e576001600160a01b036004356108c881610798565b16600052610163602052602060ff604060002054166040519015158152f35b50634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff82111761091a57604052565b6109226108e7565b604052565b67ffffffffffffffff811161091a57604052565b610120810190811067ffffffffffffffff82111761091a57604052565b6020810190811067ffffffffffffffff82111761091a57604052565b6060810190811067ffffffffffffffff82111761091a57604052565b6040810190811067ffffffffffffffff82111761091a57604052565b90601f8019910116810190811067ffffffffffffffff82111761091a57604052565b604051906109db8261093b565b565b604051906109db82610974565b60209067ffffffffffffffff8111610a08575b601f01601f19160190565b610a106108e7565b6109fd565b81601f8201121561000e57803590610a2c826109ea565b92610a3a60405194856109ac565b8284526020838301011161000e57816000926020809301838601378301015290565b503461000e57604036600319011261000e5760043567ffffffffffffffff60243581811161000e57610a92903690600401610a15565b91610a9b613842565b610abb8160005260676020526001600160a01b0360406000205416151590565b15610c0a576000918183526020906097825260408420918551918211610bfd575b610af082610aea8554613c52565b85614dec565b80601f8311600114610b6757509080610b5494939286977ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79792610b5c575b50508160011b916000199060031b1c19161790555b6040519081529081906020820190565b0390a1604051f35b015190503880610b2f565b90601f19831696610b7d85600052602060002090565b9287905b898210610be5575050918391600193610b549796957ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7999a10610bcc575b505050811b019055610b44565b015160001960f88460031b161c19169055388080610bbf565b80600185968294968601518155019501930190610b81565b610c056108e7565b610adc565b60405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201527f6578697374656e7420746f6b656e0000000000000000000000000000000000006064820152608490fd5b503461000e5760208060031936011261000e57600435610c9481610798565b610c9c614558565b90610cc06001600160a01b0392848460c954163314918215610d0e575b5050614579565b1690816000526101639182825260ff60406000205416610cdc57005b61016780548015610d01575b60001901905560005252604060002060ff198154169055005b610d09614508565b610ce8565b60ff925090610d37913360005260fc8252604060002082604051948386809551938492016105d6565b82019081520301902054168438610cb9565b503461000e57602036600319011261000e5761069e60408060608151610d6e816108fe565b600091818380935282602082015282858201520152600435815261017f602052209060ff6003825193610da0856108fe565b6001600160a01b0381541685526001810154602086015260028101548486015201541615156060830152519182918291909160608060808301946001600160a01b038151168452602081015160208501526040810151604085015201511515910152565b503461000e57600036600319011261000e57602060405160028152f35b503461000e57602036600319011261000e57600435610e3f81610798565b806060610e4a6145c5565b33600090815261017c6020908152604080832061017d909252909120610ede905491610e7f610161546001600160a01b031690565b6040516325bd5c4960e01b8152600481019290925261016e6024830152604482019390935261017e606482015260848101939093526001600160a01b0395861660a4840152941660c48201523360e48201529283908190610104820190565b038173__$f048dbd5170c0ac319fa0222065b281d84$__5af4908115611033575b60009182938391610fdc575b507f476aa07c80fdb833cf2d719981e9f22c1e10dbace79a96a1a8a055d6defc1918906001600160a01b03610f41868633615295565b60405163a9059cbb60e01b81523360048201526024810188905291909416959060208160448160008b5af18015610fcf575b610fa1575b5060408051958652602086019190915267ffffffffffffffff91909116908401523392606090a4005b610fc19060203d8111610fc8575b610fb981836109ac565b810190614543565b5038610f78565b503d610faf565b610fd76139c8565b610f73565b90506110239193507f476aa07c80fdb833cf2d719981e9f22c1e10dbace79a96a1a8a055d6defc1918925060603d811161102c575b61101b81836109ac565b81019061524a565b90939192610f0b565b503d611011565b61103b6139c8565b610eff565b503461000e57602036600319011261000e5761080560043561106181610798565b61108861106c614558565b6001600160a01b0360c95416331490811561108d575b50614579565b615839565b60ff915060206110b7913360005260fc8252604060002082604051948386809551938492016105d6565b820190815203019020541638611082565b906110db602092828151948592016105d6565b0190565b503461000e57604036600319011261000e576004356110fd81610798565b60243567ffffffffffffffff811161000e57611151602061069e936001600160a01b0361113060ff953690600401610a15565b911660005260fc8252604060002082604051948386809551938492016105d6565b820190815203019020546040519116151581529081906020820190565b604090600319011261000e5760043561118681610798565b9060243561064181610798565b503461000e5761069e6001600160a01b036111ad3661116e565b911660005261017c6020526020604060002061017d8252604060002054906112206111e1610161546001600160a01b031690565b6040519586948594634f47984960e11b865260048601929094936060926080850196855260208501526001600160a01b03809216604085015216910152565b038173__$f048dbd5170c0ac319fa0222065b281d84$__5af4908115611288575b60009161125a575b506040519081529081906020820190565b61127b915060203d8111611281575b61127381836109ac565b8101906139b9565b38611249565b503d611269565b6112906139c8565b611241565b606090600319011261000e576004356112ad81610798565b906024356112ba81610798565b9060443590565b503461000e576108056112d336611295565b916112e66112e18433613e2d565b613d40565b613f08565b503461000e5760408060031936011261000e57600490813560243561130e613842565b61132a6113256113216101815460ff1690565b1590565b6144bc565b6113348183614537565b6101729182548092116000146114b45750935b73__$f048dbd5170c0ac319fa0222065b281d84$__835b8681106113c1575050506113a86000947f2a3aeb194c33f592b722a8f82cf9c3310794dcc211135c216cc284aea0353b5e92548110156113ae575b84519081529081906020820190565b0390a251f35b610181805460ff19166001179055611399565b808061147061140a6113f06113e3600196600052610171602052604060002090565b546001600160a01b031690565b6001600160a01b031660005261017c602052604060002090565b610161546001600160a01b03168a518093819263705dd6e760e11b835260209687958c85019160c09194936001600160a01b039160e08501966101718652602086015261017d604086015261017f6060860152610180608086015260a085015216910152565b0381885af480156114a7575b611489575b50500161135e565b8161149f92903d10610fc857610fb981836109ac565b503880611481565b6114af6139c8565b61147c565b6114bf915083614537565b93611347565b503461000e57602036600319011261000e576004356114e381614466565b90811561181c578161151f61158f93611510336001600160a01b031660005261017c602052604060002090565b90600052602052604060002090565b9173__$f048dbd5170c0ac319fa0222065b281d84$__9261016161154a81546001600160a01b031690565b6040805163766757b960e11b81526004810185905261016e60248201526001600160a01b03909216604483015233606483015290969095908690889081906084820190565b0381845af492831561180f575b60009788946117d9575b50600601926115b6845460ff1690565b1561173d575050906000602061161982986115ef6115e36115e36116839a9998546001600160a01b031690565b6001600160a01b031690565b895163a9059cbb60e01b815233600482015260248101929092529093849283919082906044820190565b03925af18015611730575b611712575b505b817fab7e44c17ad2a7b4de0e42ab0bc824366a946f184a1133f0b5528347e4ccbd2986518061165f81906002602083019252565b0390a2805460019060081c60ff1661167681612da2565b14611686575b50336158e8565b51f35b6116bd906116aa8360005260676020526001600160a01b0360406000205416151590565b6116fa57805461ff001916610200179055565b807f855f5f4ea7c8c6a92f173fbc35c24d01139c2a49e9bcc085f03620cb6a1c65138551806116f181906002602083019252565b0390a23861167c565b611703836155d3565b805461ff001916610200179055565b6117299060203d8111610fc857610fb981836109ac565b5038611629565b6117386139c8565b611624565b909493929150611756610162546001600160a01b031690565b90853b1561000e5786516331fd8e6560e01b81526001600160a01b039283166004820152911660248201523360448201526064810196909652600095611683948790829060849082905af480156117cc575b6117b3575b5061162b565b806117c06117c692610927565b806105cb565b386117ad565b6117d46139c8565b6117a8565b600698506117fe919450873d8911611808575b6117f681836109ac565b810190615561565b97909793906115a6565b503d6117ec565b6118176139c8565b61159c565b604051638c877d2160e01b8152600490fd5b503461000e57602036600319011261000e5760043561184c81610751565b61185761106c614558565b6101819060ff8019835416911515161790556000604051f35b503461000e57602036600319011261000e5760043561188e81610798565b6001600160a01b0390817f000000000000000000000000000000000000000000000000000000000000000016916118c7833014156138e4565b6118f67f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc938285541614613945565b6118fe613842565b6040519061190b82610958565b600082527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156119455750506108059150613a33565b6020600491604094939451928380926352d1902d60e01b825286165afa600091816119e3575b506119d05760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b0390fd5b610805936119de91146139d5565b613ad1565b6119fc91925060203d81116112815761127381836109ac565b903861196b565b503461000e57600036600319011261000e57602067ffffffffffffffff611a286145c5565b5416604051908152f35b503461000e57606036600319011261000e57600435611a5081610798565b6024359067ffffffffffffffff821161000e57611ab66020611a79610805943690600401610a15565b6001600160a01b0360443594611a8e86610751565b611a96613842565b1660005260fc8252604060002082604051948386809551938492016105d6565b8201908152030190209060ff801983541691151516179055565b50634e487b7160e01b600052603260045260246000fd5b906003821015611b01575b601f8260051c61016f01921690565b611b09611ad0565b611af2565b503461000e57602036600319011261000e57600435600381101561000e578060ff60209260051c61016f015460f86040519360031b161c168152f35b503461000e5760208060031936011261000e57611b6c61132160fb5460ff1690565b80611fc8575b611fb75773__$f048dbd5170c0ac319fa0222065b281d84$__9061017390611b9a825461303f565b506040908151634e868a0160e01b8152600095868280611bbe60049687830161519d565b0381845af4918215611faa575b87908893611f83575b50611be190843590614537565b875b61016554811015611e9f57611c4187611c11611bfe8461271b565b90546001600160a01b039160031b1c1690565b88518093819263c78ea24360e01b83528a830191909160206001600160a01b03604083019461016e845216910152565b0381875af4908115611e92575b8a91611e75575b50611c63575b600101611be3565b61016290611c7b6115e383546001600160a01b031690565b611ccb89611c8b611bfe8561271b565b8a5180938192630530fa2160e01b83528c830160408082526003908201526206966760ec1b60608201526001600160a01b03909116602082015260800190565b0381855afa908115611e68575b8c91611e4b575b50611cf481611cee858a6151b2565b51614537565b611cfe84896151b2565b5280611d0e575b50509050611c5b565b611d1a611bfe8461271b565b908c833b1561071e5789611da36115e36001988f968f87611deb9a611d859389809451809681958294636c49e02160e01b84528d840160608082526003908201526206966760ec1b6080820152909291906040906001600160a01b0360a08201951660208201520152565b03925af18015611e3e575b611e2b575b50546001600160a01b031690565b91611db0611bfe8861271b565b8d5163276d76f960e21b81526001600160a01b0390911692810192835230602084015260408301949094529294859384929091839160600190565b03925af18015611e1e575b611e01575b80611d05565b611e1790893d8b11610fc857610fb981836109ac565b5038611dfb565b611e266139c8565b611df6565b806117c0611e3892610927565b38611d95565b611e466139c8565b611d90565b611e6291508a3d8c116112815761127381836109ac565b38611cdf565b611e706139c8565b611cd8565b611e8c9150883d8a116112815761127381836109ac565b38611c55565b611e9a6139c8565b611c4e565b509085949693611ee59693945490611eca895196879586948594637f0440bf60e01b865285016151d4565b03915af4918215611f76575b8592611f59575b505061017355565b7f41d377f5159e61f9ec3e5d7ecc5d2f8d2b17f2b58c8f05a4f9e8fce553a59cab611f1f611f116145c5565b5467ffffffffffffffff1690565b611f3b611f2a6145c5565b5460401c67ffffffffffffffff1690565b835167ffffffffffffffff928316815291166020820152604090a151f35b611f6f9250803d106112815761127381836109ac565b3880611edd565b611f7e6139c8565b611ed6565b611be19350611fa491503d808a833e611f9c81836109ac565b8101906150a5565b92611bd4565b611fb26139c8565b611bcb565b6040516282b42960e81b8152600490fd5b50611fdf6115e3610161546001600160a01b031690565b331415611b72565b503461000e57610805611ff936611295565b906040519261200784610958565b60008452613da2565b503461000e57604036600319011261000e5760043561202e81610798565b61207e60243561203d81610798565b6000549261206260ff8560081c1615809581966120fc575b81156120dc575b50614748565b83612075600160ff196000541617600055565b6120c3576149c5565b61208457005b61209461ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b6120d761010061ff00196000541617600055565b6149c5565b303b159150816120ee575b503861205c565b6001915060ff1614386120e7565b600160ff8216109150612055565b50604036600319011261000e5760043561212381610798565b60243567ffffffffffffffff811161000e57612143903690600401610a15565b906001600160a01b0391827f0000000000000000000000000000000000000000000000000000000000000000169261217d843014156138e4565b6121ac7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc948286541614613945565b6121b4613842565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156121ea5750506108059150613a33565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181612284575b506122715760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b6108059361227f91146139d5565b613b8d565b61229d91925060203d81116112815761127381836109ac565b9038612210565b503461000e57602036600319011261000e576004356122c281614466565b801561181c576122ea90611510336001600160a01b031660005261017c602052604060002090565b336001600160a01b0361230483546001600160a01b031690565b1603611fb75760068101805460ff8116159081156123b5575b506123a357612392816123887fab7e44c17ad2a7b4de0e42ab0bc824366a946f184a1133f0b5528347e4ccbd299461236361239e956201000062ff000019825416179055565b612382600261237b610161546001600160a01b031690565b9201614f7e565b90615d01565b5460101c60ff1690565b60405191829182615095565b0390a2005b60405163baf3f0f760e01b8152600490fd5b60ff915060101c166123c681612da2565b15153861231d565b503461000e57600036600319011261000e576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361243b576040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152602090f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b503461000e5760008060031936011261071e5761069e9061017354600281101561255e575b60405190634e868a0160e01b825260021b610174016004820152604060248201528181806124fb60448201615137565b038173__$f048dbd5170c0ac319fa0222065b281d84$__5af4918215612551575b8092612535575b50506040519081529081906020820190565b61254992503d8091833e611f9c81836109ac565b503880612523565b6125596139c8565b61251c565b612566611ad0565b6124cb565b503461000e57602036600319011261000e576020610740600435613c30565b503461000e57602036600319011261000e576001600160a01b036004356125b081610798565b1680156125d957600052606860205261069e604060002054604051918291829190602083019252565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b503461000e5760008060031936011261071e5761264b613842565b60c9546001600160a01b0319811660c955816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b6024359060ff8216820361000e57565b6044359060ff8216820361000e57565b359060ff8216820361000e57565b503461000e57606036600319011261000e57366023121561000e576040516126e581610974565b60648136821161000e576004905b82821061270357610805846145f0565b60208091612710846126b0565b8152019101906126f3565b6101658054821015612753575b6000527fd91ca5e44fa96a1732bfaed7fe33fc20ed69a9895cde1f18c7dcabca39d6a78b0190600090565b61275b611ad0565b612728565b503461000e57602036600319011261000e57600435610165805482101561000e576020916001600160a01b03916000527fd91ca5e44fa96a1732bfaed7fe33fc20ed69a9895cde1f18c7dcabca39d6a78b015416604051908152f35b503461000e57600036600319011261000e57602061017254604051908152f35b503461000e57600036600319011261000e5760206001600160a01b036101615416604051908152f35b503461000e57602036600319011261000e576001600160a01b0360043561282b81610798565b166000526101646020526020604060002054604051908152f35b503461000e57600036600319011261000e57602060ff60fb54166040519015158152f35b503461000e57600036600319011261000e5760206001600160a01b0360c95416604051908152f35b503461000e5760008060031936011261071e5760405190806066546128b581613c52565b808552916001918083169081156106fd57506001146128de5761069e85610692818703826109ac565b9250606683527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e943545b8284106129215750505081016020016106928261069e610682565b80546020858701810191909152909301928101612906565b503461000e57604036600319011261000e57602061298d60043561295c81610798565b6001600160a01b0361296c612690565b911660005261016e835260406000209060ff16600052602052604060002090565b54604051908152f35b503461000e57604036600319011261000e576004356129b481610798565b6024356129c081610751565b6001600160a01b03821691823314612a435781612a00612a119233600052606a6020526040600020906001600160a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b503461000e57600036600319011261000e5760206001600160a01b036101625416604051908152f35b503461000e57600036600319011261000e57602060ff61018154166040519015158152f35b503461000e57608036600319011261000e57600435612af481610798565b602435612b0081610798565b6064359167ffffffffffffffff831161000e57612b24610805933690600401610a15565b9160443591613da2565b503461000e57600036600319011261000e57602061017054604051908152f35b503461000e57602036600319011261000e57600435612b6c81614466565b801561181c57612b9490611510336001600160a01b031660005261017c602052604060002090565b336001600160a01b03612bae83546001600160a01b031690565b1603611fb7576006018054600260ff8260101c16612bcb81612da2565b14908115612c23575b506123a357805461ff001916610100179055612bf0813361545a565b604051600181527f855f5f4ea7c8c6a92f173fbc35c24d01139c2a49e9bcc085f03620cb6a1c651390806020810161239e565b60ff915060081c16612c3481612da2565b151538612bd4565b503461000e57604036600319011261000e57602061298d600435612c5f81610798565b6001600160a01b03612c6f612690565b911660005261016b835260406000209060ff16600052602052604060002090565b503461000e57602036600319011261000e576001600160a01b03600435612cb681610798565b1660005261017d6020526020604060002054604051908152f35b503461000e57600036600319011261000e57602061016854604051908152f35b503461000e57602036600319011261000e576020612d0f600435614466565b604051908152f35b503461000e57602036600319011261000e5761069e612d37600435614257565b60405191829160208352602083019061060b565b503461000e57600036600319011261000e57612d6e60ff60005460081c16614b83565b60fb805460ff19169055005b6000915b60038310612d8b57505050565b600190825181526020809101920192019190612d7e565b60031115612dac57565b634e487b7160e01b600052602160045260246000fd5b90612dcc82612da2565b52565b6109db909291926101406101608201946001600160a01b038151168352612e06602082015160208501906001600160a01b03169052565b60408181015165ffffffffffff169084015260608181015165ffffffffffff1690840152612e3c60808201516080850190612d7a565b60a081015160e084015260c081015190612e5d610100928386019015159052565b612e7060e0820151610120860190612dc2565b0151910190612dc2565b503461000e5760408060031936011261000e5760043590612e9a82610798565b602435918151612ea98161093b565b61010060009182815282602082015282858201528260608201528451612ece81610974565b606036823760808201528260a08201528260c08201528260e0820152015282158015612f42575b612f3157612f2161069e93611510612f26936001600160a01b031660005261017c602052604060002090565b614fcd565b905191829182612dcf565b8151638c877d2160e01b8152600490fd5b50612f61816001600160a01b031660005261017d602052604060002090565b548311612ef5565b94919897969360e096939161010087019a6001600160a01b03809216885216602087015265ffffffffffff80921660408701521660608501526080840152151560a0830152612fb781612da2565b60c0820152612fc583612da2565b0152565b503461000e57602036600319011261000e5760043560005261017160205260406000206001600160a01b0361069e81835416600184015490600660058601549501549060405195869560ff8460101c169460ff808660081c169516938160d01c9265ffffffffffff8360a01c1692169089612f69565b6002811015613056575b60021b6101740190600090565b61305e611ad0565b613049565b503461000e57602036600319011261000e57600435600281101561000e5760809060021b80610174015490610176610175820154910154906040519267ffffffffffffffff90818116855260401c16602084015260408301526060820152f35b503461000e57604036600319011261000e576004356130e181610798565b6001600160a01b0380911660005261017c602052604060002060243560005260205260406000209061069e81835416600184015490600660058601549501549060405195869560ff8460101c169460ff808660081c169516938160d01c9265ffffffffffff8360a01c1692169089612f69565b906003821015613170575b6006600580840461016d0193060290565b613178611ad0565b61315f565b503461000e57602036600319011261000e57600435600381101561000e578065ffffffffffff60056020930461016d01546006600560405194060260031b1c168152f35b503461000e57600036600319011261000e57602065ffffffffffff6101665416604051908152f35b503461000e57602060ff61322d6001600160a01b036132073661116e565b9116600052606a84526040600020906001600160a01b0316600052602052604060002090565b54166040519015158152f35b503461000e57600036600319011261000e57602061016754604051908152f35b50606036600319011261000e57600480359061327482610798565b602435916132806126a0565b9273__$f048dbd5170c0ac319fa0222065b281d84$__906132b8610846846001600160a01b0316600052610163602052604060002090565b93823b1561000e5785926040958651809263f39ce06360e01b825281806132fc8860009d8e978a850160ff6040929594936060830196151583521660208201520152565b03915af48015613609575b6135f6575b506001600160a01b0384168015801580613590575b61358057156134d957508134036134815750612f21611683939261347b9261336f88808061335b6115e3610162546001600160a01b031690565b858c51915af161336961411d565b50614f1e565b61346461345c61337d614f6a565b938361338c60ff831687614678565b5261344a61017254986133a76133a18b6148fd565b61017255565b61342f6133c8336001600160a01b031660005261017d602052604060002090565b976133d389546148fd565b809955888c6133fa82611510336001600160a01b031660005261017c602052604060002090565b928561341a6134088a613154565b905465ffffffffffff9160031b1c1690565b9161342760fb5460ff1690565b953390615d5c565b506001600160a01b031660005261016e602052604060002090565b9060ff16600052602052604060002090565b918254614537565b905533600090815261017c60205260409020611510565b90615c65565b6119cc908551918291631fff1b3b60e21b8352820160809060208152602260208201527f496e636f7272656374206e617469766520636f696e207374616b6520616d6f756040820152611b9d60f21b60608201520190565b928261353f602061347b956116839897612f21968c6135046115e3610162546001600160a01b031690565b8d516323b872dd60e01b8152339381019384526001600160a01b03909116602084015260408301949094529294859384929091839160600190565b03925af18015613573575b613555575b5061336f565b61356c9060203d8111610fc857610fb981836109ac565b503861354f565b61357b6139c8565b61354a565b8651631e9acf1760e31b81528390fd5b5086516370a0823160e01b8152338482019081528591906020908290819083010381875afa9081156135e9575b8a916135cb575b5010613321565b6135e3915060203d81116112815761127381836109ac565b386135c4565b6135f16139c8565b6135bd565b806117c061360392610927565b3861330c565b6136116139c8565b613307565b503461000e57602036600319011261000e5760043561363481610798565b61363c613842565b6001600160a01b03811615613654576108059061389a565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461000e576136b73661116e565b906001600160a01b03811660005261017c60205260408092816000206137756136f4856001600160a01b031660005261017d602052604060002090565b5492610173549561370e610161546001600160a01b031690565b865197889687966365a52ecd60e11b8852600488019492610100949197969261012087019887526020870152610174604087015261017e606087015261016e608087015260a08601526001600160a01b03928380921660c08701521660e085015216910152565b038173__$f048dbd5170c0ac319fa0222065b281d84$__5af49182156137e7575b60009182936137b2575b50519081526020810191909152604090f35b816137d892945061069e93503d85116137e0575b6137d081836109ac565b810190615234565b9290916137a0565b503d6137c6565b6137ef6139c8565b613796565b503461000e57604036600319011261000e576001600160a01b0360043561381a81610798565b1660005261018060205260406000206024356000526020526020604060002054604051908152f35b6001600160a01b0360c95416330361385657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60c954906001600160a01b0380911691826001600160a01b031982161760c955167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b156138eb57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561394c57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b604051906139b382610958565b60008252565b9081602091031261000e575190565b506040513d6000823e3d90fd5b156139dc57565b60405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b803b15613a76576001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91166001600160a01b0319825416179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b613ada81613a33565b604051906001600160a01b0381167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600084a2825115801590613b85575b613b2157505050565b600080613b8294613b3185610974565b602785527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020860152660819985a5b195960ca1b6040860152602081519101845af4613b7c61411d565b916143be565b50565b506000613b18565b613b9681613a33565b604051906001600160a01b0381167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600084a2825115801590613bdc57613b2157505050565b506001613b18565b15613beb57565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b60005260676020526001600160a01b0360406000205416610641811515613be4565b90600182811c92168015613c82575b6020831014613c6c57565b634e487b7160e01b600052602260045260246000fd5b91607f1691613c61565b15613c9357565b60405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608490fd5b613d26613d218260005260676020526001600160a01b0360406000205416151590565b613be4565b60005260696020526001600160a01b036040600020541690565b15613d4757565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b90613dc6939291613db66112e18433613e2d565b613dc1838383613f08565b61414d565b15613dcd57565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b6001600160a01b0380613e3f84613c30565b169281831692848414948515613e75575b50508315613e5f575b50505090565b613e6b91929350613cfe565b1614388080613e59565b60ff92955090613ea491600052606a6020526040600020906001600160a01b0316600052602052604060002090565b5416923880613e50565b15613eb557565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b90613f2e9291613f1783613c30565b6001600160a01b0382811695909182168614613eae565b8216938415614022576109db9481613f538693613f4d6115e386613c30565b14613eae565b613f7a613f6a846000526069602052604060002090565b80546001600160a01b0319169055565b613f97846001600160a01b03166000526068602052604060002090565b6000198154019055613fbc856001600160a01b03166000526068602052604060002090565b60018154019055613ff685613fdb856000526067602052604060002090565b906001600160a01b03166001600160a01b0319825416179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4615adc565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b600082815260696020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b03806140ac84613c30565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b9081602091031261000e575161064181610530565b909261064194936080936001600160a01b0380921684521660208301526040820152816060820152019061060b565b3d15614148573d9061412e826109ea565b9161413c60405193846109ac565b82523d6000602084013e565b606090565b92909190823b1561424e576141889260209260006001600160a01b03604051809781968295630a85bd0160e11b9b8c855233600486016140ee565b0393165af16000918161421e575b50614210576141a361411d565b8051908161420b5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b602001fd5b6001600160e01b0319161490565b61424091925060203d8111614247575b61423881836109ac565b8101906140d9565b9038614196565b503d61422e565b50505050600190565b61427a613d218260005260676020526001600160a01b0360406000205416151590565b600090808252602060978152604083206040518481959083549061429d82613c52565b80855294600192808416908115614359575060011461431d575b5050506142c6925003846109ac565b6142ce6139a6565b928351156143165780516142e85750506106419150614379565b6106419250614308906143026040519586948501906110c8565b906110c8565b03601f1981018352826109ac565b9250505090565b869350819291528282205b8583106143415750506142c693508201013880806142b7565b8054838a018501528894508693909201918101614328565b965050505050505060ff1916818401526142c683604081013880806142b7565b613d2161439c9160005260676020526001600160a01b0360406000205416151590565b60006040516143aa81610958565b526040516143b781610958565b6000815290565b9192901561442057508151156143d2575090565b3b156143db5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156144335750805190602001fd5b60405162461bcd60e51b81529081906119cc9060048301610630565b50634e487b7160e01b600052601260045260246000fd5b60005261017f6020526040600020604051614480816108fe565b6001600160a01b038254168152600182015490606060ff600360208401958587526002810154604086015201541615159101521561181c575190565b156144c357565b60405162461bcd60e51b815260206004820152601b60248201527f4d6967726174696f6e20616c726561647920636f6d706c6574656400000000006044820152606490fd5b50634e487b7160e01b600052601160045260246000fd5b600190600119811161452f570190565b6110db614508565b8119811161452f570190565b9081602091031261000e575161064181610751565b6040519061456582610990565b600582526430b236b4b760d91b6020830152565b1561458057565b60405162461bcd60e51b815260206004820152600e60248201527f4e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606490fd5b60046101735460026001821610156145e3575b60021b166101740190565b6145eb611ad0565b6145d8565b6145fb61106c614558565b606460ff614623614616828551168360208701511690614697565b8260408601511690614697565b1603614632576109db906146e3565b604051631fff1b3b60e21b815260206004820152601260248201527f4d7573742073756d20757020746f2031303000000000000000000000000000006044820152606490fd5b90600381101561468a575b60051b0190565b614692611ad0565b614683565b60ff8091169116908160ff03811161452f570190565b80600019048211811515166146c0570290565b6146c8614508565b0290565b8181106146d7575050565b600081556001016146cc565b9061016f60009081935b600380861015614740579060209160ff908183511691868654921b90811b9283911b169119161783550193600180930192601f8411614731575b50600101936146ed565b60009350909101906001614727565b505050509050565b1561474f57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608490fd5b156147c157565b60405162461bcd60e51b815260206004820152600f60248201527f496e76616c6964206164647265737300000000000000000000000000000000006044820152606490fd5b6101658054906801000000000000000082101561486f575b60018201808255821015614862575b6000527fd91ca5e44fa96a1732bfaed7fe33fc20ed69a9895cde1f18c7dcabca39d6a78b0180546001600160a01b0319169055565b61486a611ad0565b61482d565b6148776108e7565b61481e565b6001600160a01b03610165805490680100000000000000008210156148f0575b600182018082558210156148e3575b6000527fd91ca5e44fa96a1732bfaed7fe33fc20ed69a9895cde1f18c7dcabca39d6a78b0191166001600160a01b0319825416179055565b6148eb611ad0565b6148ab565b6148f86108e7565b61489c565b600190600019811461452f570190565b9061016d600080935b600380861015614740578160209162ffffff600694511690858754911b65ffffffffffff811b9283911b1691191617855501910193601a851161495e575b6001019390614916565b60009450600190920191614954565b6040519061497a82610990565b601382527f457363726f77656420417373657420426f6e64000000000000000000000000006020830152565b604051906149b382610990565b600382526222a0a160e91b6020830152565b614a8a90614a27614abc936149ed6001600160a01b0380851615159081614b77575b506147ba565b61016180546001600160a01b0319166001600160a01b0385161790556001600160a01b0361016291166001600160a01b0319825416179055565b614a32600161017255565b60008052610163602052614a6e7f323947e965fafc5a11fbcfc7a37a72d1b12094b96c7e62e08b97c054e8e6b0a75b805460ff19166001179055565b614a76614806565b614ab661016791614a90614a8a84546148fd565b61016755565b614ab1614a61826001600160a01b0316600052610163602052604060002090565b61487c565b546148fd565b610166805465ffffffffffff1916630114db00179055614afa614add6109dd565b62093a8081526224ea006020820152626ebe00604082015261490d565b614b1c614b056109dd565b60148152601e6020820152603260408201526146e3565b610181805460ff19169055614b46614b326145c5565b805467ffffffffffffffff19166001179055565b614b5f614b5161496d565b614b596149a6565b90614c17565b614b67614be3565b614b6f615f74565b6109db614c06565b905082161515386149e7565b15614b8a57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b614bfd60ff60005460081c16614bf881614b83565b614b83565b6109db3361389a565b6109db60ff60005460081c16614b83565b90614c2d60ff60005460081c16614bf881614b83565b815167ffffffffffffffff8111614d28575b614c5381614c4e606554613c52565b614d35565b602080601f8311600114614c95575081906109db94600092614c8a575b50508160011b916000199060031b1c191617606555614e26565b015190503880614c70565b919293601f198416614cc960656000527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c790565b936000905b828210614d105750509160019391856109db97969410614cf7575b505050811b01606555614e26565b015160001960f88460031b161c19169055388080614ce9565b80600186978294978701518155019601940190614cce565b614d306108e7565b614c3f565b90601f8211614d42575050565b6109db9160656000527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c7906020601f840160051c83019310614d8c575b601f0160051c01906146cc565b9091508190614d7f565b90601f8211614da3575050565b6109db9160666000527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e94354906020601f840160051c83019310614d8c57601f0160051c01906146cc565b9190601f8111614dfb57505050565b6109db926000526020600020906020601f840160051c83019310614d8c57601f0160051c01906146cc565b90815167ffffffffffffffff8111614f11575b614e4d81614e48606654613c52565b614d96565b602080601f8311600114614e895750819293600092614e7e575b50508160011b916000199060031b1c191617606655565b015190503880614e67565b90601f19831694614ebc60666000527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e9435490565b926000905b878210614ef9575050836001959610614ee0575b505050811b01606655565b015160001960f88460031b161c19169055388080614ed5565b80600185968294968601518155019501930190614ec1565b614f196108e7565b614e39565b15614f2557565b60405162461bcd60e51b815260206004820152601f60248201527f4661696c656420746f207472616e73666572206e617469766520746f6b656e006044820152606490fd5b60405190614f7782610974565b6060368337565b60405191906000835b60038210614fae575050506060820182811067ffffffffffffffff82111761091a57604052565b6001602081928554815201930191019091614f87565b612dcc82612da2565b906109db60ff6006614fdd6109ce565b94614fff614ff282546001600160a01b031690565b6001600160a01b03168752565b60018101546001600160a01b038116602088015265ffffffffffff60a082901c16604088015260d01c606087015261503960028201614f7e565b6080870152600581015460a08701520154818116151560c0860152615066828260081c1660e08701614fc4565b60101c166101008401614fc4565b9061507e81612da2565b62ff000082549160101b169062ff00001916179055565b91906020830192612dcc82612da2565b91909160408184031261000e578051926020908183015167ffffffffffffffff9384821161000e570181601f8201121561000e57805193841161512a575b8360051b90604051946150f8858401876109ac565b8552838086019282010192831161000e578301905b82821061511b575050505090565b8151815290830190830161510d565b6151326108e7565b6150e3565b6101659081548082526020809201926000527fd91ca5e44fa96a1732bfaed7fe33fc20ed69a9895cde1f18c7dcabca39d6a78b916000905b82821061517d575050505090565b83546001600160a01b03168552938401936001938401939091019061516f565b60409061064192815281602082015201615137565b60209181518110156151c7575b60051b010190565b6151cf611ad0565b6151bf565b90929160a0820190610174835260209485840152604083015260a0606083015282518091528360c0830193019360005b8281106152205750505061064192506080818303910152615137565b855185529481019493810193600101615204565b919082604091031261000e576020825192015190565b9081606091031261000e578051916040602083015192015167ffffffffffffffff8116810361000e5790565b9061528081612da2565b61ff0082549160081b169061ff001916179055565b9061529e614f6a565b9060005b60ff90818116600381101561533f57906152fe6001926152ed6152e66152e06152da6152cd87611ae7565b905460ff9160031b1c1690565b60ff1690565b886146ad565b6064900490565b6152f78289614678565b5286614678565b5161533661345c8361344a61531c610161546001600160a01b031690565b6001600160a01b031660005261016e602052604060002090565b905501166152a2565b50505050612f21615408916115106109db949695966113f0600661017254809a61536b6133a1836148fd565b6153f261538c866001600160a01b031660005261017d602052604060002090565b9761539789546148fd565b809955886153bd816115108a6001600160a01b031660005261017c602052604060002090565b946153d1610161546001600160a01b031690565b6101665465ffffffffffff16906153ea60fb5460ff1690565b948b89615e74565b50600582015501805461ff001916610200179055565b83615c65565b1561541557565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b6001600160a01b03811690811561551d576154f3906154986154928560005260676020526001600160a01b0360406000205416151590565b1561540e565b6154bb6154928560005260676020526001600160a01b0360406000205416151590565b6154d8816001600160a01b03166000526068602052604060002090565b60018154019055613fdb846000526067602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a4565b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b919082604091031261000e576020825192015161064181610798565b6106419054613c52565b6155918154613c52565b908161559b575050565b81601f600093116001146155ad575055565b818352602083206155c991601f0160051c8101906001016146cc565b8160208120915555565b6155dc81613c30565b506155e681613c30565b6000908282526069602052604082206001600160a01b0319908181541690556001600160a01b0382169081845260686020526040842060001981540190558484526067602052604084209081541690558383827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef82604051a4151580615832575b6156ad575b505061568a615685826000526097602052604060002090565b61557d565b6156915750565b6156a86109db916000526097602052604060002090565b615587565b6156b683614466565b806156c2575b5061566c565b80846156ec612f216156f594611510876001600160a01b031660005261017c602052604060002090565b938585526158e8565b6000805261017d60205261576761572d7f570683e83a763565db96d79020a21094d1eed3afde1dfb6258e82fee3838deb05b5461451f565b6000805261017c60205291615762837fdf42de3f6f21d051fad2ddf44fdf9c714eaaa0a956bf2970fe63b68205b0d06e611510565b6159b6565b73__$f048dbd5170c0ac319fa0222065b281d84$__803b1561582e5760405163093c769560e21b815261017f6004820152610180602482015260448101859052600060648201526084810192909252909190829060a49082905af48015615821575b61580e575b506000805261017d6020527f570683e83a763565db96d79020a21094d1eed3afde1dfb6258e82fee3838deb061580481546148fd565b90553880806156bc565b806117c061581b92610927565b386157ce565b6158296139c8565b6157c9565b8280fd5b5081615667565b906001600160a01b039081831680600052610163602052615863611321604060002060ff90541690565b6158b3575b61016554939260005b60ff908682821610156158a457838361588c611bfe8461271b565b161461589b5760010116615871565b50505050915050565b5050505091506109db9061487c565b6158c2614a8a610167546148fd565b6158e3614a61856001600160a01b0316600052610163602052604060002090565b615868565b90916001600160a01b0373__$f048dbd5170c0ac319fa0222065b281d84$__9216908160005261017c6020526040600020833b1561000e5760009360e492604051968795869463f97681bd60e01b8652600486015261017f6024860152610180604486015261017d6064860152608485015260a484015260c48301525af48015615981575b6159745750565b806117c06109db92610927565b6159896139c8565b61596d565b906000905b600382106159a057505050565b6001602082829351865501930191019091615993565b9061010060066109db936159f06159d485516001600160a01b031690565b82546001600160a01b0319166001600160a01b03909116178255565b615a7560018201615a0e6159d460208801516001600160a01b031690565b615a48615a24604088015165ffffffffffff1690565b825465ffffffffffff60a01b191660a09190911b65ffffffffffff60a01b16178255565b606086015165ffffffffffff1681546001600160d01b031660d09190911b6001600160d01b031916179055565b615a8660808501516002830161598e565b60a084015160058201550191615ab4615aa260c0830151151590565b849060ff801983541691151516179055565b615acb60e0820151615ac581612da2565b84615276565b015190615ad782612da2565b615074565b916001600160a01b0380841615159081615c59575b50615afb57505050565b615b0481614466565b80615b10575b50505050565b8082615b3a612f21615b4c94611510896001600160a01b031660005261017c602052604060002090565b6001600160a01b0386168152956158e8565b615b93615b70615727846001600160a01b031660005261017d602052604060002090565b9361576285611510866001600160a01b031660005261017c602052604060002090565b73__$f048dbd5170c0ac319fa0222065b281d84$__90813b1561000e5760405163093c769560e21b815261017f6004820152610180602482015260448101919091526001600160a01b03831660648201526084810193909352615c249290600090829060a49082905af48015615c4c575b615c39575b506001600160a01b031660005261017d602052604060002090565b615c2e81546148fd565b905538808080615b0a565b806117c0615c4692610927565b38615c09565b615c546139c8565b615c04565b90508216151538615af1565b906001600160a01b0391828251169160209384820151169365ffffffffffff9182604082015116926060820151169160c0608083015192015115159260405194855281850152604084016000905b60038210615cec57505050508160c09160a07fbbad5407299f3773930327d215f85a16617efbbddc1fe3902bd39ba46feacf26940152a4565b82806001928651815201940191019092615cb3565b91600092835b60ff90818116600381101561589b5790615d2360019287614678565b516001600160a01b038516885261016e602052615d5361345c8360408b209060ff16600052602052604060002090565b90550116615d07565b615e31615e4a93615e28899a9685986006966106419c9b9965ffffffffffff928391615da1834216948b906001600160a01b03166001600160a01b0319825416179055565b615dc560018b019687906001600160a01b03166001600160a01b0319825416179055565b855465ffffffffffff60a01b191660a085901b65ffffffffffff60a01b1617865515615e69578161ffff6103f05b16918215615e5c575b1604168092038111615e4f575b82546001600160d01b0316910160d01b6001600160d01b031916179055565b6002830161598e565b6000600582015501805462ffffff191662010000179055565b615ed2565b615e57614508565b615e09565b615e6461444f565b615dfc565b8161ffff6001615df3565b615eb9615e4a93615e28899a9685986006966106419c9b9965ffffffffffff928391615da1834216948b906001600160a01b03166001600160a01b0319825416179055565b6000600582015501805462ffffff191662010001179055565b91906040918251615ee2816108fe565b615f5f6001600160a01b0380941691828152600360208201858152878301898152606084019160018352615f3d6000998c8b5261017f6020528b8b2096511686906001600160a01b03166001600160a01b0319825416179055565b51600185015551600284015551151591019060ff801983541691151516179055565b82526101806020528282209082526020522055565b615f8560ff60005460081c16614b83565b60ff1960fb541660fb5556fea2646970667358221220360c37b3555ffee2d35af90944cfdcf95adfd66b14aa141b4b8911d57cb7f6c764736f6c634300080e0033",
  "libraries": {
    "StakingLib": "0xEf8029Eb53510d1ee3b53c7A322a7Bd1BD3a7C55"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getStakeEntry(uint256)": {
        "params": {
          "_stakeId": "Global stake ID"
        },
        "returns": {
          "_0": "The stake mapping entry"
        }
      },
      "getUserStakeId(address,uint256)": {
        "params": {
          "_user": "Owner address",
          "_userIndex": "Index in the user's personal mapping"
        },
        "returns": {
          "_0": "The stake ID"
        }
      },
      "getUserStakeIndex(uint256)": {
        "params": {
          "_stakeId": "Global stake ID"
        },
        "returns": {
          "_0": "The user index"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}"
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "IMPORTANT: When adding new storage variables, add them BELOW this comment and ABOVE the storage gap."
      },
      "_oldStakes": {
        "details": "DEPRECATED - Do not use. Kept for storage layout compatibility "
      },
      "activeStakesCount": {
        "details": "DEPRECATED - Do not use. Kept for storage layout compatibility "
      },
      "inflationRollOver": {
        "details": "DEPRECATED - Do not use. Kept for storage layout compatibility "
      },
      "lastEscrowRewardByToken_Duration": {
        "details": "DEPRECATED - Do not use. Kept for storage layout compatibility "
      },
      "poolRollOver": {
        "details": "DEPRECATED - Do not use. Kept for storage layout compatibility "
      },
      "stakes": {
        "details": "DEPRECATED - Do not use. Kept for storage layout compatibility "
      },
      "userToStakeTokenToLastEscrowId": {
        "details": "DEPRECATED - Do not use. Kept for storage layout compatibility "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getStakeEntry(uint256)": {
        "notice": "Gets stake entry by ID"
      },
      "getUserStakeId(address,uint256)": {
        "notice": "Gets stake ID by user and index"
      },
      "getUserStakeIndex(uint256)": {
        "notice": "Gets user index by stake ID"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 533,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 536,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2503,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2887,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 862,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 864,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 868,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 872,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 876,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 882,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1784,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 1939,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2095,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "_owner",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 131,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8483,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "testing",
        "offset": 0,
        "slot": "251",
        "type": "t_bool"
      },
      {
        "astId": 5268,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "hasRole",
        "offset": 0,
        "slot": "252",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))"
      },
      {
        "astId": 515,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 831,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "__gap",
        "offset": 0,
        "slot": "303",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5473,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "nend",
        "offset": 0,
        "slot": "353",
        "type": "t_address"
      },
      {
        "astId": 5476,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "lendingPool",
        "offset": 0,
        "slot": "354",
        "type": "t_contract(Vault)9142"
      },
      {
        "astId": 5480,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "activeStakeTokens",
        "offset": 0,
        "slot": "355",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5485,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "inflationRollOver",
        "offset": 0,
        "slot": "356",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5488,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "stakeTokens",
        "offset": 0,
        "slot": "357",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5490,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "escrowLockPeriod",
        "offset": 0,
        "slot": "358",
        "type": "t_uint48"
      },
      {
        "astId": 5492,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "stakeTokenCount",
        "offset": 0,
        "slot": "359",
        "type": "t_uint256"
      },
      {
        "astId": 5495,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "activeStakesCount",
        "offset": 0,
        "slot": "360",
        "type": "t_uint256"
      },
      {
        "astId": 5499,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "ifpTokenToAmount",
        "offset": 0,
        "slot": "361",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5506,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "userToStakeTokenToLastEscrowId",
        "offset": 0,
        "slot": "362",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5513,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "lastEscrowRewardByToken_Duration",
        "offset": 0,
        "slot": "363",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 5518,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "_oldStakes",
        "offset": 0,
        "slot": "364",
        "type": "t_array(t_struct(Stake)8381_storage)dyn_storage"
      },
      {
        "astId": 5522,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "stakeDurations",
        "offset": 0,
        "slot": "365",
        "type": "t_array(t_uint48)3_storage"
      },
      {
        "astId": 5528,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "totalStakedByToken_Duration",
        "offset": 0,
        "slot": "366",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 5532,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "rewardAllocations",
        "offset": 0,
        "slot": "367",
        "type": "t_array(t_uint8)3_storage"
      },
      {
        "astId": 5535,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "poolRollOver",
        "offset": 0,
        "slot": "368",
        "type": "t_uint256"
      },
      {
        "astId": 5541,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "stakes",
        "offset": 0,
        "slot": "369",
        "type": "t_mapping(t_uint256,t_struct(Stake)8381_storage)"
      },
      {
        "astId": 5543,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "nextStakeId",
        "offset": 0,
        "slot": "370",
        "type": "t_uint256"
      },
      {
        "astId": 5548,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "_currentPeriodIdx",
        "offset": 0,
        "slot": "371",
        "type": "t_uint256"
      },
      {
        "astId": 5553,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "recentPeriods",
        "offset": 0,
        "slot": "372",
        "type": "t_array(t_struct(RewardPeriod)8349_storage)2_storage"
      },
      {
        "astId": 5560,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "userStakesById",
        "offset": 0,
        "slot": "380",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Stake)8381_storage))"
      },
      {
        "astId": 5564,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "userStakesCount",
        "offset": 0,
        "slot": "381",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5572,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "_userClaimedForPeriod",
        "offset": 0,
        "slot": "382",
        "type": "t_mapping(t_address,t_mapping(t_uint64,t_mapping(t_address,t_bool)))"
      },
      {
        "astId": 5577,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "_stakeEntries",
        "offset": 0,
        "slot": "383",
        "type": "t_mapping(t_uint256,t_struct(StakeMappingEntry)8358_storage)"
      },
      {
        "astId": 5583,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "_userIndexToId",
        "offset": 0,
        "slot": "384",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 5585,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "stakesDeprecated",
        "offset": 0,
        "slot": "385",
        "type": "t_bool"
      },
      {
        "astId": 5590,
        "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
        "label": "__gap",
        "offset": 0,
        "slot": "386",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RewardPeriod)8349_storage)2_storage": {
        "base": "t_struct(RewardPeriod)8349_storage",
        "encoding": "inplace",
        "label": "struct ILendingPoolStakingV2.RewardPeriod[2]",
        "numberOfBytes": "256"
      },
      "t_array(t_struct(Stake)8381_storage)dyn_storage": {
        "base": "t_struct(Stake)8381_storage",
        "encoding": "dynamic_array",
        "label": "struct ILendingPoolStakingV2.Stake[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint48)3_storage": {
        "base": "t_uint48",
        "encoding": "inplace",
        "label": "uint48[3]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)3_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[3]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Vault)9142": {
        "encoding": "inplace",
        "label": "contract Vault",
        "numberOfBytes": "20"
      },
      "t_enum(EscrowStatus)8330": {
        "encoding": "inplace",
        "label": "enum ILendingPoolStakingV2.EscrowStatus",
        "numberOfBytes": "1"
      },
      "t_enum(StakeStatus)8326": {
        "encoding": "inplace",
        "label": "enum ILendingPoolStakingV2.StakeStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Stake)8381_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct ILendingPoolStakingV2.Stake))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Stake)8381_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint64,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint64 => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint256)"
      },
      "t_mapping(t_address,t_struct(IFPRewardPeriod)8335_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ILendingPoolStakingV2.IFPRewardPeriod)",
        "numberOfBytes": "32",
        "value": "t_struct(IFPRewardPeriod)8335_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Stake)8381_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ILendingPoolStakingV2.Stake)",
        "numberOfBytes": "32",
        "value": "t_struct(Stake)8381_storage"
      },
      "t_mapping(t_uint256,t_struct(StakeMappingEntry)8358_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ILendingPoolStakingV2.StakeMappingEntry)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeMappingEntry)8358_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(IFPRewardPeriod)8335_storage": {
        "encoding": "inplace",
        "label": "struct ILendingPoolStakingV2.IFPRewardPeriod",
        "members": [
          {
            "astId": 8332,
            "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
            "label": "rewardToDistribute",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8334,
            "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
            "label": "rewardClaimed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RewardPeriod)8349_storage": {
        "encoding": "inplace",
        "label": "struct ILendingPoolStakingV2.RewardPeriod",
        "members": [
          {
            "astId": 8337,
            "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
            "label": "periodId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 8339,
            "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
            "label": "startTime",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 8341,
            "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
            "label": "rewardsToDistribute",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8343,
            "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
            "label": "rewardsStaked",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8348,
            "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
            "label": "ifpRewardPeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(IFPRewardPeriod)8335_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Stake)8381_storage": {
        "encoding": "inplace",
        "label": "struct ILendingPoolStakingV2.Stake",
        "members": [
          {
            "astId": 8360,
            "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
            "label": "staker",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8362,
            "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 8364,
            "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
            "label": "start",
            "offset": 20,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 8366,
            "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
            "label": "end",
            "offset": 26,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 8370,
            "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
            "label": "amountsPerDuration",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)3_storage"
          },
          {
            "astId": 8372,
            "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
            "label": "rewardAllocated",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8374,
            "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
            "label": "isEscrow",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 8377,
            "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
            "label": "escrowStatus",
            "offset": 1,
            "slot": "6",
            "type": "t_enum(EscrowStatus)8330"
          },
          {
            "astId": 8380,
            "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
            "label": "stakeStatus",
            "offset": 2,
            "slot": "6",
            "type": "t_enum(StakeStatus)8326"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(StakeMappingEntry)8358_storage": {
        "encoding": "inplace",
        "label": "struct ILendingPoolStakingV2.StakeMappingEntry",
        "members": [
          {
            "astId": 8351,
            "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8353,
            "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
            "label": "userIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8355,
            "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
            "label": "stakeId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8357,
            "contract": "contracts/staking/LendingPoolStakingV2.sol:LendingPoolStakingV2",
            "label": "exists",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}