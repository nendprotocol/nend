{
  "language": "Solidity",
  "sources": {
    "contracts/PeriFiAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport \"./access/MWOwnable.sol\";\r\n\r\ncontract PeriFiAdmin is MWOwnable {\r\n    uint256 public maximumLoanDuration = 53 weeks;\r\n    uint256 public maximumNumberOfActiveLoans = 100;\r\n\r\n    uint256 public poolCommissionIFPUpTo20 = 4000;\r\n    uint256 public poolCommissionIFPUpTo30 = 4500;\r\n    uint256 public poolCommissionIFPUpTo40 = 5000;\r\n    uint256 public poolCommissionIFPUpTo50 = 5000;\r\n    uint256 public poolCommissionIFPUpTo60 = 5500;\r\n    uint256 public poolCommissionIFPUpTo70 = 6000;\r\n    uint256 public poolCommissionIFPUpTo80 = 7000;\r\n    uint256 public poolCommissionIFPUpTo90 = 8000;\r\n    uint256 public poolCommissionIFPUpTo100 = 9000;\r\n\r\n    uint256 public ivCommissionForIFP = 500; // 5%\r\n    uint256 public commissionForIFL = 500;\r\n    \r\n    // uint256 public loanCommissionInBasisPoints = 500; // 5%\r\n    uint256 public preLiquidationDuration = 24 hours;\r\n    uint256 public claimCollateralDuration = 24 hours;\r\n    uint256 public liquidateProtectionDuration = 48 hours;\r\n    \r\n    uint256 public liquidationThresholdInBasisPoints = 8000; // 80%\r\n    \r\n    function updateMaximumLoanDuration(uint256 _newMaximumLoanDuration) external onlyOwner {\r\n        require(_newMaximumLoanDuration <= uint256(~uint32(0)), 'loan duration cannot exceed space alotted in struct');\r\n        maximumLoanDuration = _newMaximumLoanDuration;\r\n    }\r\n\r\n    function updateMaximumNumberOfActiveLoans(uint256 _newMaximumNumberOfActiveLoans) external onlyOwner {\r\n        maximumNumberOfActiveLoans = _newMaximumNumberOfActiveLoans;\r\n    }\r\n    function updatePoolCommission(uint256 leveragePercent, uint256 poolCommissionInBasisPoint) external onlyOwner {\r\n        require(leveragePercent % 10 == 0, \"leveragePercent must be multiples of 10\");\r\n        require(leveragePercent >= 20, \"leveragePercent must be bigger than or equal to 20\");\r\n        require(leveragePercent <= 100, \"leveragePercent must be smaller than or equal to 100\");\r\n\r\n        if (leveragePercent == 20){\r\n            poolCommissionIFPUpTo20 = poolCommissionInBasisPoint;\r\n        } else if (leveragePercent == 30){\r\n            poolCommissionIFPUpTo30 = poolCommissionInBasisPoint;\r\n        } else if (leveragePercent == 40){\r\n            poolCommissionIFPUpTo40 = poolCommissionInBasisPoint;\r\n        } else if (leveragePercent == 50){\r\n            poolCommissionIFPUpTo50 = poolCommissionInBasisPoint;\r\n        } else if (leveragePercent == 60){\r\n            poolCommissionIFPUpTo60 = poolCommissionInBasisPoint;\r\n        } else if (leveragePercent == 70){\r\n            poolCommissionIFPUpTo70 = poolCommissionInBasisPoint;\r\n        } else if (leveragePercent == 80){\r\n            poolCommissionIFPUpTo80 = poolCommissionInBasisPoint;\r\n        } else if (leveragePercent == 90){\r\n            poolCommissionIFPUpTo90 = poolCommissionInBasisPoint;\r\n        } else if (leveragePercent == 100){\r\n            poolCommissionIFPUpTo100 = poolCommissionInBasisPoint;\r\n        }\r\n    }\r\n\r\n\r\n    function updateIVCommissionForIFP(uint256 _newIVCommissionForIFP) external onlyOwner {\r\n        require(_newIVCommissionForIFP <= 10000, 'By definition, basis points cannot exceed 10000');\r\n        ivCommissionForIFP = _newIVCommissionForIFP;\r\n        // emit InterestForIVUpdated(_newInterestForIVInBasisPoints);\r\n    }\r\n\r\n    function updateCommissionForIFL(uint256 _newCommissionForIFL) external onlyOwner {\r\n        require(_newCommissionForIFL <= 10000, 'By definition, basis points cannot exceed 10000');\r\n        commissionForIFL = _newCommissionForIFL;\r\n        // emit InterestForIVUpdated(_newInterestForIVInBasisPoints);\r\n    }\r\n    \r\n\r\n    function updateLiquidateProtectionDuration(uint256 _newLiquidateProtectionDuration) external onlyOwner {\r\n        liquidateProtectionDuration = _newLiquidateProtectionDuration;\r\n    }\r\n\r\n    function updatePreLiquidationDuration(uint256 _newPreLiquidationDuration) external onlyOwner {\r\n        preLiquidationDuration = _newPreLiquidationDuration;\r\n    }\r\n    function updateClaimCollateralDuration(uint256 _newClaimCollateralDuration) external onlyOwner {\r\n        claimCollateralDuration = _newClaimCollateralDuration;\r\n    }\r\n\r\n    function updateLiquidationThreshold(uint256 _newLiquidationThresholdInBasisPoints) external onlyOwner {\r\n        require(_newLiquidationThresholdInBasisPoints <= 10000, 'By definition, basis points cannot exceed 10000');\r\n        liquidationThresholdInBasisPoints = _newLiquidationThresholdInBasisPoints;\r\n        // emit InterestForIVUpdated(_newLiquidationThresholdInBasisPoints);\r\n    }\r\n\r\n    // function updateloanCommissionInBasisPoints(uint256 _newLoanCommissionInBasisPoints) external onlyOwner {\r\n    //     require(_newLoanCommissionInBasisPoints <= 10000, 'By definition, basis points cannot exceed 10000');\r\n    //     loanCommissionInBasisPoints = _newLoanCommissionInBasisPoints;\r\n    //     // emit LoanCommissionUpdated(_newLoanCommissionInBasisPoints);\r\n    // }\r\n}\r\n    // event InterestForIVUpdated(\r\n    //     uint256 basisPointValue\r\n    // );\r\n\r\n    // event LoanCommissionUpdated(\r\n    //     uint256 basisPointValue\r\n    // );\r\n\r\n    // event LiquidationThresholdUpdated(\r\n    //     uint256 basisPointValue\r\n    // );\r\n\r\n    // event ProtectionDurationUpdated(\r\n    //     uint256 durationInSeconds\r\n    // );\r\n\r\n    // event LiquidateDurationUpdated(\r\n    //     uint256 durationInSeconds\r\n    // );\r\n\r\n    // event ERC20WhiteListConfigured(\r\n    //     address erc20,\r\n    //     bool isWhitelisted\r\n    // );\r\n\r\n    // event CollectionLeverageConfigured(\r\n    //     address collection,\r\n    //     bool isAllowed\r\n    // );\r\n\r\n    // event CollectionHealthFactorConfigured(\r\n    //     address collection,\r\n    //     bool isTrakcked\r\n    // );\r\n\r\n    // @notice A mapping from from an ERC20 currency address to whether that\r\n    //         currency is whitelisted to be used by this contract.\r\n    // mapping (address => bool) public erc20CurrencyIsWhitelisted;\r\n\r\n    // mapping (address => bool) public leverageAvailableCollections;\r\n\r\n    // mapping (address => bool) public healthFactorEnabledCollection;\r\n    // @notice The percentage of interest earned by lenders on this platform\r\n    //         that is taken by the contract admin's as a fee, measured in\r\n    //         basis points (hundreths of a percent).\r\n    \r\n    // function whitelistERC20Currency(address _erc20Currency, bool _setAsWhitelisted) external onlyOwner {\r\n    //     erc20CurrencyIsWhitelisted[_erc20Currency] = _setAsWhitelisted;\r\n    //     emit ERC20WhiteListConfigured(_erc20Currency, _setAsWhitelisted);\r\n    // }\r\n\r\n    // function setLeverageOnCollection(address collection, bool allowed) external onlyOwner {\r\n    //     leverageAvailableCollections[collection] = allowed;\r\n    //     emit CollectionLeverageConfigured(collection, allowed);\r\n    // }\r\n\r\n    // function setHealthFactorOnCollection(address collection, bool tracked) external onlyOwner {\r\n    //     healthFactorEnabledCollection[collection] = tracked;\r\n    //     emit CollectionHealthFactorConfigured(collection, tracked);\r\n    // }\r\n"
    },
    "contracts/access/MWOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract MWOwnable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        // _transferOwnership(0x7E8aE5C72eCA86946b695dCc211863D9721A0961);  // Nend Mainnet Main Wallet\r\n        _transferOwnership(0x4a580D71c0F73202C51C58147aA7c7E09245b10A);  // Nend Turbo Main Wallet\r\n        // _transferOwnership(0x2F358B80eD2d296C09560d2b9F70a7f81d57e352); // Kong Wallet\r\n        // _transferOwnership(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4); // Remix test wallet\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier \r\n    onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "debug": {
      "debugInfo": []
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}