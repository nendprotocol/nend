{
  "address": "0x1f35A906b5C6c72077eEB36895D966204E878D6b",
  "abi": [
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "details",
          "type": "string"
        }
      ],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ILendingPoolStaking.EscrowStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "EscrowStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "InflationRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "NonInflationRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ILendingPoolStaking.StakeStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "StakeStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "start",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "end",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint256[3]",
          "name": "amountsPerDuration",
          "type": "uint256[3]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isEscrow",
          "type": "bool"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "__MWOwnable_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__Testing_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activeStakeTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakeToken",
          "type": "address"
        }
      ],
      "name": "addStakeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "authorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_durationId",
          "type": "uint8"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inflationReward",
          "type": "uint256"
        }
      ],
      "name": "distributeInflationRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeNonInflationRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrowLockPeriod",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasPendingNonInflationRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "inflationRollOver",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nend",
          "type": "address"
        },
        {
          "internalType": "contract Vault",
          "name": "_lendingPool",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "issueEAB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "lastEscrowRewardByToken_Duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingPool",
      "outputs": [
        {
          "internalType": "contract Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nend",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ongoingStakeCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolRollOver",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakeToken",
          "type": "address"
        }
      ],
      "name": "removeStakeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardAllocations",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[3]",
          "name": "_rewardAllocations",
          "type": "uint8[3]"
        }
      ],
      "name": "setRewardAllocations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_testing",
          "type": "bool"
        }
      ],
      "name": "setTesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakeDurations",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "stakeEscrowedReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakeTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "start",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "end",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "rewardAllocated",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isEscrow",
          "type": "bool"
        },
        {
          "internalType": "enum ILendingPoolStaking.EscrowStatus",
          "name": "escrowStatus",
          "type": "uint8"
        },
        {
          "internalType": "enum ILendingPoolStaking.StakeStatus",
          "name": "stakeStatus",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "totalStakedByToken_Duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeca368320a546f51ab23d85059b5430825bf0a30728bda4d46b2c0298f349f64",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x7E8aE5C72eCA86946b695dCc211863D9721A0961",
    "contractAddress": null,
    "transactionIndex": 58,
    "gasUsed": "4877189",
    "logsBloom": "0x
    "blockHash": "0xeeba0f06404091906e2e69d9beda1a39548caae8406d84dfdf242cdd4aa9cfc7",
    "transactionHash": "0xeca368320a546f51ab23d85059b5430825bf0a30728bda4d46b2c0298f349f64",
    "logs": [
      {
        "transactionIndex": 58,
        "blockNumber": 37024703,
        "transactionHash": "0xeca368320a546f51ab23d85059b5430825bf0a30728bda4d46b2c0298f349f64",
        "address": "0x1f35A906b5C6c72077eEB36895D966204E878D6b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007e8ae5c72eca86946b695dcc211863d9721a0961"
        ],
        "data": "0x",
        "logIndex": 185,
        "blockHash": "0xeeba0f06404091906e2e69d9beda1a39548caae8406d84dfdf242cdd4aa9cfc7"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 37024703,
        "transactionHash": "0xeca368320a546f51ab23d85059b5430825bf0a30728bda4d46b2c0298f349f64",
        "address": "0x1f35A906b5C6c72077eEB36895D966204E878D6b",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 186,
        "blockHash": "0xeeba0f06404091906e2e69d9beda1a39548caae8406d84dfdf242cdd4aa9cfc7"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 37024703,
        "transactionHash": "0xeca368320a546f51ab23d85059b5430825bf0a30728bda4d46b2c0298f349f64",
        "address": "0x1f35A906b5C6c72077eEB36895D966204E878D6b",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 187,
        "blockHash": "0xeeba0f06404091906e2e69d9beda1a39548caae8406d84dfdf242cdd4aa9cfc7"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 37024703,
        "transactionHash": "0xeca368320a546f51ab23d85059b5430825bf0a30728bda4d46b2c0298f349f64",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007e8ae5c72eca86946b695dcc211863d9721a0961",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x000000000000000000000000000000000000000000000000026ec2f51850aa100000000000000000000000000000000000000000000000006e2a58d5cc16594d0000000000000000000000000000000000000000000005152767f4a06c3d2b690000000000000000000000000000000000000000000000006bbb95e0b3c5af3d00000000000000000000000000000000000000000000051529d6b795848dd579",
        "logIndex": 188,
        "blockHash": "0xeeba0f06404091906e2e69d9beda1a39548caae8406d84dfdf242cdd4aa9cfc7"
      }
    ],
    "blockNumber": 37024703,
    "cumulativeGasUsed": "12185952",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5f4e724599e3a7403e26c4f96c760b8c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ILendingPoolStaking.EscrowStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"EscrowStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InflationRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NonInflationRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ILendingPoolStaking.StakeStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StakeStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"end\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"amountsPerDuration\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEscrow\",\"type\":\"bool\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__MWOwnable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__Testing_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeStakeTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"addStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_durationId\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inflationReward\",\"type\":\"uint256\"}],\"name\":\"distributeInflationRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeNonInflationRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrowLockPeriod\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasPendingNonInflationRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inflationRollOver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nend\",\"type\":\"address\"},{\"internalType\":\"contract Vault\",\"name\":\"_lendingPool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"issueEAB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lastEscrowRewardByToken_Duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ongoingStakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRollOver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"removeStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardAllocations\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"_rewardAllocations\",\"type\":\"uint8[3]\"}],\"name\":\"setRewardAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_testing\",\"type\":\"bool\"}],\"name\":\"setTesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeDurations\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"stakeEscrowedReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"end\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"rewardAllocated\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEscrow\",\"type\":\"bool\"},{\"internalType\":\"enum ILendingPoolStaking.EscrowStatus\",\"name\":\"escrowStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum ILendingPoolStaking.StakeStatus\",\"name\":\"stakeStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"totalStakedByToken_Duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/LendingPoolStaking.sol\":\"LendingPoolStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x2a6a0b9fd2d316dcb4141159a9d13be92654066d6c0ae92757ed908ecdfecff0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, ERC721Upgradeable {\\n    function __ERC721URIStorage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xbd5c6f8268a1d477f6a746ebedaf7fbcf412186f0c1c54ee104547cfb5e18edd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/access/MWOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract MWOwnable is Initializable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() initializer {\\r\\n        _transferOwnership(0x7E8aE5C72eCA86946b695dCc211863D9721A0961);\\r\\n    }\\r\\n\\r\\n    function __MWOwnable_init() public virtual onlyInitializing {\\r\\n        _transferOwnership(0x7E8aE5C72eCA86946b695dCc211863D9721A0961);  // Nend Mainnet Main Wallet\\r\\n        // _transferOwnership(0x4a580D71c0F73202C51C58147aA7c7E09245b10A); // Nend Testnet/Turbo Main Wallet\\r\\n        // _transferOwnership(0x2F358B80eD2d296C09560d2b9F70a7f81d57e352); // Kong Wallet\\r\\n        // _transferOwnership(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4); // Remix test wallet\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x7ef8a1586453a8f1fa99a90c7a97d141e3d1e584fe11b625244c19a22dfc179f\",\"license\":\"MIT\"},\"contracts/access/SimpleRoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract SimpleRoleAccess is MWOwnable {\\r\\n    mapping(address => mapping(string => bool)) public hasRole;\\r\\n\\r\\n    function authorize(\\r\\n        address operator,\\r\\n        string memory role,\\r\\n        bool authorized\\r\\n    ) public onlyOwner {\\r\\n        hasRole[operator][role] = authorized;\\r\\n    }\\r\\n\\r\\n    modifier onlyRole(string memory _role) virtual {\\r\\n        require(\\r\\n            msg.sender == owner() || hasRole[msg.sender][_role],\\r\\n            \\\"Not authorized\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasAllRoles(string[] memory _roles) virtual {\\r\\n        for (uint256 i = 0; i < _roles.length; i++) {\\r\\n            require(hasRole[msg.sender][_roles[i]], \\\"Not authorized\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasSomeRoles(string[] memory _roles) virtual {\\r\\n        bool _hasRole;\\r\\n        for (uint256 i = 0; i < _roles.length; i++) {\\r\\n            if (hasRole[msg.sender][_roles[i]]) {\\r\\n                _hasRole = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(_hasRole, \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcda400188b817a7c5311ef3c5de33e0d404621eea1f3e2b446c0c666981a8f86\",\"license\":\"UNLICENSED\"},\"contracts/helpers/SignatureHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SignatureHelper {\\r\\n    function recoverSigner(bytes32 messageHash, bytes memory signature)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address)\\r\\n    {\\r\\n        (bytes32 r, bytes32 s, uint8 v) = splitSig(signature);\\r\\n\\r\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\r\\n        bytes32 prefixedHashMessage = keccak256(\\r\\n            abi.encodePacked(prefix, messageHash)\\r\\n        );\\r\\n\\r\\n        return ecrecover(prefixedHashMessage, v, r, s);\\r\\n    }\\r\\n\\r\\n    function splitSig(bytes memory signature)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            bytes32 r,\\r\\n            bytes32 s,\\r\\n            uint8 v\\r\\n        )\\r\\n    {\\r\\n        assembly {\\r\\n            r := mload(add(signature, 32))\\r\\n            s := mload(add(signature, 64))\\r\\n            v := and(mload(add(signature, 65)), 255)\\r\\n        }\\r\\n        if (v < 27) v += 27;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2aad6f30ae6e31239a36a51948c87c8d2e08a4f437d5f6c1a1e0029fee947cd8\",\"license\":\"UNLICENSED\"},\"contracts/staking/LendingPoolStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\r\\nimport \\\"../vault/Vault.sol\\\";\\r\\nimport \\\"../vault/BalanceNames.sol\\\";\\r\\nimport \\\"./interfaces/ILendingPoolStaking.sol\\\";\\r\\nimport \\\"../test/Testing.sol\\\";\\r\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\n\\r\\ncontract LendingPoolStaking is\\r\\n    ILendingPoolStaking,\\r\\n    ERC721URIStorageUpgradeable,\\r\\n    BalanceNames,\\r\\n    Testing,\\r\\n    SimpleRoleAccess,\\r\\n    UUPSUpgradeable\\r\\n{\\r\\n    address public nend;\\r\\n    Vault public lendingPool;\\r\\n    mapping(address => bool) public activeStakeTokens;\\r\\n    mapping(address => uint256) public inflationRollOver;\\r\\n    address[] public stakeTokens;\\r\\n    uint48 public escrowLockPeriod;\\r\\n    // Active stake token count\\r\\n    uint256 public stakeTokenCount;\\r\\n    // Active stake count\\r\\n    uint256 public ongoingStakeCount;\\r\\n    mapping(address => uint256) internal ifpTokenToAmount;\\r\\n    // User address to this week's escrowed reward stake id\\r\\n    mapping(address => mapping(address => uint256)) userToStakeTokenToLastEscrowId;\\r\\n    mapping(address => mapping(uint8 => uint256))\\r\\n        public lastEscrowRewardByToken_Duration;\\r\\n    Stake[] public stakes;\\r\\n    uint48[3] public stakeDurations;\\r\\n    // Token address => duration id => amount\\r\\n    mapping(address => mapping(uint8 => uint256))\\r\\n        public totalStakedByToken_Duration;\\r\\n    uint8[3] public rewardAllocations;\\r\\n    uint256 public poolRollOver;\\r\\n\\r\\n    function setRewardAllocations(\\r\\n        uint8[3] memory _rewardAllocations\\r\\n    ) external virtual onlyRole(\\\"admin\\\") {\\r\\n        if (\\r\\n            _rewardAllocations[0] +\\r\\n                _rewardAllocations[1] +\\r\\n                _rewardAllocations[2] !=\\r\\n            100\\r\\n        ) {\\r\\n            revert InvalidArgument(\\\"Must sum up to 100\\\");\\r\\n        }\\r\\n        rewardAllocations = _rewardAllocations;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address _nend,\\r\\n        Vault _lendingPool\\r\\n    ) public virtual initializer {\\r\\n        nend = _nend;\\r\\n        lendingPool = _lendingPool;\\r\\n        // Add native token\\r\\n        activeStakeTokens[address(0)] = true;\\r\\n        stakeTokens.push(address(0));\\r\\n        stakeTokenCount++;\\r\\n\\r\\n        // Add nend\\r\\n        activeStakeTokens[_nend] = true;\\r\\n        stakeTokens.push(_nend);\\r\\n        stakeTokenCount++;\\r\\n\\r\\n        escrowLockPeriod = 30 weeks;\\r\\n        stakeDurations = [1 weeks, 4 weeks, 12 weeks];\\r\\n        rewardAllocations = [20, 30, 50];\\r\\n\\r\\n        __ERC721_init(\\\"Escrowed Asset Bond\\\", \\\"EAB\\\");\\r\\n        __MWOwnable_init();\\r\\n        __Testing_init();\\r\\n    }\\r\\n\\r\\n    function deposit(\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        uint8 _durationId\\r\\n    ) external payable virtual override {\\r\\n        if (_amount == 0) {\\r\\n            revert InvalidArgument(\\\"Amount cannot be zero\\\");\\r\\n        }\\r\\n        if (!activeStakeTokens[_token]) {\\r\\n            revert InvalidArgument(\\\"Invalid stake token\\\");\\r\\n        }\\r\\n\\r\\n        bool isNativeCoin = _token == address(0);\\r\\n\\r\\n        if (!isNativeCoin && IERC20(_token).balanceOf(msg.sender) < _amount) {\\r\\n            revert InsufficientBalance();\\r\\n        }\\r\\n\\r\\n        if (isNativeCoin) {\\r\\n            if (msg.value != _amount) {\\r\\n                revert InvalidArgument(\\\"Incorrect native coin stake amount\\\");\\r\\n            }\\r\\n            payable(address(lendingPool)).transfer(_amount);\\r\\n        } else {\\r\\n            IERC20(_token).transferFrom(\\r\\n                msg.sender,\\r\\n                address(lendingPool),\\r\\n                _amount\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256[3] memory _amounts;\\r\\n        _amounts[_durationId] = _amount;\\r\\n\\r\\n        stakes.push(\\r\\n            Stake(\\r\\n                msg.sender,\\r\\n                _token,\\r\\n                uint48(block.timestamp),\\r\\n                uint48(block.timestamp) +\\r\\n                    (stakeDurations[_durationId] / (testing ? 1008 : 1)),\\r\\n                _amounts,\\r\\n                0,\\r\\n                false,\\r\\n                EscrowStatus.DEFAULT,\\r\\n                StakeStatus.STAKED\\r\\n            )\\r\\n        );\\r\\n\\r\\n        totalStakedByToken_Duration[_token][_durationId] += _amount;\\r\\n        ongoingStakeCount++;\\r\\n\\r\\n        _emitStaked(stakes.length);\\r\\n    }\\r\\n\\r\\n    function stakeEscrowedReward(uint256 _stakeId) external virtual override {\\r\\n        Stake storage _stake = stakes[_stakeId - 1];\\r\\n        if (_stake.staker != msg.sender) {\\r\\n            revert Unauthorized();\\r\\n        }\\r\\n\\r\\n        // Stake is not escrow or is already staked\\r\\n        if (!_stake.isEscrow || _stake.stakeStatus != StakeStatus.DEFAULT) {\\r\\n            revert InvalidState();\\r\\n        }\\r\\n\\r\\n        _stake.stakeStatus = StakeStatus.STAKED;\\r\\n        ongoingStakeCount++;\\r\\n\\r\\n        for (uint8 i = 0; i < 3; i++) {\\r\\n            totalStakedByToken_Duration[nend][i] += _stake.amountsPerDuration[\\r\\n                i\\r\\n            ];\\r\\n        }\\r\\n\\r\\n        emit StakeStatusChanged(_stakeId, _stake.stakeStatus);\\r\\n    }\\r\\n\\r\\n    function _compoundEscrow(\\r\\n        uint256 _stakeId,\\r\\n        uint256 _inflationReward\\r\\n    ) internal virtual {\\r\\n        Stake storage _stake = stakes[_stakeId - 1];\\r\\n        uint256 lastEscrowId = userToStakeTokenToLastEscrowId[_stake.staker][\\r\\n            _stake.isEscrow ? nend : _stake.token\\r\\n        ];\\r\\n        if (\\r\\n            lastEscrowId == 0 ||\\r\\n            stakes[lastEscrowId - 1].start != uint48(block.timestamp)\\r\\n        ) {\\r\\n            uint256[3] memory _amounts;\\r\\n            stakes.push(\\r\\n                Stake(\\r\\n                    _stake.staker,\\r\\n                    _stake.isEscrow ? nend : _stake.token,\\r\\n                    uint48(block.timestamp),\\r\\n                    uint48(block.timestamp) +\\r\\n                        escrowLockPeriod /\\r\\n                        (testing ? 1008 : 1),\\r\\n                    _amounts,\\r\\n                    0,\\r\\n                    true,\\r\\n                    EscrowStatus.DEFAULT,\\r\\n                    StakeStatus.DEFAULT\\r\\n                )\\r\\n            );\\r\\n\\r\\n            lastEscrowId = userToStakeTokenToLastEscrowId[_stake.staker][\\r\\n                _stake.isEscrow ? nend : _stake.token\\r\\n            ] = stakes.length;\\r\\n        }\\r\\n\\r\\n        Stake storage _escrow = stakes[lastEscrowId - 1];\\r\\n\\r\\n        for (uint8 i = 0; i < 3; i++) {\\r\\n            uint256 _reward = _calculateReward(\\r\\n                _stake.isEscrow ? nend : _stake.token,\\r\\n                i,\\r\\n                _stake.amountsPerDuration[i],\\r\\n                _inflationReward /\\r\\n                    stakeTokenCount +\\r\\n                    inflationRollOver[_stake.isEscrow ? nend : _stake.token]\\r\\n            );\\r\\n            _escrow.amountsPerDuration[i] += _reward;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _accrueNonInflationReward(\\r\\n        uint256 _stakeId,\\r\\n        uint256 _nonInflationReward\\r\\n    ) internal virtual {\\r\\n        Stake storage _stake = stakes[_stakeId - 1];\\r\\n\\r\\n        for (uint8 i = 0; i < 3; i++) {\\r\\n            uint256 _reward = _calculateReward(\\r\\n                _stake.isEscrow ? nend : _stake.token,\\r\\n                i,\\r\\n                _stake.amountsPerDuration[i],\\r\\n                _nonInflationReward\\r\\n            );\\r\\n            _stake.rewardAllocated += _reward;\\r\\n\\r\\n            lendingPool.namedBalanceSpend(\\r\\n                interestForPoolBalanceName,\\r\\n                _stake.isEscrow ? nend : _stake.token,\\r\\n                _reward\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function distributeInflationRewards(\\r\\n        uint256 _inflationReward\\r\\n    ) external virtual override {\\r\\n        if (msg.sender != nend) {\\r\\n            revert Unauthorized();\\r\\n        }\\r\\n\\r\\n        uint256 _rolledOverInflationReward = _inflationReward + poolRollOver;\\r\\n        poolRollOver = 0;\\r\\n\\r\\n        // Deal with list being modified during loop\\r\\n        uint256 _stakeCount = stakes.length;\\r\\n\\r\\n        for (uint256 i = 0; i < _stakeCount; i++) {\\r\\n            Stake storage _stake = stakes[i];\\r\\n\\r\\n            if (_stake.stakeStatus != StakeStatus.STAKED) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            _compoundEscrow(i + 1, _rolledOverInflationReward);\\r\\n        }\\r\\n\\r\\n        for (uint256 i = _stakeCount; i < stakes.length; i++) {\\r\\n            _emitStaked(i + 1);\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < stakeTokens.length; i++) {\\r\\n            address tokenAddr = stakeTokens[i];\\r\\n            uint256 poolReward = _rolledOverInflationReward /\\r\\n                stakeTokenCount +\\r\\n                inflationRollOver[tokenAddr];\\r\\n            inflationRollOver[tokenAddr] = 0;\\r\\n            uint8 predefinedRollOverCount = 0;\\r\\n            for (uint8 j = 0; j < 3; j++) {\\r\\n                uint256 predefinedDurationReward = (poolReward *\\r\\n                    rewardAllocations[j]) / 100;\\r\\n                if (totalStakedByToken_Duration[tokenAddr][j] == 0) {\\r\\n                    inflationRollOver[tokenAddr] += predefinedDurationReward;\\r\\n                    predefinedRollOverCount++;\\r\\n                }\\r\\n                lastEscrowRewardByToken_Duration[tokenAddr][\\r\\n                    j\\r\\n                ] = predefinedDurationReward;\\r\\n            }\\r\\n            // Reward for all durations was rolled over => Pool rollover\\r\\n            if (predefinedRollOverCount == 3) {\\r\\n                inflationRollOver[tokenAddr] = 0;\\r\\n                poolRollOver += _inflationReward / stakeTokenCount;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit InflationRewardDistributed();\\r\\n    }\\r\\n\\r\\n    function distributeNonInflationRewards()\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        for (uint256 i = 0; i < stakeTokens.length; i++) {\\r\\n            ifpTokenToAmount[stakeTokens[i]] = lendingPool.getNamedBalance(\\r\\n                interestForPoolBalanceName,\\r\\n                stakeTokens[i]\\r\\n            );\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < stakes.length; i++) {\\r\\n            Stake storage _stake = stakes[i];\\r\\n\\r\\n            if (_stake.stakeStatus != StakeStatus.STAKED) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            _accrueNonInflationReward(\\r\\n                i + 1,\\r\\n                ifpTokenToAmount[_stake.isEscrow ? nend : _stake.token]\\r\\n            );\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < stakeTokens.length; i++) {\\r\\n            uint256 distributedAmount = ifpTokenToAmount[stakeTokens[i]] -\\r\\n                lendingPool.getNamedBalance(\\r\\n                    interestForPoolBalanceName,\\r\\n                    stakeTokens[i]\\r\\n                );\\r\\n\\r\\n            if (distributedAmount > 0) {\\r\\n                lendingPool.transferERC20(\\r\\n                    stakeTokens[i],\\r\\n                    address(this),\\r\\n                    distributedAmount\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit NonInflationRewardDistributed();\\r\\n    }\\r\\n\\r\\n    function hasPendingNonInflationRewards()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        for (uint256 i = 0; i < stakeTokens.length; i++) {\\r\\n            address token = stakeTokens[i];\\r\\n            uint256 reward = lendingPool.getNamedBalance(\\r\\n                interestForPoolBalanceName,\\r\\n                token\\r\\n            );\\r\\n\\r\\n            uint256 stakedAmount = totalStakedByToken_Duration[token][0] +\\r\\n                totalStakedByToken_Duration[token][1] +\\r\\n                totalStakedByToken_Duration[token][2];\\r\\n\\r\\n            if (reward > 0 && stakedAmount > 0) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function issueEAB(uint256 _stakeId) external virtual {\\r\\n        Stake storage _stake = stakes[_stakeId - 1];\\r\\n        if (_stake.staker != msg.sender) {\\r\\n            revert Unauthorized();\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            _stake.stakeStatus == StakeStatus.FULFILLED ||\\r\\n            _stake.escrowStatus != EscrowStatus.DEFAULT\\r\\n        ) {\\r\\n            revert InvalidState();\\r\\n        }\\r\\n\\r\\n        _stake.escrowStatus = EscrowStatus.ISSUED;\\r\\n        _mint(msg.sender, _stakeId);\\r\\n\\r\\n        emit EscrowStatusChanged(_stakeId, EscrowStatus.ISSUED);\\r\\n    }\\r\\n\\r\\n    function unstake(uint256 _stakeId) external virtual override {\\r\\n        Stake storage _stake = stakes[_stakeId - 1];\\r\\n\\r\\n        if (_stake.staker != msg.sender) {\\r\\n            revert Unauthorized();\\r\\n        }\\r\\n        if (\\r\\n            _stake.end > block.timestamp ||\\r\\n            _stake.stakeStatus == StakeStatus.FULFILLED ||\\r\\n            _stake.escrowStatus == EscrowStatus.CLAIMED\\r\\n        ) {\\r\\n            revert InvalidState();\\r\\n        }\\r\\n\\r\\n        // Transfer original staked amount\\r\\n        uint256 _stakedAmount = _stake.amountsPerDuration[0] +\\r\\n            _stake.amountsPerDuration[1] +\\r\\n            _stake.amountsPerDuration[2];\\r\\n\\r\\n        if (_stake.isEscrow) {\\r\\n            IERC20(nend).transfer(msg.sender, _stakedAmount);\\r\\n        } else {\\r\\n            _lendingPoolTransfer(_stake.token, msg.sender, _stakedAmount);\\r\\n        }\\r\\n\\r\\n        // Transfer ifp reward\\r\\n        if (_stake.rewardAllocated > 0) {\\r\\n            IERC20(_stake.isEscrow ? nend : _stake.token).transfer(\\r\\n                msg.sender,\\r\\n                _stake.rewardAllocated\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (_stake.stakeStatus == StakeStatus.STAKED) {\\r\\n            ongoingStakeCount--;\\r\\n\\r\\n            for (uint8 i = 0; i < 3; i++) {\\r\\n                totalStakedByToken_Duration[\\r\\n                    _stake.isEscrow ? nend : _stake.token\\r\\n                ][i] -= _stake.amountsPerDuration[i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _stake.stakeStatus = StakeStatus.FULFILLED;\\r\\n        emit StakeStatusChanged(_stakeId, StakeStatus.FULFILLED);\\r\\n\\r\\n        if (_stake.escrowStatus == EscrowStatus.ISSUED || _stake.isEscrow) {\\r\\n            _stake.escrowStatus = EscrowStatus.CLAIMED;\\r\\n\\r\\n            if (_exists(_stakeId)) {\\r\\n                _burn(_stakeId);\\r\\n            }\\r\\n\\r\\n            emit EscrowStatusChanged(_stakeId, EscrowStatus.CLAIMED);\\r\\n        }\\r\\n\\r\\n        delete stakes[_stakeId - 1];\\r\\n    }\\r\\n\\r\\n    function addStakeToken(\\r\\n        address _stakeToken\\r\\n    ) external virtual override onlyRole(\\\"admin\\\") {\\r\\n        if (!activeStakeTokens[_stakeToken]) {\\r\\n            stakeTokenCount++;\\r\\n            activeStakeTokens[_stakeToken] = true;\\r\\n        }\\r\\n\\r\\n        for (uint8 i = 0; i < stakeTokens.length; i++) {\\r\\n            if (stakeTokens[i] == _stakeToken) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        stakeTokens.push(_stakeToken);\\r\\n    }\\r\\n\\r\\n    function removeStakeToken(\\r\\n        address _stakeToken\\r\\n    ) external override onlyRole(\\\"admin\\\") {\\r\\n        if (activeStakeTokens[_stakeToken]) {\\r\\n            stakeTokenCount--;\\r\\n            activeStakeTokens[_stakeToken] = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setTokenURI(\\r\\n        uint256 _tokenId,\\r\\n        string memory _tokenURI\\r\\n    ) external virtual onlyOwner {\\r\\n        _setTokenURI(_tokenId, _tokenURI);\\r\\n    }\\r\\n\\r\\n    function _lendingPoolTransfer(\\r\\n        address _token,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) internal virtual {\\r\\n        bool isNativeCoin = _token == address(0);\\r\\n\\r\\n        if (isNativeCoin) {\\r\\n            if (address(lendingPool).balance < _amount) {\\r\\n                revert InsufficientBalance();\\r\\n            }\\r\\n            lendingPool.transferNative(payable(_to), _amount);\\r\\n        } else {\\r\\n            if (IERC20(_token).balanceOf(address(lendingPool)) < _amount) {\\r\\n                revert InsufficientBalance();\\r\\n            }\\r\\n            lendingPool.transferERC20(_token, _to, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _calculateReward(\\r\\n        address _stakeToken,\\r\\n        uint8 _durationId,\\r\\n        uint256 _amountStaked,\\r\\n        uint256 _reward\\r\\n    ) internal view virtual returns (uint256) {\\r\\n        return\\r\\n            _amountStaked == 0\\r\\n                ? 0\\r\\n                : (_reward * rewardAllocations[_durationId] * _amountStaked) /\\r\\n                    100 /\\r\\n                    totalStakedByToken_Duration[_stakeToken][_durationId];\\r\\n    }\\r\\n\\r\\n    function _emitStaked(uint256 _stakeId) internal virtual {\\r\\n        Stake memory _stake = stakes[_stakeId - 1];\\r\\n        emit Staked(\\r\\n            _stakeId,\\r\\n            _stake.staker,\\r\\n            _stake.token,\\r\\n            _stake.start,\\r\\n            _stake.end,\\r\\n            _stake.amountsPerDuration,\\r\\n            _stake.isEscrow\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        uint256\\r\\n    ) internal virtual override {\\r\\n        if (from != address(0) && to != address(0)) {\\r\\n            stakes[tokenId - 1].staker = to;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\\r\\n}\\r\\n\",\"keccak256\":\"0x4db1c15d7459582c2f6740057aa0c242390ac10667fb4428d4f19eb9162cf589\",\"license\":\"UNLICENSED\"},\"contracts/staking/interfaces/ILendingPoolStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILendingPoolStaking {\\r\\n    error InsufficientBalance();\\r\\n    error InvalidArgument(string details);\\r\\n    error InvalidState();\\r\\n    error Unauthorized();\\r\\n\\r\\n    enum StakeStatus {\\r\\n        DEFAULT, // Not staked, only applicable to escrowed reward\\r\\n        STAKED, // Stake ongoing\\r\\n        FULFILLED // Stake ended gracefully\\r\\n    }\\r\\n\\r\\n    enum EscrowStatus {\\r\\n        DEFAULT, // Not issued\\r\\n        ISSUED,\\r\\n        CLAIMED\\r\\n    }\\r\\n\\r\\n    struct Stake {\\r\\n        // Staker address\\r\\n        address staker;\\r\\n        // Stake token address\\r\\n        address token;\\r\\n        // The time of deposit\\r\\n        uint48 start;\\r\\n        // The time of withdrawal\\r\\n        uint48 end;\\r\\n        // The amount staked by each stake duration\\r\\n        uint256[3] amountsPerDuration;\\r\\n        // The amount of stake token that will be rewarded upon finishing the stake duration\\r\\n        uint256 rewardAllocated;\\r\\n        // Stake is escrow\\r\\n        bool isEscrow;\\r\\n        // Status of eab\\r\\n        EscrowStatus escrowStatus;\\r\\n        // Status of stake\\r\\n        StakeStatus stakeStatus;\\r\\n    }\\r\\n\\r\\n    event Staked(\\r\\n        uint256 stakeId,\\r\\n        address staker,\\r\\n        address token,\\r\\n        uint48 start,\\r\\n        uint48 end,\\r\\n        uint256[3] amountsPerDuration,\\r\\n        bool isEscrow\\r\\n    );\\r\\n    event StakeStatusChanged(uint256 stakeId, StakeStatus status);\\r\\n    event EscrowStatusChanged(uint256 stakeId, EscrowStatus status);\\r\\n    event InflationRewardDistributed();\\r\\n    event NonInflationRewardDistributed();\\r\\n\\r\\n    function deposit(\\r\\n        address _stakeToken,\\r\\n        uint256 _amount,\\r\\n        uint8 _durationId\\r\\n    ) external payable;\\r\\n\\r\\n    function stakeEscrowedReward(uint256 _stakeId) external;\\r\\n\\r\\n    function distributeInflationRewards(uint256 _inflationReward) external;\\r\\n\\r\\n    function distributeNonInflationRewards() external;\\r\\n\\r\\n    function hasPendingNonInflationRewards() external view returns (bool);\\r\\n\\r\\n    function unstake(uint256 _stakeId) external;\\r\\n\\r\\n    function addStakeToken(address _stakeToken) external;\\r\\n\\r\\n    function removeStakeToken(address _stakeToken) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x4bec2a92147df12dffb6075f6fbcb47ecf6718bdb662e9f769e4e63fa6025619\",\"license\":\"UNLICENSED\"},\"contracts/test/Testing.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract Testing is MWOwnable {\\r\\n    bool public testing;\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() initializer {\\r\\n        testing = false;\\r\\n    }\\r\\n\\r\\n    function __Testing_init() public virtual onlyInitializing {\\r\\n        testing = false;\\r\\n    }\\r\\n\\r\\n    function setTesting(bool _testing) external onlyOwner {\\r\\n        testing = _testing;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7af4208c644f38b1419c726459752b81564e59acfcbd77840fc223293d19032a\",\"license\":\"Unlicense\"},\"contracts/vault/BalanceNames.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract BalanceNames {\\r\\n    string internal interestForPoolBalanceName = \\\"ifp\\\";\\r\\n    string internal interestForLenderBalanceName = \\\"ifl\\\";\\r\\n    string internal tradeCommissionBalanceName = \\\"tc\\\";\\r\\n    string internal bondingCommissionBalanceName = \\\"bc\\\";\\r\\n}\\r\\n\",\"keccak256\":\"0xd6ce3f7eb90d05e918d705b7afea89d3ee88aaab98be74a8b8ac6522a277743d\",\"license\":\"MIT\"},\"contracts/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"../helpers/SignatureHelper.sol\\\";\\r\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\n\\r\\ncontract Vault is SimpleRoleAccess, UUPSUpgradeable {\\r\\n    using SignatureHelper for bytes32;\\r\\n\\r\\n    event Claimed(bytes _hash);\\r\\n\\r\\n    bytes4 private ERC1155_INTERFACE_ID;\\r\\n    string public name;\\r\\n\\r\\n    mapping(bytes => bool) public claimed;\\r\\n    // Balance name => token => amount\\r\\n    mapping(string => mapping(address => uint256)) public namedBalances;\\r\\n\\r\\n    function initialize(string memory _name) public virtual initializer {\\r\\n        __Vault_init(_name);\\r\\n        __MWOwnable_init();\\r\\n    }\\r\\n\\r\\n    function __Vault_init(\\r\\n        string memory _name\\r\\n    ) internal virtual onlyInitializing {\\r\\n        name = _name;\\r\\n        ERC1155_INTERFACE_ID = 0xd9b67a26;\\r\\n    }\\r\\n\\r\\n    function approveERC20Transfer(\\r\\n        address _tokenAddress,\\r\\n        address _spender,\\r\\n        uint256 _amount\\r\\n    ) external virtual onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.approve(_spender, _amount);\\r\\n    }\\r\\n\\r\\n    function transferERC20(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external virtual onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.transfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function setERC721ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function transferERC721(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.transferFrom(address(this), _to, _tokenId);\\r\\n    }\\r\\n\\r\\n    function transferERC1155(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeTransferFrom(address(this), _to, _id, _value, _data);\\r\\n    }\\r\\n\\r\\n    function transferERC1155Batch(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeBatchTransferFrom(address(this), _to, _ids, _values, _data);\\r\\n    }\\r\\n\\r\\n    function setERC1155ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function getNativeBalance() external view virtual returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function transferNative(\\r\\n        address payable _to,\\r\\n        uint256 _amount\\r\\n    ) public payable virtual onlyRole(\\\"spender\\\") {\\r\\n        (bool sent, ) = _to.call{ value: _amount }(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n\\r\\n    function burn(\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) public virtual onlyRole(\\\"spender\\\") {\\r\\n        ERC20Burnable(_token).burn(_amount);\\r\\n    }\\r\\n\\r\\n    function namedBalanceReceive(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        namedBalances[_name][_token] += _amount;\\r\\n    }\\r\\n\\r\\n    function namedBalanceSpend(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        require(\\r\\n            namedBalances[_name][_token] >= _amount,\\r\\n            \\\"Insufficient balance\\\"\\r\\n        );\\r\\n        namedBalances[_name][_token] -= _amount;\\r\\n    }\\r\\n\\r\\n    function getNamedBalance(\\r\\n        string memory _name,\\r\\n        address _token\\r\\n    ) external view virtual returns (uint256) {\\r\\n        uint256 balance = namedBalances[_name][_token];\\r\\n        uint256 actualBalance = _token == address(0)\\r\\n            ? payable(this).balance\\r\\n            : IERC20(_token).balanceOf(address(this));\\r\\n\\r\\n        return balance <= actualBalance ? balance : actualBalance;\\r\\n    }\\r\\n\\r\\n    function claim(\\r\\n        bytes[] memory _hashes,\\r\\n        bytes[] memory _signatures\\r\\n    ) external virtual {\\r\\n        require(\\r\\n            _hashes.length == _signatures.length,\\r\\n            \\\"Not matching hash and signature count\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < _hashes.length; i++) {\\r\\n            if (claimed[_hashes[i]]) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            (\\r\\n                address _recipientAddress,\\r\\n                address _tokenAddress,\\r\\n                uint256 _amount,\\r\\n                uint48 _timestamp\\r\\n            ) = abi.decode(_hashes[i], (address, address, uint256, uint48));\\r\\n\\r\\n            bytes32 _messageHash = keccak256(\\r\\n                abi.encodePacked(\\r\\n                    _recipientAddress,\\r\\n                    _tokenAddress,\\r\\n                    _amount,\\r\\n                    _timestamp\\r\\n                )\\r\\n            );\\r\\n\\r\\n            require(\\r\\n                _messageHash.recoverSigner(_signatures[i]) == owner(),\\r\\n                \\\"Invalid signature\\\"\\r\\n            );\\r\\n\\r\\n            require(_recipientAddress == msg.sender, \\\"Not recipient\\\");\\r\\n            require(block.timestamp >= _timestamp, \\\"Invalid timestamp\\\");\\r\\n            require(\\r\\n                IERC20(_tokenAddress).balanceOf(address(this)) >= _amount,\\r\\n                \\\"Insufficient pool balance\\\"\\r\\n            );\\r\\n\\r\\n            claimed[_hashes[i]] = true;\\r\\n            IERC20(_tokenAddress).transfer(msg.sender, _amount);\\r\\n            emit Claimed(_hashes[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n\\r\\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\\r\\n}\\r\\n\",\"keccak256\":\"0x08f1faf21b97709c47f65ae9f075a5658dfd07a2fdfed06f3197369389cff958\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052346200019f57620000216200001b60c954620002fb565b62000338565b60066206966760ec1b0160c955620000456200003f60ca54620002fb565b62000372565b6006621a599b60ea1b0160ca55620000696200006360cb54620002fb565b620003ac565b600461746360f01b0160cb556200008c6200008660cc54620002fb565b620003e6565b600461626360f01b0160cc55600054620000c060ff8260081c16158092819362000190575b81156200016d575b50620001a4565b80620000d4600160ff196000541617600055565b62000152575b620000e46200029b565b6200011f575b620000f462000208565b3060805260405161544d90816200042182396080518181816114bf01528181611b540152611dee0152f35b6200013061ff001960005416600055565b604051600181526000805160206200586e83398151915290602090a1620000ea565b6200016761010061ff00196000541617600055565b620000da565b303b1591508162000181575b5038620000b9565b6001915060ff16143862000179565b600160ff8216109150620000b1565b600080fd5b15620001ac57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b6000546200022e60ff8260081c161580928193620001905781156200016d5750620001a4565b8062000242600160ff196000541617600055565b62000280575b60ff1960ff541660ff556200025957565b61ff0019600054166000556000805160206200586e833981519152602060405160018152a1565b6200029561010061ff00196000541617600055565b62000248565b60cd8054737e8ae5c72eca86946b695dcc211863d9721a09616001600160a01b0319821681179092556040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3565b90600182811c921680156200032d575b60208310146200031757565b634e487b7160e01b600052602260045260246000fd5b91607f16916200030b565b601f8111620003445750565b600060c98152601f60208220920160051c8201915b8281106200036657505050565b81815560010162000359565b601f81116200037e5750565b600060ca8152601f60208220920160051c8201915b828110620003a057505050565b81815560010162000393565b601f8111620003b85750565b600060cb8152601f60208220920160051c8201915b828110620003da57505050565b818155600101620003cd565b601f8111620003f25750565b600060cc8152601f60208220920160051c8201915b8281106200041457505050565b8181556001016200040756fe60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a71461040f57806306fdde0314610406578063081812fc146103fd57806308ed8d16146103f4578063095ea7b3146103eb578063125cc42f146103e2578063162094c4146103d9578063166866c7146103d05780631fecb71a146103c7578063217fe6c6146103be57806323b872dd146103b55780632e17de78146103ac5780633587e161146103a35780633659cfe61461039a57806339d2525f146103915780633c661b8b146103885780633de15c121461037f57806342842e0e14610376578063485cc9551461036d5780634f1ef28614610364578063528a9e4d1461035b57806352d1902d146103525780636352211e1461034957806365b014b71461034057806370a0823114610337578063715018a61461032e57806372a4db4a146103255780637547c7a31461031c57806378fecc9914610313578063829522001461030a578063848778b4146103015780638d03b102146102f85780638da5cb5b146102ef57806395d89b41146102e65780639b45d024146102dd5780639db5fa65146102d4578063a22cb465146102cb578063a59a9973146102c2578063b88d4fde146102b9578063ba5e4bad146102b0578063bad7edab146102a7578063bf0215501461029e578063c87b56dd14610295578063d2438c2a1461028c578063d5a44f8614610283578063de3e3eff1461027a578063e25b7d8214610271578063e985e9c514610268578063ef7bd7f31461025f578063f19ed6be146102565763f2fde38b1461024e57600080fd5b61000e612d3c565b5061000e612969565b5061000e612949565b5061000e6128de565b5061000e6128b6565b5061000e612872565b5061000e6127cc565b5061000e6126d4565b5061000e6125d3565b5061000e61257f565b5061000e6124b8565b5061000e612498565b5061000e612440565b5061000e612417565b5061000e612325565b5061000e6122c8565b5061000e6122a8565b5061000e612200565b5061000e6121d8565b5061000e6121b5565b5061000e612175565b5061000e61214c565b5061000e612126565b5061000e6120ca565b5061000e612028565b5061000e611f9a565b5061000e611ef4565b5061000e611ec9565b5061000e611eaa565b5061000e611dd2565b5061000e611ca8565b5061000e611b0e565b5061000e611a0f565b5061000e6119e6565b5061000e611741565b5061000e611705565b5061000e611628565b5061000e611495565b5061000e611183565b5061000e610d3a565b5061000e610d10565b5061000e610c54565b5061000e610bcb565b5061000e610b06565b5061000e610952565b5061000e6107bd565b5061000e610676565b5061000e610629565b5061000e6105ef565b5061000e610512565b5061000e61042a565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e57602060043561044a81610418565b63ffffffff60e01b166380ac58cd60e01b8114908115610488575b8115610477575b506040519015158152f35b6301ffc9a760e01b1490503861046c565b635b5e139f60e01b81149150610465565b600091031261000e57565b918091926000905b8282106104c45750116104bd575050565b6000910152565b915080602091830151818601520182916104ac565b906020916104f2815180928185528580860191016104a4565b601f01601f1916010190565b90602061050f9281815201906104d9565b90565b503461000e576000806003193601126105ec576040519080606554610536816131f0565b808552916001918083169081156105cb5750600114610570575b61056c856105608187038261088e565b604051918291826104fe565b0390f35b9250606583527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c75b8284106105b35750505081016020016105608261056c610550565b80546020858701810191909152909301928101610598565b60ff191660208701525050604084019250610560915083905061056c610550565b80fd5b503461000e57602036600319011261000e57602061060e600435613336565b6001600160a01b0360405191168152f35b8015150361000e57565b503461000e57602036600319011261000e576004356106478161061f565b61064f6139b3565b60ff8019815416911515161760ff556000604051f35b6001600160a01b0381160361000e57565b503461000e57604036600319011261000e5760043561069481610665565b6024356106a0816131ce565b916001600160a01b038084168091831614610720576106d2936106cd9133149081156106d4575b506132c4565b6136a6565b005b61071a9150610713906106fb33916001600160a01b0316600052606a602052604060002090565b906001600160a01b0316600052602052604060002090565b5460ff1690565b386106c7565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b6001600160a01b0316600052610172602052604060002090565b6001600160a01b031660005261016d602052604060002090565b6001600160a01b0316600052610168602052604060002090565b503461000e57602036600319011261000e576001600160a01b036004356107e381610665565b16600052610167602052602060ff604060002054166040519015158152f35b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161082d57604052565b610835610802565b604052565b6020810190811067ffffffffffffffff82111761082d57604052565b6060810190811067ffffffffffffffff82111761082d57604052565b6040810190811067ffffffffffffffff82111761082d57604052565b90601f8019910116810190811067ffffffffffffffff82111761082d57604052565b60405190610120820182811067ffffffffffffffff82111761082d57604052565b604051906108de82610856565b565b60209067ffffffffffffffff81116108fe575b601f01601f19160190565b610906610802565b6108f3565b81601f8201121561000e57803590610922826108e0565b92610930604051948561088e565b8284526020838301011161000e57816000926020809301838601378301015290565b503461000e57604036600319011261000e5767ffffffffffffffff60043560243582811161000e5761098890369060040161090b565b916109916139b3565b6109b18260005260676020526001600160a01b0360406000205416151590565b15610a9b5760009182526020906097825260408320918451918211610a8e575b6109e5826109df85546131f0565b8561416e565b80601f8311600114610a215750839482939492610a16575b50508160011b916000199060031b1c1916179055604051f35b0151905038806109fd565b90601f19831695610a3785600052602060002090565b9286905b888210610a7657505083600195969710610a5d575b505050811b019055604051f35b015160001960f88460031b161c19169055388080610a50565b80600185968294968601518155019501930190610a3b565b610a96610802565b6109d1565b60405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201527f6578697374656e7420746f6b656e0000000000000000000000000000000000006064820152608490fd5b503461000e5760208060031936011261000e57600435610b2581610665565b610b2d613a5f565b90610b516001600160a01b0392848460cd54163314918215610b8f575b5050613a80565b1690816000526101679182825260ff60406000205416610b6d57005b61016b610b7a8154614cd8565b905560005252604060002060ff198154169055005b60ff925090610bb991336000526101008252604060002082604051948386809551938492016104a4565b82019081520301902054168438610b4a565b503461000e57602036600319011261000e576106d2600435610bec81610665565b610c13610bf7613a5f565b6001600160a01b0360cd54163314908115610c18575b50613a80565b614ea5565b60ff91506020610c4391336000526101008252604060002082604051948386809551938492016104a4565b820190815203019020541638610c0d565b503461000e57604036600319011261000e57600435610c7281610665565b60243567ffffffffffffffff811161000e57610cc7602061056c936001600160a01b03610ca560ff95369060040161090b565b91166000526101008252604060002082604051948386809551938492016104a4565b820190815203019020546040519116151581529081906020820190565b606090600319011261000e57600435610cfc81610665565b90602435610d0981610665565b9060443590565b503461000e576106d2610d2236610ce4565b91610d35610d308433613460565b613373565b61353b565b503461000e5760208060031936011261000e57600435610d61610d5c82613871565b612703565b5091610d7483546001600160a01b031690565b906001600160a01b03918233911603611172576001840190815492428460d01c118015611154575b8015611136575b611124576005600287019683610de5610dd78a54610dd1610dc78d60010190600090565b90549060031b1c90565b906138c1565b610dd160028c016000610dc7565b6006830197610df5895460ff1690565b15611111575090610e52600092610e27610e1b610e1b610165546001600160a01b031690565b6001600160a01b031690565b60405163a9059cbb60e01b815233600482015260248101929092529093849283919082906044820190565b03925af18015611104575b6110e7575b505b015480611034575b505082546001915060101c60ff16610e838161274c565b14610f8f575b50805462ff00001916620200001781556106d29250610f0691610d5c9160408051838152600260208201527fab7e44c17ad2a7b4de0e42ab0bc824366a946f184a1133f0b5528347e4ccbd2991819081010390a18054600160ff8260081c16610ef18161274c565b14908115610f84575b50610f0c575b50613871565b90614ce5565b805461ff001916610200179055610f398160005260676020526001600160a01b0360406000205416151590565b610f76575b60408051828152600260208201527f855f5f4ea7c8c6a92f173fbc35c24d01139c2a49e9bcc085f03620cb6a1c65139190a138610f00565b610f7f81614d73565b610f3e565b60ff91501638610efa565b610fa4610f9e61016c54614cd8565b61016c55565b600090815b600360ff821610610fbb575050610e89565b80610fcc610dc76110149389614539565b855460ff16156110195761100d61100583610ff361076f610165546001600160a01b031690565b9060ff16600052602052604060002090565b91825461388e565b9055614527565b610fa9565b61100d61100583610ff361076f88546001600160a01b031690565b6110848391611044875460ff1690565b156110d657610165546001600160a01b0316905b60405163a9059cbb60e01b81523360048201526024810191909152938492839160009183906044820190565b0393165af180156110c9575b61109b575b80610e6c565b816110ba92903d106110c2575b6110b2818361088e565b8101906142a0565b503880611095565b503d6110a8565b6110d1612edb565b611090565b85546001600160a01b031690611058565b6110fd90853d87116110c2576110b2818361088e565b5038610e62565b61110c612edb565b610e5d565b61111f925085339116614f4d565b610e64565b60405163baf3f0f760e01b8152600490fd5b50600686015460029060081c60ff1661114e8161274c565b14610da3565b50600686015460029060101c60ff1661116c8161274c565b14610d9c565b6040516282b42960e81b8152600490fd5b503461000e576000806003193601126105ec5761119e6139b3565b805b6101695481101561126f57611230906112066111c8610e1b610166546001600160a01b031690565b6111e76111d484612085565b90546001600160a01b039160031b1c1690565b6040518092630530fa2160e01b82528180602096879560048301614889565b03915afa918215611262575b8592611235575b505061122a6107896111d484612085565b55613da4565b6111a0565b6112549250803d1061125b575b61124c818361088e565b810190612ecc565b3880611219565b503d611242565b61126a612edb565b611212565b50805b61017054811015611311578061128a6112e492612703565b50600681015460ff91828260101c16906112a38261274c565b6001809203611308576112df936112b9866138a5565b9316156112e95750506112d8610789610165546001600160a01b031690565b54906148d7565b613da4565b611272565b01546001600160a01b0316600090815261016d602052604090206112d8565b50505050613da4565b50805b6101695481101561146b57806113326107896111d46113a894612085565b548361134a610e1b610166546001600160a01b031690565b6113566111d485612085565b6040916113968351630530fa2160e01b815260209687828061137c600498898301614889565b0381875afa91821561145e575b879261143f575b5061388e565b91826113ad575b505050505050613da4565b611314565b6113fa9486946113bf6111d48a612085565b905163276d76f960e21b81526001600160a01b0390911692810192835230602084015260408301949094529294859384929091839160600190565b03925af18015611432575b611414575b808080879361139d565b8161142a92903d106110c2576110b2818361088e565b50388061140a565b61143a612edb565b611405565b611457919250883d8a1161125b5761124c818361088e565b9038611390565b611466612edb565b611389565b506040517f3ebfd10f795a127a78001b56051c04828d55b68d9d77ebce97b617c8adc53ed28282a1f35b503461000e57602036600319011261000e576004356114b381610665565b6001600160a01b0390817f000000000000000000000000000000000000000000000000000000000000000016916114ec83301415612e0a565b61151b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc938285541614612e6b565b6115236139b3565b604051906115308261083a565b600082527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561156a5750506106d29150612f46565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181611608575b506115f55760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b0390fd5b6106d2936116039114612ee8565b612fe4565b61162191925060203d811161125b5761124c818361088e565b9038611590565b503461000e57606036600319011261000e5760043561164681610665565b6024359067ffffffffffffffff821161000e576116ad602061166f6106d294369060040161090b565b6001600160a01b03604435946116848661061f565b61168c6139b3565b166000526101008252604060002082604051948386809551938492016104a4565b8201908152030190209060ff801983541691151516179055565b50634e487b7160e01b600052603260045260246000fd5b9060038210156116f8575b601f8260051c61017301921690565b6117006116c7565b6116e9565b503461000e57602036600319011261000e57600435600381101561000e578060ff60209260051c610173015460f86040519360031b161c168152f35b503461000e57602036600319011261000e5760043561176c610e1b610165546001600160a01b031690565b330361117257610174906117818254826138c1565b9061178d600061017455565b610170805460005b8181106119a157509054905b81811061198757505060005b6101695481101561195c576117c46111d482612085565b61016b6117fa6117d5825487613924565b6117f3846001600160a01b0316600052610168602052604060002090565b54906138c1565b600061181a846001600160a01b0316600052610168602052604060002090565b55600090815b600360ff82161061189157505090600360ff611846959493161461184b575b5050613da4565b6117ad565b61187d61188491600061187561188a956001600160a01b0316600052610168602052604060002090565b555486613924565b87546138c1565b61017455565b388061183f565b6118c66118bf6118b96118b36118a6856116de565b905460ff9160031b1c1690565b60ff1690565b84613ba0565b6064900490565b6118e882610ff3886001600160a01b0316600052610172602052604060002090565b5415611921575b9061191c9161191682610ff3896001600160a01b031660005261016f602052604060002090565b55614527565b611820565b929061195361191c92611948886001600160a01b0316600052610168602052604060002090565b61100d8782546138c1565b939091506118ef565b60006040517fbd9c0e36f2110aa67058734f061a385583a1d8b5758bcb065ca0f26c4c64603c8282a1f35b806112df61199761199c936138a5565b615229565b6117a1565b8060016119c160066119b56119e195612703565b50015460101c60ff1690565b6119ca8161274c565b036112df576112df866119dc836138a5565b61456d565b611795565b503461000e576106d26119f836610ce4565b9060405192611a068461083a565b600084526133d5565b503461000e57604036600319011261000e57600435611a2d81610665565b611a7d602435611a3c81610665565b60005492611a6160ff8560081c161580958196611b00575b8115611ae0575b50613c3b565b83611a74600160ff196000541617600055565b611ac757613e6c565b611a8357005b611a9361ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989080602081015b0390a1005b611adb61010061ff00196000541617600055565b613e6c565b303b15915081611af2575b5038611a5b565b6001915060ff161438611aeb565b600160ff8216109150611a54565b50604036600319011261000e57600435611b2781610665565b60243567ffffffffffffffff811161000e57611b4790369060040161090b565b906001600160a01b0391827f00000000000000000000000000000000000000000000000000000000000000001692611b8184301415612e0a565b611bb07f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc948286541614612e6b565b611bb86139b3565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611bee5750506106d29150612f46565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181611c88575b50611c755760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b6106d293611c839114612ee8565b6130fc565b611ca191925060203d811161125b5761124c818361088e565b9038611c14565b503461000e57602036600319011261000e57600435611cc9610d5c82613871565b5090611cdc82546001600160a01b031690565b6001600160a01b0333911603611172576006820180549260ff938480821615918215611dba575b505061112457815462ff000019166201000017825592611d28610f9e61016c54613da4565b600260009401935b600382821610611d7b577fab7e44c17ad2a7b4de0e42ab0bc824366a946f184a1133f0b5528347e4ccbd2984611d6b855460ff9060101c1690565b90611ac260405192839283614557565b611db381611d8e610dc760039489614539565b61100d611dab83610ff361076f610165546001600160a01b031690565b9182546138c1565b9050611d30565b60101c169050611dc98161274c565b15158438611d03565b503461000e57600036600319011261000e576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611e3f576040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152602090f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b503461000e57602036600319011261000e57602061060e6004356131ce565b503461000e57600036600319011261000e57611eec60ff60005460081c1661393a565b6106d2613a0b565b503461000e57602036600319011261000e576001600160a01b03600435611f1a81610665565b168015611f4357600052606860205261056c604060002054604051918291829190602083019252565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b503461000e576000806003193601126105ec57611fb56139b3565b60cd546001600160a01b0319811660cd55816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b6024359060ff8216820361000e57565b6044359060ff8216820361000e57565b359060ff8216820361000e57565b503461000e57606036600319011261000e57366023121561000e5760405161204f81610856565b60648136821161000e576004905b82821061206d576106d284613acc565b6020809161207a8461201a565b81520191019061205d565b61016980548210156120bd575b6000527fbd88e1fd0aa5f3038c0cd2a68644e2d11f4e4e7e3693adba414318f2127ca4260190600090565b6120c56116c7565b612092565b503461000e57602036600319011261000e57600435610169805482101561000e576020916001600160a01b03916000527fbd88e1fd0aa5f3038c0cd2a68644e2d11f4e4e7e3693adba414318f2127ca426015416604051908152f35b503461000e57600036600319011261000e576020612142614a18565b6040519015158152f35b503461000e57600036600319011261000e5760206001600160a01b036101655416604051908152f35b503461000e57602036600319011261000e576001600160a01b0360043561219b81610665565b166000526101686020526020604060002054604051908152f35b503461000e57600036600319011261000e57602060ff8054166040519015158152f35b503461000e57600036600319011261000e5760206001600160a01b0360cd5416604051908152f35b503461000e576000806003193601126105ec576040519080606654612224816131f0565b808552916001918083169081156105cb575060011461224d5761056c856105608187038261088e565b9250606683527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e943545b8284106122905750505081016020016105608261056c610550565b80546020858701810191909152909301928101612275565b503461000e57600036600319011261000e57602061016c54604051908152f35b503461000e57604036600319011261000e57602061231c6004356122eb81610665565b6001600160a01b036122fb611ffa565b9116600052610172835260406000209060ff16600052602052604060002090565b54604051908152f35b503461000e57604036600319011261000e5760043561234381610665565b60243561234f8161061f565b6001600160a01b038216918233146123d2578161238f6123a09233600052606a6020526040600020906001600160a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b503461000e57600036600319011261000e5760206001600160a01b036101665416604051908152f35b503461000e57608036600319011261000e5760043561245e81610665565b60243561246a81610665565b6064359167ffffffffffffffff831161000e5761248e6106d293369060040161090b565b91604435916133d5565b503461000e57600036600319011261000e57602061017454604051908152f35b503461000e57602036600319011261000e576004356124d9610d5c82613871565b508054336001600160a01b0390911603611172576006018054600260ff8260101c166125048161274c565b14908115612566575b5061112457805461ff0019166101001790557f855f5f4ea7c8c6a92f173fbc35c24d01139c2a49e9bcc085f03620cb6a1c651390611ac29061254f8133614bd1565b604080519182526001602083015290918291820190565b60ff915060081c166125778161274c565b15153861250d565b503461000e57604036600319011261000e57602061231c6004356125a281610665565b6001600160a01b036125b2611ffa565b911660005261016f835260406000209060ff16600052602052604060002090565b503461000e5760208060031936011261000e576004359061261261260d8360005260676020526001600160a01b0360406000205416151590565b613182565b60009182526097815260408220916040519283828254612631816131f0565b808452936001918083169081156126b6575060011461267a575b50506126599250038461088e565b6040516126658161083a565b5261056c6040519282849384528301906104d9565b86925085528185209085915b85831061269e5750506126599350820101388061264b565b8054838a018501528894508793909201918101612686565b9550505050505060ff1916828401526126598360408101388061264b565b503461000e57600036600319011261000e576126f760ff60005460081c1661393a565b60ff805460ff19169055005b600790610170805482101561273f575b600052027f88e1afb22f13be7fec203799fd189c3b9471c5b75e2b22a6d5efec11c7f392550190600090565b6127476116c7565b612713565b6003111561275657565b634e487b7160e01b600052602160045260246000fd5b94919897969360e096939161010087019a6001600160a01b03809216885216602087015265ffffffffffff80921660408701521660608501526080840152151560a08301526127ba8161274c565b60c08201526127c88361274c565b0152565b503461000e57602036600319011261000e576004356101705481101561000e576127f590612703565b506001600160a01b0361056c81835416600184015490600660058601549501549060405195869560ff8460101c169460ff808660081c169516938160d01c9265ffffffffffff8360a01c169216908961276c565b906003821015612865575b600660058084046101710193060290565b61286d6116c7565b612854565b503461000e57602036600319011261000e57600435600381101561000e578065ffffffffffff60056020930461017101546006600560405194060260031b1c168152f35b503461000e57600036600319011261000e57602065ffffffffffff61016a5416604051908152f35b503461000e57604036600319011261000e57602060ff61293d60043561290381610665565b6001600160a01b036024359161291883610665565b16600052606a84526040600020906001600160a01b0316600052602052604060002090565b54166040519015158152f35b503461000e57600036600319011261000e57602061016b54604051908152f35b50606036600319011261000e57600480359061298482610665565b6024359161299061200a565b918315612cee576129bf6129bb610713846001600160a01b0316600052610167602052604060002090565b1590565b612ca0576001600160a01b0382168015801580612c38575b612c275785919015612b8057503403612b275750612af391610ff3611dab92600080808089612a18610e1b610e1b610e1b610166546001600160a01b031690565b82f115612b1a575b61076f612a2b6142b5565b87612a3960ff871683613b54565b5265ffffffffffff421690612ac6612a89612a83612a6b612a598a612849565b905465ffffffffffff9160031b1c1690565b60ff80541615612b105761ffff6103f05b16906142c9565b846142ed565b612ab7612a946108b0565b338152946001600160a01b03881660208701525b65ffffffffffff166040860152565b65ffffffffffff166060840152565b6080820152600060a0820152600060c0820152600060e0820152612aee610100820160019052565b61437c565b9055612b04610f9e61016c54613da4565b6106d261017054615229565b61ffff6001612a7c565b612b22612edb565b612a20565b6115f190604051918291631fff1b3b60e21b8352820160809060208152602260208201527f496e636f7272656374206e617469766520636f696e207374616b6520616d6f756040820152611b9d60f21b60608201520190565b92612be66020610ff393611dab96612af398966000612bab610e1b610166546001600160a01b031690565b604080516323b872dd60e01b8152339481019485526001600160a01b0390921660208501528301949094529294859384929091839160600190565b03925af18015612c1a575b612bfc575b50612a20565b612c139060203d81116110c2576110b2818361088e565b5038612bf6565b612c22612edb565b612bf1565b604051631e9acf1760e31b81528390fd5b506040516370a0823160e01b8152338482019081528791906020908290819083010381875afa908115612c93575b600091612c75575b50106129d7565b612c8d915060203d811161125b5761124c818361088e565b38612c6e565b612c9b612edb565b612c66565b6115f190604051918291631fff1b3b60e21b8352820160609060208152601360208201527f496e76616c6964207374616b6520746f6b656e0000000000000000000000000060408201520190565b6115f190604051918291631fff1b3b60e21b8352820160609060208152601560208201527f416d6f756e742063616e6e6f74206265207a65726f000000000000000000000060408201520190565b503461000e57602036600319011261000e57600435612d5a81610665565b612d626139b3565b6001600160a01b03809116908115612db65760009160cd5491816001600160a01b031984161760cd5560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b15612e1157565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15612e7257565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b9081602091031261000e575190565b506040513d6000823e3d90fd5b15612eef57565b60405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b803b15612f89576001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91166001600160a01b0319825416179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b612fed81612f46565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a28251158015906130f4575b61303357505050565b813b156130a35750600082819260206130a095519201905af4613054613152565b6040519161306183610856565b602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020840152660819985a5b195960ca1b60408401526138cd565b50565b62461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b50600061302a565b61310581612f46565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a282511580159061314a5761303357505050565b50600161302a565b3d1561317d573d90613163826108e0565b91613171604051938461088e565b82523d6000602084013e565b606090565b1561318957565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b60005260676020526001600160a01b036040600020541661050f811515613182565b90600182811c92168015613220575b602083101461320a57565b634e487b7160e01b600052602260045260246000fd5b91607f16916131ff565b60c9546000929161323a826131f0565b808252916001908181169081156132b1575060011461325857505050565b9192935060c96000527f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d28916000925b84841061329957505060209250010190565b80546020858501810191909152909301928101613287565b60ff191660208401525050604001925050565b156132cb57565b60405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608490fd5b61335961260d8260005260676020526001600160a01b0360406000205416151590565b60005260696020526001600160a01b036040600020541690565b1561337a57565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b906133f99392916133e9610d308433613460565b6133f483838361353b565b613750565b1561340057565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b6001600160a01b0380613472846131ce565b1692818316928484149485156134a8575b50508315613492575b50505090565b61349e91929350613336565b161438808061348c565b60ff929550906134d791600052606a6020526040600020906001600160a01b0316600052602052604060002090565b5416923880613483565b156134e857565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b90613561929161354a836131ce565b6001600160a01b03828116959091821686146134e1565b8216938415613655576108de94816135868693613580610e1b866131ce565b146134e1565b6135ad61359d846000526069602052604060002090565b80546001600160a01b0319169055565b6135ca846001600160a01b03166000526068602052604060002090565b60001981540190556135ef856001600160a01b03166000526068602052604060002090565b600181540190556136298561360e856000526067602052604060002090565b906001600160a01b03166001600160a01b0319825416179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a461538f565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b600082815260696020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b03806136df846131ce565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b9081602091031261000e575161050f81610418565b909261050f94936080936001600160a01b038092168452166020830152604082015281606082015201906104d9565b92909190823b156138515761378b9260209260006001600160a01b03604051809781968295630a85bd0160e11b9b8c85523360048601613721565b0393165af160009181613821575b50613813576137a6613152565b8051908161380e5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b602001fd5b6001600160e01b0319161490565b61384391925060203d811161384a575b61383b818361088e565b81019061370c565b9038613799565b503d613831565b50505050600190565b50634e487b7160e01b600052601160045260246000fd5b60018110613881575b6000190190565b61388961385a565b61387a565b818110613899570390565b6138a161385a565b0390565b60019060011981116138b5570190565b6138bd61385a565b0190565b811981116138b5570190565b909190156138d9575090565b8151156138e95750805190602001fd5b60405162461bcd60e51b8152602060048201529081906115f19060248301906104d9565b50634e487b7160e01b600052601260045260246000fd5b811561392e570490565b61393661390d565b0490565b1561394157565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6139ab60ff60005460081c1661393a565b6108de613a0b565b6001600160a01b0360cd541633036139c757565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60cd546001600160a01b03737e8ae5c72eca86946b695dcc211863d9721a09619182821982161760cd55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b60405190613a6c82610872565b600582526430b236b4b760d91b6020830152565b15613a8757565b60405162461bcd60e51b815260206004820152600e60248201527f4e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606490fd5b613ad7610bf7613a5f565b606460ff613aff613af2828551168360208701511690613b73565b8260408601511690613b73565b1603613b0e576108de90613bd6565b604051631fff1b3b60e21b815260206004820152601260248201527f4d7573742073756d20757020746f2031303000000000000000000000000000006044820152606490fd5b906003811015613b66575b60051b0190565b613b6e6116c7565b613b5f565b60ff8091169116908160ff0381116138b5570190565b50634e487b7160e01b600052600060045260246000fd5b8060001904821181151516613bb3570290565b613bbb61385a565b0290565b818110613bca575050565b60008155600101613bbf565b9061017360009081935b600380861015613c33579060209160ff908183511691868654921b90811b9283911b169119161783550193600180930192601f8411613c24575b5060010193613be0565b60009350909101906001613c1a565b505050509050565b15613c4257565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608490fd5b61016980549068010000000000000000821015613d16575b60018201808255821015613d09575b6000527fbd88e1fd0aa5f3038c0cd2a68644e2d11f4e4e7e3693adba414318f2127ca4260180546001600160a01b0319169055565b613d116116c7565b613cd4565b613d1e610802565b613cc5565b6001600160a01b0361016980549068010000000000000000821015613d97575b60018201808255821015613d8a575b6000527fbd88e1fd0aa5f3038c0cd2a68644e2d11f4e4e7e3693adba414318f2127ca4260191166001600160a01b0319825416179055565b613d926116c7565b613d52565b613d9f610802565b613d43565b60019060001981146138b5570190565b90610171600080935b600380861015613c33578160209162ffffff600694511690858754911b65ffffffffffff811b9283911b1691191617855501910193601a8511613e05575b6001019390613dbd565b60009450600190920191613dfb565b60405190613e2182610872565b601382527f457363726f77656420417373657420426f6e64000000000000000000000000006020830152565b60405190613e5a82610872565b600382526222a0a160e91b6020830152565b613ed990613f0b926001600160a01b0380199061016581851683825416179055610166921690825416179055613ebd613eb060008052610167602052604060002090565b805460ff19166001179055565b613ec5613cad565b613f0561016b91613edf613ed98454613da4565b61016b55565b613f00613eb0826001600160a01b0316600052610167602052604060002090565b613d23565b54613da4565b61016a805465ffffffffffff1916630114db00179055613f49613f2c6108d1565b62093a8081526224ea006020820152626ebe006040820152613db4565b613f6b613f546108d1565b60148152601e602082015260326040820152613bd6565b613f84613f76613e14565b613f7e613e4d565b90613f94565b613f8c61399a565b6108de6153fa565b90613faf60ff60005460081c16613faa8161393a565b61393a565b815167ffffffffffffffff81116140aa575b613fd581613fd06065546131f0565b6140b7565b602080601f8311600114614017575081906108de9460009261400c575b50508160011b916000199060031b1c1916176065556141a8565b015190503880613ff2565b919293601f19841661404b60656000527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c790565b936000905b8282106140925750509160019391856108de97969410614079575b505050811b016065556141a8565b015160001960f88460031b161c1916905538808061406b565b80600186978294978701518155019601940190614050565b6140b2610802565b613fc1565b90601f82116140c4575050565b6108de9160656000527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c7906020601f840160051c8301931061410e575b601f0160051c0190613bbf565b9091508190614101565b90601f8211614125575050565b6108de9160666000527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e94354906020601f840160051c8301931061410e57601f0160051c0190613bbf565b9190601f811161417d57505050565b6108de926000526020600020906020601f840160051c8301931061410e57601f0160051c0190613bbf565b90815167ffffffffffffffff8111614293575b6141cf816141ca6066546131f0565b614118565b602080601f831160011461420b5750819293600092614200575b50508160011b916000199060031b1c191617606655565b0151905038806141e9565b90601f1983169461423e60666000527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e9435490565b926000905b87821061427b575050836001959610614262575b505050811b01606655565b015160001960f88460031b161c19169055388080614257565b80600185968294968601518155019501930190614243565b61429b610802565b6141bb565b9081602091031261000e575161050f8161061f565b604051906142c282610856565b6060368337565b9065ffffffffffff8091169182156142e057160490565b6142e861390d565b160490565b9065ffffffffffff80809316911680920381116138b5570190565b6143118261274c565b52565b906000905b6003821061432657505050565b6001602082829351865501930191019091614319565b906143468161274c565b61ff0082549160081b169061ff001916179055565b906143658161274c565b62ff000082549160101b169062ff00001916179055565b6108de9061010060066143ab6101708054906801000000000000000082101561451a575b600182019055612703565b61450d575b6143e06143c485516001600160a01b031690565b82546001600160a01b0319166001600160a01b03909116178255565b6144a6600182016143fe6143c460208801516001600160a01b031690565b61444e614414604088015165ffffffffffff1690565b82547fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b65ffffffffffff60a01b16178255565b606086015165ffffffffffff16815479ffffffffffffffffffffffffffffffffffffffffffffffffffff1660d09190911b7fffffffffffff000000000000000000000000000000000000000000000000000016179055565b6144b7608085015160028301614314565b60a0840151600582015501916144e56144d360c0830151151590565b849060ff801983541691151516179055565b6144fc60e08201516144f68161274c565b8461433c565b0151906145088261274c565b61435b565b614515613b89565b6143b0565b614522610802565b6143a0565b60ff6001911660ff81146138b5570190565b600382101561454a575b0190600090565b6145526116c7565b614543565b908152604081019291906020906127c88361274c565b610d5c61457991613871565b509061458c82546001600160a01b031690565b906145ab826001600160a01b031660005261016e602052604060002090565b60068401926145ea6145be855460ff1690565b92831561487657610165546001600160a01b03165b6001600160a01b0316600052602052604060002090565b549182158015614840575b614708575b5050610d5c61460b91949394613871565b509060009260028082019301935b600360ff82161061462c57505050505050565b6146d8906146d3614697614641895460ff1690565b80156146f457610165546001600160a01b0316905b84614691614667610dc7838d614539565b9261467561016b548c613924565b90156146dd576117f36107a3610165546001600160a01b031690565b926150e7565b6146ba6146a4848a614539565b9190926146b58385549060031b1c90565b6138c1565b9082549060031b600019811b9283911b16911916179055565b614527565b614619565b6117f36107a360018c01546001600160a01b031690565b60018601546001600160a01b031690614656565b6147b092506147156142b5565b901561482457614789614731610165546001600160a01b031690565b612ab765ffffffffffff4216612aa861475e614758612a6b61016a5465ffffffffffff1690565b836142ed565b9361477961476a6108b0565b6001600160a01b039099168952565b6001600160a01b03166020880152565b6080820152600060a0820152600160c0820152600060e0820152600061010082015261437c565b61460b610d5c61017054806148086147ec6147d289546001600160a01b031690565b6001600160a01b031660005261016e602052604060002090565b875460ff161561480f57610165546001600160a01b03166145d3565b55916145fa565b60018901546001600160a01b03165b906106fb565b61478961483b60018801546001600160a01b031690565b614731565b506148636001614852610d5c86613871565b50015460a01c65ffffffffffff1690565b65ffffffffffff804216911614156145f5565b60018701546001600160a01b031661481e565b9190916040815260206001600160a01b036148a66040840161322a565b9416910152565b60409093929193606081526001600160a01b036148cc6060830161322a565b951660208201520152565b610d5c6148e391613871565b5060058101916006820191600281019160005b600360ff82161061490957505050505050565b845460ff169081156149fb576149408361492c610165546001600160a01b031690565b8361493a610dc7828b614539565b916150e7565b9161494c8389546138c1565b8855614964610e1b610166546001600160a01b031690565b90156149e857610165546001600160a01b03165b813b1561000e576149bd936149a79260009283604051809681958294636c49e02160e01b8452600484016148ad565b03925af180156149db575b6149c2575b50614527565b6148f6565b806149cf6149d592610819565b80610499565b386149b7565b6149e3612edb565b6149b2565b60018501546001600160a01b0316614978565b61494083614a1360018701546001600160a01b031690565b61492c565b60006101695490614a35610e1b610166546001600160a01b031690565b905b828110614a4657505050600090565b614a526111d482612085565b604051630530fa2160e01b815260209190828180614a738560048301614889565b0381885afa928315614b78575b600093614b53575b5050806117f3614b14614af9614ac7614ab8614b24966001600160a01b0316600052610172602052604060002090565b60008052602052604060002090565b546117f3614ae9866001600160a01b0316600052610172602052604060002090565b6001600052602052604060002090565b926001600160a01b0316600052610172602052604060002090565b6002600052602052604060002090565b9015159081614b49575b50614b4157614b3c90613da4565b614a37565b505050600190565b9050151538614b2e565b614b249293509081614b7092903d1061125b5761124c818361088e565b919038614a88565b614b80612edb565b614a80565b15614b8c57565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b6001600160a01b038116908115614c9457614c6a90614c0f614c098560005260676020526001600160a01b0360406000205416151590565b15614b85565b614c32614c098560005260676020526001600160a01b0360406000205416151590565b614c4f816001600160a01b03166000526068602052604060002090565b6001815401905561360e846000526067602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a4565b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b8015613881576000190190565b600690600092614d10575b8281558260018201558260058201614d0b8160028501613bbf565b550155565b614d18613b89565b614cf0565b61050f90546131f0565b614d3181546131f0565b9081614d3b575050565b81601f60009311600114614d4d575055565b81835260208320614d6991601f0160051c810190600101613bbf565b8160208120915555565b614d7c816131ce565b50614d86816131ce565b614d9a826000526069602052604060002090565b906001600160a01b0319918281541690556001600160a01b03614dd0826001600160a01b03166000526068602052604060002090565b9160001992838154019055614def856000526067602052604060002090565b84815416905516836000827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef82604051a4151580614e9d575b614e6e575b5050614e4b614e46826000526097602052604060002090565b614d1d565b614e525750565b614e696108de916000526097602052604060002090565b614d27565b614e829060018410614e90575b8301612703565b509081541690553880614e2d565b614e9861385a565b614e7b565b506000614e28565b6001600160a01b03908181168060005261016760205260ff92836040600020541615614f18575b6101695460005b8186821610614eea57505050506108de9150613d23565b8383614ef583612085565b90549060031b1c1614614f1057614f0b90614527565b614ed3565b505050505050565b61016b614f258154613da4565b9055614f48613eb0846001600160a01b0316600052610167602052604060002090565b614ecc565b6001600160a01b0392908381169081614ff5575050614f78610e1b610166546001600160a01b031690565b81813110614fe357803b1561000e57604051633e97486160e11b8152939092166001600160a01b03166004840152602483015260009082908183816044810103925af18015614fd6575b614fc95750565b806149cf6108de92610819565b614fde612edb565b614fc2565b604051631e9acf1760e31b8152600490fd5b9190935061500f610e1b610166546001600160a01b031690565b6040516370a0823160e01b81526001600160a01b03821660048201526020958391908790829060249082905afa9081156150da575b6000916150bd575b5010614fe35760405163276d76f960e21b81526001600160a01b03938416600482015293909216602484015260448301528290829060649082906000905af180156150b0575b61509a575050565b816130a092903d106110c2576110b2818361088e565b6150b8612edb565b615092565b6150d49150873d891161125b5761124c818361088e565b3861504c565b6150e2612edb565b615044565b92916000816150fa575050505050600090565b6001600160a01b03606461513a604094615135615158986003891015615164575b60ff8960051c610173015460f88b60031b161c1690613ba0565b613ba0565b0495168152610172602052209060ff16600052602052604060002090565b5490811561392e570490565b61516c6116c7565b61511b565b60405191906000835b600382106151a1575050506060820182811067ffffffffffffffff82111761082d57604052565b600160208192855481520193019101909161517a565b95939192979694909761012087019887526001600160a01b039081602095168589015216604087015265ffffffffffff809216606087015216608085015260a084016000905b600382106152145750505050610100901515910152565b828060019286518152019401910190926151fd565b7fbbad5407299f3773930327d215f85a16617efbbddc1fe3902bd39ba46feacf269060018110615382575b6152616000198201612703565b509061537d61526e6108b0565b61528f61528285546001600160a01b031690565b6001600160a01b03168252565b60018401546001600160a01b038116602083019081529490919060a083901c65ffffffffffff16604083019081529260d01c6060830190815261537061536761535a61534d61533f60066152e560028901615171565b9760808a01988952600581015460a08b015201549761533260ff60c083019a6153128282168d9015159052565b615324828260081c1660e08601614308565b60101c166101008301614308565b516001600160a01b031690565b9a516001600160a01b031690565b965165ffffffffffff1690565b925165ffffffffffff1690565b92519351151590565b93604051978897886151b7565b0390a1565b61538a61385a565b615254565b6001600160a01b03809116151590816153ee575b506153ac575050565b6153c58260016108de94106153e1575b60001901612703565b50906001600160a01b03166001600160a01b0319825416179055565b6153e961385a565b6153bc565b905081161515386153a3565b61540b60ff60005460081c1661393a565b60ff1960ff541660ff5556fea2646970667358221220d8ecf6df74cae3f3b0da1c144122dea09e5736e9f9919f3e1158705a4143ebd064736f6c634300080e00337f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a71461040f57806306fdde0314610406578063081812fc146103fd57806308ed8d16146103f4578063095ea7b3146103eb578063125cc42f146103e2578063162094c4146103d9578063166866c7146103d05780631fecb71a146103c7578063217fe6c6146103be57806323b872dd146103b55780632e17de78146103ac5780633587e161146103a35780633659cfe61461039a57806339d2525f146103915780633c661b8b146103885780633de15c121461037f57806342842e0e14610376578063485cc9551461036d5780634f1ef28614610364578063528a9e4d1461035b57806352d1902d146103525780636352211e1461034957806365b014b71461034057806370a0823114610337578063715018a61461032e57806372a4db4a146103255780637547c7a31461031c57806378fecc9914610313578063829522001461030a578063848778b4146103015780638d03b102146102f85780638da5cb5b146102ef57806395d89b41146102e65780639b45d024146102dd5780639db5fa65146102d4578063a22cb465146102cb578063a59a9973146102c2578063b88d4fde146102b9578063ba5e4bad146102b0578063bad7edab146102a7578063bf0215501461029e578063c87b56dd14610295578063d2438c2a1461028c578063d5a44f8614610283578063de3e3eff1461027a578063e25b7d8214610271578063e985e9c514610268578063ef7bd7f31461025f578063f19ed6be146102565763f2fde38b1461024e57600080fd5b61000e612d3c565b5061000e612969565b5061000e612949565b5061000e6128de565b5061000e6128b6565b5061000e612872565b5061000e6127cc565b5061000e6126d4565b5061000e6125d3565b5061000e61257f565b5061000e6124b8565b5061000e612498565b5061000e612440565b5061000e612417565b5061000e612325565b5061000e6122c8565b5061000e6122a8565b5061000e612200565b5061000e6121d8565b5061000e6121b5565b5061000e612175565b5061000e61214c565b5061000e612126565b5061000e6120ca565b5061000e612028565b5061000e611f9a565b5061000e611ef4565b5061000e611ec9565b5061000e611eaa565b5061000e611dd2565b5061000e611ca8565b5061000e611b0e565b5061000e611a0f565b5061000e6119e6565b5061000e611741565b5061000e611705565b5061000e611628565b5061000e611495565b5061000e611183565b5061000e610d3a565b5061000e610d10565b5061000e610c54565b5061000e610bcb565b5061000e610b06565b5061000e610952565b5061000e6107bd565b5061000e610676565b5061000e610629565b5061000e6105ef565b5061000e610512565b5061000e61042a565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e57602060043561044a81610418565b63ffffffff60e01b166380ac58cd60e01b8114908115610488575b8115610477575b506040519015158152f35b6301ffc9a760e01b1490503861046c565b635b5e139f60e01b81149150610465565b600091031261000e57565b918091926000905b8282106104c45750116104bd575050565b6000910152565b915080602091830151818601520182916104ac565b906020916104f2815180928185528580860191016104a4565b601f01601f1916010190565b90602061050f9281815201906104d9565b90565b503461000e576000806003193601126105ec576040519080606554610536816131f0565b808552916001918083169081156105cb5750600114610570575b61056c856105608187038261088e565b604051918291826104fe565b0390f35b9250606583527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c75b8284106105b35750505081016020016105608261056c610550565b80546020858701810191909152909301928101610598565b60ff191660208701525050604084019250610560915083905061056c610550565b80fd5b503461000e57602036600319011261000e57602061060e600435613336565b6001600160a01b0360405191168152f35b8015150361000e57565b503461000e57602036600319011261000e576004356106478161061f565b61064f6139b3565b60ff8019815416911515161760ff556000604051f35b6001600160a01b0381160361000e57565b503461000e57604036600319011261000e5760043561069481610665565b6024356106a0816131ce565b916001600160a01b038084168091831614610720576106d2936106cd9133149081156106d4575b506132c4565b6136a6565b005b61071a9150610713906106fb33916001600160a01b0316600052606a602052604060002090565b906001600160a01b0316600052602052604060002090565b5460ff1690565b386106c7565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b6001600160a01b0316600052610172602052604060002090565b6001600160a01b031660005261016d602052604060002090565b6001600160a01b0316600052610168602052604060002090565b503461000e57602036600319011261000e576001600160a01b036004356107e381610665565b16600052610167602052602060ff604060002054166040519015158152f35b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161082d57604052565b610835610802565b604052565b6020810190811067ffffffffffffffff82111761082d57604052565b6060810190811067ffffffffffffffff82111761082d57604052565b6040810190811067ffffffffffffffff82111761082d57604052565b90601f8019910116810190811067ffffffffffffffff82111761082d57604052565b60405190610120820182811067ffffffffffffffff82111761082d57604052565b604051906108de82610856565b565b60209067ffffffffffffffff81116108fe575b601f01601f19160190565b610906610802565b6108f3565b81601f8201121561000e57803590610922826108e0565b92610930604051948561088e565b8284526020838301011161000e57816000926020809301838601378301015290565b503461000e57604036600319011261000e5767ffffffffffffffff60043560243582811161000e5761098890369060040161090b565b916109916139b3565b6109b18260005260676020526001600160a01b0360406000205416151590565b15610a9b5760009182526020906097825260408320918451918211610a8e575b6109e5826109df85546131f0565b8561416e565b80601f8311600114610a215750839482939492610a16575b50508160011b916000199060031b1c1916179055604051f35b0151905038806109fd565b90601f19831695610a3785600052602060002090565b9286905b888210610a7657505083600195969710610a5d575b505050811b019055604051f35b015160001960f88460031b161c19169055388080610a50565b80600185968294968601518155019501930190610a3b565b610a96610802565b6109d1565b60405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201527f6578697374656e7420746f6b656e0000000000000000000000000000000000006064820152608490fd5b503461000e5760208060031936011261000e57600435610b2581610665565b610b2d613a5f565b90610b516001600160a01b0392848460cd54163314918215610b8f575b5050613a80565b1690816000526101679182825260ff60406000205416610b6d57005b61016b610b7a8154614cd8565b905560005252604060002060ff198154169055005b60ff925090610bb991336000526101008252604060002082604051948386809551938492016104a4565b82019081520301902054168438610b4a565b503461000e57602036600319011261000e576106d2600435610bec81610665565b610c13610bf7613a5f565b6001600160a01b0360cd54163314908115610c18575b50613a80565b614ea5565b60ff91506020610c4391336000526101008252604060002082604051948386809551938492016104a4565b820190815203019020541638610c0d565b503461000e57604036600319011261000e57600435610c7281610665565b60243567ffffffffffffffff811161000e57610cc7602061056c936001600160a01b03610ca560ff95369060040161090b565b91166000526101008252604060002082604051948386809551938492016104a4565b820190815203019020546040519116151581529081906020820190565b606090600319011261000e57600435610cfc81610665565b90602435610d0981610665565b9060443590565b503461000e576106d2610d2236610ce4565b91610d35610d308433613460565b613373565b61353b565b503461000e5760208060031936011261000e57600435610d61610d5c82613871565b612703565b5091610d7483546001600160a01b031690565b906001600160a01b03918233911603611172576001840190815492428460d01c118015611154575b8015611136575b611124576005600287019683610de5610dd78a54610dd1610dc78d60010190600090565b90549060031b1c90565b906138c1565b610dd160028c016000610dc7565b6006830197610df5895460ff1690565b15611111575090610e52600092610e27610e1b610e1b610165546001600160a01b031690565b6001600160a01b031690565b60405163a9059cbb60e01b815233600482015260248101929092529093849283919082906044820190565b03925af18015611104575b6110e7575b505b015480611034575b505082546001915060101c60ff16610e838161274c565b14610f8f575b50805462ff00001916620200001781556106d29250610f0691610d5c9160408051838152600260208201527fab7e44c17ad2a7b4de0e42ab0bc824366a946f184a1133f0b5528347e4ccbd2991819081010390a18054600160ff8260081c16610ef18161274c565b14908115610f84575b50610f0c575b50613871565b90614ce5565b805461ff001916610200179055610f398160005260676020526001600160a01b0360406000205416151590565b610f76575b60408051828152600260208201527f855f5f4ea7c8c6a92f173fbc35c24d01139c2a49e9bcc085f03620cb6a1c65139190a138610f00565b610f7f81614d73565b610f3e565b60ff91501638610efa565b610fa4610f9e61016c54614cd8565b61016c55565b600090815b600360ff821610610fbb575050610e89565b80610fcc610dc76110149389614539565b855460ff16156110195761100d61100583610ff361076f610165546001600160a01b031690565b9060ff16600052602052604060002090565b91825461388e565b9055614527565b610fa9565b61100d61100583610ff361076f88546001600160a01b031690565b6110848391611044875460ff1690565b156110d657610165546001600160a01b0316905b60405163a9059cbb60e01b81523360048201526024810191909152938492839160009183906044820190565b0393165af180156110c9575b61109b575b80610e6c565b816110ba92903d106110c2575b6110b2818361088e565b8101906142a0565b503880611095565b503d6110a8565b6110d1612edb565b611090565b85546001600160a01b031690611058565b6110fd90853d87116110c2576110b2818361088e565b5038610e62565b61110c612edb565b610e5d565b61111f925085339116614f4d565b610e64565b60405163baf3f0f760e01b8152600490fd5b50600686015460029060081c60ff1661114e8161274c565b14610da3565b50600686015460029060101c60ff1661116c8161274c565b14610d9c565b6040516282b42960e81b8152600490fd5b503461000e576000806003193601126105ec5761119e6139b3565b805b6101695481101561126f57611230906112066111c8610e1b610166546001600160a01b031690565b6111e76111d484612085565b90546001600160a01b039160031b1c1690565b6040518092630530fa2160e01b82528180602096879560048301614889565b03915afa918215611262575b8592611235575b505061122a6107896111d484612085565b55613da4565b6111a0565b6112549250803d1061125b575b61124c818361088e565b810190612ecc565b3880611219565b503d611242565b61126a612edb565b611212565b50805b61017054811015611311578061128a6112e492612703565b50600681015460ff91828260101c16906112a38261274c565b6001809203611308576112df936112b9866138a5565b9316156112e95750506112d8610789610165546001600160a01b031690565b54906148d7565b613da4565b611272565b01546001600160a01b0316600090815261016d602052604090206112d8565b50505050613da4565b50805b6101695481101561146b57806113326107896111d46113a894612085565b548361134a610e1b610166546001600160a01b031690565b6113566111d485612085565b6040916113968351630530fa2160e01b815260209687828061137c600498898301614889565b0381875afa91821561145e575b879261143f575b5061388e565b91826113ad575b505050505050613da4565b611314565b6113fa9486946113bf6111d48a612085565b905163276d76f960e21b81526001600160a01b0390911692810192835230602084015260408301949094529294859384929091839160600190565b03925af18015611432575b611414575b808080879361139d565b8161142a92903d106110c2576110b2818361088e565b50388061140a565b61143a612edb565b611405565b611457919250883d8a1161125b5761124c818361088e565b9038611390565b611466612edb565b611389565b506040517f3ebfd10f795a127a78001b56051c04828d55b68d9d77ebce97b617c8adc53ed28282a1f35b503461000e57602036600319011261000e576004356114b381610665565b6001600160a01b0390817f000000000000000000000000000000000000000000000000000000000000000016916114ec83301415612e0a565b61151b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc938285541614612e6b565b6115236139b3565b604051906115308261083a565b600082527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561156a5750506106d29150612f46565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181611608575b506115f55760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b0390fd5b6106d2936116039114612ee8565b612fe4565b61162191925060203d811161125b5761124c818361088e565b9038611590565b503461000e57606036600319011261000e5760043561164681610665565b6024359067ffffffffffffffff821161000e576116ad602061166f6106d294369060040161090b565b6001600160a01b03604435946116848661061f565b61168c6139b3565b166000526101008252604060002082604051948386809551938492016104a4565b8201908152030190209060ff801983541691151516179055565b50634e487b7160e01b600052603260045260246000fd5b9060038210156116f8575b601f8260051c61017301921690565b6117006116c7565b6116e9565b503461000e57602036600319011261000e57600435600381101561000e578060ff60209260051c610173015460f86040519360031b161c168152f35b503461000e57602036600319011261000e5760043561176c610e1b610165546001600160a01b031690565b330361117257610174906117818254826138c1565b9061178d600061017455565b610170805460005b8181106119a157509054905b81811061198757505060005b6101695481101561195c576117c46111d482612085565b61016b6117fa6117d5825487613924565b6117f3846001600160a01b0316600052610168602052604060002090565b54906138c1565b600061181a846001600160a01b0316600052610168602052604060002090565b55600090815b600360ff82161061189157505090600360ff611846959493161461184b575b5050613da4565b6117ad565b61187d61188491600061187561188a956001600160a01b0316600052610168602052604060002090565b555486613924565b87546138c1565b61017455565b388061183f565b6118c66118bf6118b96118b36118a6856116de565b905460ff9160031b1c1690565b60ff1690565b84613ba0565b6064900490565b6118e882610ff3886001600160a01b0316600052610172602052604060002090565b5415611921575b9061191c9161191682610ff3896001600160a01b031660005261016f602052604060002090565b55614527565b611820565b929061195361191c92611948886001600160a01b0316600052610168602052604060002090565b61100d8782546138c1565b939091506118ef565b60006040517fbd9c0e36f2110aa67058734f061a385583a1d8b5758bcb065ca0f26c4c64603c8282a1f35b806112df61199761199c936138a5565b615229565b6117a1565b8060016119c160066119b56119e195612703565b50015460101c60ff1690565b6119ca8161274c565b036112df576112df866119dc836138a5565b61456d565b611795565b503461000e576106d26119f836610ce4565b9060405192611a068461083a565b600084526133d5565b503461000e57604036600319011261000e57600435611a2d81610665565b611a7d602435611a3c81610665565b60005492611a6160ff8560081c161580958196611b00575b8115611ae0575b50613c3b565b83611a74600160ff196000541617600055565b611ac757613e6c565b611a8357005b611a9361ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989080602081015b0390a1005b611adb61010061ff00196000541617600055565b613e6c565b303b15915081611af2575b5038611a5b565b6001915060ff161438611aeb565b600160ff8216109150611a54565b50604036600319011261000e57600435611b2781610665565b60243567ffffffffffffffff811161000e57611b4790369060040161090b565b906001600160a01b0391827f00000000000000000000000000000000000000000000000000000000000000001692611b8184301415612e0a565b611bb07f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc948286541614612e6b565b611bb86139b3565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611bee5750506106d29150612f46565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181611c88575b50611c755760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b6106d293611c839114612ee8565b6130fc565b611ca191925060203d811161125b5761124c818361088e565b9038611c14565b503461000e57602036600319011261000e57600435611cc9610d5c82613871565b5090611cdc82546001600160a01b031690565b6001600160a01b0333911603611172576006820180549260ff938480821615918215611dba575b505061112457815462ff000019166201000017825592611d28610f9e61016c54613da4565b600260009401935b600382821610611d7b577fab7e44c17ad2a7b4de0e42ab0bc824366a946f184a1133f0b5528347e4ccbd2984611d6b855460ff9060101c1690565b90611ac260405192839283614557565b611db381611d8e610dc760039489614539565b61100d611dab83610ff361076f610165546001600160a01b031690565b9182546138c1565b9050611d30565b60101c169050611dc98161274c565b15158438611d03565b503461000e57600036600319011261000e576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611e3f576040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152602090f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b503461000e57602036600319011261000e57602061060e6004356131ce565b503461000e57600036600319011261000e57611eec60ff60005460081c1661393a565b6106d2613a0b565b503461000e57602036600319011261000e576001600160a01b03600435611f1a81610665565b168015611f4357600052606860205261056c604060002054604051918291829190602083019252565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b503461000e576000806003193601126105ec57611fb56139b3565b60cd546001600160a01b0319811660cd55816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b6024359060ff8216820361000e57565b6044359060ff8216820361000e57565b359060ff8216820361000e57565b503461000e57606036600319011261000e57366023121561000e5760405161204f81610856565b60648136821161000e576004905b82821061206d576106d284613acc565b6020809161207a8461201a565b81520191019061205d565b61016980548210156120bd575b6000527fbd88e1fd0aa5f3038c0cd2a68644e2d11f4e4e7e3693adba414318f2127ca4260190600090565b6120c56116c7565b612092565b503461000e57602036600319011261000e57600435610169805482101561000e576020916001600160a01b03916000527fbd88e1fd0aa5f3038c0cd2a68644e2d11f4e4e7e3693adba414318f2127ca426015416604051908152f35b503461000e57600036600319011261000e576020612142614a18565b6040519015158152f35b503461000e57600036600319011261000e5760206001600160a01b036101655416604051908152f35b503461000e57602036600319011261000e576001600160a01b0360043561219b81610665565b166000526101686020526020604060002054604051908152f35b503461000e57600036600319011261000e57602060ff8054166040519015158152f35b503461000e57600036600319011261000e5760206001600160a01b0360cd5416604051908152f35b503461000e576000806003193601126105ec576040519080606654612224816131f0565b808552916001918083169081156105cb575060011461224d5761056c856105608187038261088e565b9250606683527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e943545b8284106122905750505081016020016105608261056c610550565b80546020858701810191909152909301928101612275565b503461000e57600036600319011261000e57602061016c54604051908152f35b503461000e57604036600319011261000e57602061231c6004356122eb81610665565b6001600160a01b036122fb611ffa565b9116600052610172835260406000209060ff16600052602052604060002090565b54604051908152f35b503461000e57604036600319011261000e5760043561234381610665565b60243561234f8161061f565b6001600160a01b038216918233146123d2578161238f6123a09233600052606a6020526040600020906001600160a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b503461000e57600036600319011261000e5760206001600160a01b036101665416604051908152f35b503461000e57608036600319011261000e5760043561245e81610665565b60243561246a81610665565b6064359167ffffffffffffffff831161000e5761248e6106d293369060040161090b565b91604435916133d5565b503461000e57600036600319011261000e57602061017454604051908152f35b503461000e57602036600319011261000e576004356124d9610d5c82613871565b508054336001600160a01b0390911603611172576006018054600260ff8260101c166125048161274c565b14908115612566575b5061112457805461ff0019166101001790557f855f5f4ea7c8c6a92f173fbc35c24d01139c2a49e9bcc085f03620cb6a1c651390611ac29061254f8133614bd1565b604080519182526001602083015290918291820190565b60ff915060081c166125778161274c565b15153861250d565b503461000e57604036600319011261000e57602061231c6004356125a281610665565b6001600160a01b036125b2611ffa565b911660005261016f835260406000209060ff16600052602052604060002090565b503461000e5760208060031936011261000e576004359061261261260d8360005260676020526001600160a01b0360406000205416151590565b613182565b60009182526097815260408220916040519283828254612631816131f0565b808452936001918083169081156126b6575060011461267a575b50506126599250038461088e565b6040516126658161083a565b5261056c6040519282849384528301906104d9565b86925085528185209085915b85831061269e5750506126599350820101388061264b565b8054838a018501528894508793909201918101612686565b9550505050505060ff1916828401526126598360408101388061264b565b503461000e57600036600319011261000e576126f760ff60005460081c1661393a565b60ff805460ff19169055005b600790610170805482101561273f575b600052027f88e1afb22f13be7fec203799fd189c3b9471c5b75e2b22a6d5efec11c7f392550190600090565b6127476116c7565b612713565b6003111561275657565b634e487b7160e01b600052602160045260246000fd5b94919897969360e096939161010087019a6001600160a01b03809216885216602087015265ffffffffffff80921660408701521660608501526080840152151560a08301526127ba8161274c565b60c08201526127c88361274c565b0152565b503461000e57602036600319011261000e576004356101705481101561000e576127f590612703565b506001600160a01b0361056c81835416600184015490600660058601549501549060405195869560ff8460101c169460ff808660081c169516938160d01c9265ffffffffffff8360a01c169216908961276c565b906003821015612865575b600660058084046101710193060290565b61286d6116c7565b612854565b503461000e57602036600319011261000e57600435600381101561000e578065ffffffffffff60056020930461017101546006600560405194060260031b1c168152f35b503461000e57600036600319011261000e57602065ffffffffffff61016a5416604051908152f35b503461000e57604036600319011261000e57602060ff61293d60043561290381610665565b6001600160a01b036024359161291883610665565b16600052606a84526040600020906001600160a01b0316600052602052604060002090565b54166040519015158152f35b503461000e57600036600319011261000e57602061016b54604051908152f35b50606036600319011261000e57600480359061298482610665565b6024359161299061200a565b918315612cee576129bf6129bb610713846001600160a01b0316600052610167602052604060002090565b1590565b612ca0576001600160a01b0382168015801580612c38575b612c275785919015612b8057503403612b275750612af391610ff3611dab92600080808089612a18610e1b610e1b610e1b610166546001600160a01b031690565b82f115612b1a575b61076f612a2b6142b5565b87612a3960ff871683613b54565b5265ffffffffffff421690612ac6612a89612a83612a6b612a598a612849565b905465ffffffffffff9160031b1c1690565b60ff80541615612b105761ffff6103f05b16906142c9565b846142ed565b612ab7612a946108b0565b338152946001600160a01b03881660208701525b65ffffffffffff166040860152565b65ffffffffffff166060840152565b6080820152600060a0820152600060c0820152600060e0820152612aee610100820160019052565b61437c565b9055612b04610f9e61016c54613da4565b6106d261017054615229565b61ffff6001612a7c565b612b22612edb565b612a20565b6115f190604051918291631fff1b3b60e21b8352820160809060208152602260208201527f496e636f7272656374206e617469766520636f696e207374616b6520616d6f756040820152611b9d60f21b60608201520190565b92612be66020610ff393611dab96612af398966000612bab610e1b610166546001600160a01b031690565b604080516323b872dd60e01b8152339481019485526001600160a01b0390921660208501528301949094529294859384929091839160600190565b03925af18015612c1a575b612bfc575b50612a20565b612c139060203d81116110c2576110b2818361088e565b5038612bf6565b612c22612edb565b612bf1565b604051631e9acf1760e31b81528390fd5b506040516370a0823160e01b8152338482019081528791906020908290819083010381875afa908115612c93575b600091612c75575b50106129d7565b612c8d915060203d811161125b5761124c818361088e565b38612c6e565b612c9b612edb565b612c66565b6115f190604051918291631fff1b3b60e21b8352820160609060208152601360208201527f496e76616c6964207374616b6520746f6b656e0000000000000000000000000060408201520190565b6115f190604051918291631fff1b3b60e21b8352820160609060208152601560208201527f416d6f756e742063616e6e6f74206265207a65726f000000000000000000000060408201520190565b503461000e57602036600319011261000e57600435612d5a81610665565b612d626139b3565b6001600160a01b03809116908115612db65760009160cd5491816001600160a01b031984161760cd5560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b15612e1157565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15612e7257565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b9081602091031261000e575190565b506040513d6000823e3d90fd5b15612eef57565b60405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b803b15612f89576001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91166001600160a01b0319825416179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b612fed81612f46565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a28251158015906130f4575b61303357505050565b813b156130a35750600082819260206130a095519201905af4613054613152565b6040519161306183610856565b602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020840152660819985a5b195960ca1b60408401526138cd565b50565b62461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b50600061302a565b61310581612f46565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a282511580159061314a5761303357505050565b50600161302a565b3d1561317d573d90613163826108e0565b91613171604051938461088e565b82523d6000602084013e565b606090565b1561318957565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b60005260676020526001600160a01b036040600020541661050f811515613182565b90600182811c92168015613220575b602083101461320a57565b634e487b7160e01b600052602260045260246000fd5b91607f16916131ff565b60c9546000929161323a826131f0565b808252916001908181169081156132b1575060011461325857505050565b9192935060c96000527f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d28916000925b84841061329957505060209250010190565b80546020858501810191909152909301928101613287565b60ff191660208401525050604001925050565b156132cb57565b60405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608490fd5b61335961260d8260005260676020526001600160a01b0360406000205416151590565b60005260696020526001600160a01b036040600020541690565b1561337a57565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b906133f99392916133e9610d308433613460565b6133f483838361353b565b613750565b1561340057565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b6001600160a01b0380613472846131ce565b1692818316928484149485156134a8575b50508315613492575b50505090565b61349e91929350613336565b161438808061348c565b60ff929550906134d791600052606a6020526040600020906001600160a01b0316600052602052604060002090565b5416923880613483565b156134e857565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b90613561929161354a836131ce565b6001600160a01b03828116959091821686146134e1565b8216938415613655576108de94816135868693613580610e1b866131ce565b146134e1565b6135ad61359d846000526069602052604060002090565b80546001600160a01b0319169055565b6135ca846001600160a01b03166000526068602052604060002090565b60001981540190556135ef856001600160a01b03166000526068602052604060002090565b600181540190556136298561360e856000526067602052604060002090565b906001600160a01b03166001600160a01b0319825416179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a461538f565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b600082815260696020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b03806136df846131ce565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b9081602091031261000e575161050f81610418565b909261050f94936080936001600160a01b038092168452166020830152604082015281606082015201906104d9565b92909190823b156138515761378b9260209260006001600160a01b03604051809781968295630a85bd0160e11b9b8c85523360048601613721565b0393165af160009181613821575b50613813576137a6613152565b8051908161380e5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b602001fd5b6001600160e01b0319161490565b61384391925060203d811161384a575b61383b818361088e565b81019061370c565b9038613799565b503d613831565b50505050600190565b50634e487b7160e01b600052601160045260246000fd5b60018110613881575b6000190190565b61388961385a565b61387a565b818110613899570390565b6138a161385a565b0390565b60019060011981116138b5570190565b6138bd61385a565b0190565b811981116138b5570190565b909190156138d9575090565b8151156138e95750805190602001fd5b60405162461bcd60e51b8152602060048201529081906115f19060248301906104d9565b50634e487b7160e01b600052601260045260246000fd5b811561392e570490565b61393661390d565b0490565b1561394157565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6139ab60ff60005460081c1661393a565b6108de613a0b565b6001600160a01b0360cd541633036139c757565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60cd546001600160a01b03737e8ae5c72eca86946b695dcc211863d9721a09619182821982161760cd55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b60405190613a6c82610872565b600582526430b236b4b760d91b6020830152565b15613a8757565b60405162461bcd60e51b815260206004820152600e60248201527f4e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606490fd5b613ad7610bf7613a5f565b606460ff613aff613af2828551168360208701511690613b73565b8260408601511690613b73565b1603613b0e576108de90613bd6565b604051631fff1b3b60e21b815260206004820152601260248201527f4d7573742073756d20757020746f2031303000000000000000000000000000006044820152606490fd5b906003811015613b66575b60051b0190565b613b6e6116c7565b613b5f565b60ff8091169116908160ff0381116138b5570190565b50634e487b7160e01b600052600060045260246000fd5b8060001904821181151516613bb3570290565b613bbb61385a565b0290565b818110613bca575050565b60008155600101613bbf565b9061017360009081935b600380861015613c33579060209160ff908183511691868654921b90811b9283911b169119161783550193600180930192601f8411613c24575b5060010193613be0565b60009350909101906001613c1a565b505050509050565b15613c4257565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608490fd5b61016980549068010000000000000000821015613d16575b60018201808255821015613d09575b6000527fbd88e1fd0aa5f3038c0cd2a68644e2d11f4e4e7e3693adba414318f2127ca4260180546001600160a01b0319169055565b613d116116c7565b613cd4565b613d1e610802565b613cc5565b6001600160a01b0361016980549068010000000000000000821015613d97575b60018201808255821015613d8a575b6000527fbd88e1fd0aa5f3038c0cd2a68644e2d11f4e4e7e3693adba414318f2127ca4260191166001600160a01b0319825416179055565b613d926116c7565b613d52565b613d9f610802565b613d43565b60019060001981146138b5570190565b90610171600080935b600380861015613c33578160209162ffffff600694511690858754911b65ffffffffffff811b9283911b1691191617855501910193601a8511613e05575b6001019390613dbd565b60009450600190920191613dfb565b60405190613e2182610872565b601382527f457363726f77656420417373657420426f6e64000000000000000000000000006020830152565b60405190613e5a82610872565b600382526222a0a160e91b6020830152565b613ed990613f0b926001600160a01b0380199061016581851683825416179055610166921690825416179055613ebd613eb060008052610167602052604060002090565b805460ff19166001179055565b613ec5613cad565b613f0561016b91613edf613ed98454613da4565b61016b55565b613f00613eb0826001600160a01b0316600052610167602052604060002090565b613d23565b54613da4565b61016a805465ffffffffffff1916630114db00179055613f49613f2c6108d1565b62093a8081526224ea006020820152626ebe006040820152613db4565b613f6b613f546108d1565b60148152601e602082015260326040820152613bd6565b613f84613f76613e14565b613f7e613e4d565b90613f94565b613f8c61399a565b6108de6153fa565b90613faf60ff60005460081c16613faa8161393a565b61393a565b815167ffffffffffffffff81116140aa575b613fd581613fd06065546131f0565b6140b7565b602080601f8311600114614017575081906108de9460009261400c575b50508160011b916000199060031b1c1916176065556141a8565b015190503880613ff2565b919293601f19841661404b60656000527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c790565b936000905b8282106140925750509160019391856108de97969410614079575b505050811b016065556141a8565b015160001960f88460031b161c1916905538808061406b565b80600186978294978701518155019601940190614050565b6140b2610802565b613fc1565b90601f82116140c4575050565b6108de9160656000527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c7906020601f840160051c8301931061410e575b601f0160051c0190613bbf565b9091508190614101565b90601f8211614125575050565b6108de9160666000527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e94354906020601f840160051c8301931061410e57601f0160051c0190613bbf565b9190601f811161417d57505050565b6108de926000526020600020906020601f840160051c8301931061410e57601f0160051c0190613bbf565b90815167ffffffffffffffff8111614293575b6141cf816141ca6066546131f0565b614118565b602080601f831160011461420b5750819293600092614200575b50508160011b916000199060031b1c191617606655565b0151905038806141e9565b90601f1983169461423e60666000527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e9435490565b926000905b87821061427b575050836001959610614262575b505050811b01606655565b015160001960f88460031b161c19169055388080614257565b80600185968294968601518155019501930190614243565b61429b610802565b6141bb565b9081602091031261000e575161050f8161061f565b604051906142c282610856565b6060368337565b9065ffffffffffff8091169182156142e057160490565b6142e861390d565b160490565b9065ffffffffffff80809316911680920381116138b5570190565b6143118261274c565b52565b906000905b6003821061432657505050565b6001602082829351865501930191019091614319565b906143468161274c565b61ff0082549160081b169061ff001916179055565b906143658161274c565b62ff000082549160101b169062ff00001916179055565b6108de9061010060066143ab6101708054906801000000000000000082101561451a575b600182019055612703565b61450d575b6143e06143c485516001600160a01b031690565b82546001600160a01b0319166001600160a01b03909116178255565b6144a6600182016143fe6143c460208801516001600160a01b031690565b61444e614414604088015165ffffffffffff1690565b82547fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b65ffffffffffff60a01b16178255565b606086015165ffffffffffff16815479ffffffffffffffffffffffffffffffffffffffffffffffffffff1660d09190911b7fffffffffffff000000000000000000000000000000000000000000000000000016179055565b6144b7608085015160028301614314565b60a0840151600582015501916144e56144d360c0830151151590565b849060ff801983541691151516179055565b6144fc60e08201516144f68161274c565b8461433c565b0151906145088261274c565b61435b565b614515613b89565b6143b0565b614522610802565b6143a0565b60ff6001911660ff81146138b5570190565b600382101561454a575b0190600090565b6145526116c7565b614543565b908152604081019291906020906127c88361274c565b610d5c61457991613871565b509061458c82546001600160a01b031690565b906145ab826001600160a01b031660005261016e602052604060002090565b60068401926145ea6145be855460ff1690565b92831561487657610165546001600160a01b03165b6001600160a01b0316600052602052604060002090565b549182158015614840575b614708575b5050610d5c61460b91949394613871565b509060009260028082019301935b600360ff82161061462c57505050505050565b6146d8906146d3614697614641895460ff1690565b80156146f457610165546001600160a01b0316905b84614691614667610dc7838d614539565b9261467561016b548c613924565b90156146dd576117f36107a3610165546001600160a01b031690565b926150e7565b6146ba6146a4848a614539565b9190926146b58385549060031b1c90565b6138c1565b9082549060031b600019811b9283911b16911916179055565b614527565b614619565b6117f36107a360018c01546001600160a01b031690565b60018601546001600160a01b031690614656565b6147b092506147156142b5565b901561482457614789614731610165546001600160a01b031690565b612ab765ffffffffffff4216612aa861475e614758612a6b61016a5465ffffffffffff1690565b836142ed565b9361477961476a6108b0565b6001600160a01b039099168952565b6001600160a01b03166020880152565b6080820152600060a0820152600160c0820152600060e0820152600061010082015261437c565b61460b610d5c61017054806148086147ec6147d289546001600160a01b031690565b6001600160a01b031660005261016e602052604060002090565b875460ff161561480f57610165546001600160a01b03166145d3565b55916145fa565b60018901546001600160a01b03165b906106fb565b61478961483b60018801546001600160a01b031690565b614731565b506148636001614852610d5c86613871565b50015460a01c65ffffffffffff1690565b65ffffffffffff804216911614156145f5565b60018701546001600160a01b031661481e565b9190916040815260206001600160a01b036148a66040840161322a565b9416910152565b60409093929193606081526001600160a01b036148cc6060830161322a565b951660208201520152565b610d5c6148e391613871565b5060058101916006820191600281019160005b600360ff82161061490957505050505050565b845460ff169081156149fb576149408361492c610165546001600160a01b031690565b8361493a610dc7828b614539565b916150e7565b9161494c8389546138c1565b8855614964610e1b610166546001600160a01b031690565b90156149e857610165546001600160a01b03165b813b1561000e576149bd936149a79260009283604051809681958294636c49e02160e01b8452600484016148ad565b03925af180156149db575b6149c2575b50614527565b6148f6565b806149cf6149d592610819565b80610499565b386149b7565b6149e3612edb565b6149b2565b60018501546001600160a01b0316614978565b61494083614a1360018701546001600160a01b031690565b61492c565b60006101695490614a35610e1b610166546001600160a01b031690565b905b828110614a4657505050600090565b614a526111d482612085565b604051630530fa2160e01b815260209190828180614a738560048301614889565b0381885afa928315614b78575b600093614b53575b5050806117f3614b14614af9614ac7614ab8614b24966001600160a01b0316600052610172602052604060002090565b60008052602052604060002090565b546117f3614ae9866001600160a01b0316600052610172602052604060002090565b6001600052602052604060002090565b926001600160a01b0316600052610172602052604060002090565b6002600052602052604060002090565b9015159081614b49575b50614b4157614b3c90613da4565b614a37565b505050600190565b9050151538614b2e565b614b249293509081614b7092903d1061125b5761124c818361088e565b919038614a88565b614b80612edb565b614a80565b15614b8c57565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b6001600160a01b038116908115614c9457614c6a90614c0f614c098560005260676020526001600160a01b0360406000205416151590565b15614b85565b614c32614c098560005260676020526001600160a01b0360406000205416151590565b614c4f816001600160a01b03166000526068602052604060002090565b6001815401905561360e846000526067602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a4565b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b8015613881576000190190565b600690600092614d10575b8281558260018201558260058201614d0b8160028501613bbf565b550155565b614d18613b89565b614cf0565b61050f90546131f0565b614d3181546131f0565b9081614d3b575050565b81601f60009311600114614d4d575055565b81835260208320614d6991601f0160051c810190600101613bbf565b8160208120915555565b614d7c816131ce565b50614d86816131ce565b614d9a826000526069602052604060002090565b906001600160a01b0319918281541690556001600160a01b03614dd0826001600160a01b03166000526068602052604060002090565b9160001992838154019055614def856000526067602052604060002090565b84815416905516836000827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef82604051a4151580614e9d575b614e6e575b5050614e4b614e46826000526097602052604060002090565b614d1d565b614e525750565b614e696108de916000526097602052604060002090565b614d27565b614e829060018410614e90575b8301612703565b509081541690553880614e2d565b614e9861385a565b614e7b565b506000614e28565b6001600160a01b03908181168060005261016760205260ff92836040600020541615614f18575b6101695460005b8186821610614eea57505050506108de9150613d23565b8383614ef583612085565b90549060031b1c1614614f1057614f0b90614527565b614ed3565b505050505050565b61016b614f258154613da4565b9055614f48613eb0846001600160a01b0316600052610167602052604060002090565b614ecc565b6001600160a01b0392908381169081614ff5575050614f78610e1b610166546001600160a01b031690565b81813110614fe357803b1561000e57604051633e97486160e11b8152939092166001600160a01b03166004840152602483015260009082908183816044810103925af18015614fd6575b614fc95750565b806149cf6108de92610819565b614fde612edb565b614fc2565b604051631e9acf1760e31b8152600490fd5b9190935061500f610e1b610166546001600160a01b031690565b6040516370a0823160e01b81526001600160a01b03821660048201526020958391908790829060249082905afa9081156150da575b6000916150bd575b5010614fe35760405163276d76f960e21b81526001600160a01b03938416600482015293909216602484015260448301528290829060649082906000905af180156150b0575b61509a575050565b816130a092903d106110c2576110b2818361088e565b6150b8612edb565b615092565b6150d49150873d891161125b5761124c818361088e565b3861504c565b6150e2612edb565b615044565b92916000816150fa575050505050600090565b6001600160a01b03606461513a604094615135615158986003891015615164575b60ff8960051c610173015460f88b60031b161c1690613ba0565b613ba0565b0495168152610172602052209060ff16600052602052604060002090565b5490811561392e570490565b61516c6116c7565b61511b565b60405191906000835b600382106151a1575050506060820182811067ffffffffffffffff82111761082d57604052565b600160208192855481520193019101909161517a565b95939192979694909761012087019887526001600160a01b039081602095168589015216604087015265ffffffffffff809216606087015216608085015260a084016000905b600382106152145750505050610100901515910152565b828060019286518152019401910190926151fd565b7fbbad5407299f3773930327d215f85a16617efbbddc1fe3902bd39ba46feacf269060018110615382575b6152616000198201612703565b509061537d61526e6108b0565b61528f61528285546001600160a01b031690565b6001600160a01b03168252565b60018401546001600160a01b038116602083019081529490919060a083901c65ffffffffffff16604083019081529260d01c6060830190815261537061536761535a61534d61533f60066152e560028901615171565b9760808a01988952600581015460a08b015201549761533260ff60c083019a6153128282168d9015159052565b615324828260081c1660e08601614308565b60101c166101008301614308565b516001600160a01b031690565b9a516001600160a01b031690565b965165ffffffffffff1690565b925165ffffffffffff1690565b92519351151590565b93604051978897886151b7565b0390a1565b61538a61385a565b615254565b6001600160a01b03809116151590816153ee575b506153ac575050565b6153c58260016108de94106153e1575b60001901612703565b50906001600160a01b03166001600160a01b0319825416179055565b6153e961385a565b6153bc565b905081161515386153a3565b61540b60ff60005460081c1661393a565b60ff1960ff541660ff5556fea2646970667358221220d8ecf6df74cae3f3b0da1c144122dea09e5736e9f9919f3e1158705a4143ebd064736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 674,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 677,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4007,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4788,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1980,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1982,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1986,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1990,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1994,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2000,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2920,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 3507,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3623,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 28581,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "interestForPoolBalanceName",
        "offset": 0,
        "slot": "201",
        "type": "t_string_storage"
      },
      {
        "astId": 28584,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "interestForLenderBalanceName",
        "offset": 0,
        "slot": "202",
        "type": "t_string_storage"
      },
      {
        "astId": 28587,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "tradeCommissionBalanceName",
        "offset": 0,
        "slot": "203",
        "type": "t_string_storage"
      },
      {
        "astId": 28590,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "bondingCommissionBalanceName",
        "offset": 0,
        "slot": "204",
        "type": "t_string_storage"
      },
      {
        "astId": 9827,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 9947,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 28121,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "testing",
        "offset": 0,
        "slot": "255",
        "type": "t_bool"
      },
      {
        "astId": 9959,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "hasRole",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))"
      },
      {
        "astId": 656,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "257",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 971,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "307",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 25473,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "nend",
        "offset": 0,
        "slot": "357",
        "type": "t_address"
      },
      {
        "astId": 25476,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "lendingPool",
        "offset": 0,
        "slot": "358",
        "type": "t_contract(Vault)29380"
      },
      {
        "astId": 25480,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "activeStakeTokens",
        "offset": 0,
        "slot": "359",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 25484,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "inflationRollOver",
        "offset": 0,
        "slot": "360",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25487,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "stakeTokens",
        "offset": 0,
        "slot": "361",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 25489,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "escrowLockPeriod",
        "offset": 0,
        "slot": "362",
        "type": "t_uint48"
      },
      {
        "astId": 25491,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "stakeTokenCount",
        "offset": 0,
        "slot": "363",
        "type": "t_uint256"
      },
      {
        "astId": 25493,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "ongoingStakeCount",
        "offset": 0,
        "slot": "364",
        "type": "t_uint256"
      },
      {
        "astId": 25497,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "ifpTokenToAmount",
        "offset": 0,
        "slot": "365",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25503,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "userToStakeTokenToLastEscrowId",
        "offset": 0,
        "slot": "366",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 25509,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "lastEscrowRewardByToken_Duration",
        "offset": 0,
        "slot": "367",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 25513,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "stakes",
        "offset": 0,
        "slot": "368",
        "type": "t_array(t_struct(Stake)27783_storage)dyn_storage"
      },
      {
        "astId": 25517,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "stakeDurations",
        "offset": 0,
        "slot": "369",
        "type": "t_array(t_uint48)3_storage"
      },
      {
        "astId": 25523,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "totalStakedByToken_Duration",
        "offset": 0,
        "slot": "370",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 25527,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "rewardAllocations",
        "offset": 0,
        "slot": "371",
        "type": "t_array(t_uint8)3_storage"
      },
      {
        "astId": 25529,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "poolRollOver",
        "offset": 0,
        "slot": "372",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Stake)27783_storage)dyn_storage": {
        "base": "t_struct(Stake)27783_storage",
        "encoding": "dynamic_array",
        "label": "struct ILendingPoolStaking.Stake[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint48)3_storage": {
        "base": "t_uint48",
        "encoding": "inplace",
        "label": "uint48[3]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)3_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[3]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Vault)29380": {
        "encoding": "inplace",
        "label": "contract Vault",
        "numberOfBytes": "20"
      },
      "t_enum(EscrowStatus)27760": {
        "encoding": "inplace",
        "label": "enum ILendingPoolStaking.EscrowStatus",
        "numberOfBytes": "1"
      },
      "t_enum(StakeStatus)27756": {
        "encoding": "inplace",
        "label": "enum ILendingPoolStaking.StakeStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Stake)27783_storage": {
        "encoding": "inplace",
        "label": "struct ILendingPoolStaking.Stake",
        "members": [
          {
            "astId": 27762,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "staker",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 27764,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 27766,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "start",
            "offset": 20,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 27768,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "end",
            "offset": 26,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 27772,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "amountsPerDuration",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)3_storage"
          },
          {
            "astId": 27774,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "rewardAllocated",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 27776,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "isEscrow",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 27779,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "escrowStatus",
            "offset": 1,
            "slot": "6",
            "type": "t_enum(EscrowStatus)27760"
          },
          {
            "astId": 27782,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "stakeStatus",
            "offset": 2,
            "slot": "6",
            "type": "t_enum(StakeStatus)27756"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}