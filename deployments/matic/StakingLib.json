{
  "address": "0x3799f3a1c3CFF784022ccFC7c774cc73Cf9AD2d8",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "details",
          "type": "string"
        }
      ],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoRewardsAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoStakeYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "start",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "end",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint256[3]",
          "name": "amountsPerDuration",
          "type": "uint256[3]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isEscrow",
          "type": "bool"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "REWARD_PERIOD_LENGTH",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isActiveStakeToken",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "durationId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "validateStake",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xa64e212780f90fcd76afd844d6f6ce2fe7256390b9b032527e50180121fdf3d6",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x7E8aE5C72eCA86946b695dCc211863D9721A0961",
    "contractAddress": null,
    "transactionIndex": 75,
    "gasUsed": "1486734",
    "logsBloom": "0x
    "blockHash": "0xc57c9edb7a920dbe530e86fec3590177ba5e64553eb16ad7f2fa4955203e1e37",
    "transactionHash": "0xa64e212780f90fcd76afd844d6f6ce2fe7256390b9b032527e50180121fdf3d6",
    "logs": [
      {
        "transactionIndex": 75,
        "blockNumber": 70164683,
        "transactionHash": "0xa64e212780f90fcd76afd844d6f6ce2fe7256390b9b032527e50180121fdf3d6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007e8ae5c72eca86946b695dcc211863d9721a0961",
          "0x000000000000000000000000c84c1e8dffe81c8f69f2b655557ef57d5b46beb5"
        ],
        "data": "0x000000000000000000000000000000000000000000000000009e754cfa7d83ac00000000000000000000000000000000000000000000000008c5349003bce6b700000000000000000000000000000000000000000000020f662d1d651c7fd6330000000000000000000000000000000000000000000000000826bf43093f630b00000000000000000000000000000000000000000000020f66cb92b216fd59df",
        "logIndex": 300,
        "blockHash": "0xc57c9edb7a920dbe530e86fec3590177ba5e64553eb16ad7f2fa4955203e1e37"
      }
    ],
    "blockNumber": 70164683,
    "cumulativeGasUsed": "15532740",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "5e2263d56e3d0f59991f6e932da8dc6a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRewardsAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStakeYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"end\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"amountsPerDuration\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEscrow\",\"type\":\"bool\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REWARD_PERIOD_LENGTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isActiveStakeToken\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"durationId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"validateStake\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Library containing complete function implementations moved from LendingPoolStakingV2\",\"kind\":\"dev\",\"methods\":{\"getClaimableRewards(mapping(uint256 => ILendingPoolStakingV2.Stake) storage,uint256,ILendingPoolStakingV2.RewardPeriod[2] storage,mapping(address => mapping(uint64 => bool)) storage,mapping(address => mapping(uint8 => uint256)) storage,uint256,address,address,address)\":{\"details\":\"Moved entirely from main contract to reduce bytecode\"},\"processClaim(mapping(uint256 => ILendingPoolStakingV2.Stake) storage,mapping(address => mapping(uint8 => uint256)) storage,uint256,mapping(address => mapping(uint64 => bool)) storage,ILendingPoolStakingV2.RewardPeriod storage,address,address,address)\":{\"details\":\"Moved entirely from main contract to reduce bytecode\"},\"processUnstake(ILendingPoolStakingV2.Stake storage,mapping(address => mapping(uint8 => uint256)) storage,address,address)\":{\"details\":\"Moved from main contract with all logic intact\"}},\"title\":\"StakingLib\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculatePoolRollOver(ILendingPoolStakingV2.RewardPeriod storage)\":{\"notice\":\"Calculates pool rollover amounts from previous period\"},\"calculateUserStakesTotal(mapping(uint256 => ILendingPoolStakingV2.Stake) storage,uint256,address,address)\":{\"notice\":\"Calculates total staked amount by a user for a specific token\"},\"closeCurrentPeriod(ILendingPoolStakingV2.RewardPeriod[2] storage,uint256,uint256,uint256)\":{\"notice\":\"Complete implementation of closing the current period\"},\"getClaimableRewards(mapping(uint256 => ILendingPoolStakingV2.Stake) storage,uint256,ILendingPoolStakingV2.RewardPeriod[2] storage,mapping(address => mapping(uint64 => bool)) storage,mapping(address => mapping(uint8 => uint256)) storage,uint256,address,address,address)\":{\"notice\":\"Complete implementation of getClaimableRewards\"},\"getTotalStakesForToken(mapping(address => mapping(uint8 => uint256)) storage,address)\":{\"notice\":\"Gets total staked amount for a token across all durations\"},\"lendingPoolTransfer(Vault,address,address,uint256)\":{\"notice\":\"Safely transfers assets from lending pool to recipient\"},\"processClaim(mapping(uint256 => ILendingPoolStakingV2.Stake) storage,mapping(address => mapping(uint8 => uint256)) storage,uint256,mapping(address => mapping(uint64 => bool)) storage,ILendingPoolStakingV2.RewardPeriod storage,address,address,address)\":{\"notice\":\"Complete implementation of claim function logic\"},\"processUnstake(ILendingPoolStakingV2.Stake storage,mapping(address => mapping(uint8 => uint256)) storage,address,address)\":{\"notice\":\"Process unstake operation completely\"},\"setStakeData(ILendingPoolStakingV2.Stake storage,address,uint256[3],address,uint48,bool,bool)\":{\"notice\":\"Create escrow stake with complete logic\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/StakingLib.sol\":\"StakingLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7795808e3899c805254e3ae58074b20f799b466e3f43e057e47bedee5fb771f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xefb41f5c1a00249b7a99f0782f8c557865605426a3fb6e5fe9ae334293ae4f33\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/access/MWOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract MWOwnable is Initializable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {\\n        _transferOwnership(0x7E8aE5C72eCA86946b695dCc211863D9721A0961);\\n    }\\n\\n    function __MWOwnable_init() public virtual onlyInitializing {\\n        _transferOwnership(0x7E8aE5C72eCA86946b695dCc211863D9721A0961);  // Nend Mainnet Main Wallet\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xba21dd9bd966ff167e32aab1834c72f886763125d104a18c5aaea9c8cd25e4f3\",\"license\":\"MIT\"},\"contracts/access/SimpleRoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../access/MWOwnable.sol\\\";\\n\\nabstract contract SimpleRoleAccess is MWOwnable {\\n    mapping(address => mapping(string => bool)) public hasRole;\\n\\n    function authorize(\\n        address operator,\\n        string memory role,\\n        bool authorized\\n    ) public onlyOwner {\\n        hasRole[operator][role] = authorized;\\n    }\\n\\n    modifier onlyRole(string memory _role) virtual {\\n        require(\\n            msg.sender == owner() || hasRole[msg.sender][_role],\\n            \\\"Not authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier hasAllRoles(string[] memory _roles) virtual {\\n        for (uint256 i = 0; i < _roles.length; i++) {\\n            require(hasRole[msg.sender][_roles[i]], \\\"Not authorized\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier hasSomeRoles(string[] memory _roles) virtual {\\n        bool _hasRole;\\n        for (uint256 i = 0; i < _roles.length; i++) {\\n            if (hasRole[msg.sender][_roles[i]]) {\\n                _hasRole = true;\\n                break;\\n            }\\n        }\\n        require(_hasRole, \\\"Not authorized\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x24909d92ce9a95076b1f6cc36da047ddb31d11eef8016ccfaf7139a947443468\",\"license\":\"UNLICENSED\"},\"contracts/helpers/SignatureHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary SignatureHelper {\\n    function recoverSigner(bytes32 messageHash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSig(signature);\\n\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n        bytes32 prefixedHashMessage = keccak256(\\n            abi.encodePacked(prefix, messageHash)\\n        );\\n\\n        return ecrecover(prefixedHashMessage, v, r, s);\\n    }\\n\\n    function splitSig(bytes memory signature)\\n        internal\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        assembly {\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n            v := and(mload(add(signature, 65)), 255)\\n        }\\n        if (v < 27) v += 27;\\n    }\\n}\\n\",\"keccak256\":\"0x8ba70d1d8ef7b41b9339b9cb6f012dba9c1b02f5239a06294b395553210e1dbc\",\"license\":\"UNLICENSED\"},\"contracts/staking/StakingLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../vault/Vault.sol\\\";\\nimport \\\"./interfaces/ILendingPoolStakingV2.sol\\\";\\n\\n/**\\n * @title StakingLib\\n * @dev Library containing complete function implementations moved from LendingPoolStakingV2\\n */\\nlibrary StakingLib {\\n    uint8 public constant REWARD_PERIOD_LENGTH = 2;\\n    event Staked(\\n        uint256 stakeId,\\n        address staker,\\n        address token,\\n        uint48 start,\\n        uint48 end,\\n        uint256[3] amountsPerDuration,\\n        bool isEscrow\\n    );\\n\\n    function validateStake(\\n        bool isActiveStakeToken,\\n        uint8 durationId,\\n        uint256 amount\\n    ) external pure {\\n        if (amount == 0) {\\n            revert ILendingPoolStakingV2.InvalidArgument(\\n                \\\"Amount cannot be zero\\\"\\n            );\\n        }\\n        if (!isActiveStakeToken) {\\n            revert ILendingPoolStakingV2.InvalidArgument(\\\"Invalid stake token\\\");\\n        }\\n        if (durationId > 2) {\\n            revert ILendingPoolStakingV2.InvalidArgument(\\\"Invalid duration ID\\\");\\n        }\\n    }\\n\\n    function migrateStake(\\n        mapping(uint256 => ILendingPoolStakingV2.Stake) storage stakes,\\n        mapping(uint256 => ILendingPoolStakingV2.Stake)\\n            storage userSpecificStakes,\\n        mapping(address => uint256) storage userStakesCount,\\n        mapping(uint256 => ILendingPoolStakingV2.StakeMappingEntry)\\n            storage _stakeEntries,\\n        mapping(address => mapping(uint256 => uint256)) storage _userIndexToId,\\n        uint256 stakeId,\\n        address nend\\n    ) external returns (bool migrated) {\\n        ILendingPoolStakingV2.Stake storage stake = stakes[stakeId];\\n\\n        if (\\n            stake.staker != address(0) &&\\n            stake.stakeStatus != ILendingPoolStakingV2.StakeStatus.FULFILLED\\n        ) {\\n            // Skip if already migrated\\n            if (_stakeEntries[stakeId].exists) {\\n                return false;\\n            }\\n\\n            // Create a memory copy of the stake\\n            ILendingPoolStakingV2.Stake memory stakeCopy = stakes[stakeId];\\n\\n            // Modify the token if it's an escrow stake\\n            if (stakeCopy.isEscrow) {\\n                stakeCopy.token = nend;\\n            }\\n\\n            // Get the next available user stake index\\n            uint256 userStakeIdx = userStakesCount[stakeCopy.staker] + 1;\\n\\n            // Store the modified copy, not the original storage reference\\n            userSpecificStakes[userStakeIdx] = stakeCopy;\\n\\n            // Create mapping entry\\n            setStakeMapping(\\n                _stakeEntries,\\n                _userIndexToId,\\n                stakeId,\\n                stakeCopy.staker,\\n                userStakeIdx\\n            );\\n\\n            userStakesCount[stakeCopy.staker]++;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Complete implementation of getClaimableRewards\\n     * @dev Moved entirely from main contract to reduce bytecode\\n     */\\n    function getClaimableRewards(\\n        mapping(uint256 => ILendingPoolStakingV2.Stake)\\n            storage userSpecificStakes,\\n        uint256 userStakeCount,\\n        ILendingPoolStakingV2.RewardPeriod[2] storage _recentPeriods,\\n        mapping(address => mapping(uint64 => bool))\\n            storage _userClaimedForPeriod,\\n        mapping(address => mapping(uint8 => uint256))\\n            storage totalStakedByToken_Duration,\\n        uint256 _currentPeriodId,\\n        address nend,\\n        address _user,\\n        address _token\\n    ) external view returns (uint256 inflationReward, uint256 ifpReward) {\\n        // Get the current period (the one users can claim from)\\n        //\\n        ILendingPoolStakingV2.RewardPeriod storage period = _recentPeriods[\\n            _currentPeriodId\\n        ];\\n\\n        // If the user already claimed for this period, return zeros\\n        if (_userClaimedForPeriod[_user][period.periodId]) {\\n            return (0, 0);\\n        }\\n\\n        // Get total staked amount for this token\\n        uint256 totalTokenStaked = getTotalStakesForToken(\\n            totalStakedByToken_Duration,\\n            _token\\n        );\\n\\n        // If nothing staked, no rewards\\n        if (totalTokenStaked == 0) {\\n            return (0, 0);\\n        }\\n\\n        // Get user's total stake for this token\\n        uint256 userStakedAmount = calculateUserStakesTotal(\\n            userSpecificStakes,\\n            userStakeCount,\\n            _token,\\n            nend\\n        );\\n\\n        if (userStakedAmount == 0) {\\n            return (0, 0);\\n        }\\n\\n        // Calculate proportional rewards\\n        inflationReward =\\n            (period.rewardsToDistribute * userStakedAmount) /\\n            totalTokenStaked;\\n        ifpReward =\\n            (period.ifpRewardToDistribute * userStakedAmount) /\\n            totalTokenStaked;\\n\\n        return (inflationReward, ifpReward);\\n    }\\n\\n    /**\\n     * @notice Complete implementation of claim function logic\\n     * @dev Moved entirely from main contract to reduce bytecode\\n     */\\n    function processClaim(\\n        mapping(uint256 => ILendingPoolStakingV2.Stake)\\n            storage userSpecificStakes,\\n        mapping(address => mapping(uint8 => uint256))\\n            storage totalStakedByToken_Duration,\\n        uint256 userStakeCount,\\n        mapping(address => mapping(uint64 => bool))\\n            storage _userClaimedForPeriod,\\n        ILendingPoolStakingV2.RewardPeriod storage period,\\n        address _token,\\n        address nend,\\n        address user\\n    )\\n        external\\n        returns (uint256 inflationReward, uint256 ifpReward, uint64 periodId)\\n    {\\n        // Check if already claimed\\n        if (_userClaimedForPeriod[user][period.periodId]) {\\n            revert ILendingPoolStakingV2.AlreadyClaimed();\\n        }\\n\\n        // Get total staked amount for this token\\n        uint256 totalTokenStakeAmount = getTotalStakesForToken(\\n            totalStakedByToken_Duration,\\n            _token\\n        );\\n\\n        // If nothing staked, no rewards\\n        if (totalTokenStakeAmount == 0) {\\n            revert ILendingPoolStakingV2.NoStakeYet();\\n        }\\n\\n        // Get user's total stake for this token\\n        uint256 userStakeAmount = calculateUserStakesTotal(\\n            userSpecificStakes,\\n            userStakeCount,\\n            _token,\\n            nend\\n        );\\n\\n        if (userStakeAmount == 0) {\\n            revert ILendingPoolStakingV2.StakeNotFound();\\n        }\\n\\n        // Calculate proportional rewards\\n        inflationReward =\\n            (period.rewardsToDistribute * userStakeAmount) /\\n            totalTokenStakeAmount;\\n        ifpReward =\\n            (period.ifpRewardToDistribute * userStakeAmount) /\\n            totalTokenStakeAmount;\\n\\n        if (inflationReward == 0 && ifpReward == 0) {\\n            revert ILendingPoolStakingV2.NoRewardsAvailable();\\n        }\\n\\n        // Update period totals\\n        period.rewardsStaked += inflationReward;\\n        period.ifpRewardClaimed += ifpReward;\\n\\n        periodId = period.periodId;\\n\\n        // Mark as claimed for this period\\n        _userClaimedForPeriod[user][period.periodId] = true;\\n\\n        return (inflationReward, ifpReward, periodId);\\n    }\\n\\n    /**\\n     * @notice Process unstake operation completely\\n     * @dev Moved from main contract with all logic intact\\n     */\\n    function processUnstake(\\n        ILendingPoolStakingV2.Stake storage stake,\\n        mapping(address => mapping(uint8 => uint256))\\n            storage totalStakedByToken_Duration,\\n        address nend,\\n        address msgSender\\n    )\\n        external\\n        returns (\\n            uint256 stakedAmount,\\n            uint256 rewardAmount,\\n            address tokenToUse,\\n            bool needsBurn\\n        )\\n    {\\n        // Validate\\n        if (stake.staker != msgSender) {\\n            revert ILendingPoolStakingV2.Unauthorized();\\n        }\\n\\n        if (\\n            stake.end > block.timestamp ||\\n            stake.stakeStatus == ILendingPoolStakingV2.StakeStatus.FULFILLED ||\\n            stake.escrowStatus == ILendingPoolStakingV2.EscrowStatus.CLAIMED\\n        ) {\\n            revert ILendingPoolStakingV2.InvalidState();\\n        }\\n\\n        // Calculate amount to return\\n        unchecked {\\n            stakedAmount =\\n                stake.amountsPerDuration[0] +\\n                stake.amountsPerDuration[1] +\\n                stake.amountsPerDuration[2];\\n        }\\n\\n        // Get reward and token\\n        rewardAmount = stake.rewardAllocated;\\n        tokenToUse = stake.isEscrow ? nend : stake.token;\\n\\n        // Update totals if staked\\n        if (stake.stakeStatus == ILendingPoolStakingV2.StakeStatus.STAKED) {\\n            for (uint8 i = 0; i < 3; ) {\\n                totalStakedByToken_Duration[\\n                    stake.isEscrow ? nend : stake.token\\n                ][i] -= stake.amountsPerDuration[i];\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n\\n        // Update state\\n        stake.stakeStatus = ILendingPoolStakingV2.StakeStatus.FULFILLED;\\n\\n        // Check if burn needed\\n        needsBurn =\\n            stake.escrowStatus == ILendingPoolStakingV2.EscrowStatus.ISSUED ||\\n            stake.isEscrow;\\n\\n        if (needsBurn) {\\n            stake.escrowStatus = ILendingPoolStakingV2.EscrowStatus.CLAIMED;\\n        }\\n\\n        return (stakedAmount, rewardAmount, tokenToUse, needsBurn);\\n    }\\n\\n    /**\\n     * @notice Complete implementation of closing the current period\\n     */\\n    function closeCurrentPeriod(\\n        ILendingPoolStakingV2.RewardPeriod[2] storage _recentPeriods,\\n        uint256 _currentPeriodId,\\n        uint256 toDistributeReward,\\n        uint256 ifptoDistributeReward\\n    ) external returns (uint256 newCurrentPeriod) {\\n        // get new current period index(= previous period != current period)\\n        // when old current period is 0, next period is 1\\n        // when old current period is 1, next period is 0\\n        newCurrentPeriod =\\n            (_currentPeriodId + REWARD_PERIOD_LENGTH - 1) %\\n            REWARD_PERIOD_LENGTH;\\n\\n        // Clear old data\\n        delete _recentPeriods[newCurrentPeriod];\\n\\n        // Set up new period\\n        _recentPeriods[newCurrentPeriod].periodId =\\n            _recentPeriods[_currentPeriodId].periodId +\\n            1;\\n        _recentPeriods[newCurrentPeriod].startTime = uint64(block.timestamp);\\n        _recentPeriods[newCurrentPeriod]\\n            .rewardsToDistribute = toDistributeReward;\\n        _recentPeriods[newCurrentPeriod]\\n            .ifpRewardToDistribute = ifptoDistributeReward;\\n\\n        return (newCurrentPeriod);\\n    }\\n\\n    /**\\n     * @notice Create escrow stake with complete logic\\n     */\\n    function setStakeData(\\n        ILendingPoolStakingV2.Stake storage stake,\\n        address _staker,\\n        uint256[3] memory _amounts,\\n        address _token,\\n        uint48 lockPeriod,\\n        bool isEscrow,\\n        bool testing\\n    ) public {\\n        // Get lock period for escrow\\n        uint48 start = uint48(block.timestamp);\\n\\n        stake.staker = _staker;\\n        stake.token = _token;\\n        stake.start = start;\\n        stake.end = start + lockPeriod / (testing ? 1008 : 1);\\n        stake.amountsPerDuration = _amounts;\\n        stake.rewardAllocated = 0;\\n        stake.isEscrow = isEscrow;\\n        stake.escrowStatus = ILendingPoolStakingV2.EscrowStatus.DEFAULT;\\n        stake.stakeStatus = ILendingPoolStakingV2.StakeStatus.STAKED;\\n    }\\n\\n    /**\\n     * @notice Calculates total staked amount by a user for a specific token\\n     */\\n    function calculateUserStakesTotal(\\n        mapping(uint256 => ILendingPoolStakingV2.Stake)\\n            storage userSpecificStakes,\\n        uint256 userStakesCount,\\n        address _token,\\n        address nend\\n    ) public view returns (uint256 totalAmount) {\\n        for (uint256 i = 0; i < userStakesCount; ) {\\n            // Using storage to avoid unnecessary copying\\n            ILendingPoolStakingV2.Stake storage stake = userSpecificStakes[\\n                i + 1\\n            ];\\n\\n            // Only include active stakes for the specific token\\n            if (stake.stakeStatus == ILendingPoolStakingV2.StakeStatus.STAKED) {\\n                // Check if the token matches:\\n                // 1. For escrow stakes, we use nend token\\n                // 2. For regular stakes, use the actual token\\n                bool isMatchingToken = stake.isEscrow\\n                    ? (_token == nend)\\n                    : (stake.token == _token);\\n\\n                if (isMatchingToken) {\\n                    // Sum up all durations in unchecked block\\n                    unchecked {\\n                        totalAmount +=\\n                            stake.amountsPerDuration[0] +\\n                            stake.amountsPerDuration[1] +\\n                            stake.amountsPerDuration[2];\\n                    }\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets total staked amount for a token across all durations\\n     */\\n    function getTotalStakesForToken(\\n        mapping(address => mapping(uint8 => uint256))\\n            storage totalStakedByToken_Duration,\\n        address _token\\n    ) public view returns (uint256 totalStaked) {\\n        unchecked {\\n            totalStaked =\\n                totalStakedByToken_Duration[_token][0] +\\n                totalStakedByToken_Duration[_token][1] +\\n                totalStakedByToken_Duration[_token][2];\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates pool rollover amounts from previous period\\n     */\\n    function calculatePoolRollOver(\\n        ILendingPoolStakingV2.RewardPeriod storage _currentPeriod\\n    )\\n        external\\n        view\\n        returns (uint256 poolRewardRemained, uint256 ifpPoolRewardRemained)\\n    {\\n        // Calculate remaining rewards\\n        poolRewardRemained =\\n            _currentPeriod.rewardsToDistribute -\\n            _currentPeriod.rewardsStaked;\\n\\n        ifpPoolRewardRemained =\\n            _currentPeriod.ifpRewardToDistribute -\\n            _currentPeriod.ifpRewardClaimed;\\n    }\\n\\n    /**\\n     * @notice Safely transfers assets from lending pool to recipient\\n     */\\n    function lendingPoolTransfer(\\n        Vault lendingPool,\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) external {\\n        bool isNativeCoin = _token == address(0);\\n\\n        if (isNativeCoin) {\\n            require(\\n                address(lendingPool).balance >= _amount,\\n                \\\"Insufficient balance\\\"\\n            );\\n            lendingPool.transferNative(payable(_to), _amount);\\n        } else {\\n            require(\\n                IERC20(_token).balanceOf(address(lendingPool)) >= _amount,\\n                \\\"Insufficient balance\\\"\\n            );\\n            lendingPool.transferERC20(_token, _to, _amount);\\n        }\\n    }\\n\\n    function setStakeMapping(\\n        mapping(uint256 => ILendingPoolStakingV2.StakeMappingEntry)\\n            storage _stakeEntries,\\n        mapping(address => mapping(uint256 => uint256)) storage _userIndexToId,\\n        uint256 _stakeId,\\n        address _user,\\n        uint256 _userIndex\\n    ) public {\\n        // Create and store the mapping entry\\n        _stakeEntries[_stakeId] = ILendingPoolStakingV2.StakeMappingEntry({\\n            user: _user,\\n            userIndex: _userIndex,\\n            stakeId: _stakeId,\\n            exists: true\\n        });\\n\\n        // Update the reverse lookup\\n        _userIndexToId[_user][_userIndex] = _stakeId;\\n    }\\n\\n    function removeUserStake(\\n        mapping(uint256 => ILendingPoolStakingV2.Stake)\\n            storage userSpecificStakes,\\n        mapping(uint256 => ILendingPoolStakingV2.StakeMappingEntry)\\n            storage _stakeEntries,\\n        mapping(address => mapping(uint256 => uint256)) storage _userIndexToId,\\n        mapping(address => uint256) storage userStakesCount,\\n        address _user,\\n        uint256 _stakeId,\\n        uint256 _userIndex\\n    ) external {\\n        // Get the last stake index for this user\\n        uint256 lastUserStakeIdx = userStakesCount[_user];\\n\\n        // If not the last element, swap with the last element\\n        if (_userIndex != lastUserStakeIdx) {\\n            // Get the last stake\\n            ILendingPoolStakingV2.Stake storage lastStake = userSpecificStakes[\\n                lastUserStakeIdx\\n            ];\\n\\n            // Get last stake ID using the reverse mapping\\n            uint256 lastStakeId = _userIndexToId[_user][lastUserStakeIdx];\\n\\n            // Move last stake to current position\\n            userSpecificStakes[_userIndex] = lastStake;\\n\\n            // Update the stake ID mapping for the moved stake\\n            setStakeMapping(\\n                _stakeEntries,\\n                _userIndexToId,\\n                lastStakeId,\\n                _user,\\n                _userIndex\\n            );\\n        }\\n\\n        // Clean up the last position\\n        delete userSpecificStakes[lastUserStakeIdx];\\n\\n        // Delete the original stake mapping\\n        delete _userIndexToId[_user][lastUserStakeIdx];\\n        delete _stakeEntries[_stakeId];\\n\\n        // Decrement the user's stake count\\n        userStakesCount[_user]--;\\n    }\\n\\n    function _saveStakedRewards(\\n        mapping(address => mapping(uint8 => uint256))\\n            storage totalStakedByToken_Duration,\\n        address nend,\\n        uint256[3] memory _amounts\\n    ) internal {\\n        for (uint8 i = 0; i < 3; ) {\\n            totalStakedByToken_Duration[nend][i] += _amounts[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _createAndMapStake(\\n        mapping(uint256 => ILendingPoolStakingV2.Stake)\\n            storage userSpecificStakes,\\n        address _staker,\\n        uint256[3] memory _amounts,\\n        address _token,\\n        uint48 _duration,\\n        bool _isEscrow,\\n        uint256 stakeId,\\n        mapping(address => uint256) storage userStakesCount,\\n        mapping(uint256 => ILendingPoolStakingV2.StakeMappingEntry)\\n            storage _stakeEntries,\\n        mapping(address => mapping(uint256 => uint256)) storage _userIndexToId,\\n        bool testing\\n    ) internal returns (uint256) {\\n        // Add to user's stakes\\n        uint256 userStakeIdx = 1 + userStakesCount[_staker];\\n        userStakesCount[_staker]++;\\n        // Directly initialize the stake in storage\\n        ILendingPoolStakingV2.Stake storage newStake = userSpecificStakes[\\n            userStakeIdx\\n        ];\\n        setStakeData(\\n            newStake,\\n            _staker,\\n            _amounts,\\n            _token,\\n            _duration,\\n            _isEscrow,\\n            testing\\n        );\\n\\n        // Map the stake ID to the user and index\\n        setStakeMapping(\\n            _stakeEntries,\\n            _userIndexToId,\\n            stakeId,\\n            _staker,\\n            userStakeIdx\\n        );\\n\\n        return userStakeIdx;\\n    }\\n}\\n\",\"keccak256\":\"0xa0dfbb217a1958c98e059507659b8ea92149ba3b771ee8d8b9e5cc3f0d98c548\",\"license\":\"UNLICENSED\"},\"contracts/staking/interfaces/ILendingPoolStakingV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface ILendingPoolStakingV2 {\\n\\n    error InsufficientBalance();\\n    error InvalidArgument(string details);\\n    error InvalidState();\\n    error Unauthorized();\\n    error AlreadyClaimed();\\n    error NoRewardsAvailable();\\n    error StakeNotFound();\\n    error NotOwned();\\n    error NoStakeYet();\\n\\n    enum StakeStatus {\\n        DEFAULT, // Not staked, only applicable to escrowed reward\\n        STAKED, // Stake ongoing\\n        FULFILLED // Stake ended gracefully\\n    }\\n\\n    enum EscrowStatus {\\n        DEFAULT, // Not issued\\n        ISSUED,\\n        CLAIMED\\n    }\\n\\n    struct RewardPeriod {\\n        uint64 periodId;\\n        uint64 startTime;\\n        uint256 rewardsToDistribute;\\n        uint256 rewardsStaked;\\n        uint256 ifpRewardToDistribute;\\n        uint256 ifpRewardClaimed;\\n    }\\n\\n    /**\\n     * @notice Combined stake mapping data structure\\n     * @dev Used to optimize storage by consolidating bidirectional mappings\\n     */\\n    struct StakeMappingEntry {\\n        address user;        // Owner of the stake\\n        uint256 userIndex;   // Index in user's personal mapping\\n        uint256 stakeId;     // Global stake ID\\n        bool exists;         // Flag to confirm entry exists\\n    }\\n\\n    struct Stake {\\n        // Staker address\\n        address staker;\\n        // Stake token address\\n        address token;\\n        // The time of deposit\\n        uint48 start;\\n        // The time of withdrawal\\n        uint48 end;\\n        // The amount staked by each stake duration\\n        uint256[3] amountsPerDuration;\\n        // The amount of stake token that will be rewarded upon finishing the stake duration\\n        uint256 rewardAllocated;\\n        // Stake is escrow\\n        bool isEscrow;\\n        // Status of eab\\n        EscrowStatus escrowStatus;\\n        // Status of stake\\n        StakeStatus stakeStatus;\\n    }\\n\\n    event Staked(\\n        uint256 stakeId,\\n        address staker,\\n        address token,\\n        uint48 start,\\n        uint48 end,\\n        uint256[3] amountsPerDuration,\\n        bool isEscrow\\n    );\\n    event StakeStatusChanged(uint256 stakeId, StakeStatus status);\\n    event EscrowStatusChanged(uint256 stakeId, EscrowStatus status);\\n    event InflationRewardDistributed();\\n    event NonInflationRewardDistributed();\\n    // event ImplementationUpgraded(address indexed newImplementation);\\n    event BatchMigrationCompleted(uint256 startId, uint256 endId);\\n\\n    event NewPeriodStarted(\\n        uint64 periodId,\\n        uint64 timestamp,\\n        uint256 inflationRewards,\\n        uint256 ifpRewards\\n    );\\n\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed token,\\n        uint256 inflationReward,\\n        uint256 ifpReward,\\n        uint64 periodId\\n    );\\n    function deposit(\\n        address _stakeToken,\\n        uint256 _amount,\\n        uint8 _durationId\\n    ) external payable;\\n\\n    function stakeEscrowedReward(uint256 _stakeId) external;\\n\\n    function distributeInflationRewards(uint256 _inflationReward) external;\\n\\n    function hasPendingNonInflationRewards() external view returns (bool);\\n\\n    function unstake(uint256 _stakeId) external;\\n\\n    function addStakeToken(address _stakeToken) external;\\n\\n    function removeStakeToken(address _stakeToken) external;\\n\\n\\n}\",\"keccak256\":\"0x97cde0d96df6204cc50fd24dd0ffef592623d13ee2a3be8d8cfa9a02477d51ed\",\"license\":\"UNLICENSED\"},\"contracts/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"../helpers/SignatureHelper.sol\\\";\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\ncontract Vault is SimpleRoleAccess, UUPSUpgradeable {\\n    using SignatureHelper for bytes32;\\n\\n    event Claimed(bytes _hash);\\n\\n    bytes4 private ERC1155_INTERFACE_ID;\\n    string public name;\\n\\n    mapping(bytes => bool) public claimed;\\n    // Balance name => token => amount\\n    mapping(string => mapping(address => uint256)) public namedBalances;\\n\\n    function initialize(string memory _name) public virtual initializer {\\n        __Vault_init(_name);\\n        __MWOwnable_init();\\n    }\\n\\n    function __Vault_init(\\n        string memory _name\\n    ) internal virtual onlyInitializing {\\n        name = _name;\\n        ERC1155_INTERFACE_ID = 0xd9b67a26;\\n    }\\n\\n    function approveERC20Transfer(\\n        address _tokenAddress,\\n        address _spender,\\n        uint256 _amount\\n    ) external virtual onlyRole(\\\"spender\\\") returns (bool) {\\n        IERC20 erc20 = IERC20(_tokenAddress);\\n        return erc20.approve(_spender, _amount);\\n    }\\n\\n    function transferERC20(\\n        address _tokenAddress,\\n        address _to,\\n        uint256 _amount\\n    ) external virtual onlyRole(\\\"spender\\\") returns (bool) {\\n        IERC20 erc20 = IERC20(_tokenAddress);\\n        return erc20.transfer(_to, _amount);\\n    }\\n\\n    function setERC721ApprovalForAll(\\n        address _tokenAddress,\\n        address _operator,\\n        bool _approved\\n    ) external virtual onlyRole(\\\"spender\\\") {\\n        IERC721 erc721 = IERC721(_tokenAddress);\\n        erc721.setApprovalForAll(_operator, _approved);\\n    }\\n\\n    function transferERC721(\\n        address _tokenAddress,\\n        address _to,\\n        uint256 _tokenId\\n    ) external virtual onlyRole(\\\"spender\\\") {\\n        IERC721 erc721 = IERC721(_tokenAddress);\\n        erc721.transferFrom(address(this), _to, _tokenId);\\n    }\\n\\n    function transferERC1155(\\n        address _tokenAddress,\\n        address _to,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external virtual onlyRole(\\\"spender\\\") {\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\n        require(\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\n            \\\"given token address doesn't support ERC1155\\\"\\n        );\\n        erc1155.safeTransferFrom(address(this), _to, _id, _value, _data);\\n    }\\n\\n    function transferERC1155Batch(\\n        address _tokenAddress,\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external virtual onlyRole(\\\"spender\\\") {\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\n        require(\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\n            \\\"given token address doesn't support ERC1155\\\"\\n        );\\n        erc1155.safeBatchTransferFrom(address(this), _to, _ids, _values, _data);\\n    }\\n\\n    function setERC1155ApprovalForAll(\\n        address _tokenAddress,\\n        address _operator,\\n        bool _approved\\n    ) external virtual onlyRole(\\\"spender\\\") {\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\n        require(\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\n            \\\"given token address doesn't support ERC1155\\\"\\n        );\\n        erc1155.setApprovalForAll(_operator, _approved);\\n    }\\n\\n    function getNativeBalance() external view virtual returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function transferNative(\\n        address payable _to,\\n        uint256 _amount\\n    ) public payable virtual onlyRole(\\\"spender\\\") {\\n        (bool sent, ) = _to.call{ value: _amount }(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    function burn(\\n        address _token,\\n        uint256 _amount\\n    ) public virtual onlyRole(\\\"spender\\\") {\\n        ERC20Burnable(_token).burn(_amount);\\n    }\\n\\n    function namedBalanceReceive(\\n        string memory _name,\\n        address _token,\\n        uint256 _amount\\n    ) external virtual onlyRole(\\\"spender\\\") {\\n        namedBalances[_name][_token] += _amount;\\n    }\\n\\n    function namedBalanceSpend(\\n        string memory _name,\\n        address _token,\\n        uint256 _amount\\n    ) external virtual onlyRole(\\\"spender\\\") {\\n        require(\\n            namedBalances[_name][_token] >= _amount,\\n            \\\"Insufficient balance\\\"\\n        );\\n        namedBalances[_name][_token] -= _amount;\\n    }\\n\\n    function getNamedBalance(\\n        string memory _name,\\n        address _token\\n    ) external view virtual returns (uint256) {\\n        uint256 balance = namedBalances[_name][_token];\\n        uint256 actualBalance = _token == address(0)\\n            ? payable(this).balance\\n            : IERC20(_token).balanceOf(address(this));\\n\\n        return balance <= actualBalance ? balance : actualBalance;\\n    }\\n\\n    function claim(\\n        bytes[] memory _hashes,\\n        bytes[] memory _signatures\\n    ) external virtual {\\n        require(\\n            _hashes.length == _signatures.length,\\n            \\\"Not matching hash and signature count\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _hashes.length; i++) {\\n            if (claimed[_hashes[i]]) {\\n                continue;\\n            }\\n\\n            (\\n                address _recipientAddress,\\n                address _tokenAddress,\\n                uint256 _amount,\\n                uint48 _timestamp\\n            ) = abi.decode(_hashes[i], (address, address, uint256, uint48));\\n\\n            bytes32 _messageHash = keccak256(\\n                abi.encodePacked(\\n                    _recipientAddress,\\n                    _tokenAddress,\\n                    _amount,\\n                    _timestamp\\n                )\\n            );\\n\\n            require(\\n                _messageHash.recoverSigner(_signatures[i]) == owner(),\\n                \\\"Invalid signature\\\"\\n            );\\n\\n            require(_recipientAddress == msg.sender, \\\"Not recipient\\\");\\n            require(block.timestamp >= _timestamp, \\\"Invalid timestamp\\\");\\n            require(\\n                IERC20(_tokenAddress).balanceOf(address(this)) >= _amount,\\n                \\\"Insufficient pool balance\\\"\\n            );\\n\\n            claimed[_hashes[i]] = true;\\n            IERC20(_tokenAddress).transfer(msg.sender, _amount);\\n            emit Claimed(_hashes[i]);\\n        }\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x82c8a4ad6ba1e44ed334c926557b9dfd8cb3b0595842ae792e57c7d8d78d0e93\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001c576119e490816100228239308160070152f35b600080fdfe6080604052307f000000000000000000000000000000000000000000000000000000000000000014600436101561003557600080fd5b600090813560e01c80631dbd20861461018557806324f1da541461017757806331fd8e65146101695780633a4a16b21461015e5780634cce26ec146101505780637ed1bd95146101425780639e8f309214610137578063bf14822514610129578063c21784681461011e578063c78ea24314610113578063e0bbadce14610105578063ecceaf72146100f7578063f39ce063146100ec5763f97681bd146100dc575b600080fd5b6100e957506100d7610d24565b80fd5b5050506100d7610c14565b506100e957506100d76109bf565b506100e957506100d7610980565b5050506100d761095a565b5050506100d76108fa565b506100e957506100d76107c4565b5050506100d7610786565b506100e957506100d7610701565b506100e957506100d7610453565b5050506100d76103e1565b506100e957506100d7610203565b506100e957506100d76101d3565b5050506100d761019b565b60009103126100d757565b5060003660031901126100d757602060405160028152f35b6001600160a01b038116036100d757565b60a435906101d1826101b3565b565b5060a03660031901126100d7576102016064356101ef816101b3565b60843590604435602435600435611871565b005b5060803660031901126100d75760043561021c816101b3565b60243590610229826101b3565b60443590610236826101b3565b606435906001600160a01b039384811680156000146102c85750508316610260828231101561180d565b803b156100d757604051633e97486160e11b8152939092166001600160a01b03166004840152602483015260009082908183816044810103925af180156102bb575b6102a857005b806102b561020192610647565b80610190565b6102c3611800565b6102a2565b92919461036394919516906000604051966370a0823160e01b88526103298589602081819c9a818061030e8c869f6004019190916001600160a01b036020820193169052565b03915afa9081156103d4575b85916103a7575b50101561180d565b60405163276d76f960e21b81526001600160a01b039182166004820152921660248301526044820193909352938492839182906064820190565b03925af1801561039a575b61037457005b8161020192903d10610393575b61038b8183610684565b810190611859565b503d610381565b6103a2611800565b61036e565b6103c79150893d8b116103cd575b6103bf8183610684565b8101906117f1565b38610321565b503d6103b5565b6103dc611800565b61031a565b5060203660031901126100d757600435600181015490610435600282015492838110610446575b6004600384015493015493848410610439575b604080519190920381529390920360208401528291820190565b0390f35b61044161108c565b61041b565b61044e61108c565b610408565b506101003660031901126100d75760843560a435606435610473826101b3565b60c43591610480836101b3565b60e4359361048d856101b3565b6104aa8584906001600160a01b0316600052602052604060002090565b916104e56104de6104c3845467ffffffffffffffff1690565b80959067ffffffffffffffff16600052602052604060002090565b5460ff1690565b61061e576104f581602435611770565b94851561060c5761050b916044356004356116a2565b9384156105fa578061052b61053061053b9361052b8960018801546110f2565b61145e565b9660038501546110f2565b948415806105f2575b6105e057826105916105aa926104359660048660026105b798016105698c82546110cf565b9055016105778b82546110cf565b9055906001600160a01b0316600052602052604060002090565b9067ffffffffffffffff16600052602052604060002090565b805460ff19166001179055565b6040519384938491604091949367ffffffffffffffff9160608501968552602085015216910152565b60405163afb0be3360e01b8152600490fd5b508515610544565b604051638c877d2160e01b8152600490fd5b604051634d10c97960e11b8152600490fd5b604051630c8d9eab60e31b8152600490fd5b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161065b57604052565b610663610630565b604052565b6060810190811067ffffffffffffffff82111761065b57604052565b90601f8019910116810190811067ffffffffffffffff82111761065b57604052565b60405190610120820182811067ffffffffffffffff82111761065b57604052565b60c4359065ffffffffffff821682036100d757565b801515036100d757565b60e435906101d1826106dc565b61010435906101d1826106dc565b506101203660031901126100d75760243561071b816101b3565b36606312156100d7576040519061073182610668565b8160a43681116100d7576044935b8185106107765761020184846107536101c4565b61075b6106c7565b906107646106e6565b9261076d6106f3565b94600435611582565b843581526020948501940161073f565b5060803660031901126100d75760206107bc6044356107a4816101b3565b606435906107b1826101b3565b6024356004356116a2565b604051908152f35b5060803660031901126100d7576104356108346108c660243560043561087061084861084360016107f4866110a3565b8181106108ed575b6000190116968795600060046108128989611424565b6108e0575b828155826001820155826002820155826003820155015585611424565b505467ffffffffffffffff1690565b611562565b6108528484611424565b509067ffffffffffffffff1667ffffffffffffffff19825416179055565b6108ae61087d8383611424565b5080546fffffffffffffffff000000000000000019164260401b6fffffffffffffffff000000000000000016179055565b6108b88282611424565b506001604435910155611424565b506003606435910155604051918291829190602083019252565b6108e86110db565b610817565b6108f561108c565b6107fc565b506101203660031901126100d75761094860c435610917816101b3565b60e435610923816101b3565b6101043591610931836101b3565b60a435608435606435604435602435600435611474565b60408051928352602083019190915290f35b5060403660031901126100d75760206107bc602435610978816101b3565b600435611770565b5060e03660031901126100d75760206109b560c43561099e816101b3565b60a435608435606435604435602435600435611289565b6040519015158152f35b5060803660031901126100d7576044356004356024356109de836101b3565b6064356109ea816101b3565b82546001600160a01b0391821690821603610c035760019081840194855491428360d01c118015610be5575b8015610bc7575b610bb55760028601968754610a42610a388a60010190600090565b90549060031b1c90565b01610a5160028a016000610a38565b0195600660058901549801938685549660ff958691828a16600014610bae57505082975b60101c16610a8281610f73565b14610b19575b50505061043594959650610aa7826202000062ff000019825416179055565b815493818560081c16610ab981610f73565b14938415610b0f575b505082610afc575b5060405194859485926001600160a01b0390606093969592966080860197865260208601521660408401521515910152565b805461ff00191661020017905538610aca565b1692503880610ac2565b60005b600385821610610b2c5750610a88565b8781610b3c610a3888948f61152d565b885460ff1615610b8e57610b85610b7d83610b6b885b8a906001600160a01b0316600052602052604060002090565b9060ff16600052602052604060002090565b91825461154b565b90550116610b1c565b610b85610b7d83610b6b610ba98b546001600160a01b031690565b610b52565b1697610a75565b60405163baf3f0f760e01b8152600490fd5b50600686015460029060081c60ff16610bdf81610f73565b14610a1d565b50600686015460029060101c60ff16610bfd81610f73565b14610a16565b6040516282b42960e81b8152600490fd5b5060603660031901126100d757600435610c2d816106dc565b6024359060ff82168092036100d75760443515610cde5715610c9857600210610c5257005b604051631fff1b3b60e21b815260206004820152601360248201527f496e76616c6964206475726174696f6e204944000000000000000000000000006044820152606490fd5b604051631fff1b3b60e21b815260206004820152601360248201527f496e76616c6964207374616b6520746f6b656e000000000000000000000000006044820152606490fd5b604051631fff1b3b60e21b815260206004820152601560248201527f416d6f756e742063616e6e6f74206265207a65726f00000000000000000000006044820152606490fd5b5060e03660031901126100d757610df4608435606435610da3610ddc6024356000610dca600435610dbb88604435610d5b826101b3565b610da3610d9e8b610d828560c43592906001600160a01b0316600052602052604060002090565b54968188809303610e02575b5090600052602052604060002090565b61195f565b906001600160a01b0316600052602052604060002090565b90600052602052604060002090565b5560a435600052602052604060002090565b60036000918281558260018201558260028201550155565b610dfe8154611993565b9055005b610e5890878d888e918783528660205260408320610e338584906001600160a01b0316600052602052604060002090565b89855260205260408085205494878152896020522090808203610e5e575b5050611871565b38610d8e565b610f66600680610f6c94610f0c6001600160a01b03610e968188541684906001600160a01b03166001600160a01b0319825416179055565b610eec6001840191610ec560018a019182541684906001600160a01b03166001600160a01b0319825416179055565b8054835465ffffffffffff60a01b191665ffffffffffff60a01b9091161783555460d01c90565b81546001600160d01b031660d09190911b6001600160d01b031916179055565b610f1c6002860160028301611927565b60058501546005820155019201610f49610f37825460ff1690565b849060ff801983541691151516179055565b8054610f5c9060081c60ff165b84611139565b5460101c60ff1690565b90611158565b3880610e51565b60031115610f7d57565b634e487b7160e01b600052602160045260246000fd5b60405191906000835b60038210610fc3575050506060820182811067ffffffffffffffff82111761065b57604052565b6001602081928554815201930191019091610f9c565b610fe282610f73565b52565b906101d160ff6006610ff56106a6565b9461101761100a82546001600160a01b031690565b6001600160a01b03168752565b60018101546001600160a01b038116602088015265ffffffffffff60a082901c16604088015260d01c606087015261105160028201610f93565b6080870152600581015460a08701520154818116151560c086015261107e828260081c1660e08701610fd9565b60101c166101008401610fd9565b50634e487b7160e01b600052601160045260246000fd5b60029060021981116110b3570190565b6110bb61108c565b0190565b60019060011981116110b3570190565b811981116110b3570190565b50634e487b7160e01b600052600060045260246000fd5b8060001904821181151516611105570290565b61110d61108c565b0290565b906000905b6003821061112357505050565b6001602082829351865501930191019091611116565b9061114381610f73565b61ff0082549160081b169061ff001916179055565b9061116281610f73565b62ff000082549160101b169062ff00001916179055565b9061010060066101d1936111c061119785516001600160a01b031690565b825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909116178255565b61122a600182016111de61119760208801516001600160a01b031690565b6112186111f4604088015165ffffffffffff1690565b825465ffffffffffff60a01b191660a09190911b65ffffffffffff60a01b16178255565b606086015165ffffffffffff16610eec565b61123b608085015160028301611111565b60a084015160058201550191611257610f3760c0830151151590565b61126860e0820151610f5681610f73565b01519061127482610f73565b611158565b60019060001981146110b3570190565b919495926112a1878490600052602052604060002090565b6001600160a01b036112ba82546001600160a01b031690565b16151590816113ee575b506112d55750505050505050600090565b6112f660036112ee898490600052602052604060002090565b015460ff1690565b6113e257866113a69561132161131c6113bd9a6113999790600052602052604060002090565b610fe5565b9561132f60c0880151151590565b6113ce575b506113888661138361137261136c61135384516001600160a01b031690565b8d906001600160a01b0316600052602052604060002090565b546110bf565b809790600052602052604060002090565b611179565b85516001600160a01b031692611871565b516001600160a01b031690565b6001600160a01b0316600052602052604060002090565b6113c78154611279565b9055600190565b6001600160a01b0316602087015238611334565b50505050505050600090565b600601546002915060101c60ff1661140581610f73565b1415386112c4565b50634e487b7160e01b600052603260045260246000fd5b90600590600281101561143a575b020190600090565b61144261140d565b611432565b50634e487b7160e01b600052601260045260246000fd5b8115611468570490565b611470611447565b0490565b966114a79061148d6114cb9396959b9a9760ff95611424565b509a906001600160a01b0316600052602052604060002090565b67ffffffffffffffff8a541667ffffffffffffffff16600052602052604060002090565b541661151e57826114db91611770565b93841561151e57906114ee9392916116a2565b801561151257806003836115096114709460018901546110f2565b049501546110f2565b50509050600090600090565b50505050509050600090600090565b600382101561153e575b0190600090565b61154661140d565b611537565b818110611556570390565b61155e61108c565b0390565b67ffffffffffffffff6001911667fffffffffffffffe81116110b3570190565b9261164890600695611651949361166c989965ffffffffffff9283916115c1834216948b906001600160a01b03166001600160a01b0319825416179055565b6115e560018b019687906001600160a01b03166001600160a01b0319825416179055565b855465ffffffffffff60a01b191660a085901b65ffffffffffff60a01b1617865515611697578161ffff6103f05b1691821561168a575b160416809203811161167d575b82546001600160d01b0316910160d01b6001600160d01b031916179055565b60028301611111565b600060058201550191829060ff801983541691151516179055565b805462ffff00191662010000179055565b61168561108c565b611629565b611692611447565b61161c565b8161ffff6001611613565b919392600094600093845b8481106116bc57505050505050565b6116d86116c8826110bf565b8390600052602052604060002090565b9060068201549160ff808460101c16936116f185610f73565b6001809514611704575b505050016116ad565b1615611759576001600160a01b03808716908616145b611726575b80806116fb565b60029099919901611750610a388254611745610a388560010190600090565b019260020190600090565b0101973861171f565b828101546001600160a01b0386811691161461171a565b906040906117e46117948285906001600160a01b0316600052602052604060002090565b91600092838052602052838320546117bf8287906001600160a01b0316600052602052604060002090565b60018552602052848420540194906001600160a01b0316600052602052604060002090565b6002825260205220540190565b908160209103126100d7575190565b506040513d6000823e3d90fd5b1561181457565b60405162461bcd60e51b815260206004820152601460248201527f496e73756666696369656e742062616c616e63650000000000000000000000006044820152606490fd5b908160209103126100d7575161186e816106dc565b90565b92610dbb91610da361191795969496600388604051926080840184811067ffffffffffffffff82111761191a575b6040526001600160a01b0380881685526118f560208601918b83526040870193858552606088019560018752600052602052604060002096511686906001600160a01b03166001600160a01b0319825416179055565b51600185015551600284015551151591019060ff801983541691151516179055565b55565b611922610630565b61189f565b9080821461195b57908154906000915b600383106119455750505050565b6001809194019283549481840155019192611937565b5050565b60009081815581600181818401556005830190600284015b8281106119875750505560060155565b92835584928101611977565b80156119a1575b6000190190565b6119a961108c565b61199a56fea2646970667358221220e6521aeed8cdd19063023c65e2484718ebba60a40b7fe8e6f2f1f9225ac8518064736f6c634300080e0033",
  "deployedBytecode": "0x6080604052307f000000000000000000000000000000000000000000000000000000000000000014600436101561003557600080fd5b600090813560e01c80631dbd20861461018557806324f1da541461017757806331fd8e65146101695780633a4a16b21461015e5780634cce26ec146101505780637ed1bd95146101425780639e8f309214610137578063bf14822514610129578063c21784681461011e578063c78ea24314610113578063e0bbadce14610105578063ecceaf72146100f7578063f39ce063146100ec5763f97681bd146100dc575b600080fd5b6100e957506100d7610d24565b80fd5b5050506100d7610c14565b506100e957506100d76109bf565b506100e957506100d7610980565b5050506100d761095a565b5050506100d76108fa565b506100e957506100d76107c4565b5050506100d7610786565b506100e957506100d7610701565b506100e957506100d7610453565b5050506100d76103e1565b506100e957506100d7610203565b506100e957506100d76101d3565b5050506100d761019b565b60009103126100d757565b5060003660031901126100d757602060405160028152f35b6001600160a01b038116036100d757565b60a435906101d1826101b3565b565b5060a03660031901126100d7576102016064356101ef816101b3565b60843590604435602435600435611871565b005b5060803660031901126100d75760043561021c816101b3565b60243590610229826101b3565b60443590610236826101b3565b606435906001600160a01b039384811680156000146102c85750508316610260828231101561180d565b803b156100d757604051633e97486160e11b8152939092166001600160a01b03166004840152602483015260009082908183816044810103925af180156102bb575b6102a857005b806102b561020192610647565b80610190565b6102c3611800565b6102a2565b92919461036394919516906000604051966370a0823160e01b88526103298589602081819c9a818061030e8c869f6004019190916001600160a01b036020820193169052565b03915afa9081156103d4575b85916103a7575b50101561180d565b60405163276d76f960e21b81526001600160a01b039182166004820152921660248301526044820193909352938492839182906064820190565b03925af1801561039a575b61037457005b8161020192903d10610393575b61038b8183610684565b810190611859565b503d610381565b6103a2611800565b61036e565b6103c79150893d8b116103cd575b6103bf8183610684565b8101906117f1565b38610321565b503d6103b5565b6103dc611800565b61031a565b5060203660031901126100d757600435600181015490610435600282015492838110610446575b6004600384015493015493848410610439575b604080519190920381529390920360208401528291820190565b0390f35b61044161108c565b61041b565b61044e61108c565b610408565b506101003660031901126100d75760843560a435606435610473826101b3565b60c43591610480836101b3565b60e4359361048d856101b3565b6104aa8584906001600160a01b0316600052602052604060002090565b916104e56104de6104c3845467ffffffffffffffff1690565b80959067ffffffffffffffff16600052602052604060002090565b5460ff1690565b61061e576104f581602435611770565b94851561060c5761050b916044356004356116a2565b9384156105fa578061052b61053061053b9361052b8960018801546110f2565b61145e565b9660038501546110f2565b948415806105f2575b6105e057826105916105aa926104359660048660026105b798016105698c82546110cf565b9055016105778b82546110cf565b9055906001600160a01b0316600052602052604060002090565b9067ffffffffffffffff16600052602052604060002090565b805460ff19166001179055565b6040519384938491604091949367ffffffffffffffff9160608501968552602085015216910152565b60405163afb0be3360e01b8152600490fd5b508515610544565b604051638c877d2160e01b8152600490fd5b604051634d10c97960e11b8152600490fd5b604051630c8d9eab60e31b8152600490fd5b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161065b57604052565b610663610630565b604052565b6060810190811067ffffffffffffffff82111761065b57604052565b90601f8019910116810190811067ffffffffffffffff82111761065b57604052565b60405190610120820182811067ffffffffffffffff82111761065b57604052565b60c4359065ffffffffffff821682036100d757565b801515036100d757565b60e435906101d1826106dc565b61010435906101d1826106dc565b506101203660031901126100d75760243561071b816101b3565b36606312156100d7576040519061073182610668565b8160a43681116100d7576044935b8185106107765761020184846107536101c4565b61075b6106c7565b906107646106e6565b9261076d6106f3565b94600435611582565b843581526020948501940161073f565b5060803660031901126100d75760206107bc6044356107a4816101b3565b606435906107b1826101b3565b6024356004356116a2565b604051908152f35b5060803660031901126100d7576104356108346108c660243560043561087061084861084360016107f4866110a3565b8181106108ed575b6000190116968795600060046108128989611424565b6108e0575b828155826001820155826002820155826003820155015585611424565b505467ffffffffffffffff1690565b611562565b6108528484611424565b509067ffffffffffffffff1667ffffffffffffffff19825416179055565b6108ae61087d8383611424565b5080546fffffffffffffffff000000000000000019164260401b6fffffffffffffffff000000000000000016179055565b6108b88282611424565b506001604435910155611424565b506003606435910155604051918291829190602083019252565b6108e86110db565b610817565b6108f561108c565b6107fc565b506101203660031901126100d75761094860c435610917816101b3565b60e435610923816101b3565b6101043591610931836101b3565b60a435608435606435604435602435600435611474565b60408051928352602083019190915290f35b5060403660031901126100d75760206107bc602435610978816101b3565b600435611770565b5060e03660031901126100d75760206109b560c43561099e816101b3565b60a435608435606435604435602435600435611289565b6040519015158152f35b5060803660031901126100d7576044356004356024356109de836101b3565b6064356109ea816101b3565b82546001600160a01b0391821690821603610c035760019081840194855491428360d01c118015610be5575b8015610bc7575b610bb55760028601968754610a42610a388a60010190600090565b90549060031b1c90565b01610a5160028a016000610a38565b0195600660058901549801938685549660ff958691828a16600014610bae57505082975b60101c16610a8281610f73565b14610b19575b50505061043594959650610aa7826202000062ff000019825416179055565b815493818560081c16610ab981610f73565b14938415610b0f575b505082610afc575b5060405194859485926001600160a01b0390606093969592966080860197865260208601521660408401521515910152565b805461ff00191661020017905538610aca565b1692503880610ac2565b60005b600385821610610b2c5750610a88565b8781610b3c610a3888948f61152d565b885460ff1615610b8e57610b85610b7d83610b6b885b8a906001600160a01b0316600052602052604060002090565b9060ff16600052602052604060002090565b91825461154b565b90550116610b1c565b610b85610b7d83610b6b610ba98b546001600160a01b031690565b610b52565b1697610a75565b60405163baf3f0f760e01b8152600490fd5b50600686015460029060081c60ff16610bdf81610f73565b14610a1d565b50600686015460029060101c60ff16610bfd81610f73565b14610a16565b6040516282b42960e81b8152600490fd5b5060603660031901126100d757600435610c2d816106dc565b6024359060ff82168092036100d75760443515610cde5715610c9857600210610c5257005b604051631fff1b3b60e21b815260206004820152601360248201527f496e76616c6964206475726174696f6e204944000000000000000000000000006044820152606490fd5b604051631fff1b3b60e21b815260206004820152601360248201527f496e76616c6964207374616b6520746f6b656e000000000000000000000000006044820152606490fd5b604051631fff1b3b60e21b815260206004820152601560248201527f416d6f756e742063616e6e6f74206265207a65726f00000000000000000000006044820152606490fd5b5060e03660031901126100d757610df4608435606435610da3610ddc6024356000610dca600435610dbb88604435610d5b826101b3565b610da3610d9e8b610d828560c43592906001600160a01b0316600052602052604060002090565b54968188809303610e02575b5090600052602052604060002090565b61195f565b906001600160a01b0316600052602052604060002090565b90600052602052604060002090565b5560a435600052602052604060002090565b60036000918281558260018201558260028201550155565b610dfe8154611993565b9055005b610e5890878d888e918783528660205260408320610e338584906001600160a01b0316600052602052604060002090565b89855260205260408085205494878152896020522090808203610e5e575b5050611871565b38610d8e565b610f66600680610f6c94610f0c6001600160a01b03610e968188541684906001600160a01b03166001600160a01b0319825416179055565b610eec6001840191610ec560018a019182541684906001600160a01b03166001600160a01b0319825416179055565b8054835465ffffffffffff60a01b191665ffffffffffff60a01b9091161783555460d01c90565b81546001600160d01b031660d09190911b6001600160d01b031916179055565b610f1c6002860160028301611927565b60058501546005820155019201610f49610f37825460ff1690565b849060ff801983541691151516179055565b8054610f5c9060081c60ff165b84611139565b5460101c60ff1690565b90611158565b3880610e51565b60031115610f7d57565b634e487b7160e01b600052602160045260246000fd5b60405191906000835b60038210610fc3575050506060820182811067ffffffffffffffff82111761065b57604052565b6001602081928554815201930191019091610f9c565b610fe282610f73565b52565b906101d160ff6006610ff56106a6565b9461101761100a82546001600160a01b031690565b6001600160a01b03168752565b60018101546001600160a01b038116602088015265ffffffffffff60a082901c16604088015260d01c606087015261105160028201610f93565b6080870152600581015460a08701520154818116151560c086015261107e828260081c1660e08701610fd9565b60101c166101008401610fd9565b50634e487b7160e01b600052601160045260246000fd5b60029060021981116110b3570190565b6110bb61108c565b0190565b60019060011981116110b3570190565b811981116110b3570190565b50634e487b7160e01b600052600060045260246000fd5b8060001904821181151516611105570290565b61110d61108c565b0290565b906000905b6003821061112357505050565b6001602082829351865501930191019091611116565b9061114381610f73565b61ff0082549160081b169061ff001916179055565b9061116281610f73565b62ff000082549160101b169062ff00001916179055565b9061010060066101d1936111c061119785516001600160a01b031690565b825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909116178255565b61122a600182016111de61119760208801516001600160a01b031690565b6112186111f4604088015165ffffffffffff1690565b825465ffffffffffff60a01b191660a09190911b65ffffffffffff60a01b16178255565b606086015165ffffffffffff16610eec565b61123b608085015160028301611111565b60a084015160058201550191611257610f3760c0830151151590565b61126860e0820151610f5681610f73565b01519061127482610f73565b611158565b60019060001981146110b3570190565b919495926112a1878490600052602052604060002090565b6001600160a01b036112ba82546001600160a01b031690565b16151590816113ee575b506112d55750505050505050600090565b6112f660036112ee898490600052602052604060002090565b015460ff1690565b6113e257866113a69561132161131c6113bd9a6113999790600052602052604060002090565b610fe5565b9561132f60c0880151151590565b6113ce575b506113888661138361137261136c61135384516001600160a01b031690565b8d906001600160a01b0316600052602052604060002090565b546110bf565b809790600052602052604060002090565b611179565b85516001600160a01b031692611871565b516001600160a01b031690565b6001600160a01b0316600052602052604060002090565b6113c78154611279565b9055600190565b6001600160a01b0316602087015238611334565b50505050505050600090565b600601546002915060101c60ff1661140581610f73565b1415386112c4565b50634e487b7160e01b600052603260045260246000fd5b90600590600281101561143a575b020190600090565b61144261140d565b611432565b50634e487b7160e01b600052601260045260246000fd5b8115611468570490565b611470611447565b0490565b966114a79061148d6114cb9396959b9a9760ff95611424565b509a906001600160a01b0316600052602052604060002090565b67ffffffffffffffff8a541667ffffffffffffffff16600052602052604060002090565b541661151e57826114db91611770565b93841561151e57906114ee9392916116a2565b801561151257806003836115096114709460018901546110f2565b049501546110f2565b50509050600090600090565b50505050509050600090600090565b600382101561153e575b0190600090565b61154661140d565b611537565b818110611556570390565b61155e61108c565b0390565b67ffffffffffffffff6001911667fffffffffffffffe81116110b3570190565b9261164890600695611651949361166c989965ffffffffffff9283916115c1834216948b906001600160a01b03166001600160a01b0319825416179055565b6115e560018b019687906001600160a01b03166001600160a01b0319825416179055565b855465ffffffffffff60a01b191660a085901b65ffffffffffff60a01b1617865515611697578161ffff6103f05b1691821561168a575b160416809203811161167d575b82546001600160d01b0316910160d01b6001600160d01b031916179055565b60028301611111565b600060058201550191829060ff801983541691151516179055565b805462ffff00191662010000179055565b61168561108c565b611629565b611692611447565b61161c565b8161ffff6001611613565b919392600094600093845b8481106116bc57505050505050565b6116d86116c8826110bf565b8390600052602052604060002090565b9060068201549160ff808460101c16936116f185610f73565b6001809514611704575b505050016116ad565b1615611759576001600160a01b03808716908616145b611726575b80806116fb565b60029099919901611750610a388254611745610a388560010190600090565b019260020190600090565b0101973861171f565b828101546001600160a01b0386811691161461171a565b906040906117e46117948285906001600160a01b0316600052602052604060002090565b91600092838052602052838320546117bf8287906001600160a01b0316600052602052604060002090565b60018552602052848420540194906001600160a01b0316600052602052604060002090565b6002825260205220540190565b908160209103126100d7575190565b506040513d6000823e3d90fd5b1561181457565b60405162461bcd60e51b815260206004820152601460248201527f496e73756666696369656e742062616c616e63650000000000000000000000006044820152606490fd5b908160209103126100d7575161186e816106dc565b90565b92610dbb91610da361191795969496600388604051926080840184811067ffffffffffffffff82111761191a575b6040526001600160a01b0380881685526118f560208601918b83526040870193858552606088019560018752600052602052604060002096511686906001600160a01b03166001600160a01b0319825416179055565b51600185015551600284015551151591019060ff801983541691151516179055565b55565b611922610630565b61189f565b9080821461195b57908154906000915b600383106119455750505050565b6001809194019283549481840155019192611937565b5050565b60009081815581600181818401556005830190600284015b8281106119875750505560060155565b92835584928101611977565b80156119a1575b6000190190565b6119a961108c565b61199a56fea2646970667358221220e6521aeed8cdd19063023c65e2484718ebba60a40b7fe8e6f2f1f9225ac8518064736f6c634300080e0033",
  "devdoc": {
    "details": "Library containing complete function implementations moved from LendingPoolStakingV2",
    "kind": "dev",
    "methods": {
      "getClaimableRewards(mapping(uint256 => ILendingPoolStakingV2.Stake) storage,uint256,ILendingPoolStakingV2.RewardPeriod[2] storage,mapping(address => mapping(uint64 => bool)) storage,mapping(address => mapping(uint8 => uint256)) storage,uint256,address,address,address)": {
        "details": "Moved entirely from main contract to reduce bytecode"
      },
      "processClaim(mapping(uint256 => ILendingPoolStakingV2.Stake) storage,mapping(address => mapping(uint8 => uint256)) storage,uint256,mapping(address => mapping(uint64 => bool)) storage,ILendingPoolStakingV2.RewardPeriod storage,address,address,address)": {
        "details": "Moved entirely from main contract to reduce bytecode"
      },
      "processUnstake(ILendingPoolStakingV2.Stake storage,mapping(address => mapping(uint8 => uint256)) storage,address,address)": {
        "details": "Moved from main contract with all logic intact"
      }
    },
    "title": "StakingLib",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculatePoolRollOver(ILendingPoolStakingV2.RewardPeriod storage)": {
        "notice": "Calculates pool rollover amounts from previous period"
      },
      "calculateUserStakesTotal(mapping(uint256 => ILendingPoolStakingV2.Stake) storage,uint256,address,address)": {
        "notice": "Calculates total staked amount by a user for a specific token"
      },
      "closeCurrentPeriod(ILendingPoolStakingV2.RewardPeriod[2] storage,uint256,uint256,uint256)": {
        "notice": "Complete implementation of closing the current period"
      },
      "getClaimableRewards(mapping(uint256 => ILendingPoolStakingV2.Stake) storage,uint256,ILendingPoolStakingV2.RewardPeriod[2] storage,mapping(address => mapping(uint64 => bool)) storage,mapping(address => mapping(uint8 => uint256)) storage,uint256,address,address,address)": {
        "notice": "Complete implementation of getClaimableRewards"
      },
      "getTotalStakesForToken(mapping(address => mapping(uint8 => uint256)) storage,address)": {
        "notice": "Gets total staked amount for a token across all durations"
      },
      "lendingPoolTransfer(Vault,address,address,uint256)": {
        "notice": "Safely transfers assets from lending pool to recipient"
      },
      "processClaim(mapping(uint256 => ILendingPoolStakingV2.Stake) storage,mapping(address => mapping(uint8 => uint256)) storage,uint256,mapping(address => mapping(uint64 => bool)) storage,ILendingPoolStakingV2.RewardPeriod storage,address,address,address)": {
        "notice": "Complete implementation of claim function logic"
      },
      "processUnstake(ILendingPoolStakingV2.Stake storage,mapping(address => mapping(uint8 => uint256)) storage,address,address)": {
        "notice": "Process unstake operation completely"
      },
      "setStakeData(ILendingPoolStakingV2.Stake storage,address,uint256[3],address,uint48,bool,bool)": {
        "notice": "Create escrow stake with complete logic"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}