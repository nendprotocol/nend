{
  "address": "0x22432d751af8D7BB6b8D19B08AEf32f075A9bCe5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_hash",
          "type": "bytes"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "farmId",
          "type": "uint256"
        }
      ],
      "name": "FarmClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "farmId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "start",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "end",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalReward",
          "type": "uint256"
        }
      ],
      "name": "FarmCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardClaimed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "lastClaimedAt",
          "type": "uint48"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "farmId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "start",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "unstakedAt",
          "type": "uint48"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "__MWOwnable_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approveERC20Transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "authorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "calculateReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "_hashes",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_signatures",
          "type": "bytes[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_farmId",
          "type": "uint256"
        }
      ],
      "name": "claimBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakeToken",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "_end",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "_totalReward",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_farmId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "farms",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "start",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "end",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "totalReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getNamedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNativeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nend",
          "type": "address"
        }
      ],
      "name": "lpsInitialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "namedBalanceReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "namedBalanceSpend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "namedBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nend",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setERC1155ApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setERC721ApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "farmId",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "start",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "end",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "lastClaimedAt",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "transferERC1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "transferERC1155Batch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferERC20",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xddeef720f3b6a8c268741028298c6eab3c79fcce3a231aa794025c6bc8522f76",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x7E8aE5C72eCA86946b695dCc211863D9721A0961",
    "contractAddress": null,
    "transactionIndex": 56,
    "gasUsed": "3377902",
    "logsBloom": "0x
    "blockHash": "0xef5e3af0cd10f9e65ffdb4648fca27931bd751667fb1214fe1e066c454765c67",
    "transactionHash": "0xddeef720f3b6a8c268741028298c6eab3c79fcce3a231aa794025c6bc8522f76",
    "logs": [
      {
        "transactionIndex": 56,
        "blockNumber": 37024720,
        "transactionHash": "0xddeef720f3b6a8c268741028298c6eab3c79fcce3a231aa794025c6bc8522f76",
        "address": "0x22432d751af8D7BB6b8D19B08AEf32f075A9bCe5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007e8ae5c72eca86946b695dcc211863d9721a0961"
        ],
        "data": "0x",
        "logIndex": 523,
        "blockHash": "0xef5e3af0cd10f9e65ffdb4648fca27931bd751667fb1214fe1e066c454765c67"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 37024720,
        "transactionHash": "0xddeef720f3b6a8c268741028298c6eab3c79fcce3a231aa794025c6bc8522f76",
        "address": "0x22432d751af8D7BB6b8D19B08AEf32f075A9bCe5",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 524,
        "blockHash": "0xef5e3af0cd10f9e65ffdb4648fca27931bd751667fb1214fe1e066c454765c67"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 37024720,
        "transactionHash": "0xddeef720f3b6a8c268741028298c6eab3c79fcce3a231aa794025c6bc8522f76",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007e8ae5c72eca86946b695dcc211863d9721a0961",
          "0x00000000000000000000000026c80cc193b27d73d2c40943acec77f4da2c5bd8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000018ee5daae506dd200000000000000000000000000000000000000000000000061a9d2268c2600ec00000000000000000000000000000000000000000000792358b1301c57c31ca1000000000000000000000000000000000000000000000000601aec4bddd5931a0000000000000000000000000000000000000000000079235a4015f706138a73",
        "logIndex": 525,
        "blockHash": "0xef5e3af0cd10f9e65ffdb4648fca27931bd751667fb1214fe1e066c454765c67"
      }
    ],
    "blockNumber": 37024720,
    "cumulativeGasUsed": "15717963",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5f4e724599e3a7403e26c4f96c760b8c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_hash\",\"type\":\"bytes\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"farmId\",\"type\":\"uint256\"}],\"name\":\"FarmClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"farmId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"end\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"name\":\"FarmCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"lastClaimedAt\",\"type\":\"uint48\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"farmId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"unstakedAt\",\"type\":\"uint48\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"__MWOwnable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveERC20Transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_hashes\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_farmId\",\"type\":\"uint256\"}],\"name\":\"claimBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_end\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"_totalReward\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_farmId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"farms\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"end\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getNamedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNativeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nend\",\"type\":\"address\"}],\"name\":\"lpsInitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"namedBalanceReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"namedBalanceSpend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"namedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setERC1155ApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setERC721ApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"farmId\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"end\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lastClaimedAt\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferERC1155Batch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/LiquidityPoolStaking.sol\":\"LiquidityPoolStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/access/MWOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract MWOwnable is Initializable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() initializer {\\r\\n        _transferOwnership(0x7E8aE5C72eCA86946b695dCc211863D9721A0961);\\r\\n    }\\r\\n\\r\\n    function __MWOwnable_init() public virtual onlyInitializing {\\r\\n        _transferOwnership(0x7E8aE5C72eCA86946b695dCc211863D9721A0961);  // Nend Mainnet Main Wallet\\r\\n        // _transferOwnership(0x4a580D71c0F73202C51C58147aA7c7E09245b10A); // Nend Testnet/Turbo Main Wallet\\r\\n        // _transferOwnership(0x2F358B80eD2d296C09560d2b9F70a7f81d57e352); // Kong Wallet\\r\\n        // _transferOwnership(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4); // Remix test wallet\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x7ef8a1586453a8f1fa99a90c7a97d141e3d1e584fe11b625244c19a22dfc179f\",\"license\":\"MIT\"},\"contracts/access/SimpleRoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract SimpleRoleAccess is MWOwnable {\\r\\n    mapping(address => mapping(string => bool)) public hasRole;\\r\\n\\r\\n    function authorize(\\r\\n        address operator,\\r\\n        string memory role,\\r\\n        bool authorized\\r\\n    ) public onlyOwner {\\r\\n        hasRole[operator][role] = authorized;\\r\\n    }\\r\\n\\r\\n    modifier onlyRole(string memory _role) virtual {\\r\\n        require(\\r\\n            msg.sender == owner() || hasRole[msg.sender][_role],\\r\\n            \\\"Not authorized\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasAllRoles(string[] memory _roles) virtual {\\r\\n        for (uint256 i = 0; i < _roles.length; i++) {\\r\\n            require(hasRole[msg.sender][_roles[i]], \\\"Not authorized\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasSomeRoles(string[] memory _roles) virtual {\\r\\n        bool _hasRole;\\r\\n        for (uint256 i = 0; i < _roles.length; i++) {\\r\\n            if (hasRole[msg.sender][_roles[i]]) {\\r\\n                _hasRole = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(_hasRole, \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcda400188b817a7c5311ef3c5de33e0d404621eea1f3e2b446c0c666981a8f86\",\"license\":\"UNLICENSED\"},\"contracts/helpers/SignatureHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SignatureHelper {\\r\\n    function recoverSigner(bytes32 messageHash, bytes memory signature)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address)\\r\\n    {\\r\\n        (bytes32 r, bytes32 s, uint8 v) = splitSig(signature);\\r\\n\\r\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\r\\n        bytes32 prefixedHashMessage = keccak256(\\r\\n            abi.encodePacked(prefix, messageHash)\\r\\n        );\\r\\n\\r\\n        return ecrecover(prefixedHashMessage, v, r, s);\\r\\n    }\\r\\n\\r\\n    function splitSig(bytes memory signature)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            bytes32 r,\\r\\n            bytes32 s,\\r\\n            uint8 v\\r\\n        )\\r\\n    {\\r\\n        assembly {\\r\\n            r := mload(add(signature, 32))\\r\\n            s := mload(add(signature, 64))\\r\\n            v := and(mload(add(signature, 65)), 255)\\r\\n        }\\r\\n        if (v < 27) v += 27;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2aad6f30ae6e31239a36a51948c87c8d2e08a4f437d5f6c1a1e0029fee947cd8\",\"license\":\"UNLICENSED\"},\"contracts/staking/LiquidityPoolStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/ILiquidityPoolStaking.sol\\\";\\r\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\r\\nimport \\\"../vault/Vault.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract LiquidityPoolStaking is ILiquidityPoolStaking, Vault {\\r\\n    address public nend;\\r\\n    Farm[] public farms;\\r\\n    Stake[] public stakes;\\r\\n\\r\\n    function lpsInitialize(address _nend) public virtual initializer {\\r\\n        nend = _nend;\\r\\n\\r\\n        __Vault_init(\\\"Liquidity Pool\\\");\\r\\n        __MWOwnable_init();\\r\\n    }\\r\\n\\r\\n    function create(\\r\\n        address _stakeToken,\\r\\n        uint48 _end,\\r\\n        uint256 _totalReward\\r\\n    ) external virtual override onlyRole(\\\"admin\\\") {\\r\\n        require(_end > block.timestamp, \\\"Invalid end time\\\");\\r\\n        require(\\r\\n            IERC20(nend).balanceOf(address(this)) >= _totalReward,\\r\\n            \\\"Not enough liquidity supply\\\"\\r\\n        );\\r\\n\\r\\n        farms.push(\\r\\n            Farm(_stakeToken, uint48(block.timestamp), _end, _totalReward, 0)\\r\\n        );\\r\\n\\r\\n        emit FarmCreated(\\r\\n            farms.length - 1,\\r\\n            _stakeToken,\\r\\n            uint48(block.timestamp),\\r\\n            _end,\\r\\n            _totalReward\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function deposit(\\r\\n        uint256 _farmId,\\r\\n        uint256 _amount\\r\\n    ) external virtual override {\\r\\n        Farm storage _farm = farms[_farmId];\\r\\n        require(_farm.end > block.timestamp, \\\"Farm closed\\\");\\r\\n        require(\\r\\n            IERC20(_farm.token).balanceOf(msg.sender) >= _amount,\\r\\n            \\\"Insufficient lp token balance\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(_farm.token).transferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n        _farm.totalStaked += _amount;\\r\\n\\r\\n        stakes.push(\\r\\n            Stake(\\r\\n                msg.sender,\\r\\n                _farmId,\\r\\n                uint48(block.timestamp),\\r\\n                0,\\r\\n                uint48(block.timestamp),\\r\\n                _amount,\\r\\n                0\\r\\n            )\\r\\n        );\\r\\n\\r\\n        emit Staked(\\r\\n            stakes.length - 1,\\r\\n            msg.sender,\\r\\n            _farmId,\\r\\n            uint48(block.timestamp),\\r\\n            _amount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function unstake(uint256 _stakeId) external virtual override {\\r\\n        Stake storage _stake = stakes[_stakeId];\\r\\n        Farm storage _farm = farms[_stake.farmId];\\r\\n        require(_stake.end == 0, \\\"Already unstaked\\\");\\r\\n\\r\\n        _claim(_stakeId);\\r\\n        _stake.end = uint48(block.timestamp);\\r\\n        _farm.totalStaked -= _stake.amount;\\r\\n        IERC20(_farm.token).transfer(_stake.staker, _stake.amount);\\r\\n\\r\\n        emit Unstaked(_stakeId, uint48(block.timestamp));\\r\\n    }\\r\\n\\r\\n    function claim(uint256 _stakeId) external virtual override {\\r\\n        require(stakes[_stakeId].staker == msg.sender, \\\"Not own stake\\\");\\r\\n        require(stakes[_stakeId].end == 0, \\\"Already unstaked\\\");\\r\\n\\r\\n        _claim(_stakeId);\\r\\n    }\\r\\n\\r\\n    function claimBatch(uint256 _farmId) external virtual override {\\r\\n        for (uint i = 0; i < stakes.length; i++) {\\r\\n            Stake memory _stake = stakes[i];\\r\\n\\r\\n            if (_stake.farmId != _farmId || _stake.end != 0) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            _claim(i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _claim(uint256 _stakeId) internal virtual {\\r\\n        Stake storage _stake = stakes[_stakeId];\\r\\n        Farm storage _farm = farms[_stake.farmId];\\r\\n        uint256 reward = calculateReward(_stakeId);\\r\\n\\r\\n        if (reward > 0) {\\r\\n            require(\\r\\n                IERC20(nend).balanceOf(address(this)) >= reward,\\r\\n                \\\"Insufficient liquidity supply\\\"\\r\\n            );\\r\\n\\r\\n            _farm.totalReward -= reward;\\r\\n            _stake.rewardClaimed += reward;\\r\\n            _stake.lastClaimedAt = uint48(block.timestamp);\\r\\n            IERC20(nend).transfer(_stake.staker, reward);\\r\\n\\r\\n            emit RewardClaimed(\\r\\n                _stakeId,\\r\\n                _stake.rewardClaimed,\\r\\n                uint48(_stake.lastClaimedAt)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateReward(\\r\\n        uint256 _stakeId\\r\\n    ) public view virtual returns (uint256) {\\r\\n        Stake memory _stake = stakes[_stakeId];\\r\\n        // Unstaked\\r\\n        if (_stake.end != 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        Farm memory _farm = farms[_stake.farmId];\\r\\n        uint48 elapsed = (\\r\\n            block.timestamp <= _farm.end ? uint48(block.timestamp) : _farm.end\\r\\n        ) - _stake.lastClaimedAt;\\r\\n\\r\\n        return\\r\\n            (_stake.amount * _farm.totalReward * elapsed) /\\r\\n            _farm.totalStaked /\\r\\n            (_farm.end - _farm.start);\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\\r\\n}\\r\\n\",\"keccak256\":\"0xd3e8fbcd8df136c3d56b20fafd1fcc970dace13a0f625f25e604edad77c94381\",\"license\":\"UNLICENSED\"},\"contracts/staking/interfaces/ILiquidityPoolStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILiquidityPoolStaking {\\r\\n    event FarmCreated(\\r\\n        uint256 farmId,\\r\\n        address token,\\r\\n        uint48 start,\\r\\n        uint48 end,\\r\\n        uint256 totalReward\\r\\n    );\\r\\n    event FarmClosed(\\r\\n        uint256 farmId\\r\\n    );\\r\\n    event Staked(\\r\\n        uint256 stakeId,\\r\\n        address staker,\\r\\n        uint256 farmId,\\r\\n        uint48 start,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event Unstaked(uint256 stakeId, uint48 unstakedAt);\\r\\n    event RewardClaimed(uint256 stakeId, uint256 rewardClaimed, uint48 lastClaimedAt);\\r\\n\\r\\n    struct Farm {\\r\\n        address token;\\r\\n        uint48 start;\\r\\n        uint48 end;\\r\\n        uint256 totalReward;\\r\\n        uint256 totalStaked;\\r\\n    }\\r\\n\\r\\n    struct Stake {\\r\\n        // Staker address\\r\\n        address staker;\\r\\n        // Stake token address\\r\\n        uint256 farmId;\\r\\n        // The time of deposit\\r\\n        uint48 start;\\r\\n        // The time of unstake\\r\\n        uint48 end;\\r\\n        // The time of last reward claim\\r\\n        uint48 lastClaimedAt;\\r\\n        // The staked amount\\r\\n        uint256 amount;\\r\\n        // The amount of NEND claimed\\r\\n        uint256 rewardClaimed;\\r\\n    }\\r\\n\\r\\n    function create(\\r\\n        address _stakeToken,\\r\\n        uint48 _end,\\r\\n        uint256 _totalReward\\r\\n    ) external;\\r\\n\\r\\n    function deposit(\\r\\n        uint256 _farmId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function unstake(uint256 _stakeId) external;\\r\\n\\r\\n    function claim(uint256 _stakeId) external;\\r\\n\\r\\n    function claimBatch(uint256 _farmId) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x495399da8e2a631cd86da8f3c3e77cfa3517d47b64968bade0f3e103e6634e8f\",\"license\":\"UNLICENSED\"},\"contracts/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"../helpers/SignatureHelper.sol\\\";\\r\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\n\\r\\ncontract Vault is SimpleRoleAccess, UUPSUpgradeable {\\r\\n    using SignatureHelper for bytes32;\\r\\n\\r\\n    event Claimed(bytes _hash);\\r\\n\\r\\n    bytes4 private ERC1155_INTERFACE_ID;\\r\\n    string public name;\\r\\n\\r\\n    mapping(bytes => bool) public claimed;\\r\\n    // Balance name => token => amount\\r\\n    mapping(string => mapping(address => uint256)) public namedBalances;\\r\\n\\r\\n    function initialize(string memory _name) public virtual initializer {\\r\\n        __Vault_init(_name);\\r\\n        __MWOwnable_init();\\r\\n    }\\r\\n\\r\\n    function __Vault_init(\\r\\n        string memory _name\\r\\n    ) internal virtual onlyInitializing {\\r\\n        name = _name;\\r\\n        ERC1155_INTERFACE_ID = 0xd9b67a26;\\r\\n    }\\r\\n\\r\\n    function approveERC20Transfer(\\r\\n        address _tokenAddress,\\r\\n        address _spender,\\r\\n        uint256 _amount\\r\\n    ) external virtual onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.approve(_spender, _amount);\\r\\n    }\\r\\n\\r\\n    function transferERC20(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external virtual onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.transfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function setERC721ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function transferERC721(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.transferFrom(address(this), _to, _tokenId);\\r\\n    }\\r\\n\\r\\n    function transferERC1155(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeTransferFrom(address(this), _to, _id, _value, _data);\\r\\n    }\\r\\n\\r\\n    function transferERC1155Batch(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeBatchTransferFrom(address(this), _to, _ids, _values, _data);\\r\\n    }\\r\\n\\r\\n    function setERC1155ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function getNativeBalance() external view virtual returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function transferNative(\\r\\n        address payable _to,\\r\\n        uint256 _amount\\r\\n    ) public payable virtual onlyRole(\\\"spender\\\") {\\r\\n        (bool sent, ) = _to.call{ value: _amount }(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n\\r\\n    function burn(\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) public virtual onlyRole(\\\"spender\\\") {\\r\\n        ERC20Burnable(_token).burn(_amount);\\r\\n    }\\r\\n\\r\\n    function namedBalanceReceive(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        namedBalances[_name][_token] += _amount;\\r\\n    }\\r\\n\\r\\n    function namedBalanceSpend(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        require(\\r\\n            namedBalances[_name][_token] >= _amount,\\r\\n            \\\"Insufficient balance\\\"\\r\\n        );\\r\\n        namedBalances[_name][_token] -= _amount;\\r\\n    }\\r\\n\\r\\n    function getNamedBalance(\\r\\n        string memory _name,\\r\\n        address _token\\r\\n    ) external view virtual returns (uint256) {\\r\\n        uint256 balance = namedBalances[_name][_token];\\r\\n        uint256 actualBalance = _token == address(0)\\r\\n            ? payable(this).balance\\r\\n            : IERC20(_token).balanceOf(address(this));\\r\\n\\r\\n        return balance <= actualBalance ? balance : actualBalance;\\r\\n    }\\r\\n\\r\\n    function claim(\\r\\n        bytes[] memory _hashes,\\r\\n        bytes[] memory _signatures\\r\\n    ) external virtual {\\r\\n        require(\\r\\n            _hashes.length == _signatures.length,\\r\\n            \\\"Not matching hash and signature count\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < _hashes.length; i++) {\\r\\n            if (claimed[_hashes[i]]) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            (\\r\\n                address _recipientAddress,\\r\\n                address _tokenAddress,\\r\\n                uint256 _amount,\\r\\n                uint48 _timestamp\\r\\n            ) = abi.decode(_hashes[i], (address, address, uint256, uint48));\\r\\n\\r\\n            bytes32 _messageHash = keccak256(\\r\\n                abi.encodePacked(\\r\\n                    _recipientAddress,\\r\\n                    _tokenAddress,\\r\\n                    _amount,\\r\\n                    _timestamp\\r\\n                )\\r\\n            );\\r\\n\\r\\n            require(\\r\\n                _messageHash.recoverSigner(_signatures[i]) == owner(),\\r\\n                \\\"Invalid signature\\\"\\r\\n            );\\r\\n\\r\\n            require(_recipientAddress == msg.sender, \\\"Not recipient\\\");\\r\\n            require(block.timestamp >= _timestamp, \\\"Invalid timestamp\\\");\\r\\n            require(\\r\\n                IERC20(_tokenAddress).balanceOf(address(this)) >= _amount,\\r\\n                \\\"Insufficient pool balance\\\"\\r\\n            );\\r\\n\\r\\n            claimed[_hashes[i]] = true;\\r\\n            IERC20(_tokenAddress).transfer(msg.sender, _amount);\\r\\n            emit Claimed(_hashes[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n\\r\\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\\r\\n}\\r\\n\",\"keccak256\":\"0x08f1faf21b97709c47f65ae9f075a5658dfd07a2fdfed06f3197369389cff958\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523462000118576000546200003260ff8260081c16158092819362000109575b8115620000e6575b506200011d565b8062000046600160ff196000541617600055565b620000cb575b6200005662000181565b62000087575b30608052604051613b739081620001fb8239608051818181610b3601528181610f8801526110f80152f35b6200009861ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a16200005c565b620000e061010061ff00196000541617600055565b6200004c565b303b15915081620000fa575b50386200002b565b6001915060ff161438620000f2565b600160ff821610915062000023565b600080fd5b156200012557565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b6000805462010000600160b01b03198116757e8ae5c72eca86946b695dcc211863d9721a09610000178255604051737e8ae5c72eca86946b695dcc211863d9721a09619260109290921c6001600160a01b0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a356fe60806040526004361015610018575b361561001657005b005b60003560e01c80630530fa21146102fc57806306fdde03146102f35780631aca6376146102ea578063217fe6c6146102e15780632d97712f146102d85780632e17de78146102cf5780633659cfe6146102c6578063379607f5146102bd57806339d2525f146102b457806347ae6cc6146102ab5780634f1ef286146102a257806352d1902d1461029957806365b014b7146102905780636c49e021146102875780636d3005e31461027e578063715018a6146102755780637bfabc831461026c5780637d2e90c2146102635780637da470ea1461025a578063829522001461025157806388a9d554146102485780638b3ed9661461023f5780638da5cb5b146102365780639db5dbe41461022d5780639dc29fac14610224578063aef554681461021b578063b7314ef914610212578063bbac408c14610209578063d2d7231f14610200578063d5a44f86146101f7578063dbecc616146101ee578063e2bbb158146101e5578063e52ca961146101dc578063e7b7e8b4146101d3578063f2fde38b146101ca578063f415c5e5146101c15763f62d18880361000e576101bc61248c565b61000e565b506101bc6121cd565b506101bc61205d565b506101bc611fd2565b506101bc611f26565b506101bc611d57565b506101bc611c50565b506101bc611b87565b506101bc611b17565b506101bc611ab4565b506101bc6118b5565b506101bc6117b7565b506101bc611732565b506101bc6116bb565b506101bc611690565b506101bc611638565b506101bc61161b565b506101bc6115f3565b506101bc611586565b506101bc61145d565b506101bc611426565b506101bc6113c3565b506101bc6112e1565b506101bc61120a565b506101bc6111b4565b506101bc6110dc565b506101bc610f42565b506101bc610df9565b506101bc610d3f565b506101bc610c9f565b506101bc610b0c565b506101bc61096b565b506101bc6108f4565b506101bc610885565b506101bc610764565b506101bc61065f565b506101bc6104b6565b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161033057604052565b610338610305565b604052565b6020810190811067ffffffffffffffff82111761033057604052565b6040810190811067ffffffffffffffff82111761033057604052565b6060810190811067ffffffffffffffff82111761033057604052565b90601f8019910116810190811067ffffffffffffffff82111761033057604052565b6040519060a0820182811067ffffffffffffffff82111761033057604052565b6040519060e0820182811067ffffffffffffffff82111761033057604052565b60209067ffffffffffffffff8111610411575b601f01601f19160190565b610419610305565b610406565b81601f8201121561046557803590610435826103f3565b926104436040519485610391565b8284526020838301011161046557816000926020809301838601378301015290565b600080fd5b6001600160a01b0381160361046557565b6040600319820112610465576004359067ffffffffffffffff8211610465576104a69160040161041e565b906024356104b38161046a565b90565b50346104655761051e6104de6001600160a01b036104f66104d63661047b565b938491610839565b906001600160a01b0316600052602052604060002090565b54916000911680610529575050475b80821161052257505b6040519081529081906020820190565b0390f35b905061050e565b6040516370a0823160e01b815230600482015290602090829060249082905afa91821561058b575b9161055d575b50610505565b61057e915060203d8111610584575b6105768183610391565b8101906125d7565b38610557565b503d61056c565b6105936125e6565b610551565b600091031261046557565b50634e487b7160e01b600052600060045260246000fd5b90600182811c921680156105ea575b60208310146105d457565b634e487b7160e01b600052602260045260246000fd5b91607f16916105c9565b918091926000905b82821061061457501161060d575050565b6000910152565b915080602091830151818601520182916105fc565b90602091610642815180928185528580860191016105f4565b601f01601f1916010190565b9060206104b3928181520190610629565b503461046557600080600319360112610735576040519080609854610683816105ba565b8085529160019180831690811561071457506001146106b9575b61051e856106ad81870382610391565b6040519182918261064e565b9250609883527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d8145b8284106106fc5750505081016020016106ad8261051e61069d565b805460208587018101919091529093019281016106e1565b60ff1916602087015250506040840192506106ad915083905061051e61069d565b80fd5b6060906003190112610465576004356107508161046a565b9060243561075d8161046a565b9060443590565b50346104655761077336610738565b9161077c613601565b9260009384926107a56001600160a01b039283865460101c163314908115610818575b50612c05565b16803b15610814576040516323b872dd60e01b81523060048201526001600160a01b03909416602485015260448401919091528290818381606481015b03925af18015610807575b6107f8575b50604051f35b6108019061031c565b386107f2565b61080f6125e6565b6107ed565b8280fd5b33875260326020526040872060ff92506108319161085f565b54163861079f565b60206108529181604051938285809451938492016105f4565b8101609a81520301902090565b6020906108799282604051948386809551938492016105f4565b82019081520301902090565b5034610465576040366003190112610465576004356108a38161046a565b6024359067ffffffffffffffff8211610465576108e860ff916001600160a01b036108d4602095369060040161041e565b91166000526032845260406000209061085f565b54166040519015158152f35b503461046557602080600319360112610465576004359060005b609d54811015610016578061092e61092861095093611b3e565b50612ff4565b84848201511490811591610955575b5061094b5761094b816130ea565b612fe4565b61090e565b65ffffffffffff9150606001511615153861093d565b5034610465576020366003190112610465577f2db5acd5bced5f44f73d621255e9e4f7f24d6d2d9682a513df5ea7043fd693d26004356109aa81611b3e565b5090610aa660206109be600185015461153d565b506002850194610a2465ffffffffffff6109ed816109e68a5465ffffffffffff9060301c1690565b1615612f98565b6109f6876130ea565b42168097906bffffffffffff00000000000082549160301b16906bffffffffffff0000000000001916179055565b610a6f610a61610a55610a5560038501958654610a4660028301918254612db4565b9055546001600160a01b031690565b6001600160a01b031690565b91546001600160a01b031690565b915460405163a9059cbb60e01b81526001600160a01b03909316600484015260248301529092839190829060009082906044820190565b03925af18015610aff575b610ad1575b506040805191825265ffffffffffff929092166020820152a1005b610af19060203d8111610af8575b610ae98183610391565b810190612e51565b5038610ab6565b503d610adf565b610b076125e6565b610ab1565b503461046557602036600319011261046557600435610b2a8161046a565b6001600160a01b0390817f00000000000000000000000000000000000000000000000000000000000000001691610b6383301415612515565b610b927f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc938285541614612576565b610b9a612948565b60405190610ba78261033d565b600082527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610be15750506100169150612651565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181610c7f575b50610c6c5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b0390fd5b61001693610c7a91146125f3565b6126ef565b610c9891925060203d8111610584576105768183610391565b9038610c07565b5034610465576020366003190112610465576004356001600160a01b03610cc582611b3e565b5054163303610d005780610cfb65ffffffffffff6109e66002610cea61001696611b3e565b50015460301c65ffffffffffff1690565b6130ea565b60405162461bcd60e51b815260206004820152600d60248201526c4e6f74206f776e207374616b6560981b6044820152606490fd5b8015150361046557565b503461046557606036600319011261046557600435610d5d8161046a565b60243567ffffffffffffffff811161046557610d80610db191369060040161041e565b6001600160a01b0360443593610d9585610d35565b610d9d612948565b16600052603260205260406000209061085f565b9060ff8019835416911515161790556000604051f35b606090600319011261046557600435610ddf8161046a565b90602435610dec8161046a565b906044356104b381610d35565b503461046557610e3b610e0b36610dc7565b610e16929192613601565b916001600160a01b0390600095869483865460101c1633149081156108185750612c05565b16610eac610e926020610e5060975460e01b90565b6040516301ffc9a760e01b81527fffffffff00000000000000000000000000000000000000000000000000000000909116600482015291829081906024820190565b0381865afa908115610f35575b8591610f17575b50613624565b803b156108145760405163a22cb46560e01b81526001600160a01b03909416600485015290151560248401528290818381604481015b03925af18015610f0a575b610ef75750604051f35b80610f046108019261031c565b80610598565b610f126125e6565b610eed565b610f2f915060203d8111610af857610ae98183610391565b38610ea6565b610f3d6125e6565b610e9f565b50604036600319011261046557600435610f5b8161046a565b60243567ffffffffffffffff811161046557610f7b90369060040161041e565b906001600160a01b0391827f00000000000000000000000000000000000000000000000000000000000000001692610fb584301415612515565b610fe47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc948286541614612576565b610fec612948565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156110225750506100169150612651565b6020600491604094939451928380926352d1902d60e01b825286165afa600091816110bc575b506110a95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b610016936110b791146125f3565b612807565b6110d591925060203d8111610584576105768183610391565b9038611048565b5034610465576000366003190112610465576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611149576040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152602090f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b5034610465576000366003190112610465576111d760ff60005460081c166128cd565b6100166129a3565b6060600319820112610465576004359067ffffffffffffffff8211610465576107509160040161041e565b503461046557611219366111df565b9190611244611226613601565b6001600160a01b0360005460101c1633149081156112c55750612c05565b82611252826104de85610839565b5410611280576104de61126492610839565b90815481811061127357039055005b61127b612d80565b039055005b60405162461bcd60e51b815260206004820152601460248201527f496e73756666696369656e742062616c616e63650000000000000000000000006044820152606490fd5b60ff91506108319033600052603260205260406000209061085f565b50346104655761051e61135860206112f836610738565b91906000611304613601565b6113266001600160a01b039182845460101c1633149081156113ab5750612c05565b60405180978196829563095ea7b360e01b845260048401602090939291936001600160a01b0360408201951681520152565b0393165af190811561139e575b600091611380575b5060405190151581529081906020820190565b611398915060203d8111610af857610ae98183610391565b3861136d565b6113a66125e6565b611365565b338552603289526040852060ff92506108319161085f565b503461046557600080600319360112610735576113de612948565b805462010000600160b01b031981168255816001600160a01b036040519260101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b5034610465576104de61145961145161143e366111df565b94909161144c611226613601565b610839565b918254612e66565b9055005b506040366003190112610465576004356114768161046a565b61147e613601565b906114aa6001600160a01b039260009384938493849383855460101c16331490811561150d5750612c05565b6040519160243591165af16114bd61285d565b50156114c857604051f35b60405162461bcd60e51b815260206004820152601460248201527f4661696c656420746f2073656e642045746865720000000000000000000000006044820152606490fd5b33865260326020526040862060ff92506108319161085f565b50634e487b7160e01b600052603260045260246000fd5b600390609c54811015611579575b609c600052027faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539c0190600090565b611581611526565b61154b565b503461046557602036600319011261046557600435609c54811015610465576115b060a09161153d565b508054906002600182015491015490604051926001600160a01b038116845265ffffffffffff81861c16602085015260d01c604084015260608301526080820152f35b50346104655760003660031901126104655760206001600160a01b03609b5416604051908152f35b503461046557600036600319011261046557602047604051908152f35b5034610465576020611687816116656116503661047b565b929081604051938285809451938492016105f4565b8101609a815203019020906001600160a01b0316600052602052604060002090565b54604051908152f35b50346104655760003660031901126104655760206001600160a01b0360005460101c16604051908152f35b50346104655761051e61135860206116d236610738565b919060006116de613601565b6117006001600160a01b039182845460101c1633149081156113ab5750612c05565b60405180978196829563a9059cbb60e01b845260048401602090939291936001600160a01b0360408201951681520152565b5034610465576000604036600319011261073557806004356117538161046a565b61175b613601565b9061177e6001600160a01b039283855460101c16331490811561150d5750612c05565b16803b156117b4578190602460405180948193630852cd8d60e31b8352833560048401525af18015610807576107f85750604051f35b50fd5b5034610465576020366003190112610465576004356117d58161046a565b611819600054916117fd60ff8460081c161580948195611897575b8115611877575b50612a18565b82611810600160ff196000541617600055565b61185e57612a8a565b61181f57005b61182f61ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b61187261010061ff00196000541617600055565b612a8a565b303b15915081611889575b50386117f7565b6001915060ff161438611882565b600160ff82161091506117f0565b65ffffffffffff81160361046557565b5034610465576060366003190112610465576004356118d38161046a565b6024356118df816118a5565b7f15c2d2647680bb2008b9c7ebba268afb710b03da5b18d7e39cf399b7e081770f60443592604092611a4784519561191687610359565b600587526020926430b236b4b760d91b8489015261194d6000986001600160a01b038a5460101c163314908115611a775750612c05565b6119fe65ffffffffffff6119644282851611612c51565b6119b584611980610a55610a55609b546001600160a01b031690565b8b516370a0823160e01b8152306004820152908990829060249082905afa908115611a6a575b8d91611a4d575b501015612c9d565b4216946119e0866119c46103b3565b6001600160a01b038a1681529283019065ffffffffffff169052565b65ffffffffffff8316818a0152836060820152896080820152612ce9565b611a09609c54612d97565b9387519586958691936001600160a01b036080949297969560a0850198855216602084015265ffffffffffff80921660408401521660608201520152565b0390a151f35b611a649150893d8b11610584576105768183610391565b386119ad565b611a726125e6565b6119a6565b338b5260328752898b2060ff92506108319161085f565b6020611aa79181604051938285809451938492016105f4565b8101609981520301902090565b50346104655760203660031901126104655760043567ffffffffffffffff81116104655760ff611b016020611aee8194369060040161041e565b81604051938285809451938492016105f4565b8101609981520301902054166040519015158152f35b5034610465576020366003190112610465576020611b3660043561339e565b604051908152f35b600590609d54811015611b7a575b609d600052027fd26e832454299e9fabb89e0e5fffdc046d4e14431bc1bf607ffb2e8a1ddecf7b0190600090565b611b82611526565b611b4c565b503461046557602036600319011261046557600435609d5481101561046557611baf90611b3e565b508054600182015460028301546003840154600490940154604080516001600160a01b039095168552602085019390935265ffffffffffff80831693850193909352603082901c83166060808601919091529190911c909116608083015260a082019290925260c081019190915260e090f35b9181601f840112156104655782359167ffffffffffffffff8311610465576020838186019501011161046557565b50346104655760a036600319011261046557600435611c6e8161046a565b602435611c7a8161046a565b6084359167ffffffffffffffff831161046557611c9e611ccc933690600401611c22565b90611ca7613601565b926001600160a01b0390600096879583875460101c163314908115611d3e5750612c05565b1690611cfb611ce26020610e5060975460e01b90565b0381875afa908115611d31575b8691610f175750613624565b813b15611d2d5783610ee29560405196879586948593637921219560e11b8552606435906044359030600488016136a5565b8380fd5b611d396125e6565b611cef565b33885260326020526040882060ff92506108319161085f565b503461046557604080600319360112610465576000907f8fa1b1e2223dcdbb644ad66a5181f5667692fc6c202efb5c90eae671dc569f1e600435602435611a47611da08361153d565b509160026001600160a01b038454611dbc428260d01c11612dcb565b88516370a0823160e01b8152336004820152602096929190911690611dfc9085908881602481875afa908115611f19575b8d91611efc575b501015612e05565b88516323b872dd60e01b815233600482015230602482015260448101859052908690829060649082908e905af18015611eef575b611ed2575b5001611e42828254612e66565b9055611e9465ffffffffffff42169385611e5a6103d3565b3381529182015265ffffffffffff8516888201526060810189905265ffffffffffff851660808201528260a08201528860c0820152612e7e565b611e9f609d54612d97565b8651908152336020820152604081019490945265ffffffffffff90921660608401526080830191909152819060a0820190565b611ee890863d8811610af857610ae98183610391565b5038611e35565b611ef76125e6565b611e30565b611f139150893d8b11610584576105768183610391565b38611df4565b611f216125e6565b611ded565b503461046557611f3536610dc7565b91611f3e613601565b926000938492611f666001600160a01b039283865460101c1633149081156108185750612c05565b16803b156108145760405163a22cb46560e01b81526001600160a01b03909416600485015290151560248401528290818381604481016107e2565b9181601f840112156104655782359167ffffffffffffffff8311610465576020808501948460051b01011161046557565b50346104655760a036600319011261046557600435611ff08161046a565b602435611ffc8161046a565b67ffffffffffffffff916044358381116104655761201e903690600401611fa1565b9060643585811161046557612037903690600401611fa1565b92909160843596871161046557612055610016973690600401611c22565b9690956136da565b50346104655760203660031901126104655760043561207b8161046a565b612083612948565b6001600160a01b039081811680156120e75760009262010000600160b01b0384549360101b1662010000600160b01b031984161784556040519260101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b9080601f830112156104655781359067ffffffffffffffff928383116121c0575b8260051b6040519460209461217386840188610391565b865284808701928401019380851161046557858401925b85841061219b575050505050505090565b83358381116104655787916121b5848480948a010161041e565b81520193019261218a565b6121c8610305565b61215c565b5034610465576040806003193601126104655767ffffffffffffffff906004803583811161046557612202903690830161213b565b926024359081116104655761221a903690830161213b565b926122288151855114613854565b60005b81518110156100165761225161224a61224483856138ae565b51611a8e565b5460ff1690565b6124835761225f81836138ae565b5180516020929161227691810184019084016138d0565b8851606085811b6bffffffffffffffffffffffff19908116838a019081529186901b1660148201526028810184905260d083901b6001600160d01b03191660488201529296946001600160a01b03948516949293908316929180604e830103601f19810182526122e69082610391565b5190206122f3878d6138ae565b516122fd91613a48565b60005490919060101c6001600160a01b03166001600160a01b03169116146123249061390a565b331461232f90613956565b65ffffffffffff1642101561234390613992565b86516370a0823160e01b8152308782019081528391908290829081906020010381865afa92868415612429986000966123d59561238e93612476575b8891612459575b5010156139de565b6123ab61239e612244898c6138ae565b805460ff19166001179055565b8a5163a9059cbb60e01b8152338b8201908152602081019290925294859384928391604090910190565b03925af1801561244c575b61242e575b50507f4ad9c0f6018b9d6efdb6bfb76472c84cca0806aab365506ef8f5fe7e2ab382b161242161241583866138ae565b5187519182918261064e565b0390a1612fe4565b61222b565b8161244492903d10610af857610ae98183610391565b5038806123e5565b6124546125e6565b6123e0565b6124709150873d8911610584576105768183610391565b38612386565b61247e6125e6565b61237f565b61242990612fe4565b50346104655760203660031901126104655760043567ffffffffffffffff8111610465576124be90369060040161041e565b611819600054916124e460ff8460081c1615809481956118975781156118775750612a18565b826124f7600160ff196000541617600055565b156134995761251061010061ff00196000541617600055565b613499565b1561251c57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561257d57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b90816020910312610465575190565b506040513d6000823e3d90fd5b156125fa57565b60405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b803b15612694576001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91166001600160a01b0319825416179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b6126f881612651565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a28251158015906127ff575b61273e57505050565b813b156127ae5750600082819260206127ab95519201905af461275f61285d565b6040519161276c83610375565b602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020840152660819985a5b195960ca1b604084015261288d565b50565b62461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b506000612735565b61281081612651565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a28251158015906128555761273e57505050565b506001612735565b3d15612888573d9061286e826103f3565b9161287c6040519384610391565b82523d6000602084013e565b606090565b90919015612899575090565b8151156128a95750805190602001fd5b60405162461bcd60e51b815260206004820152908190610c68906024830190610629565b156128d457565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61293e60ff60005460081c166128cd565b6129466129a3565b565b6001600160a01b0360005460101c16330361295f57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b737e8ae5c72eca86946b695dcc211863d9721a09616001600160a01b03600054757e8ae5c72eca86946b695dcc211863d9721a0961000062010000600160b01b031982161760005560101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b15612a1f57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608490fd5b6001600160a01b03166001600160a01b0319609b541617609b5560405190612ab182610359565b600e825260207f4c697175696469747920506f6f6c00000000000000000000000000000000000081840152612aed60ff60005460081c166128cd565b82519067ffffffffffffffff8211612bf8575b612b1482612b0f6098546105ba565b613590565b80601f8311600114612b6d5750819293600092612b62575b50508160011b916000199060031b1c1916176098555b612b5a63d9b67a2663ffffffff196097541617609755565b61294661292d565b015190503880612b2c565b90601f19831694612ba060986000527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d81490565b926000905b878210612be0575050836001959610612bc7575b505050811b01609855612b42565b015160001960f88460031b161c19169055388080612bb9565b80600185968294968601518155019501930190612ba5565b612c00610305565b612b00565b15612c0c57565b60405162461bcd60e51b815260206004820152600e60248201527f4e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606490fd5b15612c5857565b60405162461bcd60e51b815260206004820152601060248201527f496e76616c696420656e642074696d65000000000000000000000000000000006044820152606490fd5b15612ca457565b60405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656e6f756768206c697175696469747920737570706c7900000000006044820152606490fd5b60026080612d11609c5468010000000000000000811015612d73575b60018101609c5561153d565b939093612d66575b8051602082015160408301516001600160a01b0390921660a09190911b65ffffffffffff60a01b161760d09190911b6001600160d01b031916178455606081015160018501550151910155565b612d6e6105a3565b612d19565b612d7b610305565b612d05565b50634e487b7160e01b600052601160045260246000fd5b60018110612da7575b6000190190565b612daf612d80565b612da0565b818110612dbf570390565b612dc7612d80565b0390565b15612dd257565b60405162461bcd60e51b815260206004820152600b60248201526a11985c9b4818db1bdcd95960aa1b6044820152606490fd5b15612e0c57565b60405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c7020746f6b656e2062616c616e63650000006044820152606490fd5b9081602091031261046557516104b381610d35565b81198111612e72570190565b612e7a612d80565b0190565b600460c0612ea6609d5468010000000000000000811015612f8b575b60018101609d55611b3e565b939093612f7e575b8051845473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039190911617845560208101516001850155612f6d6002850165ffffffffffff60408401511665ffffffffffff19825416178155612f44612f1a606085015165ffffffffffff1690565b82546bffffffffffff000000000000191660309190911b6bffffffffffff00000000000016178255565b6080830151815465ffffffffffff60601b191660609190911b65ffffffffffff60601b16179055565b60a081015160038501550151910155565b612f866105a3565b612eae565b612f93610305565b612e9a565b15612f9f57565b60405162461bcd60e51b815260206004820152601060248201527f416c726561647920756e7374616b6564000000000000000000000000000000006044820152606490fd5b6001906000198114612e72570190565b9060405160e0810181811067ffffffffffffffff821117613091575b60405260c0600482946001600160a01b03815416845260018101546020850152613080600282015465ffffffffffff90613057828216604089019065ffffffffffff169052565b65ffffffffffff603082901c831616606088015260601c16608086019065ffffffffffff169052565b600381015460a08501520154910152565b613099610305565b613010565b156130a557565b60405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c697175696469747920737570706c790000006044820152606490fd5b6130f381611b3e565b50613101600182015461153d565b509161310c8161339e565b80613118575b50505050565b61325661327d917f13e74023f2254e8a849a98d1797107bbe684613be7b7717f205affdd644b16a595600161315b610a55610a55609b546001600160a01b031690565b6040516370a0823160e01b81523060048201526020939161319b9186918690829060249082905afa9081156132d1575b6000916132b4575b50101561309e565b016131a7838254612db4565b90556132338160048801936131bd818654612e66565b855560028901805465ffffffffffff60601b19164260601b65ffffffffffff60601b16178155986131ff610a61610a55610a55609b546001600160a01b031690565b600060405180968195829463a9059cbb60e01b845260048401602090939291936001600160a01b0360408201951681520152565b03925af180156132a7575b613289575b505054935460601c65ffffffffffff1690565b6040519384938491604091949365ffffffffffff9160608501968552602085015216910152565b0390a138808080613112565b8161329f92903d10610af857610ae98183610391565b503880613243565b6132af6125e6565b61323e565b6132cb9150863d8811610584576105768183610391565b38613193565b6132d96125e6565b61318b565b9060405160a0810181811067ffffffffffffffff82111761333b575b60405260806002829480546001600160a01b038116855265ffffffffffff8160a01c16602086015260d01c6040850152600181015460608501520154910152565b613343610305565b6132fa565b65ffffffffffff9182169116818110612dbf570390565b8060001904821181151516613372570290565b61337a612d80565b0290565b8115613388570490565b634e487b7160e01b600052601260045260246000fd5b6109286133aa91611b3e565b65ffffffffffff806133c5606084015165ffffffffffff1690565b166134925761347e61347383613431602061346561345861344d6133f76133f1856104b39c015161153d565b506132de565b95604087019961340d8b5165ffffffffffff1690565b8082164211613484575061344560a06134378342165b608086015165ffffffffffff165b90613348565b93015160608a01519061335f565b91169061335f565b60808601519061337e565b965165ffffffffffff1690565b92015165ffffffffffff1690565b65ffffffffffff1690565b9061337e565b60a061343761344592613423565b5050600090565b906134ab60ff60005460081c166128cd565b815167ffffffffffffffff8111613583575b6134cc81612b0f6098546105ba565b602080601f83116001146135125750819293600092612b625750508160011b916000199060031b1c191617609855612b5a63d9b67a2663ffffffff196097541617609755565b90601f1983169461354560986000527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d81490565b926000905b87821061356b575050836001959610612bc757505050811b01609855612b42565b8060018596829496860151815501950193019061354a565b61358b610305565b6134bd565b601f811161359c575050565b600090609882527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d814906020601f850160051c830194106135f7575b601f0160051c01915b8281106135ec57505050565b8181556001016135e0565b90925082906135d7565b6040519061360e82610359565b600782526639b832b73232b960c91b6020830152565b1561362b57565b60405162461bcd60e51b815260206004820152602b60248201527f676976656e20746f6b656e206164647265737320646f65736e2774207375707060448201526a6f7274204552433131353560a81b6064820152608490fd5b908060209392818452848401376000828201840152601f01601f1916010190565b91926104b396949160a0946001600160a01b038092168552166020840152604083015260608201528160808201520191613684565b95969091929493966136ea613601565b966001600160a01b0390613710600099838b5460101c1633149081156137a95750612c05565b169461373f6137266020610e5060975460e01b90565b03818b5afa90811561379c575b8a91610f175750613624565b853b15613798579161376c918894936040519a8b998a988997631759616b60e11b89523060048a01613803565b03925af1801561378b575b61377e5750565b80610f046129469261031c565b6137936125e6565b613777565b8780fd5b6137a46125e6565b613733565b338c52603260205260408c2060ff92506108319161085f565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116104655760209260051b80928483013701016000815290565b96949261384694613838926104b39a98946001600160a01b038092168b521660208a015260a060408a015260a08901916137c2565b9186830360608801526137c2565b926080818503910152613684565b1561385b57565b60405162461bcd60e51b815260206004820152602560248201527f4e6f74206d61746368696e67206861736820616e64207369676e61747572652060448201526418dbdd5b9d60da1b6064820152608490fd5b60209181518110156138c3575b60051b010190565b6138cb611526565b6138bb565b91908260809103126104655781516138e78161046a565b9160208101516138f68161046a565b91606060408301519201516104b3816118a5565b1561391157565b60405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606490fd5b1561395d57565b60405162461bcd60e51b815260206004820152600d60248201526c139bdd081c9958da5c1a595b9d609a1b6044820152606490fd5b1561399957565b60405162461bcd60e51b815260206004820152601160248201527f496e76616c69642074696d657374616d700000000000000000000000000000006044820152606490fd5b156139e557565b60405162461bcd60e51b815260206004820152601960248201527f496e73756666696369656e7420706f6f6c2062616c616e6365000000000000006044820152606490fd5b6020929190613a408492828151948592016105f4565b019081520190565b600090602092838101519060ff604160408301519201511692601b8410613b15575b90613af391613abb613ac960405192613a8284610359565b601c84527f19457468657265756d205369676e6564204d6573736167653a0a3332000000008a8501526040519283918b83019586613a2a565b03601f198101835282610391565b51902092604051948594859094939260ff6060936080840197845216602083015260408201520152565b838052039060015afa15613b08575b60005190565b613b106125e6565b613b02565b9290601b8260e4613af39411613b30575b0193909150613a6a565b613b38612d80565b613b2656fea2646970667358221220b9bdbf1edb774fa03acb8ddc1396d14488a645f48d7429508a1b8e01e872eeb964736f6c634300080e0033",
  "deployedBytecode": "0x60806040526004361015610018575b361561001657005b005b60003560e01c80630530fa21146102fc57806306fdde03146102f35780631aca6376146102ea578063217fe6c6146102e15780632d97712f146102d85780632e17de78146102cf5780633659cfe6146102c6578063379607f5146102bd57806339d2525f146102b457806347ae6cc6146102ab5780634f1ef286146102a257806352d1902d1461029957806365b014b7146102905780636c49e021146102875780636d3005e31461027e578063715018a6146102755780637bfabc831461026c5780637d2e90c2146102635780637da470ea1461025a578063829522001461025157806388a9d554146102485780638b3ed9661461023f5780638da5cb5b146102365780639db5dbe41461022d5780639dc29fac14610224578063aef554681461021b578063b7314ef914610212578063bbac408c14610209578063d2d7231f14610200578063d5a44f86146101f7578063dbecc616146101ee578063e2bbb158146101e5578063e52ca961146101dc578063e7b7e8b4146101d3578063f2fde38b146101ca578063f415c5e5146101c15763f62d18880361000e576101bc61248c565b61000e565b506101bc6121cd565b506101bc61205d565b506101bc611fd2565b506101bc611f26565b506101bc611d57565b506101bc611c50565b506101bc611b87565b506101bc611b17565b506101bc611ab4565b506101bc6118b5565b506101bc6117b7565b506101bc611732565b506101bc6116bb565b506101bc611690565b506101bc611638565b506101bc61161b565b506101bc6115f3565b506101bc611586565b506101bc61145d565b506101bc611426565b506101bc6113c3565b506101bc6112e1565b506101bc61120a565b506101bc6111b4565b506101bc6110dc565b506101bc610f42565b506101bc610df9565b506101bc610d3f565b506101bc610c9f565b506101bc610b0c565b506101bc61096b565b506101bc6108f4565b506101bc610885565b506101bc610764565b506101bc61065f565b506101bc6104b6565b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161033057604052565b610338610305565b604052565b6020810190811067ffffffffffffffff82111761033057604052565b6040810190811067ffffffffffffffff82111761033057604052565b6060810190811067ffffffffffffffff82111761033057604052565b90601f8019910116810190811067ffffffffffffffff82111761033057604052565b6040519060a0820182811067ffffffffffffffff82111761033057604052565b6040519060e0820182811067ffffffffffffffff82111761033057604052565b60209067ffffffffffffffff8111610411575b601f01601f19160190565b610419610305565b610406565b81601f8201121561046557803590610435826103f3565b926104436040519485610391565b8284526020838301011161046557816000926020809301838601378301015290565b600080fd5b6001600160a01b0381160361046557565b6040600319820112610465576004359067ffffffffffffffff8211610465576104a69160040161041e565b906024356104b38161046a565b90565b50346104655761051e6104de6001600160a01b036104f66104d63661047b565b938491610839565b906001600160a01b0316600052602052604060002090565b54916000911680610529575050475b80821161052257505b6040519081529081906020820190565b0390f35b905061050e565b6040516370a0823160e01b815230600482015290602090829060249082905afa91821561058b575b9161055d575b50610505565b61057e915060203d8111610584575b6105768183610391565b8101906125d7565b38610557565b503d61056c565b6105936125e6565b610551565b600091031261046557565b50634e487b7160e01b600052600060045260246000fd5b90600182811c921680156105ea575b60208310146105d457565b634e487b7160e01b600052602260045260246000fd5b91607f16916105c9565b918091926000905b82821061061457501161060d575050565b6000910152565b915080602091830151818601520182916105fc565b90602091610642815180928185528580860191016105f4565b601f01601f1916010190565b9060206104b3928181520190610629565b503461046557600080600319360112610735576040519080609854610683816105ba565b8085529160019180831690811561071457506001146106b9575b61051e856106ad81870382610391565b6040519182918261064e565b9250609883527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d8145b8284106106fc5750505081016020016106ad8261051e61069d565b805460208587018101919091529093019281016106e1565b60ff1916602087015250506040840192506106ad915083905061051e61069d565b80fd5b6060906003190112610465576004356107508161046a565b9060243561075d8161046a565b9060443590565b50346104655761077336610738565b9161077c613601565b9260009384926107a56001600160a01b039283865460101c163314908115610818575b50612c05565b16803b15610814576040516323b872dd60e01b81523060048201526001600160a01b03909416602485015260448401919091528290818381606481015b03925af18015610807575b6107f8575b50604051f35b6108019061031c565b386107f2565b61080f6125e6565b6107ed565b8280fd5b33875260326020526040872060ff92506108319161085f565b54163861079f565b60206108529181604051938285809451938492016105f4565b8101609a81520301902090565b6020906108799282604051948386809551938492016105f4565b82019081520301902090565b5034610465576040366003190112610465576004356108a38161046a565b6024359067ffffffffffffffff8211610465576108e860ff916001600160a01b036108d4602095369060040161041e565b91166000526032845260406000209061085f565b54166040519015158152f35b503461046557602080600319360112610465576004359060005b609d54811015610016578061092e61092861095093611b3e565b50612ff4565b84848201511490811591610955575b5061094b5761094b816130ea565b612fe4565b61090e565b65ffffffffffff9150606001511615153861093d565b5034610465576020366003190112610465577f2db5acd5bced5f44f73d621255e9e4f7f24d6d2d9682a513df5ea7043fd693d26004356109aa81611b3e565b5090610aa660206109be600185015461153d565b506002850194610a2465ffffffffffff6109ed816109e68a5465ffffffffffff9060301c1690565b1615612f98565b6109f6876130ea565b42168097906bffffffffffff00000000000082549160301b16906bffffffffffff0000000000001916179055565b610a6f610a61610a55610a5560038501958654610a4660028301918254612db4565b9055546001600160a01b031690565b6001600160a01b031690565b91546001600160a01b031690565b915460405163a9059cbb60e01b81526001600160a01b03909316600484015260248301529092839190829060009082906044820190565b03925af18015610aff575b610ad1575b506040805191825265ffffffffffff929092166020820152a1005b610af19060203d8111610af8575b610ae98183610391565b810190612e51565b5038610ab6565b503d610adf565b610b076125e6565b610ab1565b503461046557602036600319011261046557600435610b2a8161046a565b6001600160a01b0390817f00000000000000000000000000000000000000000000000000000000000000001691610b6383301415612515565b610b927f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc938285541614612576565b610b9a612948565b60405190610ba78261033d565b600082527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610be15750506100169150612651565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181610c7f575b50610c6c5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b0390fd5b61001693610c7a91146125f3565b6126ef565b610c9891925060203d8111610584576105768183610391565b9038610c07565b5034610465576020366003190112610465576004356001600160a01b03610cc582611b3e565b5054163303610d005780610cfb65ffffffffffff6109e66002610cea61001696611b3e565b50015460301c65ffffffffffff1690565b6130ea565b60405162461bcd60e51b815260206004820152600d60248201526c4e6f74206f776e207374616b6560981b6044820152606490fd5b8015150361046557565b503461046557606036600319011261046557600435610d5d8161046a565b60243567ffffffffffffffff811161046557610d80610db191369060040161041e565b6001600160a01b0360443593610d9585610d35565b610d9d612948565b16600052603260205260406000209061085f565b9060ff8019835416911515161790556000604051f35b606090600319011261046557600435610ddf8161046a565b90602435610dec8161046a565b906044356104b381610d35565b503461046557610e3b610e0b36610dc7565b610e16929192613601565b916001600160a01b0390600095869483865460101c1633149081156108185750612c05565b16610eac610e926020610e5060975460e01b90565b6040516301ffc9a760e01b81527fffffffff00000000000000000000000000000000000000000000000000000000909116600482015291829081906024820190565b0381865afa908115610f35575b8591610f17575b50613624565b803b156108145760405163a22cb46560e01b81526001600160a01b03909416600485015290151560248401528290818381604481015b03925af18015610f0a575b610ef75750604051f35b80610f046108019261031c565b80610598565b610f126125e6565b610eed565b610f2f915060203d8111610af857610ae98183610391565b38610ea6565b610f3d6125e6565b610e9f565b50604036600319011261046557600435610f5b8161046a565b60243567ffffffffffffffff811161046557610f7b90369060040161041e565b906001600160a01b0391827f00000000000000000000000000000000000000000000000000000000000000001692610fb584301415612515565b610fe47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc948286541614612576565b610fec612948565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156110225750506100169150612651565b6020600491604094939451928380926352d1902d60e01b825286165afa600091816110bc575b506110a95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b610016936110b791146125f3565b612807565b6110d591925060203d8111610584576105768183610391565b9038611048565b5034610465576000366003190112610465576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611149576040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152602090f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b5034610465576000366003190112610465576111d760ff60005460081c166128cd565b6100166129a3565b6060600319820112610465576004359067ffffffffffffffff8211610465576107509160040161041e565b503461046557611219366111df565b9190611244611226613601565b6001600160a01b0360005460101c1633149081156112c55750612c05565b82611252826104de85610839565b5410611280576104de61126492610839565b90815481811061127357039055005b61127b612d80565b039055005b60405162461bcd60e51b815260206004820152601460248201527f496e73756666696369656e742062616c616e63650000000000000000000000006044820152606490fd5b60ff91506108319033600052603260205260406000209061085f565b50346104655761051e61135860206112f836610738565b91906000611304613601565b6113266001600160a01b039182845460101c1633149081156113ab5750612c05565b60405180978196829563095ea7b360e01b845260048401602090939291936001600160a01b0360408201951681520152565b0393165af190811561139e575b600091611380575b5060405190151581529081906020820190565b611398915060203d8111610af857610ae98183610391565b3861136d565b6113a66125e6565b611365565b338552603289526040852060ff92506108319161085f565b503461046557600080600319360112610735576113de612948565b805462010000600160b01b031981168255816001600160a01b036040519260101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b5034610465576104de61145961145161143e366111df565b94909161144c611226613601565b610839565b918254612e66565b9055005b506040366003190112610465576004356114768161046a565b61147e613601565b906114aa6001600160a01b039260009384938493849383855460101c16331490811561150d5750612c05565b6040519160243591165af16114bd61285d565b50156114c857604051f35b60405162461bcd60e51b815260206004820152601460248201527f4661696c656420746f2073656e642045746865720000000000000000000000006044820152606490fd5b33865260326020526040862060ff92506108319161085f565b50634e487b7160e01b600052603260045260246000fd5b600390609c54811015611579575b609c600052027faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539c0190600090565b611581611526565b61154b565b503461046557602036600319011261046557600435609c54811015610465576115b060a09161153d565b508054906002600182015491015490604051926001600160a01b038116845265ffffffffffff81861c16602085015260d01c604084015260608301526080820152f35b50346104655760003660031901126104655760206001600160a01b03609b5416604051908152f35b503461046557600036600319011261046557602047604051908152f35b5034610465576020611687816116656116503661047b565b929081604051938285809451938492016105f4565b8101609a815203019020906001600160a01b0316600052602052604060002090565b54604051908152f35b50346104655760003660031901126104655760206001600160a01b0360005460101c16604051908152f35b50346104655761051e61135860206116d236610738565b919060006116de613601565b6117006001600160a01b039182845460101c1633149081156113ab5750612c05565b60405180978196829563a9059cbb60e01b845260048401602090939291936001600160a01b0360408201951681520152565b5034610465576000604036600319011261073557806004356117538161046a565b61175b613601565b9061177e6001600160a01b039283855460101c16331490811561150d5750612c05565b16803b156117b4578190602460405180948193630852cd8d60e31b8352833560048401525af18015610807576107f85750604051f35b50fd5b5034610465576020366003190112610465576004356117d58161046a565b611819600054916117fd60ff8460081c161580948195611897575b8115611877575b50612a18565b82611810600160ff196000541617600055565b61185e57612a8a565b61181f57005b61182f61ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b61187261010061ff00196000541617600055565b612a8a565b303b15915081611889575b50386117f7565b6001915060ff161438611882565b600160ff82161091506117f0565b65ffffffffffff81160361046557565b5034610465576060366003190112610465576004356118d38161046a565b6024356118df816118a5565b7f15c2d2647680bb2008b9c7ebba268afb710b03da5b18d7e39cf399b7e081770f60443592604092611a4784519561191687610359565b600587526020926430b236b4b760d91b8489015261194d6000986001600160a01b038a5460101c163314908115611a775750612c05565b6119fe65ffffffffffff6119644282851611612c51565b6119b584611980610a55610a55609b546001600160a01b031690565b8b516370a0823160e01b8152306004820152908990829060249082905afa908115611a6a575b8d91611a4d575b501015612c9d565b4216946119e0866119c46103b3565b6001600160a01b038a1681529283019065ffffffffffff169052565b65ffffffffffff8316818a0152836060820152896080820152612ce9565b611a09609c54612d97565b9387519586958691936001600160a01b036080949297969560a0850198855216602084015265ffffffffffff80921660408401521660608201520152565b0390a151f35b611a649150893d8b11610584576105768183610391565b386119ad565b611a726125e6565b6119a6565b338b5260328752898b2060ff92506108319161085f565b6020611aa79181604051938285809451938492016105f4565b8101609981520301902090565b50346104655760203660031901126104655760043567ffffffffffffffff81116104655760ff611b016020611aee8194369060040161041e565b81604051938285809451938492016105f4565b8101609981520301902054166040519015158152f35b5034610465576020366003190112610465576020611b3660043561339e565b604051908152f35b600590609d54811015611b7a575b609d600052027fd26e832454299e9fabb89e0e5fffdc046d4e14431bc1bf607ffb2e8a1ddecf7b0190600090565b611b82611526565b611b4c565b503461046557602036600319011261046557600435609d5481101561046557611baf90611b3e565b508054600182015460028301546003840154600490940154604080516001600160a01b039095168552602085019390935265ffffffffffff80831693850193909352603082901c83166060808601919091529190911c909116608083015260a082019290925260c081019190915260e090f35b9181601f840112156104655782359167ffffffffffffffff8311610465576020838186019501011161046557565b50346104655760a036600319011261046557600435611c6e8161046a565b602435611c7a8161046a565b6084359167ffffffffffffffff831161046557611c9e611ccc933690600401611c22565b90611ca7613601565b926001600160a01b0390600096879583875460101c163314908115611d3e5750612c05565b1690611cfb611ce26020610e5060975460e01b90565b0381875afa908115611d31575b8691610f175750613624565b813b15611d2d5783610ee29560405196879586948593637921219560e11b8552606435906044359030600488016136a5565b8380fd5b611d396125e6565b611cef565b33885260326020526040882060ff92506108319161085f565b503461046557604080600319360112610465576000907f8fa1b1e2223dcdbb644ad66a5181f5667692fc6c202efb5c90eae671dc569f1e600435602435611a47611da08361153d565b509160026001600160a01b038454611dbc428260d01c11612dcb565b88516370a0823160e01b8152336004820152602096929190911690611dfc9085908881602481875afa908115611f19575b8d91611efc575b501015612e05565b88516323b872dd60e01b815233600482015230602482015260448101859052908690829060649082908e905af18015611eef575b611ed2575b5001611e42828254612e66565b9055611e9465ffffffffffff42169385611e5a6103d3565b3381529182015265ffffffffffff8516888201526060810189905265ffffffffffff851660808201528260a08201528860c0820152612e7e565b611e9f609d54612d97565b8651908152336020820152604081019490945265ffffffffffff90921660608401526080830191909152819060a0820190565b611ee890863d8811610af857610ae98183610391565b5038611e35565b611ef76125e6565b611e30565b611f139150893d8b11610584576105768183610391565b38611df4565b611f216125e6565b611ded565b503461046557611f3536610dc7565b91611f3e613601565b926000938492611f666001600160a01b039283865460101c1633149081156108185750612c05565b16803b156108145760405163a22cb46560e01b81526001600160a01b03909416600485015290151560248401528290818381604481016107e2565b9181601f840112156104655782359167ffffffffffffffff8311610465576020808501948460051b01011161046557565b50346104655760a036600319011261046557600435611ff08161046a565b602435611ffc8161046a565b67ffffffffffffffff916044358381116104655761201e903690600401611fa1565b9060643585811161046557612037903690600401611fa1565b92909160843596871161046557612055610016973690600401611c22565b9690956136da565b50346104655760203660031901126104655760043561207b8161046a565b612083612948565b6001600160a01b039081811680156120e75760009262010000600160b01b0384549360101b1662010000600160b01b031984161784556040519260101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b9080601f830112156104655781359067ffffffffffffffff928383116121c0575b8260051b6040519460209461217386840188610391565b865284808701928401019380851161046557858401925b85841061219b575050505050505090565b83358381116104655787916121b5848480948a010161041e565b81520193019261218a565b6121c8610305565b61215c565b5034610465576040806003193601126104655767ffffffffffffffff906004803583811161046557612202903690830161213b565b926024359081116104655761221a903690830161213b565b926122288151855114613854565b60005b81518110156100165761225161224a61224483856138ae565b51611a8e565b5460ff1690565b6124835761225f81836138ae565b5180516020929161227691810184019084016138d0565b8851606085811b6bffffffffffffffffffffffff19908116838a019081529186901b1660148201526028810184905260d083901b6001600160d01b03191660488201529296946001600160a01b03948516949293908316929180604e830103601f19810182526122e69082610391565b5190206122f3878d6138ae565b516122fd91613a48565b60005490919060101c6001600160a01b03166001600160a01b03169116146123249061390a565b331461232f90613956565b65ffffffffffff1642101561234390613992565b86516370a0823160e01b8152308782019081528391908290829081906020010381865afa92868415612429986000966123d59561238e93612476575b8891612459575b5010156139de565b6123ab61239e612244898c6138ae565b805460ff19166001179055565b8a5163a9059cbb60e01b8152338b8201908152602081019290925294859384928391604090910190565b03925af1801561244c575b61242e575b50507f4ad9c0f6018b9d6efdb6bfb76472c84cca0806aab365506ef8f5fe7e2ab382b161242161241583866138ae565b5187519182918261064e565b0390a1612fe4565b61222b565b8161244492903d10610af857610ae98183610391565b5038806123e5565b6124546125e6565b6123e0565b6124709150873d8911610584576105768183610391565b38612386565b61247e6125e6565b61237f565b61242990612fe4565b50346104655760203660031901126104655760043567ffffffffffffffff8111610465576124be90369060040161041e565b611819600054916124e460ff8460081c1615809481956118975781156118775750612a18565b826124f7600160ff196000541617600055565b156134995761251061010061ff00196000541617600055565b613499565b1561251c57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561257d57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b90816020910312610465575190565b506040513d6000823e3d90fd5b156125fa57565b60405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b803b15612694576001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91166001600160a01b0319825416179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b6126f881612651565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a28251158015906127ff575b61273e57505050565b813b156127ae5750600082819260206127ab95519201905af461275f61285d565b6040519161276c83610375565b602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020840152660819985a5b195960ca1b604084015261288d565b50565b62461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b506000612735565b61281081612651565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a28251158015906128555761273e57505050565b506001612735565b3d15612888573d9061286e826103f3565b9161287c6040519384610391565b82523d6000602084013e565b606090565b90919015612899575090565b8151156128a95750805190602001fd5b60405162461bcd60e51b815260206004820152908190610c68906024830190610629565b156128d457565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61293e60ff60005460081c166128cd565b6129466129a3565b565b6001600160a01b0360005460101c16330361295f57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b737e8ae5c72eca86946b695dcc211863d9721a09616001600160a01b03600054757e8ae5c72eca86946b695dcc211863d9721a0961000062010000600160b01b031982161760005560101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b15612a1f57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608490fd5b6001600160a01b03166001600160a01b0319609b541617609b5560405190612ab182610359565b600e825260207f4c697175696469747920506f6f6c00000000000000000000000000000000000081840152612aed60ff60005460081c166128cd565b82519067ffffffffffffffff8211612bf8575b612b1482612b0f6098546105ba565b613590565b80601f8311600114612b6d5750819293600092612b62575b50508160011b916000199060031b1c1916176098555b612b5a63d9b67a2663ffffffff196097541617609755565b61294661292d565b015190503880612b2c565b90601f19831694612ba060986000527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d81490565b926000905b878210612be0575050836001959610612bc7575b505050811b01609855612b42565b015160001960f88460031b161c19169055388080612bb9565b80600185968294968601518155019501930190612ba5565b612c00610305565b612b00565b15612c0c57565b60405162461bcd60e51b815260206004820152600e60248201527f4e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606490fd5b15612c5857565b60405162461bcd60e51b815260206004820152601060248201527f496e76616c696420656e642074696d65000000000000000000000000000000006044820152606490fd5b15612ca457565b60405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656e6f756768206c697175696469747920737570706c7900000000006044820152606490fd5b60026080612d11609c5468010000000000000000811015612d73575b60018101609c5561153d565b939093612d66575b8051602082015160408301516001600160a01b0390921660a09190911b65ffffffffffff60a01b161760d09190911b6001600160d01b031916178455606081015160018501550151910155565b612d6e6105a3565b612d19565b612d7b610305565b612d05565b50634e487b7160e01b600052601160045260246000fd5b60018110612da7575b6000190190565b612daf612d80565b612da0565b818110612dbf570390565b612dc7612d80565b0390565b15612dd257565b60405162461bcd60e51b815260206004820152600b60248201526a11985c9b4818db1bdcd95960aa1b6044820152606490fd5b15612e0c57565b60405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c7020746f6b656e2062616c616e63650000006044820152606490fd5b9081602091031261046557516104b381610d35565b81198111612e72570190565b612e7a612d80565b0190565b600460c0612ea6609d5468010000000000000000811015612f8b575b60018101609d55611b3e565b939093612f7e575b8051845473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039190911617845560208101516001850155612f6d6002850165ffffffffffff60408401511665ffffffffffff19825416178155612f44612f1a606085015165ffffffffffff1690565b82546bffffffffffff000000000000191660309190911b6bffffffffffff00000000000016178255565b6080830151815465ffffffffffff60601b191660609190911b65ffffffffffff60601b16179055565b60a081015160038501550151910155565b612f866105a3565b612eae565b612f93610305565b612e9a565b15612f9f57565b60405162461bcd60e51b815260206004820152601060248201527f416c726561647920756e7374616b6564000000000000000000000000000000006044820152606490fd5b6001906000198114612e72570190565b9060405160e0810181811067ffffffffffffffff821117613091575b60405260c0600482946001600160a01b03815416845260018101546020850152613080600282015465ffffffffffff90613057828216604089019065ffffffffffff169052565b65ffffffffffff603082901c831616606088015260601c16608086019065ffffffffffff169052565b600381015460a08501520154910152565b613099610305565b613010565b156130a557565b60405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c697175696469747920737570706c790000006044820152606490fd5b6130f381611b3e565b50613101600182015461153d565b509161310c8161339e565b80613118575b50505050565b61325661327d917f13e74023f2254e8a849a98d1797107bbe684613be7b7717f205affdd644b16a595600161315b610a55610a55609b546001600160a01b031690565b6040516370a0823160e01b81523060048201526020939161319b9186918690829060249082905afa9081156132d1575b6000916132b4575b50101561309e565b016131a7838254612db4565b90556132338160048801936131bd818654612e66565b855560028901805465ffffffffffff60601b19164260601b65ffffffffffff60601b16178155986131ff610a61610a55610a55609b546001600160a01b031690565b600060405180968195829463a9059cbb60e01b845260048401602090939291936001600160a01b0360408201951681520152565b03925af180156132a7575b613289575b505054935460601c65ffffffffffff1690565b6040519384938491604091949365ffffffffffff9160608501968552602085015216910152565b0390a138808080613112565b8161329f92903d10610af857610ae98183610391565b503880613243565b6132af6125e6565b61323e565b6132cb9150863d8811610584576105768183610391565b38613193565b6132d96125e6565b61318b565b9060405160a0810181811067ffffffffffffffff82111761333b575b60405260806002829480546001600160a01b038116855265ffffffffffff8160a01c16602086015260d01c6040850152600181015460608501520154910152565b613343610305565b6132fa565b65ffffffffffff9182169116818110612dbf570390565b8060001904821181151516613372570290565b61337a612d80565b0290565b8115613388570490565b634e487b7160e01b600052601260045260246000fd5b6109286133aa91611b3e565b65ffffffffffff806133c5606084015165ffffffffffff1690565b166134925761347e61347383613431602061346561345861344d6133f76133f1856104b39c015161153d565b506132de565b95604087019961340d8b5165ffffffffffff1690565b8082164211613484575061344560a06134378342165b608086015165ffffffffffff165b90613348565b93015160608a01519061335f565b91169061335f565b60808601519061337e565b965165ffffffffffff1690565b92015165ffffffffffff1690565b65ffffffffffff1690565b9061337e565b60a061343761344592613423565b5050600090565b906134ab60ff60005460081c166128cd565b815167ffffffffffffffff8111613583575b6134cc81612b0f6098546105ba565b602080601f83116001146135125750819293600092612b625750508160011b916000199060031b1c191617609855612b5a63d9b67a2663ffffffff196097541617609755565b90601f1983169461354560986000527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d81490565b926000905b87821061356b575050836001959610612bc757505050811b01609855612b42565b8060018596829496860151815501950193019061354a565b61358b610305565b6134bd565b601f811161359c575050565b600090609882527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d814906020601f850160051c830194106135f7575b601f0160051c01915b8281106135ec57505050565b8181556001016135e0565b90925082906135d7565b6040519061360e82610359565b600782526639b832b73232b960c91b6020830152565b1561362b57565b60405162461bcd60e51b815260206004820152602b60248201527f676976656e20746f6b656e206164647265737320646f65736e2774207375707060448201526a6f7274204552433131353560a81b6064820152608490fd5b908060209392818452848401376000828201840152601f01601f1916010190565b91926104b396949160a0946001600160a01b038092168552166020840152604083015260608201528160808201520191613684565b95969091929493966136ea613601565b966001600160a01b0390613710600099838b5460101c1633149081156137a95750612c05565b169461373f6137266020610e5060975460e01b90565b03818b5afa90811561379c575b8a91610f175750613624565b853b15613798579161376c918894936040519a8b998a988997631759616b60e11b89523060048a01613803565b03925af1801561378b575b61377e5750565b80610f046129469261031c565b6137936125e6565b613777565b8780fd5b6137a46125e6565b613733565b338c52603260205260408c2060ff92506108319161085f565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116104655760209260051b80928483013701016000815290565b96949261384694613838926104b39a98946001600160a01b038092168b521660208a015260a060408a015260a08901916137c2565b9186830360608801526137c2565b926080818503910152613684565b1561385b57565b60405162461bcd60e51b815260206004820152602560248201527f4e6f74206d61746368696e67206861736820616e64207369676e61747572652060448201526418dbdd5b9d60da1b6064820152608490fd5b60209181518110156138c3575b60051b010190565b6138cb611526565b6138bb565b91908260809103126104655781516138e78161046a565b9160208101516138f68161046a565b91606060408301519201516104b3816118a5565b1561391157565b60405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606490fd5b1561395d57565b60405162461bcd60e51b815260206004820152600d60248201526c139bdd081c9958da5c1a595b9d609a1b6044820152606490fd5b1561399957565b60405162461bcd60e51b815260206004820152601160248201527f496e76616c69642074696d657374616d700000000000000000000000000000006044820152606490fd5b156139e557565b60405162461bcd60e51b815260206004820152601960248201527f496e73756666696369656e7420706f6f6c2062616c616e6365000000000000006044820152606490fd5b6020929190613a408492828151948592016105f4565b019081520190565b600090602092838101519060ff604160408301519201511692601b8410613b15575b90613af391613abb613ac960405192613a8284610359565b601c84527f19457468657265756d205369676e6564204d6573736167653a0a3332000000008a8501526040519283918b83019586613a2a565b03601f198101835282610391565b51902092604051948594859094939260ff6060936080840197845216602083015260408201520152565b838052039060015afa15613b08575b60005190565b613b106125e6565b613b02565b9290601b8260e4613af39411613b30575b0193909150613a6a565b613b38612d80565b613b2656fea2646970667358221220b9bdbf1edb774fa03acb8ddc1396d14488a645f48d7429508a1b8e01e872eeb964736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 674,
        "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 677,
        "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9827,
        "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9947,
        "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9959,
        "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
        "label": "hasRole",
        "offset": 0,
        "slot": "50",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))"
      },
      {
        "astId": 656,
        "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 971,
        "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 28778,
        "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
        "label": "ERC1155_INTERFACE_ID",
        "offset": 0,
        "slot": "151",
        "type": "t_bytes4"
      },
      {
        "astId": 28780,
        "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
        "label": "name",
        "offset": 0,
        "slot": "152",
        "type": "t_string_storage"
      },
      {
        "astId": 28784,
        "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
        "label": "claimed",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_bytes_memory_ptr,t_bool)"
      },
      {
        "astId": 28790,
        "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
        "label": "namedBalances",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 27232,
        "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
        "label": "nend",
        "offset": 0,
        "slot": "155",
        "type": "t_address"
      },
      {
        "astId": 27236,
        "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
        "label": "farms",
        "offset": 0,
        "slot": "156",
        "type": "t_array(t_struct(Farm)27917_storage)dyn_storage"
      },
      {
        "astId": 27240,
        "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
        "label": "stakes",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_struct(Stake)27932_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Farm)27917_storage)dyn_storage": {
        "base": "t_struct(Farm)27917_storage",
        "encoding": "dynamic_array",
        "label": "struct ILiquidityPoolStaking.Farm[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Stake)27932_storage)dyn_storage": {
        "base": "t_struct(Stake)27932_storage",
        "encoding": "dynamic_array",
        "label": "struct ILiquidityPoolStaking.Stake[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Farm)27917_storage": {
        "encoding": "inplace",
        "label": "struct ILiquidityPoolStaking.Farm",
        "members": [
          {
            "astId": 27908,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 27910,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "start",
            "offset": 20,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 27912,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "end",
            "offset": 26,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 27914,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "totalReward",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 27916,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "totalStaked",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Stake)27932_storage": {
        "encoding": "inplace",
        "label": "struct ILiquidityPoolStaking.Stake",
        "members": [
          {
            "astId": 27919,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "staker",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 27921,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "farmId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 27923,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "start",
            "offset": 0,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 27925,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "end",
            "offset": 6,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 27927,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "lastClaimedAt",
            "offset": 12,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 27929,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 27931,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "rewardClaimed",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}