{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint64 subId\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165Upgradeable.sol\";\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC4906Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"./IERC721Upgradeable.sol\";\n\n/// @title EIP-721 Metadata Update Extension\ninterface IERC4906Upgradeable is IERC165Upgradeable, IERC721Upgradeable {\n    /// @dev This event emits when the metadata of a token is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFT.\n    event MetadataUpdate(uint256 _tokenId);\n\n    /// @dev This event emits when the metadata of a range of tokens is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFTs.\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721Upgradeable.sol\";\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport {Initializable} from \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n    function __ERC20Burnable_init() internal onlyInitializing {\n    }\n\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"../../../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be burned (destroyed).\n */\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\n    function __ERC721Burnable_init() internal onlyInitializing {\n    }\n\n    function __ERC721Burnable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _burn(tokenId);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"./IERC721EnumerableUpgradeable.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    function __ERC721Enumerable_init() internal onlyInitializing {\n    }\n\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Upgradeable.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n        if (batchSize > 1) {\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\n        }\n\n        uint256 tokenId = firstTokenId;\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721Upgradeable.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[46] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"../../../interfaces/IERC4906Upgradeable.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorageUpgradeable is Initializable, IERC4906Upgradeable, ERC721Upgradeable {\n    using StringsUpgradeable for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    function __ERC721URIStorage_init() internal onlyInitializing {\n    }\n\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Upgradeable, IERC165Upgradeable) returns (bool) {\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Emits {MetadataUpdate}.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n\n        emit MetadataUpdate(tokenId);\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProofUpgradeable {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC4906.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\nimport \"./IERC721.sol\";\n\n/// @title EIP-721 Metadata Update Extension\ninterface IERC4906 is IERC165, IERC721 {\n    /// @dev This event emits when the metadata of a token is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFT.\n    event MetadataUpdate(uint256 _tokenId);\n\n    /// @dev This event emits when the metadata of a range of tokens is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFTs.\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721.sol\";\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\n * include them in the ABI so this interface must be used to interact with it.\n */\ninterface ITransparentUpgradeableProxy is IERC1967 {\n    function admin() external view returns (address);\n\n    function implementation() external view returns (address);\n\n    function changeAdmin(address) external;\n\n    function upgradeTo(address) external;\n\n    function upgradeToAndCall(address, bytes memory) external payable;\n}\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n *\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\n * implementation.\n *\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(address _logic, address admin_, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     *\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\n     * implementation provides a function with the same selector.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\n     */\n    function _fallback() internal virtual override {\n        if (msg.sender == _getAdmin()) {\n            bytes memory ret;\n            bytes4 selector = msg.sig;\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\n                ret = _dispatchUpgradeTo();\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\n                ret = _dispatchUpgradeToAndCall();\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\n                ret = _dispatchChangeAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\n                ret = _dispatchAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\n                ret = _dispatchImplementation();\n            } else {\n                revert(\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n            }\n            assembly {\n                return(add(ret, 0x20), mload(ret))\n            }\n        } else {\n            super._fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function _dispatchAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address admin = _getAdmin();\n        return abi.encode(admin);\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function _dispatchImplementation() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address implementation = _implementation();\n        return abi.encode(implementation);\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _dispatchChangeAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newAdmin = abi.decode(msg.data[4:], (address));\n        _changeAdmin(newAdmin);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     */\n    function _dispatchUpgradeTo() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newImplementation = abi.decode(msg.data[4:], (address));\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     */\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\n        _upgradeToAndCall(newImplementation, data, true);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\n     */\n    function _requireZeroValue() private {\n        require(msg.value == 0);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../interfaces/IERC4906.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC165-supportsInterface}\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Emits {MetadataUpdate}.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n\n        emit MetadataUpdate(tokenId);\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@rari-capital/solmate/src/tokens/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Minimalist and gas efficient standard ERC1155 implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC1155.sol)\nabstract contract ERC1155 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event TransferSingle(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 id,\n        uint256 amount\n    );\n\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] amounts\n    );\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    event URI(string value, uint256 indexed id);\n\n    /*//////////////////////////////////////////////////////////////\n                             ERC1155 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\n\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\n\n    /*//////////////////////////////////////////////////////////////\n                             METADATA LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function uri(uint256 id) public view virtual returns (string memory);\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC1155 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual {\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \"NOT_AUTHORIZED\");\n\n        balanceOf[from][id] -= amount;\n        balanceOf[to][id] += amount;\n\n        emit TransferSingle(msg.sender, from, to, id, amount);\n\n        require(\n            to.code.length == 0\n                ? to != address(0)\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, amount, data) ==\n                    ERC1155TokenReceiver.onERC1155Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual {\n        require(ids.length == amounts.length, \"LENGTH_MISMATCH\");\n\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \"NOT_AUTHORIZED\");\n\n        // Storing these outside the loop saves ~15 gas per iteration.\n        uint256 id;\n        uint256 amount;\n\n        for (uint256 i = 0; i < ids.length; ) {\n            id = ids[i];\n            amount = amounts[i];\n\n            balanceOf[from][id] -= amount;\n            balanceOf[to][id] += amount;\n\n            // An array can't have a total length\n            // larger than the max uint256 value.\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\n\n        require(\n            to.code.length == 0\n                ? to != address(0)\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, amounts, data) ==\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\n        public\n        view\n        virtual\n        returns (uint256[] memory balances)\n    {\n        require(owners.length == ids.length, \"LENGTH_MISMATCH\");\n\n        balances = new uint256[](owners.length);\n\n        // Unchecked because the only math done is incrementing\n        // the array index counter which cannot possibly overflow.\n        unchecked {\n            for (uint256 i = 0; i < owners.length; ++i) {\n                balances[i] = balanceOf[owners[i]][ids[i]];\n            }\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n            interfaceId == 0xd9b67a26 || // ERC165 Interface ID for ERC1155\n            interfaceId == 0x0e89341c; // ERC165 Interface ID for ERC1155MetadataURI\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        balanceOf[to][id] += amount;\n\n        emit TransferSingle(msg.sender, address(0), to, id, amount);\n\n        require(\n            to.code.length == 0\n                ? to != address(0)\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, address(0), id, amount, data) ==\n                    ERC1155TokenReceiver.onERC1155Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _batchMint(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        uint256 idsLength = ids.length; // Saves MLOADs.\n\n        require(idsLength == amounts.length, \"LENGTH_MISMATCH\");\n\n        for (uint256 i = 0; i < idsLength; ) {\n            balanceOf[to][ids[i]] += amounts[i];\n\n            // An array can't have a total length\n            // larger than the max uint256 value.\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit TransferBatch(msg.sender, address(0), to, ids, amounts);\n\n        require(\n            to.code.length == 0\n                ? to != address(0)\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, address(0), ids, amounts, data) ==\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _batchBurn(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        uint256 idsLength = ids.length; // Saves MLOADs.\n\n        require(idsLength == amounts.length, \"LENGTH_MISMATCH\");\n\n        for (uint256 i = 0; i < idsLength; ) {\n            balanceOf[from][ids[i]] -= amounts[i];\n\n            // An array can't have a total length\n            // larger than the max uint256 value.\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit TransferBatch(msg.sender, from, address(0), ids, amounts);\n    }\n\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        balanceOf[from][id] -= amount;\n\n        emit TransferSingle(msg.sender, from, address(0), id, amount);\n    }\n}\n\n/// @notice A generic interface for a contract which properly accepts ERC1155 tokens.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC1155.sol)\nabstract contract ERC1155TokenReceiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        return ERC1155TokenReceiver.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        return ERC1155TokenReceiver.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@rari-capital/solmate/src/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "@rari-capital/solmate/src/tokens/ERC721.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\nabstract contract ERC721 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\n\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /*//////////////////////////////////////////////////////////////\n                         METADATA STORAGE/LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    function tokenURI(uint256 id) public view virtual returns (string memory);\n\n    /*//////////////////////////////////////////////////////////////\n                      ERC721 BALANCE/OWNER STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) internal _ownerOf;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\n        require((owner = _ownerOf[id]) != address(0), \"NOT_MINTED\");\n    }\n\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        require(owner != address(0), \"ZERO_ADDRESS\");\n\n        return _balanceOf[owner];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                         ERC721 APPROVAL STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) public getApproved;\n\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(string memory _name, string memory _symbol) {\n        name = _name;\n        symbol = _symbol;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC721 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 id) public virtual {\n        address owner = _ownerOf[id];\n\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\n\n        getApproved[id] = spender;\n\n        emit Approval(owner, spender, id);\n    }\n\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        require(from == _ownerOf[id], \"WRONG_FROM\");\n\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\n            \"NOT_AUTHORIZED\"\n        );\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        unchecked {\n            _balanceOf[from]--;\n\n            _balanceOf[to]++;\n        }\n\n        _ownerOf[id] = to;\n\n        delete getApproved[id];\n\n        emit Transfer(from, to, id);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\") ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        bytes calldata data\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 id) internal virtual {\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(_ownerOf[id] == address(0), \"ALREADY_MINTED\");\n\n        // Counter overflow is incredibly unrealistic.\n        unchecked {\n            _balanceOf[to]++;\n        }\n\n        _ownerOf[id] = to;\n\n        emit Transfer(address(0), to, id);\n    }\n\n    function _burn(uint256 id) internal virtual {\n        address owner = _ownerOf[id];\n\n        require(owner != address(0), \"NOT_MINTED\");\n\n        // Ownership check above ensures no underflow.\n        unchecked {\n            _balanceOf[owner]--;\n        }\n\n        delete _ownerOf[id];\n\n        delete getApproved[id];\n\n        emit Transfer(owner, address(0), id);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MINT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _safeMint(address to, uint256 id) internal virtual {\n        _mint(to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\") ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _safeMint(\n        address to,\n        uint256 id,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n}\n\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\nabstract contract ERC721TokenReceiver {\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        return ERC721TokenReceiver.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/access/MWOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract MWOwnable is Initializable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {\n        _transferOwnership(0x7E8aE5C72eCA86946b695dCc211863D9721A0961);\n    }\n\n    function __MWOwnable_init() public virtual onlyInitializing {\n        _transferOwnership(0x7E8aE5C72eCA86946b695dCc211863D9721A0961);  // Nend Mainnet Main Wallet\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/access/SimpleRoleAccess.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"../access/MWOwnable.sol\";\n\nabstract contract SimpleRoleAccess is MWOwnable {\n    mapping(address => mapping(string => bool)) public hasRole;\n\n    function authorize(\n        address operator,\n        string memory role,\n        bool authorized\n    ) public onlyOwner {\n        hasRole[operator][role] = authorized;\n    }\n\n    modifier onlyRole(string memory _role) virtual {\n        require(\n            msg.sender == owner() || hasRole[msg.sender][_role],\n            \"Not authorized\"\n        );\n        _;\n    }\n\n    modifier hasAllRoles(string[] memory _roles) virtual {\n        for (uint256 i = 0; i < _roles.length; i++) {\n            require(hasRole[msg.sender][_roles[i]], \"Not authorized\");\n        }\n        _;\n    }\n\n    modifier hasSomeRoles(string[] memory _roles) virtual {\n        bool _hasRole;\n        for (uint256 i = 0; i < _roles.length; i++) {\n            if (hasRole[msg.sender][_roles[i]]) {\n                _hasRole = true;\n                break;\n            }\n        }\n        require(_hasRole, \"Not authorized\");\n        _;\n    }\n}\n"
    },
    "contracts/access/SimpleRoleAccessV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nabstract contract SimpleRoleAccessV2 is OwnableUpgradeable {\n    mapping(address => mapping(string => bool)) public hasRole;\n\n    function authorize(\n        address operator,\n        string memory role,\n        bool authorized\n    ) public onlyOwner {\n        hasRole[operator][role] = authorized;\n    }\n\n    modifier onlyRole(string memory _role) virtual {\n        require(\n            msg.sender == owner() || hasRole[msg.sender][_role],\n            \"Not authorized\"\n        );\n        _;\n    }\n\n    modifier hasAllRoles(string[] memory _roles) virtual {\n        for (uint256 i = 0; i < _roles.length; i++) {\n            require(hasRole[msg.sender][_roles[i]], \"Not authorized\");\n        }\n        _;\n    }\n\n    modifier hasSomeRoles(string[] memory _roles) virtual {\n        bool _hasRole;\n        for (uint256 i = 0; i < _roles.length; i++) {\n            if (hasRole[msg.sender][_roles[i]]) {\n                _hasRole = true;\n                break;\n            }\n        }\n        require(_hasRole, \"Not authorized\");\n        _;\n    }\n}\n"
    },
    "contracts/bonding/BondDepository.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.8.0;\n\nimport \"./NoteKeeper.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./IBondDepository.sol\";\nimport \"../access/SimpleRoleAccess.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\ncontract BondDepository is\n    IBondDepository,\n    NoteKeeper,\n    SimpleRoleAccess,\n    UUPSUpgradeable\n{\n    /* ======== DEPENDENCIES ======== */\n\n    using SafeERC20 for IERC20;\n\n    /* ======== STATE VARIABLES ======== */\n\n    // Storage\n    Market[] public markets; // persistent market data\n    Terms[] public terms; // deposit construction data\n    Metadata[] public metadata; // extraneous market data\n    mapping(uint256 => Adjustment) public adjustments; // control variable changes\n\n    // Queries\n    mapping(address => uint256[]) public marketsForQuote; // market IDs for quote token\n\n    /* ======== CONSTRUCTOR ======== */\n\n    function initialize(\n        address _nend,\n        address _insurancePool,\n        address _ecosystemPool\n    ) public virtual initializer {\n        __NoteKeeper_init(_nend, _insurancePool, _ecosystemPool);\n        __MWOwnable_init();\n        __Testing_init();\n    }\n\n    /* ======== DEPOSIT ======== */\n\n    /**\n     * @notice             deposit quote tokens in exchange for a bond from a specified market\n     * @param _id          the ID of the market\n     * @param _amount      the amount of quote token to spend\n     * @param _maxPrice    the maxeimum price at which to buy\n     * @return payout_     the amount of NEND due\n     * @return index_      the user index of the Note (usd to redeem or query information)\n     */\n    function deposit(\n        uint256 _id,\n        uint256 _amount,\n        uint256 _maxPrice\n    ) external virtual override returns (uint256 payout_, uint256 index_) {\n        Market storage market = markets[_id];\n        Terms memory term = terms[_id];\n        uint48 currentTime = uint48(block.timestamp);\n\n        // Markets end at a defined timestamp\n        // |-------------------------------------| t\n        require(currentTime < term.conclusion, \"Depository: market concluded\");\n\n        // Debt and the control variable decay over time\n        _decay(_id, currentTime);\n\n        // Users input a maximum price, which protects them from price changes after\n        // entering the mempool. max price is a slippage mitigation measure\n        uint256 price = _marketPrice(_id);\n        require(price <= _maxPrice, \"Depository: more than max price\");\n\n        /**\n         * payout for the deposit = amount / price\n         *\n         * where\n         * payout = NEND out\n         * amount = quote tokens in\n         * price = quote tokens : NEND (i.e. 42069 DAI : NENDs)\n         *\n         * 1e27 = NEND decimals (18) + price decimals (9)\n         */\n        payout_ =\n            ((_amount * 1e27) / price) /\n            (10 ** metadata[_id].quoteDecimals);\n\n        // markets have a max payout amount, capping size because deposits\n        // do not experience slippage. max payout is recalculated upon tuning\n        require(payout_ <= market.maxPayout, \"Depository: max size exceeded\");\n\n        /*\n         * each market is initialized with a capacity\n         *\n         * this is either the number of NEND that the market can sell\n         * (if capacity in quote is false),\n         *\n         * or the number of quote tokens that the market can buy\n         * (if capacity in quote is true)\n         */\n        market.capacity -= market.capacityInQuote ? _amount : payout_;\n\n        /**\n         * bonds mature with a cliff at a set timestamp\n         * prior to the expiry timestamp, no payout tokens are accessible to the user\n         * after the expiry timestamp, the entire payout can be redeemed\n         *\n         * there are two types of bonds: fixed-term and fixed-expiration\n         *\n         * fixed-term bonds mature in a set amount of time from deposit\n         * i.e. term = 1 week. when alice deposits on day 1, her bond\n         * expires on day 8. when bob deposits on day 2, his bond expires day 9.\n         *\n         * fixed-expiration bonds mature at a set timestamp\n         * i.e. expiration = day 10. when alice deposits on day 1, her term\n         * is 9 days. when bob deposits on day 2, his term is 8 days.\n         */\n\n        // markets keep track of how many quote tokens have been\n        // purchased, and how much NEND has been sold\n        market.purchased += _amount;\n        market.sold += uint64(payout_);\n\n        // incrementing total debt raises the price of the next bond\n        market.totalDebt += uint64(payout_);\n\n        /**\n         * user data is stored as Notes. these are isolated array entries\n         * storing the amount due, the time created, the time when payout\n         * is redeemable, the time when payout was redeemed, and the ID\n         * of the market deposited into\n         */\n        index_ = addNote(uint48(_id), _amount, price, msg.sender, payout_);\n\n        // transfer payment to treasury\n        market.quoteToken.safeTransferFrom(msg.sender, ecosystemPool, _amount);\n\n        // if max debt is breached, the market is closed\n        // this a circuit breaker\n        if (term.maxDebt < market.totalDebt) {\n            market.capacity = 0;\n            emit CloseMarket(_id);\n        } else {\n            // if market will continue, the control variable is tuned to hit targets on time\n            _tune(_id, currentTime);\n        }\n    }\n\n    /**\n     * @notice             decay debt, and adjust control variable if there is an active change\n     * @param _id          ID of market\n     * @param _time        uint48 timestamp (saves gas when passed in)\n     */\n    function _decay(uint256 _id, uint48 _time) internal virtual {\n        // Debt decay\n\n        /*\n         * Debt is a time-decayed sum of tokens spent in a market\n         * Debt is added when deposits occur and removed over time\n         * |\n         * |    debt falls with\n         * |   / \\  inactivity       / \\\n         * | /     \\              /\\/    \\\n         * |         \\           /         \\\n         * |           \\      /\\/            \\\n         * |             \\  /  and rises       \\\n         * |                with deposits\n         * |\n         * |------------------------------------| t\n         */\n        markets[_id].totalDebt -= _debtDecay(_id);\n        metadata[_id].lastDecay = _time;\n\n        // Control variable decay\n\n        // The bond control variable is continually tuned. When it is lowered (which\n        // lowers the market price), the change is carried out smoothly over time.\n        if (adjustments[_id].active) {\n            Adjustment storage adjustment = adjustments[_id];\n\n            (\n                uint256 adjustBy,\n                uint48 secondsSince,\n                bool stillActive\n            ) = _controlDecay(_id);\n            terms[_id].controlVariable -= adjustBy;\n\n            if (stillActive) {\n                adjustment.change -= adjustBy;\n                adjustment.timeToAdjusted -= secondsSince;\n                adjustment.lastAdjustment = _time;\n            } else {\n                adjustment.active = false;\n            }\n        }\n    }\n\n    /**\n     * @notice             auto-adjust control variable to hit capacity/spend target\n     * @param _id          ID of market\n     * @param _time        uint48 timestamp (saves gas when passed in)\n     */\n    function _tune(uint256 _id, uint48 _time) internal virtual {\n        Metadata memory meta = metadata[_id];\n\n        if (_time >= meta.lastTune + meta.tuneInterval) {\n            Market memory market = markets[_id];\n\n            // compute seconds remaining until market will conclude\n            uint256 timeRemaining = terms[_id].conclusion - _time;\n            uint256 price = _marketPrice(_id);\n\n            // standardize capacity into an base token amount\n            // NEND decimals (9) + price decimals (9)\n            uint256 capacity = market.capacityInQuote\n                ? ((market.capacity * 1e27) / price) /\n                    (10 ** meta.quoteDecimals)\n                : market.capacity;\n\n            /**\n             * calculate the correct payout to complete on time assuming each bond\n             * will be max size in the desired deposit interval for the remaining time\n             *\n             * i.e. market has 10 days remaining. deposit interval is 1 day. capacity\n             * is 10,000 NEND. max payout would be 1,000 NEND (10,000 * 1 / 10).\n             */\n            markets[_id].maxPayout = uint64(\n                (capacity * meta.depositInterval) / timeRemaining\n            );\n\n            // calculate the ideal total debt to satisfy capacity in the remaining time\n            uint256 targetDebt = (capacity * meta.length) / timeRemaining;\n\n            // derive a new control variable from the target debt and current supply\n            uint64 newControlVariable = uint64(\n                (price * NEND(nend).timeSlicedCrossChainSupply()) / targetDebt\n            );\n\n            if (newControlVariable >= terms[_id].controlVariable) {\n                terms[_id].controlVariable = newControlVariable;\n            } else {\n                // if decrease, control variable change will be carried out over the tune interval\n                // this is because price will be lowered\n                uint256 change = terms[_id].controlVariable -\n                    newControlVariable;\n                adjustments[_id] = Adjustment(\n                    change,\n                    _time,\n                    meta.tuneInterval,\n                    true\n                );\n            }\n            metadata[_id].lastTune = _time;\n        }\n    }\n\n    /* ======== CREATE ======== */\n\n    function create(\n        IERC20 _quoteToken,\n        uint256 _capacity,\n        bool _capacityInQuote,\n        uint256 _initialPrice,\n        uint48 _conclusion,\n        uint32 _depositInterval,\n        uint32 _tuneInterval\n    ) external virtual override onlyRole(\"admin\") returns (uint256 id_) {\n        uint256 secondsToConclusion = _conclusion - block.timestamp;\n\n        // the decimal count of the quote token\n        uint256 decimals = ERC20(address(_quoteToken)).decimals();\n\n        /*\n         * initial target debt is equal to capacity (this is the amount of debt\n         * that will decay over in the length of the program if price remains the same).\n         * it is converted into base token terms if passed in in quote token terms.\n         *\n         * 1e27 = NEND decimals (18) + initial price decimals (9)\n         */\n        uint256 targetDebt = _capacityInQuote\n            ? ((_capacity * 1e27) / _initialPrice) / 10 ** decimals\n            : _capacity;\n\n        // depositing into, or getting info for, the created market uses this ID\n        id_ = markets.length;\n\n        markets.push(\n            Market({\n                quoteToken: _quoteToken,\n                capacityInQuote: _capacityInQuote,\n                capacity: _capacity,\n                totalDebt: targetDebt,\n                maxPayout: (targetDebt * _depositInterval) /\n                    secondsToConclusion,\n                purchased: 0,\n                sold: 0\n            })\n        );\n\n        terms.push(\n            Terms({\n                controlVariable: (_initialPrice *\n                    NEND(nend).timeSlicedCrossChainSupply()) / targetDebt,\n                conclusion: uint48(_conclusion),\n                maxDebt: targetDebt + ((targetDebt * 1000000) / 1e5)\n            })\n        );\n\n        metadata.push(\n            Metadata({\n                lastTune: uint48(block.timestamp),\n                lastDecay: uint48(block.timestamp),\n                length: uint48(secondsToConclusion),\n                depositInterval: _depositInterval,\n                tuneInterval: _tuneInterval,\n                quoteDecimals: uint8(decimals)\n            })\n        );\n\n        marketsForQuote[address(_quoteToken)].push(id_);\n\n        emit CreateMarket(\n            id_,\n            address(_quoteToken),\n            uint48(_conclusion),\n            _capacity,\n            _capacityInQuote\n        );\n    }\n\n    /**\n     * @notice             disable existing market\n     * @param _id          ID of market to close\n     */\n    function close(uint256 _id) external override onlyRole(\"admin\") {\n        terms[_id].conclusion = uint48(block.timestamp);\n        markets[_id].capacity = 0;\n        emit CloseMarket(_id);\n    }\n\n    /* ======== EXTERNAL VIEW ======== */\n\n    function getMarketData(\n        uint256 _id\n    ) external view virtual override returns (uint256, uint256, uint256) {\n        uint256 currentPrice = _marketPrice(_id);\n\n        return (\n            currentPrice,\n            markets[_id].capacity,\n            (markets[_id].maxPayout *\n                (10 ** metadata[_id].quoteDecimals) *\n                currentPrice) / 1e27\n        );\n    }\n\n    /* ======== INTERNAL VIEW ======== */\n\n    function _debtDecay(uint256 _id) internal view returns (uint64) {\n        Metadata memory meta = metadata[_id];\n\n        uint256 secondsSince = block.timestamp - meta.lastDecay;\n\n        return uint64((markets[_id].totalDebt * secondsSince) / meta.length);\n    }\n\n    /**\n     * @notice                  calculate current market price of quote token in base token\n     * @dev                     see marketPrice() for explanation of price computation\n     * @dev                     uses info from storage because data has been updated before call (vs marketPrice())\n     * @param _id               market ID\n     * @return                  price for market in NEND decimals\n     */\n    function _marketPrice(uint256 _id) internal view virtual returns (uint256) {\n        return\n            (terms[_id].controlVariable * _debtRatio(_id)) /\n            (10 ** metadata[_id].quoteDecimals);\n    }\n\n    /**\n     * @notice                  calculate debt factoring in decay\n     * @dev                     uses info from storage because data has been updated before call (vs debtRatio())\n     * @param _id               market ID\n     * @return                  current debt for market in quote decimals\n     */\n    function _debtRatio(uint256 _id) internal view virtual returns (uint256) {\n        return\n            (markets[_id].totalDebt * (10 ** metadata[_id].quoteDecimals)) /\n            NEND(nend).timeSlicedCrossChainSupply();\n    }\n\n    /**\n     * @notice                  amount to decay control variable by\n     * @param _id               ID of market\n     * @return decay_           change in control variable\n     * @return secondsSince_    seconds since last change in control variable\n     * @return active_          whether or not change remains active\n     */\n    function _controlDecay(\n        uint256 _id\n    )\n        internal\n        view\n        virtual\n        returns (uint256 decay_, uint48 secondsSince_, bool active_)\n    {\n        Adjustment memory info = adjustments[_id];\n        if (!info.active) return (0, 0, false);\n\n        secondsSince_ = uint48(block.timestamp) - info.lastAdjustment;\n\n        active_ = secondsSince_ < info.timeToAdjusted;\n        decay_ = active_\n            ? (info.change * secondsSince_) / info.timeToAdjusted\n            : info.change;\n    }\n\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\n}\n"
    },
    "contracts/bonding/IBondDepository.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IBondDepository {\n    event CreateMarket(\n        uint256 indexed id,\n        address indexed quoteToken,\n        uint48 conclusion,\n        uint256 capacity,\n        bool capacityInQuote\n    );\n    event CloseMarket(uint256 indexed id);\n\n    // Info about each type of market\n    struct Market {\n        uint256 capacity; // capacity remaining\n        IERC20 quoteToken; // token to accept as payment\n        bool capacityInQuote; // capacity limit is in payment token (true) or in OHM (false, default)\n        uint256 totalDebt; // total debt from market\n        uint256 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\n        uint256 sold; // base tokens out\n        uint256 purchased; // quote tokens in\n    }\n\n    // Info for creating new markets\n    struct Terms {\n        uint256 controlVariable; // scaling variable for price\n        uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\n        uint256 maxDebt; // 9 decimal debt maximum in OHM\n    }\n\n    // Additional info about market.\n    struct Metadata {\n        uint48 lastTune; // last timestamp when control variable was tuned\n        uint48 lastDecay; // last timestamp when market was created and debt was decayed\n        uint48 length; // time from creation to conclusion. used as speed to decay debt.\n        uint48 depositInterval; // target frequency of deposits\n        uint48 tuneInterval; // frequency of tuning\n        uint8 quoteDecimals; // decimals of quote token\n    }\n\n    // Control variable adjustment data\n    struct Adjustment {\n        uint256 change;\n        uint48 lastAdjustment;\n        uint48 timeToAdjusted;\n        bool active;\n    }\n\n    /**\n     * @notice deposit market\n     * @param _bid uint256\n     * @param _amount uint256\n     * @param _maxPrice uint256\n     * @return payout_ uint256\n     * @return index_ uint256\n     */\n    function deposit(\n        uint256 _bid,\n        uint256 _amount,\n        uint256 _maxPrice\n    ) external returns (uint256 payout_, uint256 index_);\n\n    function create(\n        IERC20 _quoteToken,\n        uint256 _capacity,\n        bool _capacityInQuote,\n        uint256 _initialPrice,\n        uint48 _conclusion,\n        uint32 _depositInterval,\n        uint32 _tuneInterval\n    ) external returns (uint256 id_);\n\n    function close(uint256 _id) external;\n\n    function getMarketData(uint256 _id)\n        external\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n}\n"
    },
    "contracts/bonding/INoteKeeper.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\ninterface INoteKeeper {\n    // Info for market note\n    struct Note {\n        uint256 payout; // Total NEND to be paid\n        uint256 payoutPerVesting; // Amount claimable every vesting\n        uint48 created; // time note was created\n        uint48 marketID; // market ID of deposit. uint48 to avoid adding a slot.\n        uint8 vestingCount; // Number of times vested\n    }\n\n    event NoteCreated(\n        address ownerAddress,\n        uint48 marketId,\n        uint256 noteId,\n        uint256 amount,\n        uint256 price,\n        uint256 payout,\n        uint256 payoutPerVesting,\n        uint48 created\n    );\n\n    event NotesRedeemed(\n        address ownerAddress,\n        uint256[] indexes,\n        uint8[] vestingCount,\n        uint256[] totalVested\n    );\n\n    function redeem(uint256[] memory _indexes) external returns (uint256);\n\n    function redeemAll(uint256 _marketId) external returns (uint256);\n}\n"
    },
    "contracts/bonding/NoteKeeper.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./INoteKeeper.sol\";\nimport \"../token/ERC20/NEND.sol\";\nimport \"../vault/Vault.sol\";\n\nabstract contract NoteKeeper is INoteKeeper, Testing {\n    mapping(address => Note[]) public notes; // user deposit data\n    address public insurancePool;\n    address public ecosystemPool;\n    address public nend;\n    uint8 public totalVestingCount;\n    uint16 public commissionRate;\n    uint48 public vestingInverval;\n    uint48 public testVestingInverval;\n\n    function __NoteKeeper_init(\n        address _nend,\n        address _insurancePool,\n        address _ecosystemPool\n    ) internal virtual onlyInitializing {\n        nend = _nend;\n        insurancePool = _insurancePool;\n        ecosystemPool = _ecosystemPool;\n        totalVestingCount = 5; // 5 times in 5 days\n        commissionRate = 30; // Commission in basis point\n        vestingInverval = 1 days;\n        testVestingInverval = 10 minutes;\n    }\n\n    // if treasury address changes on authority, update it\n    function updateNend(address _nend) external onlyOwner {\n        nend = _nend;\n    }\n\n    function updateInsurancePool(address _insurancePool) external onlyOwner {\n        insurancePool = _insurancePool;\n    }\n\n    function updateEcosystemPool(address _ecosystemPool) external onlyOwner {\n        ecosystemPool = _ecosystemPool;\n    }\n\n    function updateCommissionRate(uint16 _commissionRate) external onlyOwner {\n        require(\n            _commissionRate >= 0 && _commissionRate <= 10000,\n            \"Invalid basis point\"\n        );\n        commissionRate = _commissionRate;\n    }\n\n    /* ========== ADD ========== */\n\n    /**\n     * @notice             adds a new Note for a user, stores the front end & DAO rewards, and mints & stakes payout & rewards\n     * @param _marketId    id of the market that created the note\n     * @param _amount      amount of quote token bonded\n     * @param _price       the bond price\n     * @param _user        the user that owns the Note\n     * @param _payout      the amount of NEND due to the user\n     * @return index_      the index of the Note in the user's array\n     */\n    function addNote(\n        uint48 _marketId,\n        uint256 _amount,\n        uint256 _price,\n        address _user,\n        uint256 _payout\n    ) internal virtual returns (uint256 index_) {\n        require(\n            IERC20(nend).balanceOf(ecosystemPool) >= _payout,\n            \"Insufficient treasury balance for payout\"\n        );\n\n        Vault(payable(ecosystemPool)).transferERC20(\n            nend,\n            address(this),\n            _payout\n        );\n\n        uint256 insuranceFund = (_payout * commissionRate) / 10000;\n        uint256 userPayout = _payout - insuranceFund;\n\n        index_ = notes[_user].length;\n\n        // the new note is pushed to the user's array\n        notes[_user].push(\n            Note({\n                payout: userPayout,\n                payoutPerVesting: userPayout / 5,\n                created: uint48(block.timestamp),\n                marketID: _marketId,\n                vestingCount: 0\n            })\n        );\n\n        IERC20(nend).transfer(insurancePool, insuranceFund);\n\n        emit NoteCreated(\n            msg.sender,\n            _marketId,\n            index_,\n            _amount,\n            _price,\n            userPayout,\n            userPayout / 5,\n            uint48(block.timestamp)\n        );\n    }\n\n    /* ========== REDEEM ========== */\n\n    /**\n     * @notice             redeem notes for user\n     * @param _indexes     the note indexes to redeem\n     * @return payout_     sum of payout sent, in NEND\n     */\n    function redeem(\n        uint256[] memory _indexes\n    ) public virtual override returns (uint256 payout_) {\n        require(_indexes.length > 0, \"Nothing to redeem\");\n\n        uint8[] memory vestingCount = new uint8[](_indexes.length);\n        uint256[] memory totalVested = new uint256[](_indexes.length);\n\n        for (uint256 i = 0; i < _indexes.length; i++) {\n            Note storage note = notes[msg.sender][_indexes[i]];\n            uint8 pendingVestingCount = getPendingVestingCount(\n                msg.sender,\n                _indexes[i]\n            );\n\n            require(pendingVestingCount > 0, \"No pending vesting\");\n\n            note.vestingCount += pendingVestingCount;\n            payout_ += note.payoutPerVesting * pendingVestingCount;\n\n            vestingCount[i] = note.vestingCount;\n            totalVested[i] = note.vestingCount * note.payoutPerVesting;\n        }\n\n        IERC20(nend).transfer(msg.sender, payout_);\n        emit NotesRedeemed(msg.sender, _indexes, vestingCount, totalVested);\n    }\n\n    /**\n     * @notice             redeem all redeemable markets for user\n     * @dev                if possible, query indexesFor() off-chain and input in redeem() to save gas\n     * @return             sum of payout sent, in NEND\n     */\n    function redeemAll(\n        uint256 _marketId\n    ) external virtual override returns (uint256) {\n        return redeem(indexesFor(msg.sender, _marketId));\n    }\n\n    /* ========== VIEW ========== */\n\n    // Note info\n\n    /**\n     * @notice             all pending notes for user\n     * @param _user        the user to query notes for\n     * @param _marketId    the market to query notes for\n     * @return             the pending notes for the user\n     */\n    function indexesFor(\n        address _user,\n        uint256 _marketId\n    ) internal view virtual returns (uint256[] memory) {\n        Note[] memory info = notes[_user];\n\n        uint256 length;\n        for (uint256 i = 0; i < info.length; i++) {\n            if (\n                info[i].marketID == _marketId &&\n                getPendingVestingCount(_user, i) > 0\n            ) length++;\n        }\n\n        uint256[] memory indexes = new uint256[](length);\n        uint256 position;\n\n        for (uint256 i = 0; i < info.length; i++) {\n            if (\n                info[i].marketID == _marketId &&\n                getPendingVestingCount(_user, i) > 0\n            ) {\n                indexes[position] = i;\n                position++;\n            }\n        }\n\n        return indexes;\n    }\n\n    function getPendingVestingCount(\n        address _owner,\n        uint256 _noteId\n    ) internal view virtual returns (uint8) {\n        Note memory note = notes[_owner][_noteId];\n\n        // Max vesting\n        if (note.vestingCount == totalVestingCount) {\n            return 0;\n        }\n\n        uint256 secondsElapsed = block.timestamp - note.created;\n        uint256 invervalsElapsed = secondsElapsed /\n            (testing ? testVestingInverval : vestingInverval);\n\n        return\n            uint8(\n                invervalsElapsed > totalVestingCount\n                    ? totalVestingCount\n                    : invervalsElapsed\n            ) - note.vestingCount;\n    }\n}\n"
    },
    "contracts/bridge/NENDBridge.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"../access/MWOwnable.sol\";\nimport \"../helpers/SignatureHelper.sol\";\n\nabstract contract NENDBridge is ERC20Upgradeable, MWOwnable {\n    using SignatureHelper for bytes32;\n\n    event EnterBridge(\n        uint48 enteredAt,\n        uint256 targetChainId,\n        address sender,\n        address receiver,\n        uint256 amount,\n        uint256 nonce\n    );\n\n    event LeaveBridge(uint256 nonce, uint256 sourceChainId, uint48 leftAt);\n\n    modifier validDestinationChain(uint256 chainId) virtual {\n        require(\n            _isChainSupported(chainId) && block.chainid != chainId,\n            \"Invalid destination chain\"\n        );\n        _;\n    }\n\n    function __Bridge_init(\n        uint256[] memory _chains\n    ) internal virtual onlyInitializing {\n        supportedChainIds = _chains;\n\n        require(\n            _chains.length > 1,\n            \"Must have at least two destination chains\"\n        );\n\n        require(\n            _isChainSupported(block.chainid),\n            \"The hosted chain must be one of the supported chains\"\n        );\n    }\n\n    mapping(uint256 => mapping(uint256 => bool))\n        private chainNonceToExecutedMapping;\n    uint256 private nonce;\n\n    uint256[] public supportedChainIds;\n\n    function enterBridge(\n        uint256 _targetChainId,\n        address _receiver,\n        uint256 _amount\n    ) external virtual validDestinationChain(_targetChainId) {\n        require(_amount > 0, \"Invalid amount\");\n        require(balanceOf(msg.sender) >= _amount, \"Insufficient balance\");\n\n        _burn(msg.sender, _amount);\n\n        emit EnterBridge(\n            uint48(block.timestamp),\n            _targetChainId,\n            msg.sender,\n            _receiver,\n            _amount,\n            nonce++\n        );\n    }\n\n    function leaveBridge(\n        uint256 _sourceChainId,\n        address _receiver,\n        uint256 _amount,\n        uint256 _nonce,\n        bytes memory _signature\n    ) external virtual {\n        bytes32 messageHash = keccak256(\n            abi.encodePacked(_sourceChainId, _receiver, _amount, _nonce)\n        );\n\n        require(\n            messageHash.recoverSigner(_signature) == owner(),\n            \"Invalid signature\"\n        );\n\n        // Duplicate request, already left bridge\n        if (chainNonceToExecutedMapping[_sourceChainId][_nonce]) {\n            return;\n        }\n        chainNonceToExecutedMapping[_sourceChainId][_nonce] = true;\n\n        _mint(_receiver, _amount);\n\n        emit LeaveBridge(_nonce, _sourceChainId, uint48(block.timestamp));\n    }\n\n    function _isChainSupported(\n        uint256 chainId\n    ) internal view virtual returns (bool) {\n        for (uint256 i = 0; i < supportedChainIds.length; i++) {\n            if (supportedChainIds[i] == chainId) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n"
    },
    "contracts/conduit/Conduit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\nimport { ConduitInterface } from \"../interfaces/ConduitInterface.sol\";\n\nimport { ConduitItemType } from \"./lib/ConduitEnums.sol\";\n\nimport { TokenTransferrer } from \"../lib/TokenTransferrer.sol\";\n\n// prettier-ignore\nimport {\n    ConduitTransfer,\n    ConduitBatch1155Transfer\n} from \"./lib/ConduitStructs.sol\";\n\nimport \"./lib/ConduitConstants.sol\";\n\n/**\n * @title Conduit\n * @author 0age\n * @notice This contract serves as an originator for \"proxied\" transfers. Each\n *         conduit is deployed and controlled by a \"conduit controller\" that can\n *         add and remove \"channels\" or contracts that can instruct the conduit\n *         to transfer approved ERC20/721/1155 tokens. *IMPORTANT NOTE: each\n *         conduit has an owner that can arbitrarily add or remove channels, and\n *         a malicious or negligent owner can add a channel that allows for any\n *         approved ERC20/721/1155 tokens to be taken immediately — be extremely\n *         cautious with what conduits you give token approvals to!*\n */\ncontract Conduit is ConduitInterface, TokenTransferrer {\n    // Set deployer as an immutable controller that can update channel statuses.\n    address private immutable _controller;\n\n    // Track the status of each channel.\n    mapping(address => bool) private _channels;\n\n    /**\n     * @notice Ensure that the caller is currently registered as an open channel\n     *         on the conduit.\n     */\n    modifier onlyOpenChannel() {\n        // Utilize assembly to access channel storage mapping directly.\n        assembly {\n            // Write the caller to scratch space.\n            mstore(ChannelKey_channel_ptr, caller())\n\n            // Write the storage slot for _channels to scratch space.\n            mstore(ChannelKey_slot_ptr, _channels.slot)\n\n            // Derive the position in storage of _channels[msg.sender]\n            // and check if the stored value is zero.\n            if iszero(\n                sload(keccak256(ChannelKey_channel_ptr, ChannelKey_length))\n            ) {\n                // The caller is not an open channel; revert with\n                // ChannelClosed(caller). First, set error signature in memory.\n                mstore(ChannelClosed_error_ptr, ChannelClosed_error_signature)\n\n                // Next, set the caller as the argument.\n                mstore(ChannelClosed_channel_ptr, caller())\n\n                // Finally, revert, returning full custom error with argument.\n                revert(ChannelClosed_error_ptr, ChannelClosed_error_length)\n            }\n        }\n\n        // Continue with function execution.\n        _;\n    }\n\n    /**\n     * @notice In the constructor, set the deployer as the controller.\n     */\n    constructor() {\n        // Set the deployer as the controller.\n        _controller = msg.sender;\n    }\n\n    /**\n     * @notice Execute a sequence of ERC20/721/1155 transfers. Only a caller\n     *         with an open channel can call this function. Note that channels\n     *         are expected to implement reentrancy protection if desired, and\n     *         that cross-channel reentrancy may be possible if the conduit has\n     *         multiple open channels at once. Also note that channels are\n     *         expected to implement checks against transferring any zero-amount\n     *         items if that constraint is desired.\n     *\n     * @param transfers The ERC20/721/1155 transfers to perform.\n     *\n     * @return magicValue A magic value indicating that the transfers were\n     *                    performed successfully.\n     */\n    function execute(ConduitTransfer[] calldata transfers)\n        external\n        override\n        onlyOpenChannel\n        returns (bytes4 magicValue)\n    {\n        // Retrieve the total number of transfers and place on the stack.\n        uint256 totalStandardTransfers = transfers.length;\n\n        // Iterate over each transfer.\n        for (uint256 i = 0; i < totalStandardTransfers; ) {\n            // Retrieve the transfer in question and perform the transfer.\n            _transfer(transfers[i]);\n\n            // Skip overflow check as for loop is indexed starting at zero.\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Return a magic value indicating that the transfers were performed.\n        magicValue = this.execute.selector;\n    }\n\n    /**\n     * @notice Execute a sequence of batch 1155 item transfers. Only a caller\n     *         with an open channel can call this function. Note that channels\n     *         are expected to implement reentrancy protection if desired, and\n     *         that cross-channel reentrancy may be possible if the conduit has\n     *         multiple open channels at once. Also note that channels are\n     *         expected to implement checks against transferring any zero-amount\n     *         items if that constraint is desired.\n     *\n     * @param batchTransfers The 1155 batch item transfers to perform.\n     *\n     * @return magicValue A magic value indicating that the item transfers were\n     *                    performed successfully.\n     */\n    function executeBatch1155(\n        ConduitBatch1155Transfer[] calldata batchTransfers\n    ) external override onlyOpenChannel returns (bytes4 magicValue) {\n        // Perform 1155 batch transfers. Note that memory should be considered\n        // entirely corrupted from this point forward.\n        _performERC1155BatchTransfers(batchTransfers);\n\n        // Return a magic value indicating that the transfers were performed.\n        magicValue = this.executeBatch1155.selector;\n    }\n\n    /**\n     * @notice Execute a sequence of transfers, both single ERC20/721/1155 item\n     *         transfers as well as batch 1155 item transfers. Only a caller\n     *         with an open channel can call this function. Note that channels\n     *         are expected to implement reentrancy protection if desired, and\n     *         that cross-channel reentrancy may be possible if the conduit has\n     *         multiple open channels at once. Also note that channels are\n     *         expected to implement checks against transferring any zero-amount\n     *         items if that constraint is desired.\n     *\n     * @param standardTransfers The ERC20/721/1155 item transfers to perform.\n     * @param batchTransfers    The 1155 batch item transfers to perform.\n     *\n     * @return magicValue A magic value indicating that the item transfers were\n     *                    performed successfully.\n     */\n    function executeWithBatch1155(\n        ConduitTransfer[] calldata standardTransfers,\n        ConduitBatch1155Transfer[] calldata batchTransfers\n    ) external override onlyOpenChannel returns (bytes4 magicValue) {\n        // Retrieve the total number of transfers and place on the stack.\n        uint256 totalStandardTransfers = standardTransfers.length;\n\n        // Iterate over each standard transfer.\n        for (uint256 i = 0; i < totalStandardTransfers; ) {\n            // Retrieve the transfer in question and perform the transfer.\n            _transfer(standardTransfers[i]);\n\n            // Skip overflow check as for loop is indexed starting at zero.\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Perform 1155 batch transfers. Note that memory should be considered\n        // entirely corrupted from this point forward aside from the free memory\n        // pointer having the default value.\n        _performERC1155BatchTransfers(batchTransfers);\n\n        // Return a magic value indicating that the transfers were performed.\n        magicValue = this.executeWithBatch1155.selector;\n    }\n\n    /**\n     * @notice Open or close a given channel. Only callable by the controller.\n     *\n     * @param channel The channel to open or close.\n     * @param isOpen  The status of the channel (either open or closed).\n     */\n    function updateChannel(address channel, bool isOpen) external override {\n        // Ensure that the caller is the controller of this contract.\n        if (msg.sender != _controller) {\n            revert InvalidController();\n        }\n\n        // Ensure that the channel does not already have the indicated status.\n        if (_channels[channel] == isOpen) {\n            revert ChannelStatusAlreadySet(channel, isOpen);\n        }\n\n        // Update the status of the channel.\n        _channels[channel] = isOpen;\n\n        // Emit a corresponding event.\n        emit ChannelUpdated(channel, isOpen);\n    }\n\n    /**\n     * @dev Internal function to transfer a given ERC20/721/1155 item. Note that\n     *      channels are expected to implement checks against transferring any\n     *      zero-amount items if that constraint is desired.\n     *\n     * @param item The ERC20/721/1155 item to transfer.\n     */\n    function _transfer(ConduitTransfer calldata item) internal {\n        // Determine the transfer method based on the respective item type.\n        if (item.itemType == ConduitItemType.ERC20) {\n            // Transfer ERC20 token. Note that item.identifier is ignored and\n            // therefore ERC20 transfer items are potentially malleable — this\n            // check should be performed by the calling channel if a constraint\n            // on item malleability is desired.\n            _performERC20Transfer(item.token, item.from, item.to, item.amount);\n        } else if (item.itemType == ConduitItemType.ERC721) {\n            // Ensure that exactly one 721 item is being transferred.\n            if (item.amount != 1) {\n                revert InvalidERC721TransferAmount();\n            }\n\n            // Transfer ERC721 token.\n            _performERC721Transfer(\n                item.token,\n                item.from,\n                item.to,\n                item.identifier\n            );\n        } else if (item.itemType == ConduitItemType.ERC1155) {\n            // Transfer ERC1155 token.\n            _performERC1155Transfer(\n                item.token,\n                item.from,\n                item.to,\n                item.identifier,\n                item.amount\n            );\n        } else {\n            // Throw with an error.\n            revert InvalidItemType();\n        }\n    }\n}\n"
    },
    "contracts/conduit/lib/ConduitConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\n// error ChannelClosed(address channel)\nuint256 constant ChannelClosed_error_signature = (\n    0x93daadf200000000000000000000000000000000000000000000000000000000\n);\nuint256 constant ChannelClosed_error_ptr = 0x00;\nuint256 constant ChannelClosed_channel_ptr = 0x4;\nuint256 constant ChannelClosed_error_length = 0x24;\n\n// For the mapping:\n// mapping(address => bool) channels\n// The position in storage for a particular account is:\n// keccak256(abi.encode(account, channels.slot))\nuint256 constant ChannelKey_channel_ptr = 0x00;\nuint256 constant ChannelKey_slot_ptr = 0x20;\nuint256 constant ChannelKey_length = 0x40;\n"
    },
    "contracts/conduit/lib/ConduitEnums.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\nenum ConduitItemType {\n    NATIVE, // unused\n    ERC20,\n    ERC721,\n    ERC1155\n}\n"
    },
    "contracts/conduit/lib/ConduitStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\nimport { ConduitItemType } from \"./ConduitEnums.sol\";\n\nstruct ConduitTransfer {\n    ConduitItemType itemType;\n    address token;\n    address from;\n    address to;\n    uint256 identifier;\n    uint256 amount;\n}\n\nstruct ConduitBatch1155Transfer {\n    address token;\n    address from;\n    address to;\n    uint256[] ids;\n    uint256[] amounts;\n}\n"
    },
    "contracts/helpers/ContractCompileHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";"
    },
    "contracts/helpers/SignatureHelper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nlibrary SignatureHelper {\n    function recoverSigner(bytes32 messageHash, bytes memory signature)\n        internal\n        pure\n        returns (address)\n    {\n        (bytes32 r, bytes32 s, uint8 v) = splitSig(signature);\n\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n        bytes32 prefixedHashMessage = keccak256(\n            abi.encodePacked(prefix, messageHash)\n        );\n\n        return ecrecover(prefixedHashMessage, v, r, s);\n    }\n\n    function splitSig(bytes memory signature)\n        internal\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        assembly {\n            r := mload(add(signature, 32))\n            s := mload(add(signature, 64))\n            v := and(mload(add(signature, 65)), 255)\n        }\n        if (v < 27) v += 27;\n    }\n}\n"
    },
    "contracts/helpers/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\nimport \"./TransferHelperStructs.sol\";\n\nimport { TokenTransferrer } from \"../lib/TokenTransferrer.sol\";\n\nimport { ConduitInterface } from \"../interfaces/ConduitInterface.sol\";\n\n// prettier-ignore\nimport {\n    ConduitControllerInterface\n} from \"../interfaces/ConduitControllerInterface.sol\";\n\nimport { Conduit } from \"../conduit/Conduit.sol\";\n\nimport { ConduitTransfer } from \"../conduit/lib/ConduitStructs.sol\";\n\n// prettier-ignore\nimport {\n    TransferHelperInterface\n} from \"../interfaces/TransferHelperInterface.sol\";\n\n/**\n * @title TransferHelper\n * @author stuckinaboot, stephankmin\n * @notice TransferHelper is a utility contract for transferring\n *         ERC20/ERC721/ERC1155 items in bulk to a specific recipient.\n */\ncontract TransferHelper is TransferHelperInterface, TokenTransferrer {\n    // Allow for interaction with the conduit controller.\n    ConduitControllerInterface internal immutable _CONDUIT_CONTROLLER;\n\n    // Cache the conduit creation hash used by the conduit controller.\n    bytes32 internal immutable _CONDUIT_CREATION_CODE_HASH;\n\n    /**\n     * @dev Set the supplied conduit controller and retrieve its\n     *      conduit creation code hash.\n     *\n     *\n     * @param conduitController A contract that deploys conduits, or proxies\n     *                          that may optionally be used to transfer approved\n     *                          ERC20/721/1155 tokens.\n     */\n    constructor(address conduitController) {\n        // Get the conduit creation code hash from the supplied conduit\n        // controller and set it as an immutable.\n        ConduitControllerInterface controller = ConduitControllerInterface(\n            conduitController\n        );\n        (_CONDUIT_CREATION_CODE_HASH, ) = controller.getConduitCodeHashes();\n\n        // Set the supplied conduit controller as an immutable.\n        _CONDUIT_CONTROLLER = controller;\n    }\n\n    /**\n     * @notice Transfer multiple items to a single recipient.\n     *\n     * @param items      The items to transfer.\n     * @param recipient  The address the items should be transferred to.\n     * @param conduitKey The key of the conduit through which the bulk transfer\n     *                   should occur.\n     *\n     * @return magicValue A value indicating that the transfers were successful.\n     */\n    function bulkTransfer(\n        TransferHelperItem[] calldata items,\n        address recipient,\n        bytes32 conduitKey\n    ) external override returns (bytes4 magicValue) {\n        // Retrieve total number of transfers and place on stack.\n        uint256 totalTransfers = items.length;\n\n        // If no conduitKey is given, use TokenTransferrer to perform transfers.\n        if (conduitKey == bytes32(0)) {\n            // Skip overflow checks: all for loops are indexed starting at zero.\n            unchecked {\n                // Iterate over each transfer.\n                for (uint256 i = 0; i < totalTransfers; ++i) {\n                    // Retrieve the transfer in question.\n                    TransferHelperItem calldata item = items[i];\n\n                    // Perform a transfer based on the transfer's item type.\n                    // Revert if item being transferred is a native token.\n                    if (item.itemType == ConduitItemType.NATIVE) {\n                        revert InvalidItemType();\n                    } else if (item.itemType == ConduitItemType.ERC20) {\n                        _performERC20Transfer(\n                            item.token,\n                            msg.sender,\n                            recipient,\n                            item.amount\n                        );\n                    } else if (item.itemType == ConduitItemType.ERC721) {\n                        _performERC721Transfer(\n                            item.token,\n                            msg.sender,\n                            recipient,\n                            item.identifier\n                        );\n                    } else {\n                        _performERC1155Transfer(\n                            item.token,\n                            msg.sender,\n                            recipient,\n                            item.identifier,\n                            item.amount\n                        );\n                    }\n                }\n            }\n        }\n        // Otherwise, a conduitKey was provided.\n        else {\n            // Derive the conduit address from the deployer, conduit key\n            // and creation code hash.\n            address conduit = address(\n                uint160(\n                    uint256(\n                        keccak256(\n                            abi.encodePacked(\n                                bytes1(0xff),\n                                address(_CONDUIT_CONTROLLER),\n                                conduitKey,\n                                _CONDUIT_CREATION_CODE_HASH\n                            )\n                        )\n                    )\n                )\n            );\n\n            // Declare a new array to populate with each token transfer.\n            ConduitTransfer[] memory conduitTransfers = new ConduitTransfer[](\n                totalTransfers\n            );\n\n            // Skip overflow checks: all for loops are indexed starting at zero.\n            unchecked {\n                // Iterate over each transfer.\n                for (uint256 i = 0; i < totalTransfers; ++i) {\n                    // Retrieve the transfer in question.\n                    TransferHelperItem calldata item = items[i];\n\n                    // Create a ConduitTransfer corresponding to each\n                    // TransferHelperItem.\n                    conduitTransfers[i] = ConduitTransfer(\n                        item.itemType,\n                        item.token,\n                        msg.sender,\n                        recipient,\n                        item.identifier,\n                        item.amount\n                    );\n                }\n            }\n\n            // Call the conduit and execute bulk transfers.\n            ConduitInterface(conduit).execute(conduitTransfers);\n        }\n\n        // Return a magic value indicating that the transfers were performed.\n        magicValue = this.bulkTransfer.selector;\n    }\n}\n"
    },
    "contracts/helpers/TransferHelperStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\nimport { ConduitItemType } from \"../conduit/lib/ConduitEnums.sol\";\n\nstruct TransferHelperItem {\n    ConduitItemType itemType;\n    address token;\n    uint256 identifier;\n    uint256 amount;\n}\n"
    },
    "contracts/inflation/Inflation.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"../staking/interfaces/ILendingPoolStaking.sol\";\nimport \"../vault/Vault.sol\";\nimport \"../test/Testing.sol\";\nimport \"../access/MWOwnable.sol\";\nimport \"../helpers/SignatureHelper.sol\";\n\nabstract contract Inflation is ERC20Upgradeable, MWOwnable, Testing {\n    using SignatureHelper for bytes32;\n\n    uint48 public lastInflation;\n    ILendingPoolStaking public staking;\n\n    mapping(uint8 => bool) public isProcessed;\n\n    function setStaking(address _staking) external virtual onlyOwner {\n        staking = ILendingPoolStaking(_staking);\n    }\n\n    function reset() external virtual onlyOwner {\n        uint8 i = 0;\n        while (true) {\n            isProcessed[i] = false;\n            if (i == 255) {\n                break;\n            }\n            i++;\n        }\n    }\n\n    function inflate(\n        uint8 _count,\n        uint256 _amount,\n        bytes memory _signature\n    ) external virtual onlyOwner {\n        require(address(staking) != address(0), \"Staking not set\");\n        if (isProcessed[_count]) {\n            return;\n        }\n\n        isProcessed[_count] = true;\n\n        bytes32 messageHash = keccak256(abi.encodePacked(_count, _amount));\n\n        require(\n            messageHash.recoverSigner(_signature) == msg.sender,\n            \"Invalid signature\"\n        );\n\n        _mint(address(staking), _amount);\n\n        staking.distributeInflationRewards(_amount);\n\n        lastInflation = uint48(block.timestamp);\n    }\n}\n"
    },
    "contracts/interfaces/AbridgedTokenInterfaces.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\ninterface ERC20Interface {\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) external returns (bool);\n}\n\ninterface ERC721Interface {\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) external;\n}\n\ninterface ERC1155Interface {\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/interfaces/AmountDerivationErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\n/**\n * @title AmountDerivationErrors\n * @author 0age\n * @notice AmountDerivationErrors contains errors related to amount derivation.\n */\ninterface AmountDerivationErrors {\n    /**\n     * @dev Revert with an error when attempting to apply a fraction as part of\n     *      a partial fill that does not divide the target amount cleanly.\n     */\n    error InexactFraction();\n}\n"
    },
    "contracts/interfaces/ConduitControllerInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\n/**\n * @title ConduitControllerInterface\n * @author 0age\n * @notice ConduitControllerInterface contains all external function interfaces,\n *         structs, events, and errors for the conduit controller.\n */\ninterface ConduitControllerInterface {\n    /**\n     * @dev Track the conduit key, current owner, new potential owner, and open\n     *      channels for each deployed conduit.\n     */\n    struct ConduitProperties {\n        bytes32 key;\n        address owner;\n        address potentialOwner;\n        address[] channels;\n        mapping(address => uint256) channelIndexesPlusOne;\n    }\n\n    /**\n     * @dev Emit an event whenever a new conduit is created.\n     *\n     * @param conduit    The newly created conduit.\n     * @param conduitKey The conduit key used to create the new conduit.\n     */\n    event NewConduit(address conduit, bytes32 conduitKey);\n\n    /**\n     * @dev Emit an event whenever conduit ownership is transferred.\n     *\n     * @param conduit       The conduit for which ownership has been\n     *                      transferred.\n     * @param previousOwner The previous owner of the conduit.\n     * @param newOwner      The new owner of the conduit.\n     */\n    event OwnershipTransferred(\n        address indexed conduit,\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Emit an event whenever a conduit owner registers a new potential\n     *      owner for that conduit.\n     *\n     * @param newPotentialOwner The new potential owner of the conduit.\n     */\n    event PotentialOwnerUpdated(address indexed newPotentialOwner);\n\n    /**\n     * @dev Revert with an error when attempting to create a new conduit using a\n     *      conduit key where the first twenty bytes of the key do not match the\n     *      address of the caller.\n     */\n    error InvalidCreator();\n\n    /**\n     * @dev Revert with an error when attempting to create a new conduit when no\n     *      initial owner address is supplied.\n     */\n    error InvalidInitialOwner();\n\n    /**\n     * @dev Revert with an error when attempting to set a new potential owner\n     *      that is already set.\n     */\n    error NewPotentialOwnerAlreadySet(\n        address conduit,\n        address newPotentialOwner\n    );\n\n    /**\n     * @dev Revert with an error when attempting to cancel ownership transfer\n     *      when no new potential owner is currently set.\n     */\n    error NoPotentialOwnerCurrentlySet(address conduit);\n\n    /**\n     * @dev Revert with an error when attempting to interact with a conduit that\n     *      does not yet exist.\n     */\n    error NoConduit();\n\n    /**\n     * @dev Revert with an error when attempting to create a conduit that\n     *      already exists.\n     */\n    error ConduitAlreadyExists(address conduit);\n\n    /**\n     * @dev Revert with an error when attempting to update channels or transfer\n     *      ownership of a conduit when the caller is not the owner of the\n     *      conduit in question.\n     */\n    error CallerIsNotOwner(address conduit);\n\n    /**\n     * @dev Revert with an error when attempting to register a new potential\n     *      owner and supplying the null address.\n     */\n    error NewPotentialOwnerIsZeroAddress(address conduit);\n\n    /**\n     * @dev Revert with an error when attempting to claim ownership of a conduit\n     *      with a caller that is not the current potential owner for the\n     *      conduit in question.\n     */\n    error CallerIsNotNewPotentialOwner(address conduit);\n\n    /**\n     * @dev Revert with an error when attempting to retrieve a channel using an\n     *      index that is out of range.\n     */\n    error ChannelOutOfRange(address conduit);\n\n    /**\n     * @notice Deploy a new conduit using a supplied conduit key and assigning\n     *         an initial owner for the deployed conduit. Note that the first\n     *         twenty bytes of the supplied conduit key must match the caller\n     *         and that a new conduit cannot be created if one has already been\n     *         deployed using the same conduit key.\n     *\n     * @param conduitKey   The conduit key used to deploy the conduit. Note that\n     *                     the first twenty bytes of the conduit key must match\n     *                     the caller of this contract.\n     * @param initialOwner The initial owner to set for the new conduit.\n     *\n     * @return conduit The address of the newly deployed conduit.\n     */\n    function createConduit(bytes32 conduitKey, address initialOwner)\n        external\n        returns (address conduit);\n\n    /**\n     * @notice Open or close a channel on a given conduit, thereby allowing the\n     *         specified account to execute transfers against that conduit.\n     *         Extreme care must be taken when updating channels, as malicious\n     *         or vulnerable channels can transfer any ERC20, ERC721 and ERC1155\n     *         tokens where the token holder has granted the conduit approval.\n     *         Only the owner of the conduit in question may call this function.\n     *\n     * @param conduit The conduit for which to open or close the channel.\n     * @param channel The channel to open or close on the conduit.\n     * @param isOpen  A boolean indicating whether to open or close the channel.\n     */\n    function updateChannel(\n        address conduit,\n        address channel,\n        bool isOpen\n    ) external;\n\n    /**\n     * @notice Initiate conduit ownership transfer by assigning a new potential\n     *         owner for the given conduit. Once set, the new potential owner\n     *         may call `acceptOwnership` to claim ownership of the conduit.\n     *         Only the owner of the conduit in question may call this function.\n     *\n     * @param conduit The conduit for which to initiate ownership transfer.\n     * @param newPotentialOwner The new potential owner of the conduit.\n     */\n    function transferOwnership(address conduit, address newPotentialOwner)\n        external;\n\n    /**\n     * @notice Clear the currently set potential owner, if any, from a conduit.\n     *         Only the owner of the conduit in question may call this function.\n     *\n     * @param conduit The conduit for which to cancel ownership transfer.\n     */\n    function cancelOwnershipTransfer(address conduit) external;\n\n    /**\n     * @notice Accept ownership of a supplied conduit. Only accounts that the\n     *         current owner has set as the new potential owner may call this\n     *         function.\n     *\n     * @param conduit The conduit for which to accept ownership.\n     */\n    function acceptOwnership(address conduit) external;\n\n    /**\n     * @notice Retrieve the current owner of a deployed conduit.\n     *\n     * @param conduit The conduit for which to retrieve the associated owner.\n     *\n     * @return owner The owner of the supplied conduit.\n     */\n    function ownerOf(address conduit) external view returns (address owner);\n\n    /**\n     * @notice Retrieve the conduit key for a deployed conduit via reverse\n     *         lookup.\n     *\n     * @param conduit The conduit for which to retrieve the associated conduit\n     *                key.\n     *\n     * @return conduitKey The conduit key used to deploy the supplied conduit.\n     */\n    function getKey(address conduit) external view returns (bytes32 conduitKey);\n\n    /**\n     * @notice Derive the conduit associated with a given conduit key and\n     *         determine whether that conduit exists (i.e. whether it has been\n     *         deployed).\n     *\n     * @param conduitKey The conduit key used to derive the conduit.\n     *\n     * @return conduit The derived address of the conduit.\n     * @return exists  A boolean indicating whether the derived conduit has been\n     *                 deployed or not.\n     */\n    function getConduit(bytes32 conduitKey)\n        external\n        view\n        returns (address conduit, bool exists);\n\n    /**\n     * @notice Retrieve the potential owner, if any, for a given conduit. The\n     *         current owner may set a new potential owner via\n     *         `transferOwnership` and that owner may then accept ownership of\n     *         the conduit in question via `acceptOwnership`.\n     *\n     * @param conduit The conduit for which to retrieve the potential owner.\n     *\n     * @return potentialOwner The potential owner, if any, for the conduit.\n     */\n    function getPotentialOwner(address conduit)\n        external\n        view\n        returns (address potentialOwner);\n\n    /**\n     * @notice Retrieve the status (either open or closed) of a given channel on\n     *         a conduit.\n     *\n     * @param conduit The conduit for which to retrieve the channel status.\n     * @param channel The channel for which to retrieve the status.\n     *\n     * @return isOpen The status of the channel on the given conduit.\n     */\n    function getChannelStatus(address conduit, address channel)\n        external\n        view\n        returns (bool isOpen);\n\n    /**\n     * @notice Retrieve the total number of open channels for a given conduit.\n     *\n     * @param conduit The conduit for which to retrieve the total channel count.\n     *\n     * @return totalChannels The total number of open channels for the conduit.\n     */\n    function getTotalChannels(address conduit)\n        external\n        view\n        returns (uint256 totalChannels);\n\n    /**\n     * @notice Retrieve an open channel at a specific index for a given conduit.\n     *         Note that the index of a channel can change as a result of other\n     *         channels being closed on the conduit.\n     *\n     * @param conduit      The conduit for which to retrieve the open channel.\n     * @param channelIndex The index of the channel in question.\n     *\n     * @return channel The open channel, if any, at the specified channel index.\n     */\n    function getChannel(address conduit, uint256 channelIndex)\n        external\n        view\n        returns (address channel);\n\n    /**\n     * @notice Retrieve all open channels for a given conduit. Note that calling\n     *         this function for a conduit with many channels will revert with\n     *         an out-of-gas error.\n     *\n     * @param conduit The conduit for which to retrieve open channels.\n     *\n     * @return channels An array of open channels on the given conduit.\n     */\n    function getChannels(address conduit)\n        external\n        view\n        returns (address[] memory channels);\n\n    /**\n     * @dev Retrieve the conduit creation code and runtime code hashes.\n     */\n    function getConduitCodeHashes()\n        external\n        view\n        returns (bytes32 creationCodeHash, bytes32 runtimeCodeHash);\n}\n"
    },
    "contracts/interfaces/ConduitInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\n// prettier-ignore\nimport {\n    ConduitTransfer,\n    ConduitBatch1155Transfer\n} from \"../conduit/lib/ConduitStructs.sol\";\n\n/**\n * @title ConduitInterface\n * @author 0age\n * @notice ConduitInterface contains all external function interfaces, events,\n *         and errors for conduit contracts.\n */\ninterface ConduitInterface {\n    /**\n     * @dev Revert with an error when attempting to execute transfers using a\n     *      caller that does not have an open channel.\n     */\n    error ChannelClosed(address channel);\n\n    /**\n     * @dev Revert with an error when attempting to update a channel to the\n     *      current status of that channel.\n     */\n    error ChannelStatusAlreadySet(address channel, bool isOpen);\n\n    /**\n     * @dev Revert with an error when attempting to execute a transfer for an\n     *      item that does not have an ERC20/721/1155 item type.\n     */\n    error InvalidItemType();\n\n    /**\n     * @dev Revert with an error when attempting to update the status of a\n     *      channel from a caller that is not the conduit controller.\n     */\n    error InvalidController();\n\n    /**\n     * @dev Emit an event whenever a channel is opened or closed.\n     *\n     * @param channel The channel that has been updated.\n     * @param open    A boolean indicating whether the conduit is open or not.\n     */\n    event ChannelUpdated(address indexed channel, bool open);\n\n    /**\n     * @notice Execute a sequence of ERC20/721/1155 transfers. Only a caller\n     *         with an open channel can call this function.\n     *\n     * @param transfers The ERC20/721/1155 transfers to perform.\n     *\n     * @return magicValue A magic value indicating that the transfers were\n     *                    performed successfully.\n     */\n    function execute(ConduitTransfer[] calldata transfers)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Execute a sequence of batch 1155 transfers. Only a caller with an\n     *         open channel can call this function.\n     *\n     * @param batch1155Transfers The 1155 batch transfers to perform.\n     *\n     * @return magicValue A magic value indicating that the transfers were\n     *                    performed successfully.\n     */\n    function executeBatch1155(\n        ConduitBatch1155Transfer[] calldata batch1155Transfers\n    ) external returns (bytes4 magicValue);\n\n    /**\n     * @notice Execute a sequence of transfers, both single and batch 1155. Only\n     *         a caller with an open channel can call this function.\n     *\n     * @param standardTransfers  The ERC20/721/1155 transfers to perform.\n     * @param batch1155Transfers The 1155 batch transfers to perform.\n     *\n     * @return magicValue A magic value indicating that the transfers were\n     *                    performed successfully.\n     */\n    function executeWithBatch1155(\n        ConduitTransfer[] calldata standardTransfers,\n        ConduitBatch1155Transfer[] calldata batch1155Transfers\n    ) external returns (bytes4 magicValue);\n\n    /**\n     * @notice Open or close a given channel. Only callable by the controller.\n     *\n     * @param channel The channel to open or close.\n     * @param isOpen  The status of the channel (either open or closed).\n     */\n    function updateChannel(address channel, bool isOpen) external;\n}\n"
    },
    "contracts/interfaces/ConsiderationEventsAndErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\nimport { SpentItem, ReceivedItem } from \"../lib/ConsiderationStructs.sol\";\n\n/**\n * @title ConsiderationEventsAndErrors\n * @author 0age\n * @notice ConsiderationEventsAndErrors contains all events and errors.\n */\ninterface ConsiderationEventsAndErrors {\n    /**\n     * @dev Emit an event whenever an order is successfully fulfilled.\n     *\n     * @param orderHash     The hash of the fulfilled order.\n     * @param offerer       The offerer of the fulfilled order.\n     * @param zone          The zone of the fulfilled order.\n     * @param recipient     The recipient of each spent item on the fulfilled\n     *                      order, or the null address if there is no specific\n     *                      fulfiller (i.e. the order is part of a group of\n     *                      orders). Defaults to the caller unless explicitly\n     *                      specified otherwise by the fulfiller.\n     * @param offer         The offer items spent as part of the order.\n     * @param consideration The consideration items received as part of the\n     *                      order along with the recipients of each item.\n     */\n    event OrderFulfilled(\n        bytes32 orderHash,\n        address indexed offerer,\n        address indexed zone,\n        address recipient,\n        SpentItem[] offer,\n        ReceivedItem[] consideration\n    );\n\n    /**\n     * @dev Emit an event whenever an order is successfully cancelled.\n     *\n     * @param orderHash The hash of the cancelled order.\n     * @param offerer   The offerer of the cancelled order.\n     * @param zone      The zone of the cancelled order.\n     */\n    event OrderCancelled(\n        bytes32 orderHash,\n        address indexed offerer,\n        address indexed zone\n    );\n\n    /**\n     * @dev Emit an event whenever an order is explicitly validated. Note that\n     *      this event will not be emitted on partial fills even though they do\n     *      validate the order as part of partial fulfillment.\n     *\n     * @param orderHash The hash of the validated order.\n     * @param offerer   The offerer of the validated order.\n     * @param zone      The zone of the validated order.\n     */\n    event OrderValidated(\n        bytes32 orderHash,\n        address indexed offerer,\n        address indexed zone\n    );\n\n    /**\n     * @dev Emit an event whenever a counter for a given offerer is incremented.\n     *\n     * @param newCounter The new counter for the offerer.\n     * @param offerer  The offerer in question.\n     */\n    event CounterIncremented(uint256 newCounter, address indexed offerer);\n\n    /**\n     * @dev Revert with an error when attempting to fill an order that has\n     *      already been fully filled.\n     *\n     * @param orderHash The order hash on which a fill was attempted.\n     */\n    error OrderAlreadyFilled(bytes32 orderHash);\n\n    /**\n     * @dev Revert with an error when attempting to fill an order outside the\n     *      specified start time and end time.\n     */\n    error InvalidTime();\n\n    /**\n     * @dev Revert with an error when attempting to fill an order referencing an\n     *      invalid conduit (i.e. one that has not been deployed).\n     */\n    error InvalidConduit(bytes32 conduitKey, address conduit);\n\n    /**\n     * @dev Revert with an error when an order is supplied for fulfillment with\n     *      a consideration array that is shorter than the original array.\n     */\n    error MissingOriginalConsiderationItems();\n\n    /**\n     * @dev Revert with an error when a call to a conduit fails with revert data\n     *      that is too expensive to return.\n     */\n    error InvalidCallToConduit(address conduit);\n\n    /**\n     * @dev Revert with an error if a consideration amount has not been fully\n     *      zeroed out after applying all fulfillments.\n     *\n     * @param orderIndex         The index of the order with the consideration\n     *                           item with a shortfall.\n     * @param considerationIndex The index of the consideration item on the\n     *                           order.\n     * @param shortfallAmount    The unfulfilled consideration amount.\n     */\n    error ConsiderationNotMet(\n        uint256 orderIndex,\n        uint256 considerationIndex,\n        uint256 shortfallAmount\n    );\n\n    /**\n     * @dev Revert with an error when insufficient ether is supplied as part of\n     *      msg.value when fulfilling orders.\n     */\n    error InsufficientEtherSupplied();\n\n    /**\n     * @dev Revert with an error when an ether transfer reverts.\n     */\n    error EtherTransferGenericFailure(address account, uint256 amount);\n\n    /**\n     * @dev Revert with an error when a partial fill is attempted on an order\n     *      that does not specify partial fill support in its order type.\n     */\n    error PartialFillsNotEnabledForOrder();\n\n    /**\n     * @dev Revert with an error when attempting to fill an order that has been\n     *      cancelled.\n     *\n     * @param orderHash The hash of the cancelled order.\n     */\n    error OrderIsCancelled(bytes32 orderHash);\n\n    /**\n     * @dev Revert with an error when attempting to fill a basic order that has\n     *      been partially filled.\n     *\n     * @param orderHash The hash of the partially used order.\n     */\n    error OrderPartiallyFilled(bytes32 orderHash);\n\n    /**\n     * @dev Revert with an error when attempting to cancel an order as a caller\n     *      other than the indicated offerer or zone.\n     */\n    error InvalidCanceller();\n\n    /**\n     * @dev Revert with an error when supplying a fraction with a value of zero\n     *      for the numerator or denominator, or one where the numerator exceeds\n     *      the denominator.\n     */\n    error BadFraction();\n\n    /**\n     * @dev Revert with an error when a caller attempts to supply callvalue to a\n     *      non-payable basic order route or does not supply any callvalue to a\n     *      payable basic order route.\n     */\n    error InvalidMsgValue(uint256 value);\n\n    /**\n     * @dev Revert with an error when attempting to fill a basic order using\n     *      calldata not produced by default ABI encoding.\n     */\n    error InvalidBasicOrderParameterEncoding();\n\n    /**\n     * @dev Revert with an error when attempting to fulfill any number of\n     *      available orders when none are fulfillable.\n     */\n    error NoSpecifiedOrdersAvailable();\n\n    /**\n     * @dev Revert with an error when attempting to fulfill an order with an\n     *      offer for ETH outside of matching orders.\n     */\n    error InvalidNativeOfferItem();\n}\n"
    },
    "contracts/interfaces/ConsiderationInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\n// prettier-ignore\nimport {\n    BasicOrderParameters,\n    OrderComponents,\n    Fulfillment,\n    FulfillmentComponent,\n    Execution,\n    Order,\n    AdvancedOrder,\n    OrderStatus,\n    CriteriaResolver\n} from \"../lib/ConsiderationStructs.sol\";\n\n/**\n * @title ConsiderationInterface\n * @author 0age\n * @custom:version 1.1\n * @notice Consideration is a generalized ETH/ERC20/ERC721/ERC1155 marketplace.\n *         It minimizes external calls to the greatest extent possible and\n *         provides lightweight methods for common routes as well as more\n *         flexible methods for composing advanced orders.\n *\n * @dev ConsiderationInterface contains all external function interfaces for\n *      Consideration.\n */\ninterface ConsiderationInterface {\n    /**\n     * @notice Fulfill an order offering an ERC721 token by supplying Ether (or\n     *         the native token for the given chain) as consideration for the\n     *         order. An arbitrary number of \"additional recipients\" may also be\n     *         supplied which will each receive native tokens from the fulfiller\n     *         as consideration.\n     *\n     * @param parameters Additional information on the fulfilled order. Note\n     *                   that the offerer must first approve this contract (or\n     *                   their preferred conduit if indicated by the order) for\n     *                   their offered ERC721 token to be transferred.\n     *\n     * @return fulfilled A boolean indicating whether the order has been\n     *                   successfully fulfilled.\n     */\n    function fulfillBasicOrder(BasicOrderParameters calldata parameters)\n        external\n        payable\n        returns (bool fulfilled);\n\n    /**\n     * @notice Fulfill an order with an arbitrary number of items for offer and\n     *         consideration. Note that this function does not support\n     *         criteria-based orders or partial filling of orders (though\n     *         filling the remainder of a partially-filled order is supported).\n     *\n     * @param order               The order to fulfill. Note that both the\n     *                            offerer and the fulfiller must first approve\n     *                            this contract (or the corresponding conduit if\n     *                            indicated) to transfer any relevant tokens on\n     *                            their behalf and that contracts must implement\n     *                            `onERC1155Received` to receive ERC1155 tokens\n     *                            as consideration.\n     * @param fulfillerConduitKey A bytes32 value indicating what conduit, if\n     *                            any, to source the fulfiller's token approvals\n     *                            from. The zero hash signifies that no conduit\n     *                            should be used, with direct approvals set on\n     *                            Consideration.\n     *\n     * @return fulfilled A boolean indicating whether the order has been\n     *                   successfully fulfilled.\n     */\n    function fulfillOrder(Order calldata order, bytes32 fulfillerConduitKey)\n        external\n        payable\n        returns (bool fulfilled);\n\n    /**\n     * @notice Fill an order, fully or partially, with an arbitrary number of\n     *         items for offer and consideration alongside criteria resolvers\n     *         containing specific token identifiers and associated proofs.\n     *\n     * @param advancedOrder       The order to fulfill along with the fraction\n     *                            of the order to attempt to fill. Note that\n     *                            both the offerer and the fulfiller must first\n     *                            approve this contract (or their preferred\n     *                            conduit if indicated by the order) to transfer\n     *                            any relevant tokens on their behalf and that\n     *                            contracts must implement `onERC1155Received`\n     *                            to receive ERC1155 tokens as consideration.\n     *                            Also note that all offer and consideration\n     *                            components must have no remainder after\n     *                            multiplication of the respective amount with\n     *                            the supplied fraction for the partial fill to\n     *                            be considered valid.\n     * @param criteriaResolvers   An array where each element contains a\n     *                            reference to a specific offer or\n     *                            consideration, a token identifier, and a proof\n     *                            that the supplied token identifier is\n     *                            contained in the merkle root held by the item\n     *                            in question's criteria element. Note that an\n     *                            empty criteria indicates that any\n     *                            (transferable) token identifier on the token\n     *                            in question is valid and that no associated\n     *                            proof needs to be supplied.\n     * @param fulfillerConduitKey A bytes32 value indicating what conduit, if\n     *                            any, to source the fulfiller's token approvals\n     *                            from. The zero hash signifies that no conduit\n     *                            should be used, with direct approvals set on\n     *                            Consideration.\n     * @param recipient           The intended recipient for all received items,\n     *                            with `address(0)` indicating that the caller\n     *                            should receive the items.\n     *\n     * @return fulfilled A boolean indicating whether the order has been\n     *                   successfully fulfilled.\n     */\n    function fulfillAdvancedOrder(\n        AdvancedOrder calldata advancedOrder,\n        CriteriaResolver[] calldata criteriaResolvers,\n        bytes32 fulfillerConduitKey,\n        address recipient\n    ) external payable returns (bool fulfilled);\n\n    /**\n     * @notice Attempt to fill a group of orders, each with an arbitrary number\n     *         of items for offer and consideration. Any order that is not\n     *         currently active, has already been fully filled, or has been\n     *         cancelled will be omitted. Remaining offer and consideration\n     *         items will then be aggregated where possible as indicated by the\n     *         supplied offer and consideration component arrays and aggregated\n     *         items will be transferred to the fulfiller or to each intended\n     *         recipient, respectively. Note that a failing item transfer or an\n     *         issue with order formatting will cause the entire batch to fail.\n     *         Note that this function does not support criteria-based orders or\n     *         partial filling of orders (though filling the remainder of a\n     *         partially-filled order is supported).\n     *\n     * @param orders                    The orders to fulfill. Note that both\n     *                                  the offerer and the fulfiller must first\n     *                                  approve this contract (or the\n     *                                  corresponding conduit if indicated) to\n     *                                  transfer any relevant tokens on their\n     *                                  behalf and that contracts must implement\n     *                                  `onERC1155Received` to receive ERC1155\n     *                                  tokens as consideration.\n     * @param offerFulfillments         An array of FulfillmentComponent arrays\n     *                                  indicating which offer items to attempt\n     *                                  to aggregate when preparing executions.\n     * @param considerationFulfillments An array of FulfillmentComponent arrays\n     *                                  indicating which consideration items to\n     *                                  attempt to aggregate when preparing\n     *                                  executions.\n     * @param fulfillerConduitKey       A bytes32 value indicating what conduit,\n     *                                  if any, to source the fulfiller's token\n     *                                  approvals from. The zero hash signifies\n     *                                  that no conduit should be used, with\n     *                                  direct approvals set on this contract.\n     * @param maximumFulfilled          The maximum number of orders to fulfill.\n     *\n     * @return availableOrders An array of booleans indicating if each order\n     *                         with an index corresponding to the index of the\n     *                         returned boolean was fulfillable or not.\n     * @return executions      An array of elements indicating the sequence of\n     *                         transfers performed as part of matching the given\n     *                         orders.\n     */\n    function fulfillAvailableOrders(\n        Order[] calldata orders,\n        FulfillmentComponent[][] calldata offerFulfillments,\n        FulfillmentComponent[][] calldata considerationFulfillments,\n        bytes32 fulfillerConduitKey,\n        uint256 maximumFulfilled\n    )\n        external\n        payable\n        returns (bool[] memory availableOrders, Execution[] memory executions);\n\n    /**\n     * @notice Attempt to fill a group of orders, fully or partially, with an\n     *         arbitrary number of items for offer and consideration per order\n     *         alongside criteria resolvers containing specific token\n     *         identifiers and associated proofs. Any order that is not\n     *         currently active, has already been fully filled, or has been\n     *         cancelled will be omitted. Remaining offer and consideration\n     *         items will then be aggregated where possible as indicated by the\n     *         supplied offer and consideration component arrays and aggregated\n     *         items will be transferred to the fulfiller or to each intended\n     *         recipient, respectively. Note that a failing item transfer or an\n     *         issue with order formatting will cause the entire batch to fail.\n     *\n     * @param advancedOrders            The orders to fulfill along with the\n     *                                  fraction of those orders to attempt to\n     *                                  fill. Note that both the offerer and the\n     *                                  fulfiller must first approve this\n     *                                  contract (or their preferred conduit if\n     *                                  indicated by the order) to transfer any\n     *                                  relevant tokens on their behalf and that\n     *                                  contracts must implement\n     *                                  `onERC1155Received` to enable receipt of\n     *                                  ERC1155 tokens as consideration. Also\n     *                                  note that all offer and consideration\n     *                                  components must have no remainder after\n     *                                  multiplication of the respective amount\n     *                                  with the supplied fraction for an\n     *                                  order's partial fill amount to be\n     *                                  considered valid.\n     * @param criteriaResolvers         An array where each element contains a\n     *                                  reference to a specific offer or\n     *                                  consideration, a token identifier, and a\n     *                                  proof that the supplied token identifier\n     *                                  is contained in the merkle root held by\n     *                                  the item in question's criteria element.\n     *                                  Note that an empty criteria indicates\n     *                                  that any (transferable) token\n     *                                  identifier on the token in question is\n     *                                  valid and that no associated proof needs\n     *                                  to be supplied.\n     * @param offerFulfillments         An array of FulfillmentComponent arrays\n     *                                  indicating which offer items to attempt\n     *                                  to aggregate when preparing executions.\n     * @param considerationFulfillments An array of FulfillmentComponent arrays\n     *                                  indicating which consideration items to\n     *                                  attempt to aggregate when preparing\n     *                                  executions.\n     * @param fulfillerConduitKey       A bytes32 value indicating what conduit,\n     *                                  if any, to source the fulfiller's token\n     *                                  approvals from. The zero hash signifies\n     *                                  that no conduit should be used, with\n     *                                  direct approvals set on this contract.\n     * @param recipient                 The intended recipient for all received\n     *                                  items, with `address(0)` indicating that\n     *                                  the caller should receive the items.\n     * @param maximumFulfilled          The maximum number of orders to fulfill.\n     *\n     * @return availableOrders An array of booleans indicating if each order\n     *                         with an index corresponding to the index of the\n     *                         returned boolean was fulfillable or not.\n     * @return executions      An array of elements indicating the sequence of\n     *                         transfers performed as part of matching the given\n     *                         orders.\n     */\n    function fulfillAvailableAdvancedOrders(\n        AdvancedOrder[] calldata advancedOrders,\n        CriteriaResolver[] calldata criteriaResolvers,\n        FulfillmentComponent[][] calldata offerFulfillments,\n        FulfillmentComponent[][] calldata considerationFulfillments,\n        bytes32 fulfillerConduitKey,\n        address recipient,\n        uint256 maximumFulfilled\n    )\n        external\n        payable\n        returns (bool[] memory availableOrders, Execution[] memory executions);\n\n    /**\n     * @notice Match an arbitrary number of orders, each with an arbitrary\n     *         number of items for offer and consideration along with as set of\n     *         fulfillments allocating offer components to consideration\n     *         components. Note that this function does not support\n     *         criteria-based or partial filling of orders (though filling the\n     *         remainder of a partially-filled order is supported).\n     *\n     * @param orders       The orders to match. Note that both the offerer and\n     *                     fulfiller on each order must first approve this\n     *                     contract (or their conduit if indicated by the order)\n     *                     to transfer any relevant tokens on their behalf and\n     *                     each consideration recipient must implement\n     *                     `onERC1155Received` to enable ERC1155 token receipt.\n     * @param fulfillments An array of elements allocating offer components to\n     *                     consideration components. Note that each\n     *                     consideration component must be fully met for the\n     *                     match operation to be valid.\n     *\n     * @return executions An array of elements indicating the sequence of\n     *                    transfers performed as part of matching the given\n     *                    orders.\n     */\n    function matchOrders(\n        Order[] calldata orders,\n        Fulfillment[] calldata fulfillments\n    ) external payable returns (Execution[] memory executions);\n\n    /**\n     * @notice Match an arbitrary number of full or partial orders, each with an\n     *         arbitrary number of items for offer and consideration, supplying\n     *         criteria resolvers containing specific token identifiers and\n     *         associated proofs as well as fulfillments allocating offer\n     *         components to consideration components.\n     *\n     * @param orders            The advanced orders to match. Note that both the\n     *                          offerer and fulfiller on each order must first\n     *                          approve this contract (or a preferred conduit if\n     *                          indicated by the order) to transfer any relevant\n     *                          tokens on their behalf and each consideration\n     *                          recipient must implement `onERC1155Received` in\n     *                          order to receive ERC1155 tokens. Also note that\n     *                          the offer and consideration components for each\n     *                          order must have no remainder after multiplying\n     *                          the respective amount with the supplied fraction\n     *                          in order for the group of partial fills to be\n     *                          considered valid.\n     * @param criteriaResolvers An array where each element contains a reference\n     *                          to a specific order as well as that order's\n     *                          offer or consideration, a token identifier, and\n     *                          a proof that the supplied token identifier is\n     *                          contained in the order's merkle root. Note that\n     *                          an empty root indicates that any (transferable)\n     *                          token identifier is valid and that no associated\n     *                          proof needs to be supplied.\n     * @param fulfillments      An array of elements allocating offer components\n     *                          to consideration components. Note that each\n     *                          consideration component must be fully met in\n     *                          order for the match operation to be valid.\n     *\n     * @return executions An array of elements indicating the sequence of\n     *                    transfers performed as part of matching the given\n     *                    orders.\n     */\n    function matchAdvancedOrders(\n        AdvancedOrder[] calldata orders,\n        CriteriaResolver[] calldata criteriaResolvers,\n        Fulfillment[] calldata fulfillments\n    ) external payable returns (Execution[] memory executions);\n\n    /**\n     * @notice Cancel an arbitrary number of orders. Note that only the offerer\n     *         or the zone of a given order may cancel it. Callers should ensure\n     *         that the intended order was cancelled by calling `getOrderStatus`\n     *         and confirming that `isCancelled` returns `true`.\n     *\n     * @param orders The orders to cancel.\n     *\n     * @return cancelled A boolean indicating whether the supplied orders have\n     *                   been successfully cancelled.\n     */\n    function cancel(OrderComponents[] calldata orders)\n        external\n        returns (bool cancelled);\n\n    /**\n     * @notice Validate an arbitrary number of orders, thereby registering their\n     *         signatures as valid and allowing the fulfiller to skip signature\n     *         verification on fulfillment. Note that validated orders may still\n     *         be unfulfillable due to invalid item amounts or other factors;\n     *         callers should determine whether validated orders are fulfillable\n     *         by simulating the fulfillment call prior to execution. Also note\n     *         that anyone can validate a signed order, but only the offerer can\n     *         validate an order without supplying a signature.\n     *\n     * @param orders The orders to validate.\n     *\n     * @return validated A boolean indicating whether the supplied orders have\n     *                   been successfully validated.\n     */\n    function validate(Order[] calldata orders)\n        external\n        returns (bool validated);\n\n    /**\n     * @notice Cancel all orders from a given offerer with a given zone in bulk\n     *         by incrementing a counter. Note that only the offerer may\n     *         increment the counter.\n     *\n     * @return newCounter The new counter.\n     */\n    function incrementCounter() external returns (uint256 newCounter);\n\n    /**\n     * @notice Retrieve the order hash for a given order.\n     *\n     * @param order The components of the order.\n     *\n     * @return orderHash The order hash.\n     */\n    function getOrderHash(OrderComponents calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /**\n     * @notice Retrieve the status of a given order by hash, including whether\n     *         the order has been cancelled or validated and the fraction of the\n     *         order that has been filled.\n     *\n     * @param orderHash The order hash in question.\n     *\n     * @return isValidated A boolean indicating whether the order in question\n     *                     has been validated (i.e. previously approved or\n     *                     partially filled).\n     * @return isCancelled A boolean indicating whether the order in question\n     *                     has been cancelled.\n     * @return totalFilled The total portion of the order that has been filled\n     *                     (i.e. the \"numerator\").\n     * @return totalSize   The total size of the order that is either filled or\n     *                     unfilled (i.e. the \"denominator\").\n     */\n    function getOrderStatus(bytes32 orderHash)\n        external\n        view\n        returns (\n            bool isValidated,\n            bool isCancelled,\n            uint256 totalFilled,\n            uint256 totalSize\n        );\n\n    /**\n     * @notice Retrieve the current counter for a given offerer.\n     *\n     * @param offerer The offerer in question.\n     *\n     * @return counter The current counter.\n     */\n    function getCounter(address offerer)\n        external\n        view\n        returns (uint256 counter);\n\n    /**\n     * @notice Retrieve configuration information for this contract.\n     *\n     * @return version           The contract version.\n     * @return domainSeparator   The domain separator for this contract.\n     * @return conduitController The conduit Controller set for this contract.\n     */\n    function information()\n        external\n        view\n        returns (\n            string memory version,\n            bytes32 domainSeparator,\n            address conduitController\n        );\n\n    /**\n     * @notice Retrieve the name of this contract.\n     *\n     * @return contractName The name of this contract.\n     */\n    function name() external view returns (string memory contractName);\n}\n"
    },
    "contracts/interfaces/CriteriaResolutionErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\n/**\n * @title CriteriaResolutionErrors\n * @author 0age\n * @notice CriteriaResolutionErrors contains all errors related to criteria\n *         resolution.\n */\ninterface CriteriaResolutionErrors {\n    /**\n     * @dev Revert with an error when providing a criteria resolver that refers\n     *      to an order that has not been supplied.\n     */\n    error OrderCriteriaResolverOutOfRange();\n\n    /**\n     * @dev Revert with an error if an offer item still has unresolved criteria\n     *      after applying all criteria resolvers.\n     */\n    error UnresolvedOfferCriteria();\n\n    /**\n     * @dev Revert with an error if a consideration item still has unresolved\n     *      criteria after applying all criteria resolvers.\n     */\n    error UnresolvedConsiderationCriteria();\n\n    /**\n     * @dev Revert with an error when providing a criteria resolver that refers\n     *      to an order with an offer item that has not been supplied.\n     */\n    error OfferCriteriaResolverOutOfRange();\n\n    /**\n     * @dev Revert with an error when providing a criteria resolver that refers\n     *      to an order with a consideration item that has not been supplied.\n     */\n    error ConsiderationCriteriaResolverOutOfRange();\n\n    /**\n     * @dev Revert with an error when providing a criteria resolver that refers\n     *      to an order with an item that does not expect a criteria to be\n     *      resolved.\n     */\n    error CriteriaNotEnabledForItem();\n\n    /**\n     * @dev Revert with an error when providing a criteria resolver that\n     *      contains an invalid proof with respect to the given item and\n     *      chosen identifier.\n     */\n    error InvalidProof();\n}\n"
    },
    "contracts/interfaces/EIP1271Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\ninterface EIP1271Interface {\n    function isValidSignature(bytes32 digest, bytes calldata signature)\n        external\n        view\n        returns (bytes4);\n}\n"
    },
    "contracts/interfaces/FulfillmentApplicationErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\nimport { Side } from \"../lib/ConsiderationEnums.sol\";\n\n/**\n * @title FulfillmentApplicationErrors\n * @author 0age\n * @notice FulfillmentApplicationErrors contains errors related to fulfillment\n *         application and aggregation.\n */\ninterface FulfillmentApplicationErrors {\n    /**\n     * @dev Revert with an error when a fulfillment is provided that does not\n     *      declare at least one component as part of a call to fulfill\n     *      available orders.\n     */\n    error MissingFulfillmentComponentOnAggregation(Side side);\n\n    /**\n     * @dev Revert with an error when a fulfillment is provided that does not\n     *      declare at least one offer component and at least one consideration\n     *      component.\n     */\n    error OfferAndConsiderationRequiredOnFulfillment();\n\n    /**\n     * @dev Revert with an error when the initial offer item named by a\n     *      fulfillment component does not match the type, token, identifier,\n     *      or conduit preference of the initial consideration item.\n     */\n    error MismatchedFulfillmentOfferAndConsiderationComponents();\n\n    /**\n     * @dev Revert with an error when an order or item index are out of range\n     *      or a fulfillment component does not match the type, token,\n     *      identifier, or conduit preference of the initial consideration item.\n     */\n    error InvalidFulfillmentComponentData();\n}\n"
    },
    "contracts/interfaces/ImmutableCreate2FactoryInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\n/**\n * @title ImmutableCreate2FactoryInterface\n * @author 0age\n * @notice This contract provides a safeCreate2 function that takes a salt value\n *         and a block of initialization code as arguments and passes them into\n *         inline assembly. The contract prevents redeploys by maintaining a\n *         mapping of all contracts that have already been deployed, and\n *         prevents frontrunning or other collisions by requiring that the first\n *         20 bytes of the salt are equal to the address of the caller (this can\n *         be bypassed by setting the first 20 bytes to the null address). There\n *         is also a view function that computes the address of the contract\n *         that will be created when submitting a given salt or nonce along with\n *         a given block of initialization code.\n */\ninterface ImmutableCreate2FactoryInterface {\n    /**\n     * @dev Create a contract using CREATE2 by submitting a given salt or nonce\n     *      along with the initialization code for the contract. Note that the\n     *      first 20 bytes of the salt must match those of the calling address,\n     *      which prevents contract creation events from being submitted by\n     *      unintended parties.\n     *\n     * @param salt               The nonce that will be passed into the CREATE2\n     *                           call.\n     * @param initializationCode The initialization code that will be passed\n     *                           into the CREATE2 call.\n     *\n     * @return deploymentAddress Address of the contract that will be created.\n     */\n    function safeCreate2(bytes32 salt, bytes calldata initializationCode)\n        external\n        payable\n        returns (address deploymentAddress);\n\n    /**\n     * @dev Compute the address of the contract that will be created when\n     *      submitting a given salt or nonce to the contract along with the\n     *      contract's initialization code. The CREATE2 address is computed in\n     *      accordance with EIP-1014, and adheres to the formula therein of\n     *      `keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]`\n     *      when performing the computation. The computed address is then\n     *      checked for any existing contract code - if so, the null address\n     *      will be returned instead.\n     *\n     * @param salt     The nonce passed into the CREATE2 address calculation.\n     * @param initCode The contract initialization code to be used that will be\n     *                 passed into the CREATE2 address calculation.\n     *\n     * @return deploymentAddress Address of the contract that will be created,\n     *                           or the null address if a contract already\n     *                           exists at that address.\n     */\n    function findCreate2Address(bytes32 salt, bytes calldata initCode)\n        external\n        view\n        returns (address deploymentAddress);\n\n    /**\n     * @dev Compute the address of the contract that will be created when\n     *      submitting a given salt or nonce to the contract along with the\n     *      keccak256 hash of the contract's initialization code. The CREATE2\n     *      address is computed in accordance with EIP-1014, and adheres to the\n     *      `keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]`\n     *      formula when performing the computation. The computed address is\n     *      then checked for any existing contract code - if so, the null\n     *      address will be returned instead.\n     *\n     * @param salt         The nonce passed into the CREATE2 address\n     *                     calculation.\n     * @param initCodeHash The keccak256 hash of the initialization code that\n     *                     will be passed into the CREATE2 address calculation.\n     *\n     * @return deploymentAddress Address of the contract that will be created,\n     *                           or the null address if a contract already\n     *                           exists at that address.\n     */\n    function findCreate2AddressViaHash(bytes32 salt, bytes32 initCodeHash)\n        external\n        view\n        returns (address deploymentAddress);\n\n    /**\n     * @dev Determine if a contract has already been deployed by the factory to\n     *      a given address.\n     *\n     * @param deploymentAddress The contract address to check.\n     *\n     * @return True if the contract has been deployed, false otherwise.\n     */\n    function hasBeenDeployed(address deploymentAddress)\n        external\n        view\n        returns (bool);\n}\n"
    },
    "contracts/interfaces/INonStandardERC721Transfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\ninterface INonStandardERC721Transfer {\n    function transfer(address _to, uint256 _tokenId) external;\n}"
    },
    "contracts/interfaces/ReentrancyErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\n/**\n * @title ReentrancyErrors\n * @author 0age\n * @notice ReentrancyErrors contains errors related to reentrancy.\n */\ninterface ReentrancyErrors {\n    /**\n     * @dev Revert with an error when a caller attempts to reenter a protected\n     *      function.\n     */\n    error NoReentrantCalls();\n}\n"
    },
    "contracts/interfaces/SeaportInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\n// prettier-ignore\nimport {\n    BasicOrderParameters,\n    OrderComponents,\n    Fulfillment,\n    FulfillmentComponent,\n    Execution,\n    Order,\n    AdvancedOrder,\n    OrderStatus,\n    CriteriaResolver\n} from \"../lib/ConsiderationStructs.sol\";\n\n/**\n * @title SeaportInterface\n * @author 0age\n * @custom:version 1.1\n * @notice Seaport is a generalized ETH/ERC20/ERC721/ERC1155 marketplace. It\n *         minimizes external calls to the greatest extent possible and provides\n *         lightweight methods for common routes as well as more flexible\n *         methods for composing advanced orders.\n *\n * @dev SeaportInterface contains all external function interfaces for Seaport.\n */\ninterface SeaportInterface {\n    /**\n     * @notice Fulfill an order offering an ERC721 token by supplying Ether (or\n     *         the native token for the given chain) as consideration for the\n     *         order. An arbitrary number of \"additional recipients\" may also be\n     *         supplied which will each receive native tokens from the fulfiller\n     *         as consideration.\n     *\n     * @param parameters Additional information on the fulfilled order. Note\n     *                   that the offerer must first approve this contract (or\n     *                   their preferred conduit if indicated by the order) for\n     *                   their offered ERC721 token to be transferred.\n     *\n     * @return fulfilled A boolean indicating whether the order has been\n     *                   successfully fulfilled.\n     */\n    function fulfillBasicOrder(BasicOrderParameters calldata parameters)\n        external\n        payable\n        returns (bool fulfilled);\n\n    /**\n     * @notice Fulfill an order with an arbitrary number of items for offer and\n     *         consideration. Note that this function does not support\n     *         criteria-based orders or partial filling of orders (though\n     *         filling the remainder of a partially-filled order is supported).\n     *\n     * @param order               The order to fulfill. Note that both the\n     *                            offerer and the fulfiller must first approve\n     *                            this contract (or the corresponding conduit if\n     *                            indicated) to transfer any relevant tokens on\n     *                            their behalf and that contracts must implement\n     *                            `onERC1155Received` to receive ERC1155 tokens\n     *                            as consideration.\n     * @param fulfillerConduitKey A bytes32 value indicating what conduit, if\n     *                            any, to source the fulfiller's token approvals\n     *                            from. The zero hash signifies that no conduit\n     *                            should be used, with direct approvals set on\n     *                            Seaport.\n     *\n     * @return fulfilled A boolean indicating whether the order has been\n     *                   successfully fulfilled.\n     */\n    function fulfillOrder(Order calldata order, bytes32 fulfillerConduitKey)\n        external\n        payable\n        returns (bool fulfilled);\n\n    /**\n     * @notice Fill an order, fully or partially, with an arbitrary number of\n     *         items for offer and consideration alongside criteria resolvers\n     *         containing specific token identifiers and associated proofs.\n     *\n     * @param advancedOrder       The order to fulfill along with the fraction\n     *                            of the order to attempt to fill. Note that\n     *                            both the offerer and the fulfiller must first\n     *                            approve this contract (or their preferred\n     *                            conduit if indicated by the order) to transfer\n     *                            any relevant tokens on their behalf and that\n     *                            contracts must implement `onERC1155Received`\n     *                            to receive ERC1155 tokens as consideration.\n     *                            Also note that all offer and consideration\n     *                            components must have no remainder after\n     *                            multiplication of the respective amount with\n     *                            the supplied fraction for the partial fill to\n     *                            be considered valid.\n     * @param criteriaResolvers   An array where each element contains a\n     *                            reference to a specific offer or\n     *                            consideration, a token identifier, and a proof\n     *                            that the supplied token identifier is\n     *                            contained in the merkle root held by the item\n     *                            in question's criteria element. Note that an\n     *                            empty criteria indicates that any\n     *                            (transferable) token identifier on the token\n     *                            in question is valid and that no associated\n     *                            proof needs to be supplied.\n     * @param fulfillerConduitKey A bytes32 value indicating what conduit, if\n     *                            any, to source the fulfiller's token approvals\n     *                            from. The zero hash signifies that no conduit\n     *                            should be used, with direct approvals set on\n     *                            Seaport.\n     * @param recipient           The intended recipient for all received items,\n     *                            with `address(0)` indicating that the caller\n     *                            should receive the items.\n     *\n     * @return fulfilled A boolean indicating whether the order has been\n     *                   successfully fulfilled.\n     */\n    function fulfillAdvancedOrder(\n        AdvancedOrder calldata advancedOrder,\n        CriteriaResolver[] calldata criteriaResolvers,\n        bytes32 fulfillerConduitKey,\n        address recipient\n    ) external payable returns (bool fulfilled);\n\n    /**\n     * @notice Attempt to fill a group of orders, each with an arbitrary number\n     *         of items for offer and consideration. Any order that is not\n     *         currently active, has already been fully filled, or has been\n     *         cancelled will be omitted. Remaining offer and consideration\n     *         items will then be aggregated where possible as indicated by the\n     *         supplied offer and consideration component arrays and aggregated\n     *         items will be transferred to the fulfiller or to each intended\n     *         recipient, respectively. Note that a failing item transfer or an\n     *         issue with order formatting will cause the entire batch to fail.\n     *         Note that this function does not support criteria-based orders or\n     *         partial filling of orders (though filling the remainder of a\n     *         partially-filled order is supported).\n     *\n     * @param orders                    The orders to fulfill. Note that both\n     *                                  the offerer and the fulfiller must first\n     *                                  approve this contract (or the\n     *                                  corresponding conduit if indicated) to\n     *                                  transfer any relevant tokens on their\n     *                                  behalf and that contracts must implement\n     *                                  `onERC1155Received` to receive ERC1155\n     *                                  tokens as consideration.\n     * @param offerFulfillments         An array of FulfillmentComponent arrays\n     *                                  indicating which offer items to attempt\n     *                                  to aggregate when preparing executions.\n     * @param considerationFulfillments An array of FulfillmentComponent arrays\n     *                                  indicating which consideration items to\n     *                                  attempt to aggregate when preparing\n     *                                  executions.\n     * @param fulfillerConduitKey       A bytes32 value indicating what conduit,\n     *                                  if any, to source the fulfiller's token\n     *                                  approvals from. The zero hash signifies\n     *                                  that no conduit should be used, with\n     *                                  direct approvals set on this contract.\n     * @param maximumFulfilled          The maximum number of orders to fulfill.\n     *\n     * @return availableOrders An array of booleans indicating if each order\n     *                         with an index corresponding to the index of the\n     *                         returned boolean was fulfillable or not.\n     * @return executions      An array of elements indicating the sequence of\n     *                         transfers performed as part of matching the given\n     *                         orders.\n     */\n    function fulfillAvailableOrders(\n        Order[] calldata orders,\n        FulfillmentComponent[][] calldata offerFulfillments,\n        FulfillmentComponent[][] calldata considerationFulfillments,\n        bytes32 fulfillerConduitKey,\n        uint256 maximumFulfilled\n    )\n        external\n        payable\n        returns (bool[] memory availableOrders, Execution[] memory executions);\n\n    /**\n     * @notice Attempt to fill a group of orders, fully or partially, with an\n     *         arbitrary number of items for offer and consideration per order\n     *         alongside criteria resolvers containing specific token\n     *         identifiers and associated proofs. Any order that is not\n     *         currently active, has already been fully filled, or has been\n     *         cancelled will be omitted. Remaining offer and consideration\n     *         items will then be aggregated where possible as indicated by the\n     *         supplied offer and consideration component arrays and aggregated\n     *         items will be transferred to the fulfiller or to each intended\n     *         recipient, respectively. Note that a failing item transfer or an\n     *         issue with order formatting will cause the entire batch to fail.\n     *\n     * @param advancedOrders            The orders to fulfill along with the\n     *                                  fraction of those orders to attempt to\n     *                                  fill. Note that both the offerer and the\n     *                                  fulfiller must first approve this\n     *                                  contract (or their preferred conduit if\n     *                                  indicated by the order) to transfer any\n     *                                  relevant tokens on their behalf and that\n     *                                  contracts must implement\n     *                                  `onERC1155Received` to enable receipt of\n     *                                  ERC1155 tokens as consideration. Also\n     *                                  note that all offer and consideration\n     *                                  components must have no remainder after\n     *                                  multiplication of the respective amount\n     *                                  with the supplied fraction for an\n     *                                  order's partial fill amount to be\n     *                                  considered valid.\n     * @param criteriaResolvers         An array where each element contains a\n     *                                  reference to a specific offer or\n     *                                  consideration, a token identifier, and a\n     *                                  proof that the supplied token identifier\n     *                                  is contained in the merkle root held by\n     *                                  the item in question's criteria element.\n     *                                  Note that an empty criteria indicates\n     *                                  that any (transferable) token\n     *                                  identifier on the token in question is\n     *                                  valid and that no associated proof needs\n     *                                  to be supplied.\n     * @param offerFulfillments         An array of FulfillmentComponent arrays\n     *                                  indicating which offer items to attempt\n     *                                  to aggregate when preparing executions.\n     * @param considerationFulfillments An array of FulfillmentComponent arrays\n     *                                  indicating which consideration items to\n     *                                  attempt to aggregate when preparing\n     *                                  executions.\n     * @param fulfillerConduitKey       A bytes32 value indicating what conduit,\n     *                                  if any, to source the fulfiller's token\n     *                                  approvals from. The zero hash signifies\n     *                                  that no conduit should be used, with\n     *                                  direct approvals set on this contract.\n     * @param recipient                 The intended recipient for all received\n     *                                  items, with `address(0)` indicating that\n     *                                  the caller should receive the items.\n     * @param maximumFulfilled          The maximum number of orders to fulfill.\n     *\n     * @return availableOrders An array of booleans indicating if each order\n     *                         with an index corresponding to the index of the\n     *                         returned boolean was fulfillable or not.\n     * @return executions      An array of elements indicating the sequence of\n     *                         transfers performed as part of matching the given\n     *                         orders.\n     */\n    function fulfillAvailableAdvancedOrders(\n        AdvancedOrder[] calldata advancedOrders,\n        CriteriaResolver[] calldata criteriaResolvers,\n        FulfillmentComponent[][] calldata offerFulfillments,\n        FulfillmentComponent[][] calldata considerationFulfillments,\n        bytes32 fulfillerConduitKey,\n        address recipient,\n        uint256 maximumFulfilled\n    )\n        external\n        payable\n        returns (bool[] memory availableOrders, Execution[] memory executions);\n\n    /**\n     * @notice Match an arbitrary number of orders, each with an arbitrary\n     *         number of items for offer and consideration along with as set of\n     *         fulfillments allocating offer components to consideration\n     *         components. Note that this function does not support\n     *         criteria-based or partial filling of orders (though filling the\n     *         remainder of a partially-filled order is supported).\n     *\n     * @param orders       The orders to match. Note that both the offerer and\n     *                     fulfiller on each order must first approve this\n     *                     contract (or their conduit if indicated by the order)\n     *                     to transfer any relevant tokens on their behalf and\n     *                     each consideration recipient must implement\n     *                     `onERC1155Received` to enable ERC1155 token receipt.\n     * @param fulfillments An array of elements allocating offer components to\n     *                     consideration components. Note that each\n     *                     consideration component must be fully met for the\n     *                     match operation to be valid.\n     *\n     * @return executions An array of elements indicating the sequence of\n     *                    transfers performed as part of matching the given\n     *                    orders.\n     */\n    function matchOrders(\n        Order[] calldata orders,\n        Fulfillment[] calldata fulfillments\n    ) external payable returns (Execution[] memory executions);\n\n    /**\n     * @notice Match an arbitrary number of full or partial orders, each with an\n     *         arbitrary number of items for offer and consideration, supplying\n     *         criteria resolvers containing specific token identifiers and\n     *         associated proofs as well as fulfillments allocating offer\n     *         components to consideration components.\n     *\n     * @param orders            The advanced orders to match. Note that both the\n     *                          offerer and fulfiller on each order must first\n     *                          approve this contract (or a preferred conduit if\n     *                          indicated by the order) to transfer any relevant\n     *                          tokens on their behalf and each consideration\n     *                          recipient must implement `onERC1155Received` in\n     *                          order to receive ERC1155 tokens. Also note that\n     *                          the offer and consideration components for each\n     *                          order must have no remainder after multiplying\n     *                          the respective amount with the supplied fraction\n     *                          in order for the group of partial fills to be\n     *                          considered valid.\n     * @param criteriaResolvers An array where each element contains a reference\n     *                          to a specific order as well as that order's\n     *                          offer or consideration, a token identifier, and\n     *                          a proof that the supplied token identifier is\n     *                          contained in the order's merkle root. Note that\n     *                          an empty root indicates that any (transferable)\n     *                          token identifier is valid and that no associated\n     *                          proof needs to be supplied.\n     * @param fulfillments      An array of elements allocating offer components\n     *                          to consideration components. Note that each\n     *                          consideration component must be fully met in\n     *                          order for the match operation to be valid.\n     *\n     * @return executions An array of elements indicating the sequence of\n     *                    transfers performed as part of matching the given\n     *                    orders.\n     */\n    function matchAdvancedOrders(\n        AdvancedOrder[] calldata orders,\n        CriteriaResolver[] calldata criteriaResolvers,\n        Fulfillment[] calldata fulfillments\n    ) external payable returns (Execution[] memory executions);\n\n    /**\n     * @notice Cancel an arbitrary number of orders. Note that only the offerer\n     *         or the zone of a given order may cancel it. Callers should ensure\n     *         that the intended order was cancelled by calling `getOrderStatus`\n     *         and confirming that `isCancelled` returns `true`.\n     *\n     * @param orders The orders to cancel.\n     *\n     * @return cancelled A boolean indicating whether the supplied orders have\n     *                   been successfully cancelled.\n     */\n    function cancel(OrderComponents[] calldata orders)\n        external\n        returns (bool cancelled);\n\n    /**\n     * @notice Validate an arbitrary number of orders, thereby registering their\n     *         signatures as valid and allowing the fulfiller to skip signature\n     *         verification on fulfillment. Note that validated orders may still\n     *         be unfulfillable due to invalid item amounts or other factors;\n     *         callers should determine whether validated orders are fulfillable\n     *         by simulating the fulfillment call prior to execution. Also note\n     *         that anyone can validate a signed order, but only the offerer can\n     *         validate an order without supplying a signature.\n     *\n     * @param orders The orders to validate.\n     *\n     * @return validated A boolean indicating whether the supplied orders have\n     *                   been successfully validated.\n     */\n    function validate(Order[] calldata orders)\n        external\n        returns (bool validated);\n\n    /**\n     * @notice Cancel all orders from a given offerer with a given zone in bulk\n     *         by incrementing a counter. Note that only the offerer may\n     *         increment the counter.\n     *\n     * @return newCounter The new counter.\n     */\n    function incrementCounter() external returns (uint256 newCounter);\n\n    /**\n     * @notice Retrieve the order hash for a given order.\n     *\n     * @param order The components of the order.\n     *\n     * @return orderHash The order hash.\n     */\n    function getOrderHash(OrderComponents calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /**\n     * @notice Retrieve the status of a given order by hash, including whether\n     *         the order has been cancelled or validated and the fraction of the\n     *         order that has been filled.\n     *\n     * @param orderHash The order hash in question.\n     *\n     * @return isValidated A boolean indicating whether the order in question\n     *                     has been validated (i.e. previously approved or\n     *                     partially filled).\n     * @return isCancelled A boolean indicating whether the order in question\n     *                     has been cancelled.\n     * @return totalFilled The total portion of the order that has been filled\n     *                     (i.e. the \"numerator\").\n     * @return totalSize   The total size of the order that is either filled or\n     *                     unfilled (i.e. the \"denominator\").\n     */\n    function getOrderStatus(bytes32 orderHash)\n        external\n        view\n        returns (\n            bool isValidated,\n            bool isCancelled,\n            uint256 totalFilled,\n            uint256 totalSize\n        );\n\n    /**\n     * @notice Retrieve the current counter for a given offerer.\n     *\n     * @param offerer The offerer in question.\n     *\n     * @return counter The current counter.\n     */\n    function getCounter(address offerer)\n        external\n        view\n        returns (uint256 counter);\n\n    /**\n     * @notice Retrieve configuration information for this contract.\n     *\n     * @return version           The contract version.\n     * @return domainSeparator   The domain separator for this contract.\n     * @return conduitController The conduit Controller set for this contract.\n     */\n    function information()\n        external\n        view\n        returns (\n            string memory version,\n            bytes32 domainSeparator,\n            address conduitController\n        );\n\n    /**\n     * @notice Retrieve the name of this contract.\n     *\n     * @return contractName The name of this contract.\n     */\n    function name() external view returns (string memory contractName);\n}\n"
    },
    "contracts/interfaces/SignatureVerificationErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\n/**\n * @title SignatureVerificationErrors\n * @author 0age\n * @notice SignatureVerificationErrors contains all errors related to signature\n *         verification.\n */\ninterface SignatureVerificationErrors {\n    /**\n     * @dev Revert with an error when a signature that does not contain a v\n     *      value of 27 or 28 has been supplied.\n     *\n     * @param v The invalid v value.\n     */\n    error BadSignatureV(uint8 v);\n\n    /**\n     * @dev Revert with an error when the signer recovered by the supplied\n     *      signature does not match the offerer or an allowed EIP-1271 signer\n     *      as specified by the offerer in the event they are a contract.\n     */\n    error InvalidSigner();\n\n    /**\n     * @dev Revert with an error when a signer cannot be recovered from the\n     *      supplied signature.\n     */\n    error InvalidSignature();\n\n    /**\n     * @dev Revert with an error when an EIP-1271 call to an account fails.\n     */\n    error BadContractSignature();\n}\n"
    },
    "contracts/interfaces/TokenTransferrerErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\n/**\n * @title TokenTransferrerErrors\n */\ninterface TokenTransferrerErrors {\n    /**\n     * @dev Revert with an error when an ERC721 transfer with amount other than\n     *      one is attempted.\n     */\n    error InvalidERC721TransferAmount();\n\n    /**\n     * @dev Revert with an error when attempting to fulfill an order where an\n     *      item has an amount of zero.\n     */\n    error MissingItemAmount();\n\n    /**\n     * @dev Revert with an error when attempting to fulfill an order where an\n     *      item has unused parameters. This includes both the token and the\n     *      identifier parameters for native transfers as well as the identifier\n     *      parameter for ERC20 transfers. Note that the conduit does not\n     *      perform this check, leaving it up to the calling channel to enforce\n     *      when desired.\n     */\n    error UnusedItemParameters();\n\n    /**\n     * @dev Revert with an error when an ERC20, ERC721, or ERC1155 token\n     *      transfer reverts.\n     *\n     * @param token      The token for which the transfer was attempted.\n     * @param from       The source of the attempted transfer.\n     * @param to         The recipient of the attempted transfer.\n     * @param identifier The identifier for the attempted transfer.\n     * @param amount     The amount for the attempted transfer.\n     */\n    error TokenTransferGenericFailure(\n        address token,\n        address from,\n        address to,\n        uint256 identifier,\n        uint256 amount\n    );\n\n    /**\n     * @dev Revert with an error when a batch ERC1155 token transfer reverts.\n     *\n     * @param token       The token for which the transfer was attempted.\n     * @param from        The source of the attempted transfer.\n     * @param to          The recipient of the attempted transfer.\n     * @param identifiers The identifiers for the attempted transfer.\n     * @param amounts     The amounts for the attempted transfer.\n     */\n    error ERC1155BatchTransferGenericFailure(\n        address token,\n        address from,\n        address to,\n        uint256[] identifiers,\n        uint256[] amounts\n    );\n\n    /**\n     * @dev Revert with an error when an ERC20 token transfer returns a falsey\n     *      value.\n     *\n     * @param token      The token for which the ERC20 transfer was attempted.\n     * @param from       The source of the attempted ERC20 transfer.\n     * @param to         The recipient of the attempted ERC20 transfer.\n     * @param amount     The amount for the attempted ERC20 transfer.\n     */\n    error BadReturnValueFromERC20OnTransfer(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    );\n\n    /**\n     * @dev Revert with an error when an account being called as an assumed\n     *      contract does not have code and returns no data.\n     *\n     * @param account The account that should contain code.\n     */\n    error NoContract(address account);\n\n    /**\n     * @dev Revert with an error when attempting to execute an 1155 batch\n     *      transfer using calldata not produced by default ABI encoding or with\n     *      different lengths for ids and amounts arrays.\n     */\n    error Invalid1155BatchTransferEncoding();\n}\n"
    },
    "contracts/interfaces/TransferHelperInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\nimport { TransferHelperItem } from \"../helpers/TransferHelperStructs.sol\";\n\ninterface TransferHelperInterface {\n    /**\n     * @dev Revert with an error when attempting to execute transfers with a\n     *      NATIVE itemType.\n     */\n    error InvalidItemType();\n\n    /**\n     * @notice Transfer multiple items to a single recipient.\n     *\n     * @param items The items to transfer.\n     * @param recipient  The address the items should be transferred to.\n     * @param conduitKey  The key of the conduit performing the bulk transfer.\n     */\n    function bulkTransfer(\n        TransferHelperItem[] calldata items,\n        address recipient,\n        bytes32 conduitKey\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/interfaces/ZoneInteractionErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\n/**\n * @title ZoneInteractionErrors\n * @author 0age\n * @notice ZoneInteractionErrors contains errors related to zone interaction.\n */\ninterface ZoneInteractionErrors {\n    /**\n     * @dev Revert with an error when attempting to fill an order that specifies\n     *      a restricted submitter as its order type when not submitted by\n     *      either the offerer or the order's zone or approved as valid by the\n     *      zone in question via a staticcall to `isValidOrder`.\n     *\n     * @param orderHash The order hash for the invalid restricted order.\n     */\n    error InvalidRestrictedOrder(bytes32 orderHash);\n}\n"
    },
    "contracts/interfaces/ZoneInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\n// prettier-ignore\nimport {\n    AdvancedOrder,\n    CriteriaResolver\n} from \"../lib/ConsiderationStructs.sol\";\n\ninterface ZoneInterface {\n    // Called by Consideration whenever extraData is not provided by the caller.\n    function isValidOrder(\n        bytes32 orderHash,\n        address caller,\n        address offerer,\n        bytes32 zoneHash\n    ) external view returns (bytes4 validOrderMagicValue);\n\n    // Called by Consideration whenever any extraData is provided by the caller.\n    function isValidOrderIncludingExtraData(\n        bytes32 orderHash,\n        address caller,\n        AdvancedOrder calldata order,\n        bytes32[] calldata priorOrderHashes,\n        CriteriaResolver[] calldata criteriaResolvers\n    ) external view returns (bytes4 validOrderMagicValue);\n}\n"
    },
    "contracts/lib/AmountDeriver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.13;\n\n// prettier-ignore\nimport {\n    AmountDerivationErrors\n} from \"../interfaces/AmountDerivationErrors.sol\";\n\nimport \"./ConsiderationConstants.sol\";\n\n/**\n * @title AmountDeriver\n * @author 0age\n * @notice AmountDeriver contains view and pure functions related to deriving\n *         item amounts based on partial fill quantity and on linear\n *         interpolation based on current time when the start amount and end\n *         amount differ.\n */\ncontract AmountDeriver is AmountDerivationErrors {\n\n    /**\n     * @dev Internal view function to derive the current amount of a given item\n     *      based on the current price, the starting price, and the ending\n     *      price. If the start and end prices differ, the current price will be\n     *      interpolated on a linear basis. Note that this function expects that\n     *      the startTime parameter of orderParameters is not greater than the\n     *      current block timestamp and that the endTime parameter is greater\n     *      than the current block timestamp. If this condition is not upheld,\n     *      duration / elapsed / remaining variables will underflow.\n     *\n     * @param startAmount The starting amount of the item.\n     * @param endAmount   The ending amount of the item.\n     * @param startTime   The starting time of the order.\n     * @param endTime     The end time of the order.\n     * @param roundUp     A boolean indicating whether the resultant amount\n     *                    should be rounded up or down.\n     *\n     * @return amount The current amount.\n     */\n    function _locateCurrentAmount(\n        uint256 startAmount,\n        uint256 endAmount,\n        uint256 startTime,\n        uint256 endTime,\n        bool roundUp\n    ) internal view returns (uint256 amount) {\n        // Only modify end amount if it doesn't already equal start amount.\n        if (startAmount != endAmount) {\n            // Declare variables to derive in the subsequent unchecked scope.\n            uint256 duration;\n            uint256 elapsed;\n            uint256 remaining;\n\n            // Skip underflow checks as startTime <= block.timestamp < endTime.\n            unchecked {\n                // Derive the duration for the order and place it on the stack.\n                duration = endTime - startTime;\n\n                // Derive time elapsed since the order started & place on stack.\n                elapsed = block.timestamp - startTime;\n\n                // Derive time remaining until order expires and place on stack.\n                remaining = duration - elapsed;\n            }\n\n            // Aggregate new amounts weighted by time with rounding factor.\n            uint256 totalBeforeDivision = ((startAmount * remaining) +\n                (endAmount * elapsed));\n\n            // Use assembly to combine operations and skip divide-by-zero check.\n            assembly {\n                // Multiply by iszero(iszero(totalBeforeDivision)) to ensure\n                // amount is set to zero if totalBeforeDivision is zero,\n                // as intermediate overflow can occur if it is zero.\n                amount := mul(\n                    iszero(iszero(totalBeforeDivision)),\n                    // Subtract 1 from the numerator and add 1 to the result if\n                    // roundUp is true to get the proper rounding direction.\n                    // Division is performed with no zero check as duration\n                    // cannot be zero as long as startTime < endTime.\n                    add(\n                        div(sub(totalBeforeDivision, roundUp), duration),\n                        roundUp\n                    )\n                )\n            }\n\n            // Return the current amount.\n            return amount;\n        }\n\n        // Return the original amount as startAmount == endAmount.\n        return endAmount;\n    }\n\n    /**\n     * @dev Internal pure function to return a fraction of a given value and to\n     *      ensure the resultant value does not have any fractional component.\n     *      Note that this function assumes that zero will never be supplied as\n     *      the denominator parameter; invalid / undefined behavior will result\n     *      should a denominator of zero be provided.\n     *\n     * @param numerator   A value indicating the portion of the order that\n     *                    should be filled.\n     * @param denominator A value indicating the total size of the order. Note\n     *                    that this value cannot be equal to zero.\n     * @param value       The value for which to compute the fraction.\n     *\n     * @return newValue The value after applying the fraction.\n     */\n    function _getFraction(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 value\n    ) internal pure returns (uint256 newValue) {\n        // Return value early in cases where the fraction resolves to 1.\n        if (numerator == denominator) {\n            return value;\n        }\n\n        // Ensure fraction can be applied to the value with no remainder. Note\n        // that the denominator cannot be zero.\n        assembly {\n            // Ensure new value contains no remainder via mulmod operator.\n            // Credit to @hrkrshnn + @axic for proposing this optimal solution.\n            if mulmod(value, numerator, denominator) {\n                mstore(0, InexactFraction_error_signature)\n                revert(0, InexactFraction_error_len)\n            }\n        }\n\n        // Multiply the numerator by the value and ensure no overflow occurs.\n        uint256 valueTimesNumerator = value * numerator;\n\n        // Divide and check for remainder. Note that denominator cannot be zero.\n        assembly {\n            // Perform division without zero check.\n            newValue := div(valueTimesNumerator, denominator)\n        }\n    }\n\n    /**\n     * @dev Internal view function to apply a fraction to a consideration\n     * or offer item.\n     *\n     * @param startAmount     The starting amount of the item.\n     * @param endAmount       The ending amount of the item.\n     * @param numerator       A value indicating the portion of the order that\n     *                        should be filled.\n     * @param denominator     A value indicating the total size of the order.\n     * @param startTime       The starting time of the order.\n     * @param endTime         The end time of the order.\n     * @param roundUp         A boolean indicating whether the resultant\n     *                        amount should be rounded up or down.\n     *\n     * @return amount The received item to transfer with the final amount.\n     */\n    function _applyFraction(\n        uint256 startAmount,\n        uint256 endAmount,\n        uint256 numerator,\n        uint256 denominator,\n        uint256 startTime,\n        uint256 endTime,\n        bool roundUp\n    ) internal view returns (uint256 amount) {\n        // If start amount equals end amount, apply fraction to end amount.\n        if (startAmount == endAmount) {\n            // Apply fraction to end amount.\n            amount = _getFraction(numerator, denominator, endAmount);\n        } else {\n            // Otherwise, apply fraction to both and interpolated final amount.\n            amount = _locateCurrentAmount(\n                _getFraction(numerator, denominator, startAmount),\n                _getFraction(numerator, denominator, endAmount),\n                startTime,\n                endTime,\n                roundUp\n            );\n        }\n    }\n}\n"
    },
    "contracts/lib/Assertions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.13;\n\nimport { OrderParameters } from \"./ConsiderationStructs.sol\";\n\nimport { GettersAndDerivers } from \"./GettersAndDerivers.sol\";\n\n// prettier-ignore\nimport {\n    TokenTransferrerErrors\n} from \"../interfaces/TokenTransferrerErrors.sol\";\n\nimport { CounterManager } from \"./CounterManager.sol\";\n\nimport \"./ConsiderationConstants.sol\";\n\n/**\n * @title Assertions\n * @author 0age\n * @notice Assertions contains logic for making various assertions that do not\n *         fit neatly within a dedicated semantic scope.\n */\ncontract Assertions is\n    GettersAndDerivers,\n    CounterManager,\n    TokenTransferrerErrors\n{\n    /**\n     * @dev Derive and set hashes, reference chainId, and associated domain\n     *      separator during deployment.\n     *\n     * @param conduitController A contract that deploys conduits, or proxies\n     *                          that may optionally be used to transfer approved\n     *                          ERC20/721/1155 tokens.\n     */\n    constructor(address conduitController)\n        GettersAndDerivers(conduitController)\n    {}\n\n    /**\n     * @dev Internal view function to ensure that the supplied consideration\n     *      array length on a given set of order parameters is not less than the\n     *      original consideration array length for that order and to retrieve\n     *      the current counter for a given order's offerer and zone and use it\n     *      to derive the order hash.\n     *\n     * @param orderParameters The parameters of the order to hash.\n     *\n     * @return The hash.\n     */\n    function _assertConsiderationLengthAndGetOrderHash(\n        OrderParameters memory orderParameters\n    ) internal view returns (bytes32) {\n        // Ensure supplied consideration array length is not less than original.\n        _assertConsiderationLengthIsNotLessThanOriginalConsiderationLength(\n            orderParameters.consideration.length,\n            orderParameters.totalOriginalConsiderationItems\n        );\n\n        // Derive and return order hash using current counter for the offerer.\n        return\n            _deriveOrderHash(\n                orderParameters,\n                _getCounter(orderParameters.offerer)\n            );\n    }\n\n    /**\n     * @dev Internal pure function to ensure that the supplied consideration\n     *      array length for an order to be fulfilled is not less than the\n     *      original consideration array length for that order.\n     *\n     * @param suppliedConsiderationItemTotal The number of consideration items\n     *                                       supplied when fulfilling the order.\n     * @param originalConsiderationItemTotal The number of consideration items\n     *                                       supplied on initial order creation.\n     */\n    function _assertConsiderationLengthIsNotLessThanOriginalConsiderationLength(\n        uint256 suppliedConsiderationItemTotal,\n        uint256 originalConsiderationItemTotal\n    ) internal pure {\n        // Ensure supplied consideration array length is not less than original.\n        if (suppliedConsiderationItemTotal < originalConsiderationItemTotal) {\n            revert MissingOriginalConsiderationItems();\n        }\n    }\n\n    /**\n     * @dev Internal pure function to ensure that a given item amount is not\n     *      zero.\n     *\n     * @param amount The amount to check.\n     */\n    function _assertNonZeroAmount(uint256 amount) internal pure {\n        // Revert if the supplied amount is equal to zero.\n        if (amount == 0) {\n            revert MissingItemAmount();\n        }\n    }\n\n    /**\n     * @dev Internal pure function to validate calldata offsets for dynamic\n     *      types in BasicOrderParameters and other parameters. This ensures\n     *      that functions using the calldata object normally will be using the\n     *      same data as the assembly functions and that values that are bound\n     *      to a given range are within that range. Note that no parameters are\n     *      supplied as all basic order functions use the same calldata\n     *      encoding.\n     */\n    function _assertValidBasicOrderParameters() internal pure {\n        // Declare a boolean designating basic order parameter offset validity.\n        bool validOffsets;\n\n        // Utilize assembly in order to read offset data directly from calldata.\n        assembly {\n            /*\n             * Checks:\n             * 1. Order parameters struct offset == 0x20\n             * 2. Additional recipients arr offset == 0x240\n             * 3. Signature offset == 0x260 + (recipients.length * 0x40)\n             * 4. BasicOrderType between 0 and 23 (i.e. < 24)\n             */\n            validOffsets := and(\n                // Order parameters at calldata 0x04 must have offset of 0x20.\n                eq(\n                    calldataload(BasicOrder_parameters_cdPtr),\n                    BasicOrder_parameters_ptr\n                ),\n                // Additional recipients at cd 0x224 must have offset of 0x240.\n                eq(\n                    calldataload(BasicOrder_additionalRecipients_head_cdPtr),\n                    BasicOrder_additionalRecipients_head_ptr\n                )\n            )\n\n            validOffsets := and(\n                validOffsets,\n                eq(\n                    // Load signature offset from calldata 0x244.\n                    calldataload(BasicOrder_signature_cdPtr),\n                    // Derive expected offset as start of recipients + len * 64.\n                    add(\n                        BasicOrder_signature_ptr,\n                        mul(\n                            // Additional recipients length at calldata 0x264.\n                            calldataload(\n                                BasicOrder_additionalRecipients_length_cdPtr\n                            ),\n                            // Each additional recipient has a length of 0x40.\n                            AdditionalRecipients_size\n                        )\n                    )\n                )\n            )\n\n            validOffsets := and(\n                validOffsets,\n                lt(\n                    // BasicOrderType parameter at calldata offset 0x124.\n                    calldataload(BasicOrder_basicOrderType_cdPtr),\n                    // Value should be less than 24.\n                    BasicOrder_basicOrderType_range\n                )\n            )\n        }\n\n        // Revert with an error if basic order parameter offsets are invalid.\n        if (!validOffsets) {\n            revert InvalidBasicOrderParameterEncoding();\n        }\n    }\n}\n"
    },
    "contracts/lib/BasicOrderFulfiller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.13;\n\nimport { ConduitInterface } from \"../interfaces/ConduitInterface.sol\";\n\n// prettier-ignore\nimport {\n    OrderType,\n    ItemType,\n    BasicOrderRouteType\n} from \"./ConsiderationEnums.sol\";\n\n// prettier-ignore\nimport {\n    AdditionalRecipient,\n    BasicOrderParameters,\n    OfferItem,\n    ConsiderationItem,\n    SpentItem,\n    ReceivedItem\n} from \"./ConsiderationStructs.sol\";\n\nimport { OrderValidator } from \"./OrderValidator.sol\";\n\nimport \"./ConsiderationConstants.sol\";\n\n/**\n * @title BasicOrderFulfiller\n * @author 0age\n * @notice BasicOrderFulfiller contains functionality for fulfilling \"basic\"\n *         orders with minimal overhead. See documentation for details on what\n *         qualifies as a basic order.\n */\ncontract BasicOrderFulfiller is OrderValidator {\n    /**\n     * @dev Derive and set hashes, reference chainId, and associated domain\n     *      separator during deployment.\n     *\n     * @param conduitController A contract that deploys conduits, or proxies\n     *                          that may optionally be used to transfer approved\n     *                          ERC20/721/1155 tokens.\n     */\n    constructor(address conduitController) OrderValidator(conduitController) {}\n\n    /**\n     * @dev Internal function to fulfill an order offering an ERC20, ERC721, or\n     *      ERC1155 item by supplying Ether (or other native tokens), ERC20\n     *      tokens, an ERC721 item, or an ERC1155 item as consideration. Six\n     *      permutations are supported: Native token to ERC721, Native token to\n     *      ERC1155, ERC20 to ERC721, ERC20 to ERC1155, ERC721 to ERC20, and\n     *      ERC1155 to ERC20 (with native tokens supplied as msg.value). For an\n     *      order to be eligible for fulfillment via this method, it must\n     *      contain a single offer item (though that item may have a greater\n     *      amount if the item is not an ERC721). An arbitrary number of\n     *      \"additional recipients\" may also be supplied which will each receive\n     *      native tokens or ERC20 items from the fulfiller as consideration.\n     *      Refer to the documentation for a more comprehensive summary of how\n     *      to utilize this method and what orders are compatible with it.\n     *\n     * @param parameters Additional information on the fulfilled order. Note\n     *                   that the offerer and the fulfiller must first approve\n     *                   this contract (or their chosen conduit if indicated)\n     *                   before any tokens can be transferred. Also note that\n     *                   contract recipients of ERC1155 consideration items must\n     *                   implement `onERC1155Received` in order to receive those\n     *                   items.\n     *\n     * @return A boolean indicating whether the order has been fulfilled.\n     */\n    function _validateAndFulfillBasicOrder(\n        BasicOrderParameters calldata parameters\n    ) internal returns (bool) {\n        // Declare enums for order type & route to extract from basicOrderType.\n        BasicOrderRouteType route;\n        OrderType orderType;\n\n        // Declare additional recipient item type to derive from the route type.\n        ItemType additionalRecipientsItemType;\n\n        // Utilize assembly to extract the order type and the basic order route.\n        assembly {\n            // Read basicOrderType from calldata.\n            let basicOrderType := calldataload(BasicOrder_basicOrderType_cdPtr)\n\n            // Mask all but 2 least-significant bits to derive the order type.\n            orderType := and(basicOrderType, 3)\n\n            // Divide basicOrderType by four to derive the route.\n            route := shr(2, basicOrderType)\n\n            // If route > 1 additionalRecipient items are ERC20 (1) else Eth (0)\n            additionalRecipientsItemType := gt(route, 1)\n        }\n\n        {\n            // Declare temporary variable for enforcing payable status.\n            bool correctPayableStatus;\n\n            // Utilize assembly to compare the route to the callvalue.\n            assembly {\n                // route 0 and 1 are payable, otherwise route is not payable.\n                correctPayableStatus := eq(\n                    additionalRecipientsItemType,\n                    iszero(callvalue())\n                )\n            }\n\n            // Revert if msg.value has not been supplied as part of payable\n            // routes or has been supplied as part of non-payable routes.\n            if (!correctPayableStatus) {\n                revert InvalidMsgValue(msg.value);\n            }\n        }\n\n        // Declare more arguments that will be derived from route and calldata.\n        address additionalRecipientsToken;\n        ItemType offeredItemType;\n        bool offerTypeIsAdditionalRecipientsType;\n\n        // Declare scope for received item type to manage stack pressure.\n        {\n            ItemType receivedItemType;\n\n            // Utilize assembly to retrieve function arguments and cast types.\n            assembly {\n                // Check if offered item type == additional recipient item type.\n                offerTypeIsAdditionalRecipientsType := gt(route, 3)\n\n                // If route > 3 additionalRecipientsToken is at 0xc4 else 0x24.\n                additionalRecipientsToken := calldataload(\n                    add(\n                        BasicOrder_considerationToken_cdPtr,\n                        mul(\n                            offerTypeIsAdditionalRecipientsType,\n                            BasicOrder_common_params_size\n                        )\n                    )\n                )\n\n                // If route > 2, receivedItemType is route - 2. If route is 2,\n                // the receivedItemType is ERC20 (1). Otherwise, it is Eth (0).\n                receivedItemType := add(\n                    mul(sub(route, 2), gt(route, 2)),\n                    eq(route, 2)\n                )\n\n                // If route > 3, offeredItemType is ERC20 (1). Route is 2 or 3,\n                // offeredItemType = route. Route is 0 or 1, it is route + 2.\n                offeredItemType := sub(\n                    add(route, mul(iszero(additionalRecipientsItemType), 2)),\n                    mul(\n                        offerTypeIsAdditionalRecipientsType,\n                        add(receivedItemType, 1)\n                    )\n                )\n            }\n\n            // Derive & validate order using parameters and update order status.\n            _prepareBasicFulfillmentFromCalldata(\n                parameters,\n                orderType,\n                receivedItemType,\n                additionalRecipientsItemType,\n                additionalRecipientsToken,\n                offeredItemType\n            );\n        }\n\n        // Declare conduitKey argument used by transfer functions.\n        bytes32 conduitKey;\n\n        // Utilize assembly to derive conduit (if relevant) based on route.\n        assembly {\n            // use offerer conduit for routes 0-3, fulfiller conduit otherwise.\n            conduitKey := calldataload(\n                add(\n                    BasicOrder_offererConduit_cdPtr,\n                    mul(offerTypeIsAdditionalRecipientsType, OneWord)\n                )\n            )\n        }\n\n        // Transfer tokens based on the route.\n        if (additionalRecipientsItemType == ItemType.NATIVE) {\n            // Ensure neither the token nor the identifier parameters are set.\n            if (\n                (uint160(parameters.considerationToken) |\n                    parameters.considerationIdentifier) != 0\n            ) {\n                revert UnusedItemParameters();\n            }\n\n            // Transfer the ERC721 or ERC1155 item, bypassing the accumulator.\n            _transferIndividual721Or1155Item(\n                offeredItemType,\n                parameters.offerToken,\n                parameters.offerer,\n                msg.sender,\n                parameters.offerIdentifier,\n                parameters.offerAmount,\n                conduitKey\n            );\n\n            // Transfer native to recipients, return excess to caller & wrap up.\n            _transferEthAndFinalize(\n                parameters.considerationAmount,\n                parameters.offerer,\n                parameters.additionalRecipients\n            );\n        } else {\n            // Initialize an accumulator array. From this point forward, no new\n            // memory regions can be safely allocated until the accumulator is\n            // no longer being utilized, as the accumulator operates in an\n            // open-ended fashion from this memory pointer; existing memory may\n            // still be accessed and modified, however.\n            bytes memory accumulator = new bytes(AccumulatorDisarmed);\n\n            // Choose transfer method for ERC721 or ERC1155 item based on route.\n            if (route == BasicOrderRouteType.ERC20_TO_ERC721) {\n                // Transfer ERC721 to caller using offerer's conduit preference.\n                _transferERC721(\n                    parameters.offerToken,\n                    parameters.offerer,\n                    msg.sender,\n                    parameters.offerIdentifier,\n                    parameters.offerAmount,\n                    conduitKey,\n                    accumulator\n                );\n            } else if (route == BasicOrderRouteType.ERC20_TO_ERC1155) {\n                // Transfer ERC1155 to caller with offerer's conduit preference.\n                _transferERC1155(\n                    parameters.offerToken,\n                    parameters.offerer,\n                    msg.sender,\n                    parameters.offerIdentifier,\n                    parameters.offerAmount,\n                    conduitKey,\n                    accumulator\n                );\n            } else if (route == BasicOrderRouteType.ERC721_TO_ERC20) {\n                // Transfer ERC721 to offerer using caller's conduit preference.\n                _transferERC721(\n                    parameters.considerationToken,\n                    msg.sender,\n                    parameters.offerer,\n                    parameters.considerationIdentifier,\n                    parameters.considerationAmount,\n                    conduitKey,\n                    accumulator\n                );\n            } else {\n                // route == BasicOrderRouteType.ERC1155_TO_ERC20\n\n                // Transfer ERC1155 to offerer with caller's conduit preference.\n                _transferERC1155(\n                    parameters.considerationToken,\n                    msg.sender,\n                    parameters.offerer,\n                    parameters.considerationIdentifier,\n                    parameters.considerationAmount,\n                    conduitKey,\n                    accumulator\n                );\n            }\n\n            // Transfer ERC20 tokens to all recipients and wrap up.\n            _transferERC20AndFinalize(\n                parameters.offerer,\n                parameters,\n                offerTypeIsAdditionalRecipientsType,\n                accumulator\n            );\n\n            // Trigger any remaining accumulated transfers via call to conduit.\n            _triggerIfArmed(accumulator);\n        }\n\n        // Clear the reentrancy guard.\n        _clearReentrancyGuard();\n\n        return true;\n    }\n\n    /**\n     * @dev Internal function to prepare fulfillment of a basic order with\n     *      manual calldata and memory access. This calculates the order hash,\n     *      emits an OrderFulfilled event, and asserts basic order validity.\n     *      Note that calldata offsets must be validated as this function\n     *      accesses constant calldata pointers for dynamic types that match\n     *      default ABI encoding, but valid ABI encoding can use arbitrary\n     *      offsets. Checking that the offsets were produced by default encoding\n     *      will ensure that other functions using Solidity's calldata accessors\n     *      (which calculate pointers from the stored offsets) are reading the\n     *      same data as the order hash is derived from. Also note that This\n     *      function accesses memory directly. It does not clear the expanded\n     *      memory regions used, nor does it update the free memory pointer, so\n     *      other direct memory access must not assume that unused memory is\n     *      empty.\n     *\n     * @param parameters                   The parameters of the basic order.\n     * @param orderType                    The order type.\n     * @param receivedItemType             The item type of the initial\n     *                                     consideration item on the order.\n     * @param additionalRecipientsItemType The item type of any additional\n     *                                     consideration item on the order.\n     * @param additionalRecipientsToken    The ERC20 token contract address (if\n     *                                     applicable) for any additional\n     *                                     consideration item on the order.\n     * @param offeredItemType              The item type of the offered item on\n     *                                     the order.\n     */\n    function _prepareBasicFulfillmentFromCalldata(\n        BasicOrderParameters calldata parameters,\n        OrderType orderType,\n        ItemType receivedItemType,\n        ItemType additionalRecipientsItemType,\n        address additionalRecipientsToken,\n        ItemType offeredItemType\n    ) internal {\n        // Ensure this function cannot be triggered during a reentrant call.\n        _setReentrancyGuard();\n\n        // Ensure current timestamp falls between order start time and end time.\n        _verifyTime(parameters.startTime, parameters.endTime, true);\n\n        // Verify that calldata offsets for all dynamic types were produced by\n        // default encoding. This ensures that the constants we use for calldata\n        // pointers to dynamic types are the same as those calculated by\n        // Solidity using their offsets. Also verify that the basic order type\n        // is within range.\n        _assertValidBasicOrderParameters();\n\n        // Ensure supplied consideration array length is not less than original.\n        _assertConsiderationLengthIsNotLessThanOriginalConsiderationLength(\n            parameters.additionalRecipients.length,\n            parameters.totalOriginalAdditionalRecipients\n        );\n\n        // Declare stack element for the order hash.\n        bytes32 orderHash;\n\n        {\n            /**\n             * First, handle consideration items. Memory Layout:\n             *  0x60: final hash of the array of consideration item hashes\n             *  0x80-0x160: reused space for EIP712 hashing of each item\n             *   - 0x80: ConsiderationItem EIP-712 typehash (constant)\n             *   - 0xa0: itemType\n             *   - 0xc0: token\n             *   - 0xe0: identifier\n             *   - 0x100: startAmount\n             *   - 0x120: endAmount\n             *   - 0x140: recipient\n             *  0x160-END_ARR: array of consideration item hashes\n             *   - 0x160: primary consideration item EIP712 hash\n             *   - 0x180-END_ARR: additional recipient item EIP712 hashes\n             *  END_ARR: beginning of data for OrderFulfilled event\n             *   - END_ARR + 0x120: length of ReceivedItem array\n             *   - END_ARR + 0x140: beginning of data for first ReceivedItem\n             * (Note: END_ARR = 0x180 + RECIPIENTS_LENGTH * 0x20)\n             */\n\n            // Load consideration item typehash from runtime and place on stack.\n            bytes32 typeHash = _CONSIDERATION_ITEM_TYPEHASH;\n\n            // Utilize assembly to enable reuse of memory regions and use\n            // constant pointers when possible.\n            assembly {\n                /*\n                 * 1. Calculate the EIP712 ConsiderationItem hash for the\n                 * primary consideration item of the basic order.\n                 */\n\n                // Write ConsiderationItem type hash and item type to memory.\n                mstore(BasicOrder_considerationItem_typeHash_ptr, typeHash)\n                mstore(\n                    BasicOrder_considerationItem_itemType_ptr,\n                    receivedItemType\n                )\n\n                // Copy calldata region with (token, identifier, amount) from\n                // BasicOrderParameters to ConsiderationItem. The\n                // considerationAmount is written to startAmount and endAmount\n                // as basic orders do not have dynamic amounts.\n                calldatacopy(\n                    BasicOrder_considerationItem_token_ptr,\n                    BasicOrder_considerationToken_cdPtr,\n                    ThreeWords\n                )\n\n                // Copy calldata region with considerationAmount and offerer\n                // from BasicOrderParameters to endAmount and recipient in\n                // ConsiderationItem.\n                calldatacopy(\n                    BasicOrder_considerationItem_endAmount_ptr,\n                    BasicOrder_considerationAmount_cdPtr,\n                    TwoWords\n                )\n\n                // Calculate EIP712 ConsiderationItem hash and store it in the\n                // array of EIP712 consideration hashes.\n                mstore(\n                    BasicOrder_considerationHashesArray_ptr,\n                    keccak256(\n                        BasicOrder_considerationItem_typeHash_ptr,\n                        EIP712_ConsiderationItem_size\n                    )\n                )\n\n                /*\n                 * 2. Write a ReceivedItem struct for the primary consideration\n                 * item to the consideration array in OrderFulfilled.\n                 */\n\n                // Get the length of the additional recipients array.\n                let totalAdditionalRecipients := calldataload(\n                    BasicOrder_additionalRecipients_length_cdPtr\n                )\n\n                // Calculate pointer to length of OrderFulfilled consideration\n                // array.\n                let eventConsiderationArrPtr := add(\n                    OrderFulfilled_consideration_length_baseOffset,\n                    mul(totalAdditionalRecipients, OneWord)\n                )\n\n                // Set the length of the consideration array to the number of\n                // additional recipients, plus one for the primary consideration\n                // item.\n                mstore(\n                    eventConsiderationArrPtr,\n                    add(\n                        calldataload(\n                            BasicOrder_additionalRecipients_length_cdPtr\n                        ),\n                        1\n                    )\n                )\n\n                // Overwrite the consideration array pointer so it points to the\n                // body of the first element\n                eventConsiderationArrPtr := add(\n                    eventConsiderationArrPtr,\n                    OneWord\n                )\n\n                // Set itemType at start of the ReceivedItem memory region.\n                mstore(eventConsiderationArrPtr, receivedItemType)\n\n                // Copy calldata region (token, identifier, amount & recipient)\n                // from BasicOrderParameters to ReceivedItem memory.\n                calldatacopy(\n                    add(eventConsiderationArrPtr, Common_token_offset),\n                    BasicOrder_considerationToken_cdPtr,\n                    FourWords\n                )\n\n                /*\n                 * 3. Calculate EIP712 ConsiderationItem hashes for original\n                 * additional recipients and add a ReceivedItem for each to the\n                 * consideration array in the OrderFulfilled event. The original\n                 * additional recipients are all the considerations signed by\n                 * the offerer aside from the primary consideration of the\n                 * order. Uses memory region from 0x80-0x160 as a buffer for\n                 * calculating EIP712 ConsiderationItem hashes.\n                 */\n\n                // Put pointer to consideration hashes array on the stack.\n                // This will be updated as each additional recipient is hashed\n                let\n                    considerationHashesPtr\n                := BasicOrder_considerationHashesArray_ptr\n\n                // Write item type, token, & identifier for additional recipient\n                // to memory region for hashing EIP712 ConsiderationItem; these\n                // values will be reused for each recipient.\n                mstore(\n                    BasicOrder_considerationItem_itemType_ptr,\n                    additionalRecipientsItemType\n                )\n                mstore(\n                    BasicOrder_considerationItem_token_ptr,\n                    additionalRecipientsToken\n                )\n                mstore(BasicOrder_considerationItem_identifier_ptr, 0)\n\n                // Read length of the additionalRecipients array from calldata\n                // and iterate.\n                totalAdditionalRecipients := calldataload(\n                    BasicOrder_totalOriginalAdditionalRecipients_cdPtr\n                )\n                let i := 0\n                // prettier-ignore\n                for {} lt(i, totalAdditionalRecipients) {\n                    i := add(i, 1)\n                } {\n                    /*\n                     * Calculate EIP712 ConsiderationItem hash for recipient.\n                     */\n\n                    // Retrieve calldata pointer for additional recipient.\n                    let additionalRecipientCdPtr := add(\n                        BasicOrder_additionalRecipients_data_cdPtr,\n                        mul(AdditionalRecipients_size, i)\n                    )\n\n                    // Copy startAmount from calldata to the ConsiderationItem\n                    // struct.\n                    calldatacopy(\n                        BasicOrder_considerationItem_startAmount_ptr,\n                        additionalRecipientCdPtr,\n                        OneWord\n                    )\n\n                    // Copy endAmount and recipient from calldata to the\n                    // ConsiderationItem struct.\n                    calldatacopy(\n                        BasicOrder_considerationItem_endAmount_ptr,\n                        additionalRecipientCdPtr,\n                        AdditionalRecipients_size\n                    )\n\n                    // Add 1 word to the pointer as part of each loop to reduce\n                    // operations needed to get local offset into the array.\n                    considerationHashesPtr := add(\n                        considerationHashesPtr,\n                        OneWord\n                    )\n\n                    // Calculate EIP712 ConsiderationItem hash and store it in\n                    // the array of consideration hashes.\n                    mstore(\n                        considerationHashesPtr,\n                        keccak256(\n                            BasicOrder_considerationItem_typeHash_ptr,\n                            EIP712_ConsiderationItem_size\n                        )\n                    )\n\n                    /*\n                     * Write ReceivedItem to OrderFulfilled data.\n                     */\n\n                    // At this point, eventConsiderationArrPtr points to the\n                    // beginning of the ReceivedItem struct of the previous\n                    // element in the array. Increase it by the size of the\n                    // struct to arrive at the pointer for the current element.\n                    eventConsiderationArrPtr := add(\n                        eventConsiderationArrPtr,\n                        ReceivedItem_size\n                    )\n\n                    // Write itemType to the ReceivedItem struct.\n                    mstore(\n                        eventConsiderationArrPtr,\n                        additionalRecipientsItemType\n                    )\n\n                    // Write token to the next word of the ReceivedItem struct.\n                    mstore(\n                        add(eventConsiderationArrPtr, OneWord),\n                        additionalRecipientsToken\n                    )\n\n                    // Copy endAmount & recipient words to ReceivedItem struct.\n                    calldatacopy(\n                        add(\n                            eventConsiderationArrPtr,\n                            ReceivedItem_amount_offset\n                        ),\n                        additionalRecipientCdPtr,\n                        TwoWords\n                    )\n                }\n\n                /*\n                 * 4. Hash packed array of ConsiderationItem EIP712 hashes:\n                 *   `keccak256(abi.encodePacked(receivedItemHashes))`\n                 * Note that it is set at 0x60 — all other memory begins at\n                 * 0x80. 0x60 is the \"zero slot\" and will be restored at the end\n                 * of the assembly section and before required by the compiler.\n                 */\n                mstore(\n                    receivedItemsHash_ptr,\n                    keccak256(\n                        BasicOrder_considerationHashesArray_ptr,\n                        mul(add(totalAdditionalRecipients, 1), OneWord)\n                    )\n                )\n\n                /*\n                 * 5. Add a ReceivedItem for each tip to the consideration array\n                 * in the OrderFulfilled event. The tips are all the\n                 * consideration items that were not signed by the offerer and\n                 * were provided by the fulfiller.\n                 */\n\n                // Overwrite length to length of the additionalRecipients array.\n                totalAdditionalRecipients := calldataload(\n                    BasicOrder_additionalRecipients_length_cdPtr\n                )\n                // prettier-ignore\n                for {} lt(i, totalAdditionalRecipients) {\n                    i := add(i, 1)\n                } {\n                    // Retrieve calldata pointer for additional recipient.\n                    let additionalRecipientCdPtr := add(\n                        BasicOrder_additionalRecipients_data_cdPtr,\n                        mul(AdditionalRecipients_size, i)\n                    )\n\n                    // At this point, eventConsiderationArrPtr points to the\n                    // beginning of the ReceivedItem struct of the previous\n                    // element in the array. Increase it by the size of the\n                    // struct to arrive at the pointer for the current element.\n                    eventConsiderationArrPtr := add(\n                        eventConsiderationArrPtr,\n                        ReceivedItem_size\n                    )\n\n                    // Write itemType to the ReceivedItem struct.\n                    mstore(\n                        eventConsiderationArrPtr,\n                        additionalRecipientsItemType\n                    )\n\n                    // Write token to the next word of the ReceivedItem struct.\n                    mstore(\n                        add(eventConsiderationArrPtr, OneWord),\n                        additionalRecipientsToken\n                    )\n\n                    // Copy endAmount & recipient words to ReceivedItem struct.\n                    calldatacopy(\n                        add(\n                            eventConsiderationArrPtr,\n                            ReceivedItem_amount_offset\n                        ),\n                        additionalRecipientCdPtr,\n                        TwoWords\n                    )\n                }\n            }\n        }\n\n        {\n            /**\n             * Next, handle offered items. Memory Layout:\n             *  EIP712 data for OfferItem\n             *   - 0x80:  OfferItem EIP-712 typehash (constant)\n             *   - 0xa0:  itemType\n             *   - 0xc0:  token\n             *   - 0xe0:  identifier (reused for offeredItemsHash)\n             *   - 0x100: startAmount\n             *   - 0x120: endAmount\n             */\n\n            // Place offer item typehash on the stack.\n            bytes32 typeHash = _OFFER_ITEM_TYPEHASH;\n\n            // Utilize assembly to enable reuse of memory regions when possible.\n            assembly {\n                /*\n                 * 1. Calculate OfferItem EIP712 hash\n                 */\n\n                // Write the OfferItem typeHash to memory.\n                mstore(BasicOrder_offerItem_typeHash_ptr, typeHash)\n\n                // Write the OfferItem item type to memory.\n                mstore(BasicOrder_offerItem_itemType_ptr, offeredItemType)\n\n                // Copy calldata region with (offerToken, offerIdentifier,\n                // offerAmount) from OrderParameters to (token, identifier,\n                // startAmount) in OfferItem struct. The offerAmount is written\n                // to startAmount and endAmount as basic orders do not have\n                // dynamic amounts.\n                calldatacopy(\n                    BasicOrder_offerItem_token_ptr,\n                    BasicOrder_offerToken_cdPtr,\n                    ThreeWords\n                )\n\n                // Copy offerAmount from calldata to endAmount in OfferItem\n                // struct.\n                calldatacopy(\n                    BasicOrder_offerItem_endAmount_ptr,\n                    BasicOrder_offerAmount_cdPtr,\n                    OneWord\n                )\n\n                // Compute EIP712 OfferItem hash, write result to scratch space:\n                //   `keccak256(abi.encode(offeredItem))`\n                mstore(\n                    0,\n                    keccak256(\n                        BasicOrder_offerItem_typeHash_ptr,\n                        EIP712_OfferItem_size\n                    )\n                )\n\n                /*\n                 * 2. Calculate hash of array of EIP712 hashes and write the\n                 * result to the corresponding OfferItem struct:\n                 *   `keccak256(abi.encodePacked(offerItemHashes))`\n                 */\n                mstore(BasicOrder_order_offerHashes_ptr, keccak256(0, OneWord))\n\n                /*\n                 * 3. Write SpentItem to offer array in OrderFulfilled event.\n                 */\n                let eventConsiderationArrPtr := add(\n                    OrderFulfilled_offer_length_baseOffset,\n                    mul(\n                        calldataload(\n                            BasicOrder_additionalRecipients_length_cdPtr\n                        ),\n                        OneWord\n                    )\n                )\n\n                // Set a length of 1 for the offer array.\n                mstore(eventConsiderationArrPtr, 1)\n\n                // Write itemType to the SpentItem struct.\n                mstore(add(eventConsiderationArrPtr, OneWord), offeredItemType)\n\n                // Copy calldata region with (offerToken, offerIdentifier,\n                // offerAmount) from OrderParameters to (token, identifier,\n                // amount) in SpentItem struct.\n                calldatacopy(\n                    add(eventConsiderationArrPtr, AdditionalRecipients_size),\n                    BasicOrder_offerToken_cdPtr,\n                    ThreeWords\n                )\n            }\n        }\n\n        {\n            /**\n             * Once consideration items and offer items have been handled,\n             * derive the final order hash. Memory Layout:\n             *  0x80-0x1c0: EIP712 data for order\n             *   - 0x80:   Order EIP-712 typehash (constant)\n             *   - 0xa0:   orderParameters.offerer\n             *   - 0xc0:   orderParameters.zone\n             *   - 0xe0:   keccak256(abi.encodePacked(offerHashes))\n             *   - 0x100:  keccak256(abi.encodePacked(considerationHashes))\n             *   - 0x120:  orderParameters.basicOrderType (% 4 = orderType)\n             *   - 0x140:  orderParameters.startTime\n             *   - 0x160:  orderParameters.endTime\n             *   - 0x180:  orderParameters.zoneHash\n             *   - 0x1a0:  orderParameters.salt\n             *   - 0x1c0:  orderParameters.conduitKey\n             *   - 0x1e0:  _counters[orderParameters.offerer] (from storage)\n             */\n\n            // Read the offerer from calldata and place on the stack.\n            address offerer;\n            assembly {\n                offerer := calldataload(BasicOrder_offerer_cdPtr)\n            }\n\n            // Read offerer's current counter from storage and place on stack.\n            uint256 counter = _getCounter(offerer);\n\n            // Load order typehash from runtime code and place on stack.\n            bytes32 typeHash = _ORDER_TYPEHASH;\n\n            assembly {\n                // Set the OrderItem typeHash in memory.\n                mstore(BasicOrder_order_typeHash_ptr, typeHash)\n\n                // Copy offerer and zone from OrderParameters in calldata to the\n                // Order struct.\n                calldatacopy(\n                    BasicOrder_order_offerer_ptr,\n                    BasicOrder_offerer_cdPtr,\n                    TwoWords\n                )\n\n                // Copy receivedItemsHash from zero slot to the Order struct.\n                mstore(\n                    BasicOrder_order_considerationHashes_ptr,\n                    mload(receivedItemsHash_ptr)\n                )\n\n                // Write the supplied orderType to the Order struct.\n                mstore(BasicOrder_order_orderType_ptr, orderType)\n\n                // Copy startTime, endTime, zoneHash, salt & conduit from\n                // calldata to the Order struct.\n                calldatacopy(\n                    BasicOrder_order_startTime_ptr,\n                    BasicOrder_startTime_cdPtr,\n                    FiveWords\n                )\n\n                // Write offerer's counter, retrieved from storage, to struct.\n                mstore(BasicOrder_order_counter_ptr, counter)\n\n                // Compute the EIP712 Order hash.\n                orderHash := keccak256(\n                    BasicOrder_order_typeHash_ptr,\n                    EIP712_Order_size\n                )\n            }\n        }\n\n        assembly {\n            /**\n             * After the order hash has been derived, emit OrderFulfilled event:\n             *   event OrderFulfilled(\n             *     bytes32 orderHash,\n             *     address indexed offerer,\n             *     address indexed zone,\n             *     address fulfiller,\n             *     SpentItem[] offer,\n             *       > (itemType, token, id, amount)\n             *     ReceivedItem[] consideration\n             *       > (itemType, token, id, amount, recipient)\n             *   )\n             * topic0 - OrderFulfilled event signature\n             * topic1 - offerer\n             * topic2 - zone\n             * data:\n             *  - 0x00: orderHash\n             *  - 0x20: fulfiller\n             *  - 0x40: offer arr ptr (0x80)\n             *  - 0x60: consideration arr ptr (0x120)\n             *  - 0x80: offer arr len (1)\n             *  - 0xa0: offer.itemType\n             *  - 0xc0: offer.token\n             *  - 0xe0: offer.identifier\n             *  - 0x100: offer.amount\n             *  - 0x120: 1 + recipients.length\n             *  - 0x140: recipient 0\n             */\n\n            // Derive pointer to start of OrderFulfilled event data\n            let eventDataPtr := add(\n                OrderFulfilled_baseOffset,\n                mul(\n                    calldataload(BasicOrder_additionalRecipients_length_cdPtr),\n                    OneWord\n                )\n            )\n\n            // Write the order hash to the head of the event's data region.\n            mstore(eventDataPtr, orderHash)\n\n            // Write the fulfiller (i.e. the caller) next for receiver argument.\n            mstore(add(eventDataPtr, OrderFulfilled_fulfiller_offset), caller())\n\n            // Write the SpentItem and ReceivedItem array offsets (constants).\n            mstore(\n                // SpentItem array offset\n                add(eventDataPtr, OrderFulfilled_offer_head_offset),\n                OrderFulfilled_offer_body_offset\n            )\n            mstore(\n                // ReceivedItem array offset\n                add(eventDataPtr, OrderFulfilled_consideration_head_offset),\n                OrderFulfilled_consideration_body_offset\n            )\n\n            // Derive total data size including SpentItem and ReceivedItem data.\n            // SpentItem portion is already included in the baseSize constant,\n            // as there can only be one element in the array.\n            let dataSize := add(\n                OrderFulfilled_baseSize,\n                mul(\n                    calldataload(BasicOrder_additionalRecipients_length_cdPtr),\n                    ReceivedItem_size\n                )\n            )\n\n            // Emit OrderFulfilled log with three topics (the event signature\n            // as well as the two indexed arguments, the offerer and the zone).\n            log3(\n                // Supply the pointer for event data in memory.\n                eventDataPtr,\n                // Supply the size of event data in memory.\n                dataSize,\n                // Supply the OrderFulfilled event signature.\n                OrderFulfilled_selector,\n                // Supply the first topic (the offerer).\n                calldataload(BasicOrder_offerer_cdPtr),\n                // Supply the second topic (the zone).\n                calldataload(BasicOrder_zone_cdPtr)\n            )\n\n            // Restore the zero slot.\n            mstore(ZeroSlot, 0)\n        }\n\n        // Determine whether order is restricted and, if so, that it is valid.\n        _assertRestrictedBasicOrderValidity(\n            orderHash,\n            parameters.zoneHash,\n            orderType,\n            parameters.offerer,\n            parameters.zone\n        );\n\n        // Verify and update the status of the derived order.\n        _validateBasicOrderAndUpdateStatus(\n            orderHash,\n            parameters.offerer,\n            parameters.signature\n        );\n    }\n\n    /**\n     * @dev Internal function to transfer Ether (or other native tokens) to a\n     *      given recipient as part of basic order fulfillment. Note that\n     *      conduits are not utilized for native tokens as the transferred\n     *      amount must be provided as msg.value.\n     *\n     * @param amount               The amount to transfer.\n     * @param to                   The recipient of the native token transfer.\n     * @param additionalRecipients The additional recipients of the order.\n     */\n    function _transferEthAndFinalize(\n        uint256 amount,\n        address payable to,\n        AdditionalRecipient[] calldata additionalRecipients\n    ) internal {\n        // Put ether value supplied by the caller on the stack.\n        uint256 etherRemaining = msg.value;\n\n        // Retrieve total number of additional recipients and place on stack.\n        uint256 totalAdditionalRecipients = additionalRecipients.length;\n\n        // Skip overflow check as for loop is indexed starting at zero.\n        unchecked {\n            // Iterate over each additional recipient.\n            for (uint256 i = 0; i < totalAdditionalRecipients; ++i) {\n                // Retrieve the additional recipient.\n                AdditionalRecipient calldata additionalRecipient = (\n                    additionalRecipients[i]\n                );\n\n                // Read ether amount to transfer to recipient & place on stack.\n                uint256 additionalRecipientAmount = additionalRecipient.amount;\n\n                // Ensure that sufficient Ether is available.\n                if (additionalRecipientAmount > etherRemaining) {\n                    revert InsufficientEtherSupplied();\n                }\n\n                // Transfer Ether to the additional recipient.\n                _transferEth(\n                    additionalRecipient.recipient,\n                    additionalRecipientAmount\n                );\n\n                // Reduce ether value available. Skip underflow check as\n                // subtracted value is confirmed above as less than remaining.\n                etherRemaining -= additionalRecipientAmount;\n            }\n        }\n\n        // Ensure that sufficient Ether is still available.\n        if (amount > etherRemaining) {\n            revert InsufficientEtherSupplied();\n        }\n\n        // Transfer Ether to the offerer.\n        _transferEth(to, amount);\n\n        // If any Ether remains after transfers, return it to the caller.\n        if (etherRemaining > amount) {\n            // Skip underflow check as etherRemaining > amount.\n            unchecked {\n                // Transfer remaining Ether to the caller.\n                _transferEth(payable(msg.sender), etherRemaining - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Internal function to transfer ERC20 tokens to a given recipient as\n     *      part of basic order fulfillment.\n     *\n     * @param offerer     The offerer of the fulfiller order.\n     * @param parameters  The basic order parameters.\n     * @param fromOfferer A boolean indicating whether to decrement amount from\n     *                    the offered amount.\n     * @param accumulator An open-ended array that collects transfers to execute\n     *                    against a given conduit in a single call.\n     */\n    function _transferERC20AndFinalize(\n        address offerer,\n        BasicOrderParameters calldata parameters,\n        bool fromOfferer,\n        bytes memory accumulator\n    ) internal {\n        // Declare from and to variables determined by fromOfferer value.\n        address from;\n        address to;\n\n        // Declare token and amount variables determined by fromOfferer value.\n        address token;\n        uint256 amount;\n\n        // Declare and check identifier variable within an isolated scope.\n        {\n            // Declare identifier variable determined by fromOfferer value.\n            uint256 identifier;\n\n            // Set ERC20 token transfer variables based on fromOfferer boolean.\n            if (fromOfferer) {\n                // Use offerer as from value and msg.sender as to value.\n                from = offerer;\n                to = msg.sender;\n\n                // Use offer token and related values if token is from offerer.\n                token = parameters.offerToken;\n                identifier = parameters.offerIdentifier;\n                amount = parameters.offerAmount;\n            } else {\n                // Use msg.sender as from value and offerer as to value.\n                from = msg.sender;\n                to = offerer;\n\n                // Otherwise, use consideration token and related values.\n                token = parameters.considerationToken;\n                identifier = parameters.considerationIdentifier;\n                amount = parameters.considerationAmount;\n            }\n\n            // Ensure that no identifier is supplied.\n            if (identifier != 0) {\n                revert UnusedItemParameters();\n            }\n        }\n\n        // Determine the appropriate conduit to utilize.\n        bytes32 conduitKey;\n\n        // Utilize assembly to derive conduit (if relevant) based on route.\n        assembly {\n            // Use offerer conduit if fromOfferer, fulfiller conduit otherwise.\n            conduitKey := calldataload(\n                sub(\n                    BasicOrder_fulfillerConduit_cdPtr,\n                    mul(fromOfferer, OneWord)\n                )\n            )\n        }\n\n        // Retrieve total number of additional recipients and place on stack.\n        uint256 totalAdditionalRecipients = (\n            parameters.additionalRecipients.length\n        );\n\n        // Iterate over each additional recipient.\n        for (uint256 i = 0; i < totalAdditionalRecipients; ) {\n            // Retrieve the additional recipient.\n            AdditionalRecipient calldata additionalRecipient = (\n                parameters.additionalRecipients[i]\n            );\n\n            uint256 additionalRecipientAmount = additionalRecipient.amount;\n\n            // Decrement the amount to transfer to fulfiller if indicated.\n            if (fromOfferer) {\n                amount -= additionalRecipientAmount;\n            }\n\n            // Transfer ERC20 tokens to additional recipient given approval.\n            _transferERC20(\n                token,\n                from,\n                additionalRecipient.recipient,\n                additionalRecipientAmount,\n                conduitKey,\n                accumulator\n            );\n\n            // Skip overflow check as for loop is indexed starting at zero.\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Transfer ERC20 token amount (from account must have proper approval).\n        _transferERC20(token, from, to, amount, conduitKey, accumulator);\n    }\n}\n"
    },
    "contracts/lib/Consideration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.13;\n\n// prettier-ignore\nimport {\n    ConsiderationInterface\n} from \"../interfaces/ConsiderationInterface.sol\";\n\n// prettier-ignore\nimport {\n    OrderComponents,\n    BasicOrderParameters,\n    OrderParameters,\n    Order,\n    AdvancedOrder,\n    OrderStatus,\n    CriteriaResolver,\n    Fulfillment,\n    FulfillmentComponent,\n    Execution\n} from \"./ConsiderationStructs.sol\";\n\nimport { OrderCombiner } from \"./OrderCombiner.sol\";\n\n/**\n * @title Consideration\n * @author 0age\n * @custom:coauthor d1ll0n\n * @custom:coauthor transmissions11\n * @custom:version 1.1\n * @notice Consideration is a generalized ETH/ERC20/ERC721/ERC1155 marketplace.\n *         It minimizes external calls to the greatest extent possible and\n *         provides lightweight methods for common routes as well as more\n *         flexible methods for composing advanced orders or groups of orders.\n *         Each order contains an arbitrary number of items that may be spent\n *         (the \"offer\") along with an arbitrary number of items that must be\n *         received back by the indicated recipients (the \"consideration\").\n */\ncontract Consideration is ConsiderationInterface, OrderCombiner {\n    /**\n     * @notice Derive and set hashes, reference chainId, and associated domain\n     *         separator during deployment.\n     *\n     * @param conduitController A contract that deploys conduits, or proxies\n     *                          that may optionally be used to transfer approved\n     *                          ERC20/721/1155 tokens.\n     */\n    constructor(address conduitController) OrderCombiner(conduitController) {}\n\n    /**\n     * @notice Fulfill an order offering an ERC20, ERC721, or ERC1155 item by\n     *         supplying Ether (or other native tokens), ERC20 tokens, an ERC721\n     *         item, or an ERC1155 item as consideration. Six permutations are\n     *         supported: Native token to ERC721, Native token to ERC1155, ERC20\n     *         to ERC721, ERC20 to ERC1155, ERC721 to ERC20, and ERC1155 to\n     *         ERC20 (with native tokens supplied as msg.value). For an order to\n     *         be eligible for fulfillment via this method, it must contain a\n     *         single offer item (though that item may have a greater amount if\n     *         the item is not an ERC721). An arbitrary number of \"additional\n     *         recipients\" may also be supplied which will each receive native\n     *         tokens or ERC20 items from the fulfiller as consideration. Refer\n     *         to the documentation for a more comprehensive summary of how to\n     *         utilize this method and what orders are compatible with it.\n     *\n     * @param parameters Additional information on the fulfilled order. Note\n     *                   that the offerer and the fulfiller must first approve\n     *                   this contract (or their chosen conduit if indicated)\n     *                   before any tokens can be transferred. Also note that\n     *                   contract recipients of ERC1155 consideration items must\n     *                   implement `onERC1155Received` in order to receive those\n     *                   items.\n     *\n     * @return fulfilled A boolean indicating whether the order has been\n     *                   successfully fulfilled.\n     */\n    function fulfillBasicOrder(BasicOrderParameters calldata parameters)\n        external\n        payable\n        override\n        returns (bool fulfilled)\n    {\n        // Validate and fulfill the basic order.\n        fulfilled = _validateAndFulfillBasicOrder(parameters);\n    }\n\n    /**\n     * @notice Fulfill an order with an arbitrary number of items for offer and\n     *         consideration. Note that this function does not support\n     *         criteria-based orders or partial filling of orders (though\n     *         filling the remainder of a partially-filled order is supported).\n     *\n     * @param order               The order to fulfill. Note that both the\n     *                            offerer and the fulfiller must first approve\n     *                            this contract (or the corresponding conduit if\n     *                            indicated) to transfer any relevant tokens on\n     *                            their behalf and that contracts must implement\n     *                            `onERC1155Received` to receive ERC1155 tokens\n     *                            as consideration.\n     * @param fulfillerConduitKey A bytes32 value indicating what conduit, if\n     *                            any, to source the fulfiller's token approvals\n     *                            from. The zero hash signifies that no conduit\n     *                            should be used (and direct approvals set on\n     *                            Consideration).\n     *\n     * @return fulfilled A boolean indicating whether the order has been\n     *                   successfully fulfilled.\n     */\n    function fulfillOrder(Order calldata order, bytes32 fulfillerConduitKey)\n        external\n        payable\n        override\n        returns (bool fulfilled)\n    {\n        // Convert order to \"advanced\" order, then validate and fulfill it.\n        fulfilled = _validateAndFulfillAdvancedOrder(\n            _convertOrderToAdvanced(order),\n            new CriteriaResolver[](0), // No criteria resolvers supplied.\n            fulfillerConduitKey,\n            msg.sender\n        );\n    }\n\n    /**\n     * @notice Fill an order, fully or partially, with an arbitrary number of\n     *         items for offer and consideration alongside criteria resolvers\n     *         containing specific token identifiers and associated proofs.\n     *\n     * @param advancedOrder       The order to fulfill along with the fraction\n     *                            of the order to attempt to fill. Note that\n     *                            both the offerer and the fulfiller must first\n     *                            approve this contract (or their conduit if\n     *                            indicated by the order) to transfer any\n     *                            relevant tokens on their behalf and that\n     *                            contracts must implement `onERC1155Received`\n     *                            to receive ERC1155 tokens as consideration.\n     *                            Also note that all offer and consideration\n     *                            components must have no remainder after\n     *                            multiplication of the respective amount with\n     *                            the supplied fraction for the partial fill to\n     *                            be considered valid.\n     * @param criteriaResolvers   An array where each element contains a\n     *                            reference to a specific offer or\n     *                            consideration, a token identifier, and a proof\n     *                            that the supplied token identifier is\n     *                            contained in the merkle root held by the item\n     *                            in question's criteria element. Note that an\n     *                            empty criteria indicates that any\n     *                            (transferable) token identifier on the token\n     *                            in question is valid and that no associated\n     *                            proof needs to be supplied.\n     * @param fulfillerConduitKey A bytes32 value indicating what conduit, if\n     *                            any, to source the fulfiller's token approvals\n     *                            from. The zero hash signifies that no conduit\n     *                            should be used (and direct approvals set on\n     *                            Consideration).\n     * @param recipient           The intended recipient for all received items,\n     *                            with `address(0)` indicating that the caller\n     *                            should receive the items.\n     *\n     * @return fulfilled A boolean indicating whether the order has been\n     *                   successfully fulfilled.\n     */\n    function fulfillAdvancedOrder(\n        AdvancedOrder calldata advancedOrder,\n        CriteriaResolver[] calldata criteriaResolvers,\n        bytes32 fulfillerConduitKey,\n        address recipient\n    ) external payable override returns (bool fulfilled) {\n        // Validate and fulfill the order.\n        fulfilled = _validateAndFulfillAdvancedOrder(\n            advancedOrder,\n            criteriaResolvers,\n            fulfillerConduitKey,\n            recipient == address(0) ? msg.sender : recipient\n        );\n    }\n\n    /**\n     * @notice Attempt to fill a group of orders, each with an arbitrary number\n     *         of items for offer and consideration. Any order that is not\n     *         currently active, has already been fully filled, or has been\n     *         cancelled will be omitted. Remaining offer and consideration\n     *         items will then be aggregated where possible as indicated by the\n     *         supplied offer and consideration component arrays and aggregated\n     *         items will be transferred to the fulfiller or to each intended\n     *         recipient, respectively. Note that a failing item transfer or an\n     *         issue with order formatting will cause the entire batch to fail.\n     *         Note that this function does not support criteria-based orders or\n     *         partial filling of orders (though filling the remainder of a\n     *         partially-filled order is supported).\n     *\n     * @param orders                    The orders to fulfill. Note that both\n     *                                  the offerer and the fulfiller must first\n     *                                  approve this contract (or the\n     *                                  corresponding conduit if indicated) to\n     *                                  transfer any relevant tokens on their\n     *                                  behalf and that contracts must implement\n     *                                  `onERC1155Received` to receive ERC1155\n     *                                  tokens as consideration.\n     * @param offerFulfillments         An array of FulfillmentComponent arrays\n     *                                  indicating which offer items to attempt\n     *                                  to aggregate when preparing executions.\n     * @param considerationFulfillments An array of FulfillmentComponent arrays\n     *                                  indicating which consideration items to\n     *                                  attempt to aggregate when preparing\n     *                                  executions.\n     * @param fulfillerConduitKey       A bytes32 value indicating what conduit,\n     *                                  if any, to source the fulfiller's token\n     *                                  approvals from. The zero hash signifies\n     *                                  that no conduit should be used (and\n     *                                  direct approvals set on Consideration).\n     * @param maximumFulfilled          The maximum number of orders to fulfill.\n     *\n     * @return availableOrders An array of booleans indicating if each order\n     *                         with an index corresponding to the index of the\n     *                         returned boolean was fulfillable or not.\n     * @return executions      An array of elements indicating the sequence of\n     *                         transfers performed as part of matching the given\n     *                         orders.\n     */\n    function fulfillAvailableOrders(\n        Order[] calldata orders,\n        FulfillmentComponent[][] calldata offerFulfillments,\n        FulfillmentComponent[][] calldata considerationFulfillments,\n        bytes32 fulfillerConduitKey,\n        uint256 maximumFulfilled\n    )\n        external\n        payable\n        override\n        returns (bool[] memory availableOrders, Execution[] memory executions)\n    {\n        // Convert orders to \"advanced\" orders and fulfill all available orders.\n        return\n            _fulfillAvailableAdvancedOrders(\n                _convertOrdersToAdvanced(orders), // Convert to advanced orders.\n                new CriteriaResolver[](0), // No criteria resolvers supplied.\n                offerFulfillments,\n                considerationFulfillments,\n                fulfillerConduitKey,\n                msg.sender,\n                maximumFulfilled\n            );\n    }\n\n    /**\n     * @notice Attempt to fill a group of orders, fully or partially, with an\n     *         arbitrary number of items for offer and consideration per order\n     *         alongside criteria resolvers containing specific token\n     *         identifiers and associated proofs. Any order that is not\n     *         currently active, has already been fully filled, or has been\n     *         cancelled will be omitted. Remaining offer and consideration\n     *         items will then be aggregated where possible as indicated by the\n     *         supplied offer and consideration component arrays and aggregated\n     *         items will be transferred to the fulfiller or to each intended\n     *         recipient, respectively. Note that a failing item transfer or an\n     *         issue with order formatting will cause the entire batch to fail.\n     *\n     * @param advancedOrders            The orders to fulfill along with the\n     *                                  fraction of those orders to attempt to\n     *                                  fill. Note that both the offerer and the\n     *                                  fulfiller must first approve this\n     *                                  contract (or their conduit if indicated\n     *                                  by the order) to transfer any relevant\n     *                                  tokens on their behalf and that\n     *                                  contracts must implement\n     *                                  `onERC1155Received` in order to receive\n     *                                  ERC1155 tokens as consideration. Also\n     *                                  note that all offer and consideration\n     *                                  components must have no remainder after\n     *                                  multiplication of the respective amount\n     *                                  with the supplied fraction for an\n     *                                  order's partial fill amount to be\n     *                                  considered valid.\n     * @param criteriaResolvers         An array where each element contains a\n     *                                  reference to a specific offer or\n     *                                  consideration, a token identifier, and a\n     *                                  proof that the supplied token identifier\n     *                                  is contained in the merkle root held by\n     *                                  the item in question's criteria element.\n     *                                  Note that an empty criteria indicates\n     *                                  that any (transferable) token\n     *                                  identifier on the token in question is\n     *                                  valid and that no associated proof needs\n     *                                  to be supplied.\n     * @param offerFulfillments         An array of FulfillmentComponent arrays\n     *                                  indicating which offer items to attempt\n     *                                  to aggregate when preparing executions.\n     * @param considerationFulfillments An array of FulfillmentComponent arrays\n     *                                  indicating which consideration items to\n     *                                  attempt to aggregate when preparing\n     *                                  executions.\n     * @param fulfillerConduitKey       A bytes32 value indicating what conduit,\n     *                                  if any, to source the fulfiller's token\n     *                                  approvals from. The zero hash signifies\n     *                                  that no conduit should be used (and\n     *                                  direct approvals set on Consideration).\n     * @param recipient                 The intended recipient for all received\n     *                                  items, with `address(0)` indicating that\n     *                                  the caller should receive the items.\n     * @param maximumFulfilled          The maximum number of orders to fulfill.\n     *\n     * @return availableOrders An array of booleans indicating if each order\n     *                         with an index corresponding to the index of the\n     *                         returned boolean was fulfillable or not.\n     * @return executions      An array of elements indicating the sequence of\n     *                         transfers performed as part of matching the given\n     *                         orders.\n     */\n    function fulfillAvailableAdvancedOrders(\n        AdvancedOrder[] memory advancedOrders,\n        CriteriaResolver[] calldata criteriaResolvers,\n        FulfillmentComponent[][] calldata offerFulfillments,\n        FulfillmentComponent[][] calldata considerationFulfillments,\n        bytes32 fulfillerConduitKey,\n        address recipient,\n        uint256 maximumFulfilled\n    )\n        external\n        payable\n        override\n        returns (bool[] memory availableOrders, Execution[] memory executions)\n    {\n        // Fulfill all available orders.\n        return\n            _fulfillAvailableAdvancedOrders(\n                advancedOrders,\n                criteriaResolvers,\n                offerFulfillments,\n                considerationFulfillments,\n                fulfillerConduitKey,\n                recipient == address(0) ? msg.sender : recipient,\n                maximumFulfilled\n            );\n    }\n\n    /**\n     * @notice Match an arbitrary number of orders, each with an arbitrary\n     *         number of items for offer and consideration along with a set of\n     *         fulfillments allocating offer components to consideration\n     *         components. Note that this function does not support\n     *         criteria-based or partial filling of orders (though filling the\n     *         remainder of a partially-filled order is supported).\n     *\n     * @param orders            The orders to match. Note that both the offerer\n     *                          and fulfiller on each order must first approve\n     *                          this contract (or their conduit if indicated by\n     *                          the order) to transfer any relevant tokens on\n     *                          their behalf and each consideration recipient\n     *                          must implement `onERC1155Received` in order to\n     *                          receive ERC1155 tokens.\n     * @param fulfillments      An array of elements allocating offer components\n     *                          to consideration components. Note that each\n     *                          consideration component must be fully met in\n     *                          order for the match operation to be valid.\n     *\n     * @return executions An array of elements indicating the sequence of\n     *                    transfers performed as part of matching the given\n     *                    orders.\n     */\n    function matchOrders(\n        Order[] calldata orders,\n        Fulfillment[] calldata fulfillments\n    ) external payable override returns (Execution[] memory executions) {\n        // Convert to advanced, validate, and match orders using fulfillments.\n        return\n            _matchAdvancedOrders(\n                _convertOrdersToAdvanced(orders),\n                new CriteriaResolver[](0), // No criteria resolvers supplied.\n                fulfillments\n            );\n    }\n\n    /**\n     * @notice Match an arbitrary number of full or partial orders, each with an\n     *         arbitrary number of items for offer and consideration, supplying\n     *         criteria resolvers containing specific token identifiers and\n     *         associated proofs as well as fulfillments allocating offer\n     *         components to consideration components.\n     *\n     * @param advancedOrders    The advanced orders to match. Note that both the\n     *                          offerer and fulfiller on each order must first\n     *                          approve this contract (or their conduit if\n     *                          indicated by the order) to transfer any relevant\n     *                          tokens on their behalf and each consideration\n     *                          recipient must implement `onERC1155Received` in\n     *                          order to receive ERC1155 tokens. Also note that\n     *                          the offer and consideration components for each\n     *                          order must have no remainder after multiplying\n     *                          the respective amount with the supplied fraction\n     *                          in order for the group of partial fills to be\n     *                          considered valid.\n     * @param criteriaResolvers An array where each element contains a reference\n     *                          to a specific order as well as that order's\n     *                          offer or consideration, a token identifier, and\n     *                          a proof that the supplied token identifier is\n     *                          contained in the order's merkle root. Note that\n     *                          an empty root indicates that any (transferable)\n     *                          token identifier is valid and that no associated\n     *                          proof needs to be supplied.\n     * @param fulfillments      An array of elements allocating offer components\n     *                          to consideration components. Note that each\n     *                          consideration component must be fully met in\n     *                          order for the match operation to be valid.\n     *\n     * @return executions An array of elements indicating the sequence of\n     *                    transfers performed as part of matching the given\n     *                    orders.\n     */\n    function matchAdvancedOrders(\n        AdvancedOrder[] memory advancedOrders,\n        CriteriaResolver[] calldata criteriaResolvers,\n        Fulfillment[] calldata fulfillments\n    ) external payable override returns (Execution[] memory executions) {\n        // Validate and match the advanced orders using supplied fulfillments.\n        return\n            _matchAdvancedOrders(\n                advancedOrders,\n                criteriaResolvers,\n                fulfillments\n            );\n    }\n\n    /**\n     * @notice Cancel an arbitrary number of orders. Note that only the offerer\n     *         or the zone of a given order may cancel it. Callers should ensure\n     *         that the intended order was cancelled by calling `getOrderStatus`\n     *         and confirming that `isCancelled` returns `true`.\n     *\n     * @param orders The orders to cancel.\n     *\n     * @return cancelled A boolean indicating whether the supplied orders have\n     *                   been successfully cancelled.\n     */\n    function cancel(OrderComponents[] calldata orders)\n        external\n        override\n        returns (bool cancelled)\n    {\n        // Cancel the orders.\n        cancelled = _cancel(orders);\n    }\n\n    /**\n     * @notice Validate an arbitrary number of orders, thereby registering their\n     *         signatures as valid and allowing the fulfiller to skip signature\n     *         verification on fulfillment. Note that validated orders may still\n     *         be unfulfillable due to invalid item amounts or other factors;\n     *         callers should determine whether validated orders are fulfillable\n     *         by simulating the fulfillment call prior to execution. Also note\n     *         that anyone can validate a signed order, but only the offerer can\n     *         validate an order without supplying a signature.\n     *\n     * @param orders The orders to validate.\n     *\n     * @return validated A boolean indicating whether the supplied orders have\n     *                   been successfully validated.\n     */\n    function validate(Order[] calldata orders)\n        external\n        override\n        returns (bool validated)\n    {\n        // Validate the orders.\n        validated = _validate(orders);\n    }\n\n    /**\n     * @notice Cancel all orders from a given offerer with a given zone in bulk\n     *         by incrementing a counter. Note that only the offerer may\n     *         increment the counter.\n     *\n     * @return newCounter The new counter.\n     */\n    function incrementCounter() external override returns (uint256 newCounter) {\n        // Increment current counter for the supplied offerer.\n        newCounter = _incrementCounter();\n    }\n\n    /**\n     * @notice Retrieve the order hash for a given order.\n     *\n     * @param order The components of the order.\n     *\n     * @return orderHash The order hash.\n     */\n    function getOrderHash(OrderComponents calldata order)\n        external\n        view\n        override\n        returns (bytes32 orderHash)\n    {\n        // Derive order hash by supplying order parameters along with counter.\n        orderHash = _deriveOrderHash(\n            OrderParameters(\n                order.offerer,\n                order.zone,\n                order.offer,\n                order.consideration,\n                order.orderType,\n                order.startTime,\n                order.endTime,\n                order.zoneHash,\n                order.salt,\n                order.conduitKey,\n                order.consideration.length\n            ),\n            order.counter\n        );\n    }\n\n    /**\n     * @notice Retrieve the status of a given order by hash, including whether\n     *         the order has been cancelled or validated and the fraction of the\n     *         order that has been filled.\n     *\n     * @param orderHash The order hash in question.\n     *\n     * @return isValidated A boolean indicating whether the order in question\n     *                     has been validated (i.e. previously approved or\n     *                     partially filled).\n     * @return isCancelled A boolean indicating whether the order in question\n     *                     has been cancelled.\n     * @return totalFilled The total portion of the order that has been filled\n     *                     (i.e. the \"numerator\").\n     * @return totalSize   The total size of the order that is either filled or\n     *                     unfilled (i.e. the \"denominator\").\n     */\n    function getOrderStatus(bytes32 orderHash)\n        external\n        view\n        override\n        returns (\n            bool isValidated,\n            bool isCancelled,\n            uint256 totalFilled,\n            uint256 totalSize\n        )\n    {\n        // Retrieve the order status using the order hash.\n        return _getOrderStatus(orderHash);\n    }\n\n    /**\n     * @notice Retrieve the current counter for a given offerer.\n     *\n     * @param offerer The offerer in question.\n     *\n     * @return counter The current counter.\n     */\n    function getCounter(address offerer)\n        external\n        view\n        override\n        returns (uint256 counter)\n    {\n        // Return the counter for the supplied offerer.\n        counter = _getCounter(offerer);\n    }\n\n    /**\n     * @notice Retrieve configuration information for this contract.\n     *\n     * @return version           The contract version.\n     * @return domainSeparator   The domain separator for this contract.\n     * @return conduitController The conduit Controller set for this contract.\n     */\n    function information()\n        external\n        view\n        override\n        returns (\n            string memory version,\n            bytes32 domainSeparator,\n            address conduitController\n        )\n    {\n        // Return the information for this contract.\n        return _information();\n    }\n\n    /**\n     * @notice Retrieve the name of this contract.\n     *\n     * @return contractName The name of this contract.\n     */\n    function name()\n        external\n        pure\n        override\n        returns (string memory contractName)\n    {\n        // Return the name of the contract.\n        contractName = _name();\n    }\n}\n"
    },
    "contracts/lib/ConsiderationBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.13;\n\n// prettier-ignore\nimport {\n    ConduitControllerInterface\n} from \"../interfaces/ConduitControllerInterface.sol\";\n\n// prettier-ignore\nimport {\n    ConsiderationEventsAndErrors\n} from \"../interfaces/ConsiderationEventsAndErrors.sol\";\n\nimport \"./ConsiderationConstants.sol\";\n\n/**\n * @title ConsiderationBase\n * @author 0age\n * @notice ConsiderationBase contains immutable constants and constructor logic.\n */\ncontract ConsiderationBase is ConsiderationEventsAndErrors {\n    // Precompute hashes, original chainId, and domain separator on deployment.\n    bytes32 internal immutable _NAME_HASH;\n    bytes32 internal immutable _VERSION_HASH;\n    bytes32 internal immutable _EIP_712_DOMAIN_TYPEHASH;\n    bytes32 internal immutable _OFFER_ITEM_TYPEHASH;\n    bytes32 internal immutable _CONSIDERATION_ITEM_TYPEHASH;\n    bytes32 internal immutable _ORDER_TYPEHASH;\n    uint256 internal immutable _CHAIN_ID;\n    bytes32 internal immutable _DOMAIN_SEPARATOR;\n\n    // Allow for interaction with the conduit controller.\n    ConduitControllerInterface internal immutable _CONDUIT_CONTROLLER;\n\n    // Cache the conduit creation code hash used by the conduit controller.\n    bytes32 internal immutable _CONDUIT_CREATION_CODE_HASH;\n\n    /**\n     * @dev Derive and set hashes, reference chainId, and associated domain\n     *      separator during deployment.\n     *\n     * @param conduitController A contract that deploys conduits, or proxies\n     *                          that may optionally be used to transfer approved\n     *                          ERC20/721/1155 tokens.\n     */\n    constructor(address conduitController) {\n        // Derive name and version hashes alongside required EIP-712 typehashes.\n        (\n            _NAME_HASH,\n            _VERSION_HASH,\n            _EIP_712_DOMAIN_TYPEHASH,\n            _OFFER_ITEM_TYPEHASH,\n            _CONSIDERATION_ITEM_TYPEHASH,\n            _ORDER_TYPEHASH\n        ) = _deriveTypehashes();\n\n        // Store the current chainId and derive the current domain separator.\n        _CHAIN_ID = block.chainid;\n        _DOMAIN_SEPARATOR = _deriveDomainSeparator();\n\n        // Set the supplied conduit controller.\n        _CONDUIT_CONTROLLER = ConduitControllerInterface(conduitController);\n\n        // Retrieve the conduit creation code hash from the supplied controller.\n        (_CONDUIT_CREATION_CODE_HASH, ) = (\n            _CONDUIT_CONTROLLER.getConduitCodeHashes()\n        );\n    }\n\n    /**\n     * @dev Internal view function to derive the EIP-712 domain separator.\n     *\n     * @return The derived domain separator.\n     */\n    function _deriveDomainSeparator() internal view returns (bytes32) {\n        // prettier-ignore\n        return keccak256(\n            abi.encode(\n                _EIP_712_DOMAIN_TYPEHASH,\n                _NAME_HASH,\n                _VERSION_HASH,\n                block.chainid,\n                address(this)\n            )\n        );\n    }\n\n    /**\n     * @dev Internal pure function to retrieve the default name of this\n     *      contract and return.\n     *\n     * @return The name of this contract.\n     */\n    function _name() internal pure virtual returns (string memory) {\n        // Return the name of the contract.\n        assembly {\n            // First element is the offset for the returned string. Offset the\n            // value in memory by one word so that the free memory pointer will\n            // be overwritten by the next write.\n            mstore(OneWord, OneWord)\n\n            // Name is right padded, so it touches the length which is left\n            // padded. This enables writing both values at once. The free memory\n            // pointer will be overwritten in the process.\n            mstore(NameLengthPtr, NameWithLength)\n\n            // Standard ABI encoding pads returned data to the nearest word. Use\n            // the already empty zero slot memory region for this purpose and\n            // return the final name string, offset by the original single word.\n            return(OneWord, ThreeWords)\n        }\n    }\n\n    /**\n     * @dev Internal pure function to retrieve the default name of this contract\n     *      as a string that can be used internally.\n     *\n     * @return The name of this contract.\n     */\n    function _nameString() internal pure virtual returns (string memory) {\n        // Return the name of the contract.\n        return \"Consideration\";\n    }\n\n    /**\n     * @dev Internal pure function to derive required EIP-712 typehashes and\n     *      other hashes during contract creation.\n     *\n     * @return nameHash                  The hash of the name of the contract.\n     * @return versionHash               The hash of the version string of the\n     *                                   contract.\n     * @return eip712DomainTypehash      The primary EIP-712 domain typehash.\n     * @return offerItemTypehash         The EIP-712 typehash for OfferItem\n     *                                   types.\n     * @return considerationItemTypehash The EIP-712 typehash for\n     *                                   ConsiderationItem types.\n     * @return orderTypehash             The EIP-712 typehash for Order types.\n     */\n    function _deriveTypehashes()\n        internal\n        pure\n        returns (\n            bytes32 nameHash,\n            bytes32 versionHash,\n            bytes32 eip712DomainTypehash,\n            bytes32 offerItemTypehash,\n            bytes32 considerationItemTypehash,\n            bytes32 orderTypehash\n        )\n    {\n        // Derive hash of the name of the contract.\n        nameHash = keccak256(bytes(_nameString()));\n\n        // Derive hash of the version string of the contract.\n        versionHash = keccak256(bytes(\"1.1\"));\n\n        // Construct the OfferItem type string.\n        // prettier-ignore\n        bytes memory offerItemTypeString = abi.encodePacked(\n            \"OfferItem(\",\n                \"uint8 itemType,\",\n                \"address token,\",\n                \"uint256 identifierOrCriteria,\",\n                \"uint256 startAmount,\",\n                \"uint256 endAmount\",\n            \")\"\n        );\n\n        // Construct the ConsiderationItem type string.\n        // prettier-ignore\n        bytes memory considerationItemTypeString = abi.encodePacked(\n            \"ConsiderationItem(\",\n                \"uint8 itemType,\",\n                \"address token,\",\n                \"uint256 identifierOrCriteria,\",\n                \"uint256 startAmount,\",\n                \"uint256 endAmount,\",\n                \"address recipient\",\n            \")\"\n        );\n\n        // Construct the OrderComponents type string, not including the above.\n        // prettier-ignore\n        bytes memory orderComponentsPartialTypeString = abi.encodePacked(\n            \"OrderComponents(\",\n                \"address offerer,\",\n                \"address zone,\",\n                \"OfferItem[] offer,\",\n                \"ConsiderationItem[] consideration,\",\n                \"uint8 orderType,\",\n                \"uint256 startTime,\",\n                \"uint256 endTime,\",\n                \"bytes32 zoneHash,\",\n                \"uint256 salt,\",\n                \"bytes32 conduitKey,\",\n                \"uint256 counter\",\n            \")\"\n        );\n\n        // Construct the primary EIP-712 domain type string.\n        // prettier-ignore\n        eip712DomainTypehash = keccak256(\n            abi.encodePacked(\n                \"EIP712Domain(\",\n                    \"string name,\",\n                    \"string version,\",\n                    \"uint256 chainId,\",\n                    \"address verifyingContract\",\n                \")\"\n            )\n        );\n\n        // Derive the OfferItem type hash using the corresponding type string.\n        offerItemTypehash = keccak256(offerItemTypeString);\n\n        // Derive ConsiderationItem type hash using corresponding type string.\n        considerationItemTypehash = keccak256(considerationItemTypeString);\n\n        // Derive OrderItem type hash via combination of relevant type strings.\n        orderTypehash = keccak256(\n            abi.encodePacked(\n                orderComponentsPartialTypeString,\n                considerationItemTypeString,\n                offerItemTypeString\n            )\n        );\n    }\n}\n"
    },
    "contracts/lib/ConsiderationConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\n/*\n * -------------------------- Disambiguation & Other Notes ---------------------\n *    - The term \"head\" is used as it is in the documentation for ABI encoding,\n *      but only in reference to dynamic types, i.e. it always refers to the\n *      offset or pointer to the body of a dynamic type. In calldata, the head\n *      is always an offset (relative to the parent object), while in memory,\n *      the head is always the pointer to the body. More information found here:\n *      https://docs.soliditylang.org/en/v0.8.14/abi-spec.html#argument-encoding\n *        - Note that the length of an array is separate from and precedes the\n *          head of the array.\n *\n *    - The term \"body\" is used in place of the term \"head\" used in the ABI\n *      documentation. It refers to the start of the data for a dynamic type,\n *      e.g. the first word of a struct or the first word of the first element\n *      in an array.\n *\n *    - The term \"pointer\" is used to describe the absolute position of a value\n *      and never an offset relative to another value.\n *        - The suffix \"_ptr\" refers to a memory pointer.\n *        - The suffix \"_cdPtr\" refers to a calldata pointer.\n *\n *    - The term \"offset\" is used to describe the position of a value relative\n *      to some parent value. For example, OrderParameters_conduit_offset is the\n *      offset to the \"conduit\" value in the OrderParameters struct relative to\n *      the start of the body.\n *        - Note: Offsets are used to derive pointers.\n *\n *    - Some structs have pointers defined for all of their fields in this file.\n *      Lines which are commented out are fields that are not used in the\n *      codebase but have been left in for readability.\n */\n\n// Declare constants for name, version, and reentrancy sentinel values.\n\n// Name is right padded, so it touches the length which is left padded. This\n// enables writing both values at once. Length goes at byte 95 in memory, and\n// name fills bytes 96-109, so both values can be written left-padded to 77.\nuint256 constant NameLengthPtr = 77;\nuint256 constant NameWithLength = 0x0d436F6E73696465726174696F6E;\n\nuint256 constant Version = 0x312e31;\nuint256 constant Version_length = 3;\nuint256 constant Version_shift = 0xe8;\n\nuint256 constant _NOT_ENTERED = 1;\nuint256 constant _ENTERED = 2;\n\n// Common Offsets\n// Offsets for identically positioned fields shared by:\n// OfferItem, ConsiderationItem, SpentItem, ReceivedItem\n\nuint256 constant Common_token_offset = 0x20;\nuint256 constant Common_identifier_offset = 0x40;\nuint256 constant Common_amount_offset = 0x60;\n\nuint256 constant ReceivedItem_size = 0xa0;\nuint256 constant ReceivedItem_amount_offset = 0x60;\nuint256 constant ReceivedItem_recipient_offset = 0x80;\n\nuint256 constant ReceivedItem_CommonParams_size = 0x60;\n\nuint256 constant ConsiderationItem_recipient_offset = 0xa0;\n// Store the same constant in an abbreviated format for a line length fix.\nuint256 constant ConsiderItem_recipient_offset = 0xa0;\n\nuint256 constant Execution_offerer_offset = 0x20;\nuint256 constant Execution_conduit_offset = 0x40;\n\nuint256 constant InvalidFulfillmentComponentData_error_signature = (\n    0x7fda727900000000000000000000000000000000000000000000000000000000\n);\nuint256 constant InvalidFulfillmentComponentData_error_len = 0x04;\n\nuint256 constant Panic_error_signature = (\n    0x4e487b7100000000000000000000000000000000000000000000000000000000\n);\nuint256 constant Panic_error_offset = 0x04;\nuint256 constant Panic_error_length = 0x24;\nuint256 constant Panic_arithmetic = 0x11;\n\nuint256 constant MissingItemAmount_error_signature = (\n    0x91b3e51400000000000000000000000000000000000000000000000000000000\n);\nuint256 constant MissingItemAmount_error_len = 0x04;\n\nuint256 constant OrderParameters_offer_head_offset = 0x40;\nuint256 constant OrderParameters_consideration_head_offset = 0x60;\nuint256 constant OrderParameters_conduit_offset = 0x120;\nuint256 constant OrderParameters_counter_offset = 0x140;\n\nuint256 constant Fulfillment_itemIndex_offset = 0x20;\n\nuint256 constant AdvancedOrder_numerator_offset = 0x20;\n\nuint256 constant AlmostOneWord = 0x1f;\nuint256 constant OneWord = 0x20;\nuint256 constant TwoWords = 0x40;\nuint256 constant ThreeWords = 0x60;\nuint256 constant FourWords = 0x80;\nuint256 constant FiveWords = 0xa0;\n\nuint256 constant FreeMemoryPointerSlot = 0x40;\nuint256 constant ZeroSlot = 0x60;\nuint256 constant DefaultFreeMemoryPointer = 0x80;\n\nuint256 constant Slot0x80 = 0x80;\nuint256 constant Slot0xA0 = 0xa0;\n\nuint256 constant BasicOrder_endAmount_cdPtr = 0x104;\nuint256 constant BasicOrder_common_params_size = 0xa0;\nuint256 constant BasicOrder_considerationHashesArray_ptr = 0x160;\n\nuint256 constant EIP712_Order_size = 0x180;\nuint256 constant EIP712_OfferItem_size = 0xc0;\nuint256 constant EIP712_ConsiderationItem_size = 0xe0;\nuint256 constant AdditionalRecipients_size = 0x40;\n\nuint256 constant EIP712_DomainSeparator_offset = 0x02;\nuint256 constant EIP712_OrderHash_offset = 0x22;\nuint256 constant EIP712_DigestPayload_size = 0x42;\n\nuint256 constant receivedItemsHash_ptr = 0x60;\n\n/*\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\n *  data for OrderFulfilled\n *\n *   event OrderFulfilled(\n *     bytes32 orderHash,\n *     address indexed offerer,\n *     address indexed zone,\n *     address fulfiller,\n *     SpentItem[] offer,\n *       > (itemType, token, id, amount)\n *     ReceivedItem[] consideration\n *       > (itemType, token, id, amount, recipient)\n *   )\n *\n *  - 0x00: orderHash\n *  - 0x20: fulfiller\n *  - 0x40: offer offset (0x80)\n *  - 0x60: consideration offset (0x120)\n *  - 0x80: offer.length (1)\n *  - 0xa0: offerItemType\n *  - 0xc0: offerToken\n *  - 0xe0: offerIdentifier\n *  - 0x100: offerAmount\n *  - 0x120: consideration.length (1 + additionalRecipients.length)\n *  - 0x140: considerationItemType\n *  - 0x160: considerationToken\n *  - 0x180: considerationIdentifier\n *  - 0x1a0: considerationAmount\n *  - 0x1c0: considerationRecipient\n *  - ...\n */\n\n// Minimum length of the OrderFulfilled event data.\n// Must be added to the size of the ReceivedItem array for additionalRecipients\n// (0xa0 * additionalRecipients.length) to calculate full size of the buffer.\nuint256 constant OrderFulfilled_baseSize = 0x1e0;\nuint256 constant OrderFulfilled_selector = (\n    0x9d9af8e38d66c62e2c12f0225249fd9d721c54b83f48d9352c97c6cacdcb6f31\n);\n\n// Minimum offset in memory to OrderFulfilled event data.\n// Must be added to the size of the EIP712 hash array for additionalRecipients\n// (32 * additionalRecipients.length) to calculate the pointer to event data.\nuint256 constant OrderFulfilled_baseOffset = 0x180;\nuint256 constant OrderFulfilled_consideration_length_baseOffset = 0x2a0;\nuint256 constant OrderFulfilled_offer_length_baseOffset = 0x200;\n\n// uint256 constant OrderFulfilled_orderHash_offset = 0x00;\nuint256 constant OrderFulfilled_fulfiller_offset = 0x20;\nuint256 constant OrderFulfilled_offer_head_offset = 0x40;\nuint256 constant OrderFulfilled_offer_body_offset = 0x80;\nuint256 constant OrderFulfilled_consideration_head_offset = 0x60;\nuint256 constant OrderFulfilled_consideration_body_offset = 0x120;\n\n// BasicOrderParameters\nuint256 constant BasicOrder_parameters_cdPtr = 0x04;\nuint256 constant BasicOrder_considerationToken_cdPtr = 0x24;\n// uint256 constant BasicOrder_considerationIdentifier_cdPtr = 0x44;\nuint256 constant BasicOrder_considerationAmount_cdPtr = 0x64;\nuint256 constant BasicOrder_offerer_cdPtr = 0x84;\nuint256 constant BasicOrder_zone_cdPtr = 0xa4;\nuint256 constant BasicOrder_offerToken_cdPtr = 0xc4;\n// uint256 constant BasicOrder_offerIdentifier_cdPtr = 0xe4;\nuint256 constant BasicOrder_offerAmount_cdPtr = 0x104;\nuint256 constant BasicOrder_basicOrderType_cdPtr = 0x124;\nuint256 constant BasicOrder_startTime_cdPtr = 0x144;\n// uint256 constant BasicOrder_endTime_cdPtr = 0x164;\n// uint256 constant BasicOrder_zoneHash_cdPtr = 0x184;\n// uint256 constant BasicOrder_salt_cdPtr = 0x1a4;\nuint256 constant BasicOrder_offererConduit_cdPtr = 0x1c4;\nuint256 constant BasicOrder_fulfillerConduit_cdPtr = 0x1e4;\nuint256 constant BasicOrder_totalOriginalAdditionalRecipients_cdPtr = 0x204;\nuint256 constant BasicOrder_additionalRecipients_head_cdPtr = 0x224;\nuint256 constant BasicOrder_signature_cdPtr = 0x244;\nuint256 constant BasicOrder_additionalRecipients_length_cdPtr = 0x264;\nuint256 constant BasicOrder_additionalRecipients_data_cdPtr = 0x284;\n\nuint256 constant BasicOrder_parameters_ptr = 0x20;\n\nuint256 constant BasicOrder_basicOrderType_range = 0x18; // 24 values\n\n/*\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\n *  EIP712 data for ConsiderationItem\n *   - 0x80: ConsiderationItem EIP-712 typehash (constant)\n *   - 0xa0: itemType\n *   - 0xc0: token\n *   - 0xe0: identifier\n *   - 0x100: startAmount\n *   - 0x120: endAmount\n *   - 0x140: recipient\n */\nuint256 constant BasicOrder_considerationItem_typeHash_ptr = 0x80; // memoryPtr\nuint256 constant BasicOrder_considerationItem_itemType_ptr = 0xa0;\nuint256 constant BasicOrder_considerationItem_token_ptr = 0xc0;\nuint256 constant BasicOrder_considerationItem_identifier_ptr = 0xe0;\nuint256 constant BasicOrder_considerationItem_startAmount_ptr = 0x100;\nuint256 constant BasicOrder_considerationItem_endAmount_ptr = 0x120;\n// uint256 constant BasicOrder_considerationItem_recipient_ptr = 0x140;\n\n/*\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\n *  EIP712 data for OfferItem\n *   - 0x80:  OfferItem EIP-712 typehash (constant)\n *   - 0xa0:  itemType\n *   - 0xc0:  token\n *   - 0xe0:  identifier (reused for offeredItemsHash)\n *   - 0x100: startAmount\n *   - 0x120: endAmount\n */\nuint256 constant BasicOrder_offerItem_typeHash_ptr = DefaultFreeMemoryPointer;\nuint256 constant BasicOrder_offerItem_itemType_ptr = 0xa0;\nuint256 constant BasicOrder_offerItem_token_ptr = 0xc0;\n// uint256 constant BasicOrder_offerItem_identifier_ptr = 0xe0;\n// uint256 constant BasicOrder_offerItem_startAmount_ptr = 0x100;\nuint256 constant BasicOrder_offerItem_endAmount_ptr = 0x120;\n\n/*\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\n *  EIP712 data for Order\n *   - 0x80:   Order EIP-712 typehash (constant)\n *   - 0xa0:   orderParameters.offerer\n *   - 0xc0:   orderParameters.zone\n *   - 0xe0:   keccak256(abi.encodePacked(offerHashes))\n *   - 0x100:  keccak256(abi.encodePacked(considerationHashes))\n *   - 0x120:  orderType\n *   - 0x140:  startTime\n *   - 0x160:  endTime\n *   - 0x180:  zoneHash\n *   - 0x1a0:  salt\n *   - 0x1c0:  conduit\n *   - 0x1e0:  _counters[orderParameters.offerer] (from storage)\n */\nuint256 constant BasicOrder_order_typeHash_ptr = 0x80;\nuint256 constant BasicOrder_order_offerer_ptr = 0xa0;\n// uint256 constant BasicOrder_order_zone_ptr = 0xc0;\nuint256 constant BasicOrder_order_offerHashes_ptr = 0xe0;\nuint256 constant BasicOrder_order_considerationHashes_ptr = 0x100;\nuint256 constant BasicOrder_order_orderType_ptr = 0x120;\nuint256 constant BasicOrder_order_startTime_ptr = 0x140;\n// uint256 constant BasicOrder_order_endTime_ptr = 0x160;\n// uint256 constant BasicOrder_order_zoneHash_ptr = 0x180;\n// uint256 constant BasicOrder_order_salt_ptr = 0x1a0;\n// uint256 constant BasicOrder_order_conduitKey_ptr = 0x1c0;\nuint256 constant BasicOrder_order_counter_ptr = 0x1e0;\nuint256 constant BasicOrder_additionalRecipients_head_ptr = 0x240;\nuint256 constant BasicOrder_signature_ptr = 0x260;\n\n// Signature-related\nbytes32 constant EIP2098_allButHighestBitMask = (\n    0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n);\nbytes32 constant ECDSA_twentySeventhAndTwentyEighthBytesSet = (\n    0x0000000000000000000000000000000000000000000000000000000101000000\n);\nuint256 constant ECDSA_MaxLength = 65;\nuint256 constant ECDSA_signature_s_offset = 0x40;\nuint256 constant ECDSA_signature_v_offset = 0x60;\n\nbytes32 constant EIP1271_isValidSignature_selector = (\n    0x1626ba7e00000000000000000000000000000000000000000000000000000000\n);\nuint256 constant EIP1271_isValidSignature_signatureHead_negativeOffset = 0x20;\nuint256 constant EIP1271_isValidSignature_digest_negativeOffset = 0x40;\nuint256 constant EIP1271_isValidSignature_selector_negativeOffset = 0x44;\nuint256 constant EIP1271_isValidSignature_calldata_baseLength = 0x64;\n\nuint256 constant EIP1271_isValidSignature_signature_head_offset = 0x40;\n\n// abi.encodeWithSignature(\"NoContract(address)\")\nuint256 constant NoContract_error_signature = (\n    0x5f15d67200000000000000000000000000000000000000000000000000000000\n);\nuint256 constant NoContract_error_sig_ptr = 0x0;\nuint256 constant NoContract_error_token_ptr = 0x4;\nuint256 constant NoContract_error_length = 0x24; // 4 + 32 == 36\n\nuint256 constant EIP_712_PREFIX = (\n    0x1901000000000000000000000000000000000000000000000000000000000000\n);\n\nuint256 constant ExtraGasBuffer = 0x20;\nuint256 constant CostPerWord = 3;\nuint256 constant MemoryExpansionCoefficient = 0x200; // 512\n\nuint256 constant Create2AddressDerivation_ptr = 0x0b;\nuint256 constant Create2AddressDerivation_length = 0x55;\n\nuint256 constant MaskOverByteTwelve = (\n    0x0000000000000000000000ff0000000000000000000000000000000000000000\n);\n\nuint256 constant MaskOverLastTwentyBytes = (\n    0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff\n);\n\nuint256 constant MaskOverFirstFourBytes = (\n    0xffffffff00000000000000000000000000000000000000000000000000000000\n);\n\nuint256 constant Conduit_execute_signature = (\n    0x4ce34aa200000000000000000000000000000000000000000000000000000000\n);\n\nuint256 constant MaxUint8 = 0xff;\nuint256 constant MaxUint120 = 0xffffffffffffffffffffffffffffff;\n\nuint256 constant Conduit_execute_ConduitTransfer_ptr = 0x20;\nuint256 constant Conduit_execute_ConduitTransfer_length = 0x01;\n\nuint256 constant Conduit_execute_ConduitTransfer_offset_ptr = 0x04;\nuint256 constant Conduit_execute_ConduitTransfer_length_ptr = 0x24;\nuint256 constant Conduit_execute_transferItemType_ptr = 0x44;\nuint256 constant Conduit_execute_transferToken_ptr = 0x64;\nuint256 constant Conduit_execute_transferFrom_ptr = 0x84;\nuint256 constant Conduit_execute_transferTo_ptr = 0xa4;\nuint256 constant Conduit_execute_transferIdentifier_ptr = 0xc4;\nuint256 constant Conduit_execute_transferAmount_ptr = 0xe4;\n\nuint256 constant OneConduitExecute_size = 0x104;\n\n// Sentinel value to indicate that the conduit accumulator is not armed.\nuint256 constant AccumulatorDisarmed = 0x20;\nuint256 constant AccumulatorArmed = 0x40;\nuint256 constant Accumulator_conduitKey_ptr = 0x20;\nuint256 constant Accumulator_selector_ptr = 0x40;\nuint256 constant Accumulator_array_offset_ptr = 0x44;\nuint256 constant Accumulator_array_length_ptr = 0x64;\n\nuint256 constant Accumulator_itemSizeOffsetDifference = 0x3c;\n\nuint256 constant Accumulator_array_offset = 0x20;\nuint256 constant Conduit_transferItem_size = 0xc0;\nuint256 constant Conduit_transferItem_token_ptr = 0x20;\nuint256 constant Conduit_transferItem_from_ptr = 0x40;\nuint256 constant Conduit_transferItem_to_ptr = 0x60;\nuint256 constant Conduit_transferItem_identifier_ptr = 0x80;\nuint256 constant Conduit_transferItem_amount_ptr = 0xa0;\n\n// Declare constant for errors related to amount derivation.\n// error InexactFraction() @ AmountDerivationErrors.sol\nuint256 constant InexactFraction_error_signature = (\n    0xc63cf08900000000000000000000000000000000000000000000000000000000\n);\nuint256 constant InexactFraction_error_len = 0x04;\n\n// Declare constant for errors related to signature verification.\nuint256 constant Ecrecover_precompile = 1;\nuint256 constant Ecrecover_args_size = 0x80;\nuint256 constant Signature_lower_v = 27;\n\n// error BadSignatureV(uint8) @ SignatureVerificationErrors.sol\nuint256 constant BadSignatureV_error_signature = (\n    0x1f003d0a00000000000000000000000000000000000000000000000000000000\n);\nuint256 constant BadSignatureV_error_offset = 0x04;\nuint256 constant BadSignatureV_error_length = 0x24;\n\n// error InvalidSigner() @ SignatureVerificationErrors.sol\nuint256 constant InvalidSigner_error_signature = (\n    0x815e1d6400000000000000000000000000000000000000000000000000000000\n);\nuint256 constant InvalidSigner_error_length = 0x04;\n\n// error InvalidSignature() @ SignatureVerificationErrors.sol\nuint256 constant InvalidSignature_error_signature = (\n    0x8baa579f00000000000000000000000000000000000000000000000000000000\n);\nuint256 constant InvalidSignature_error_length = 0x04;\n\n// error BadContractSignature() @ SignatureVerificationErrors.sol\nuint256 constant BadContractSignature_error_signature = (\n    0x4f7fb80d00000000000000000000000000000000000000000000000000000000\n);\nuint256 constant BadContractSignature_error_length = 0x04;\n\nuint256 constant NumBitsAfterSelector = 0xe0;\n\n// 69 is the lowest modulus for which the remainder\n// of every selector other than the two match functions\n// is greater than those of the match functions.\nuint256 constant NonMatchSelector_MagicModulus = 69;\n// Of the two match function selectors, the highest\n// remainder modulo 69 is 29.\nuint256 constant NonMatchSelector_MagicRemainder = 0x1d;\n"
    },
    "contracts/lib/ConsiderationEnums.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\n// prettier-ignore\nenum OrderType {\n    // 0: no partial fills, anyone can execute\n    FULL_OPEN,\n\n    // 1: partial fills supported, anyone can execute\n    PARTIAL_OPEN,\n\n    // 2: no partial fills, only offerer or zone can execute\n    FULL_RESTRICTED,\n\n    // 3: partial fills supported, only offerer or zone can execute\n    PARTIAL_RESTRICTED\n}\n\n// prettier-ignore\nenum BasicOrderType {\n    // 0: no partial fills, anyone can execute\n    ETH_TO_ERC721_FULL_OPEN,\n\n    // 1: partial fills supported, anyone can execute\n    ETH_TO_ERC721_PARTIAL_OPEN,\n\n    // 2: no partial fills, only offerer or zone can execute\n    ETH_TO_ERC721_FULL_RESTRICTED,\n\n    // 3: partial fills supported, only offerer or zone can execute\n    ETH_TO_ERC721_PARTIAL_RESTRICTED,\n\n    // 4: no partial fills, anyone can execute\n    ETH_TO_ERC1155_FULL_OPEN,\n\n    // 5: partial fills supported, anyone can execute\n    ETH_TO_ERC1155_PARTIAL_OPEN,\n\n    // 6: no partial fills, only offerer or zone can execute\n    ETH_TO_ERC1155_FULL_RESTRICTED,\n\n    // 7: partial fills supported, only offerer or zone can execute\n    ETH_TO_ERC1155_PARTIAL_RESTRICTED,\n\n    // 8: no partial fills, anyone can execute\n    ERC20_TO_ERC721_FULL_OPEN,\n\n    // 9: partial fills supported, anyone can execute\n    ERC20_TO_ERC721_PARTIAL_OPEN,\n\n    // 10: no partial fills, only offerer or zone can execute\n    ERC20_TO_ERC721_FULL_RESTRICTED,\n\n    // 11: partial fills supported, only offerer or zone can execute\n    ERC20_TO_ERC721_PARTIAL_RESTRICTED,\n\n    // 12: no partial fills, anyone can execute\n    ERC20_TO_ERC1155_FULL_OPEN,\n\n    // 13: partial fills supported, anyone can execute\n    ERC20_TO_ERC1155_PARTIAL_OPEN,\n\n    // 14: no partial fills, only offerer or zone can execute\n    ERC20_TO_ERC1155_FULL_RESTRICTED,\n\n    // 15: partial fills supported, only offerer or zone can execute\n    ERC20_TO_ERC1155_PARTIAL_RESTRICTED,\n\n    // 16: no partial fills, anyone can execute\n    ERC721_TO_ERC20_FULL_OPEN,\n\n    // 17: partial fills supported, anyone can execute\n    ERC721_TO_ERC20_PARTIAL_OPEN,\n\n    // 18: no partial fills, only offerer or zone can execute\n    ERC721_TO_ERC20_FULL_RESTRICTED,\n\n    // 19: partial fills supported, only offerer or zone can execute\n    ERC721_TO_ERC20_PARTIAL_RESTRICTED,\n\n    // 20: no partial fills, anyone can execute\n    ERC1155_TO_ERC20_FULL_OPEN,\n\n    // 21: partial fills supported, anyone can execute\n    ERC1155_TO_ERC20_PARTIAL_OPEN,\n\n    // 22: no partial fills, only offerer or zone can execute\n    ERC1155_TO_ERC20_FULL_RESTRICTED,\n\n    // 23: partial fills supported, only offerer or zone can execute\n    ERC1155_TO_ERC20_PARTIAL_RESTRICTED\n}\n\n// prettier-ignore\nenum BasicOrderRouteType {\n    // 0: provide Ether (or other native token) to receive offered ERC721 item.\n    ETH_TO_ERC721,\n\n    // 1: provide Ether (or other native token) to receive offered ERC1155 item.\n    ETH_TO_ERC1155,\n\n    // 2: provide ERC20 item to receive offered ERC721 item.\n    ERC20_TO_ERC721,\n\n    // 3: provide ERC20 item to receive offered ERC1155 item.\n    ERC20_TO_ERC1155,\n\n    // 4: provide ERC721 item to receive offered ERC20 item.\n    ERC721_TO_ERC20,\n\n    // 5: provide ERC1155 item to receive offered ERC20 item.\n    ERC1155_TO_ERC20\n}\n\n// prettier-ignore\nenum ItemType {\n    // 0: ETH on mainnet, MATIC on polygon, etc.\n    NATIVE,\n\n    // 1: ERC20 items (ERC777 and ERC20 analogues could also technically work)\n    ERC20,\n\n    // 2: ERC721 items\n    ERC721,\n\n    // 3: ERC1155 items\n    ERC1155,\n\n    // 4: ERC721 items where a number of tokenIds are supported\n    ERC721_WITH_CRITERIA,\n\n    // 5: ERC1155 items where a number of ids are supported\n    ERC1155_WITH_CRITERIA\n}\n\n// prettier-ignore\nenum Side {\n    // 0: Items that can be spent\n    OFFER,\n\n    // 1: Items that must be received\n    CONSIDERATION\n}\n"
    },
    "contracts/lib/ConsiderationStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\n// prettier-ignore\nimport {\n    OrderType,\n    BasicOrderType,\n    ItemType,\n    Side\n} from \"./ConsiderationEnums.sol\";\n\n/**\n * @dev An order contains eleven components: an offerer, a zone (or account that\n *      can cancel the order or restrict who can fulfill the order depending on\n *      the type), the order type (specifying partial fill support as well as\n *      restricted order status), the start and end time, a hash that will be\n *      provided to the zone when validating restricted orders, a salt, a key\n *      corresponding to a given conduit, a counter, and an arbitrary number of\n *      offer items that can be spent along with consideration items that must\n *      be received by their respective recipient.\n */\nstruct OrderComponents {\n    address offerer;\n    address zone;\n    OfferItem[] offer;\n    ConsiderationItem[] consideration;\n    OrderType orderType;\n    uint256 startTime;\n    uint256 endTime;\n    bytes32 zoneHash;\n    uint256 salt;\n    bytes32 conduitKey;\n    uint256 counter;\n}\n\n/**\n * @dev An offer item has five components: an item type (ETH or other native\n *      tokens, ERC20, ERC721, and ERC1155, as well as criteria-based ERC721 and\n *      ERC1155), a token address, a dual-purpose \"identifierOrCriteria\"\n *      component that will either represent a tokenId or a merkle root\n *      depending on the item type, and a start and end amount that support\n *      increasing or decreasing amounts over the duration of the respective\n *      order.\n */\nstruct OfferItem {\n    ItemType itemType;\n    address token;\n    uint256 identifierOrCriteria;\n    uint256 startAmount;\n    uint256 endAmount;\n}\n\n/**\n * @dev A consideration item has the same five components as an offer item and\n *      an additional sixth component designating the required recipient of the\n *      item.\n */\nstruct ConsiderationItem {\n    ItemType itemType;\n    address token;\n    uint256 identifierOrCriteria;\n    uint256 startAmount;\n    uint256 endAmount;\n    address payable recipient;\n}\n\n/**\n * @dev A spent item is translated from a utilized offer item and has four\n *      components: an item type (ETH or other native tokens, ERC20, ERC721, and\n *      ERC1155), a token address, a tokenId, and an amount.\n */\nstruct SpentItem {\n    ItemType itemType;\n    address token;\n    uint256 identifier;\n    uint256 amount;\n}\n\n/**\n * @dev A received item is translated from a utilized consideration item and has\n *      the same four components as a spent item, as well as an additional fifth\n *      component designating the required recipient of the item.\n */\nstruct ReceivedItem {\n    ItemType itemType;\n    address token;\n    uint256 identifier;\n    uint256 amount;\n    address payable recipient;\n}\n\n/**\n * @dev For basic orders involving ETH / native / ERC20 <=> ERC721 / ERC1155\n *      matching, a group of six functions may be called that only requires a\n *      subset of the usual order arguments. Note the use of a \"basicOrderType\"\n *      enum; this represents both the usual order type as well as the \"route\"\n *      of the basic order (a simple derivation function for the basic order\n *      type is `basicOrderType = orderType + (4 * basicOrderRoute)`.)\n */\nstruct BasicOrderParameters {\n    // calldata offset\n    address considerationToken; // 0x24\n    uint256 considerationIdentifier; // 0x44\n    uint256 considerationAmount; // 0x64\n    address payable offerer; // 0x84\n    address zone; // 0xa4\n    address offerToken; // 0xc4\n    uint256 offerIdentifier; // 0xe4\n    uint256 offerAmount; // 0x104\n    BasicOrderType basicOrderType; // 0x124\n    uint256 startTime; // 0x144\n    uint256 endTime; // 0x164\n    bytes32 zoneHash; // 0x184\n    uint256 salt; // 0x1a4\n    bytes32 offererConduitKey; // 0x1c4\n    bytes32 fulfillerConduitKey; // 0x1e4\n    uint256 totalOriginalAdditionalRecipients; // 0x204\n    AdditionalRecipient[] additionalRecipients; // 0x224\n    bytes signature; // 0x244\n    // Total length, excluding dynamic array data: 0x264 (580)\n}\n\n/**\n * @dev Basic orders can supply any number of additional recipients, with the\n *      implied assumption that they are supplied from the offered ETH (or other\n *      native token) or ERC20 token for the order.\n */\nstruct AdditionalRecipient {\n    uint256 amount;\n    address payable recipient;\n}\n\n/**\n * @dev The full set of order components, with the exception of the counter,\n *      must be supplied when fulfilling more sophisticated orders or groups of\n *      orders. The total number of original consideration items must also be\n *      supplied, as the caller may specify additional consideration items.\n */\nstruct OrderParameters {\n    address offerer; // 0x00\n    address zone; // 0x20\n    OfferItem[] offer; // 0x40\n    ConsiderationItem[] consideration; // 0x60\n    OrderType orderType; // 0x80\n    uint256 startTime; // 0xa0\n    uint256 endTime; // 0xc0\n    bytes32 zoneHash; // 0xe0\n    uint256 salt; // 0x100\n    bytes32 conduitKey; // 0x120\n    uint256 totalOriginalConsiderationItems; // 0x140\n    // offer.length                          // 0x160\n}\n\n/**\n * @dev Orders require a signature in addition to the other order parameters.\n */\nstruct Order {\n    OrderParameters parameters;\n    bytes signature;\n}\n\n/**\n * @dev Advanced orders include a numerator (i.e. a fraction to attempt to fill)\n *      and a denominator (the total size of the order) in addition to the\n *      signature and other order parameters. It also supports an optional field\n *      for supplying extra data; this data will be included in a staticcall to\n *      `isValidOrderIncludingExtraData` on the zone for the order if the order\n *      type is restricted and the offerer or zone are not the caller.\n */\nstruct AdvancedOrder {\n    OrderParameters parameters;\n    uint120 numerator;\n    uint120 denominator;\n    bytes signature;\n    bytes extraData;\n}\n\n/**\n * @dev Orders can be validated (either explicitly via `validate`, or as a\n *      consequence of a full or partial fill), specifically cancelled (they can\n *      also be cancelled in bulk via incrementing a per-zone counter), and\n *      partially or fully filled (with the fraction filled represented by a\n *      numerator and denominator).\n */\nstruct OrderStatus {\n    bool isValidated;\n    bool isCancelled;\n    uint120 numerator;\n    uint120 denominator;\n}\n\n/**\n * @dev A criteria resolver specifies an order, side (offer vs. consideration),\n *      and item index. It then provides a chosen identifier (i.e. tokenId)\n *      alongside a merkle proof demonstrating the identifier meets the required\n *      criteria.\n */\nstruct CriteriaResolver {\n    uint256 orderIndex;\n    Side side;\n    uint256 index;\n    uint256 identifier;\n    bytes32[] criteriaProof;\n}\n\n/**\n * @dev A fulfillment is applied to a group of orders. It decrements a series of\n *      offer and consideration items, then generates a single execution\n *      element. A given fulfillment can be applied to as many offer and\n *      consideration items as desired, but must contain at least one offer and\n *      at least one consideration that match. The fulfillment must also remain\n *      consistent on all key parameters across all offer items (same offerer,\n *      token, type, tokenId, and conduit preference) as well as across all\n *      consideration items (token, type, tokenId, and recipient).\n */\nstruct Fulfillment {\n    FulfillmentComponent[] offerComponents;\n    FulfillmentComponent[] considerationComponents;\n}\n\n/**\n * @dev Each fulfillment component contains one index referencing a specific\n *      order and another referencing a specific offer or consideration item.\n */\nstruct FulfillmentComponent {\n    uint256 orderIndex;\n    uint256 itemIndex;\n}\n\n/**\n * @dev An execution is triggered once all consideration items have been zeroed\n *      out. It sends the item in question from the offerer to the item's\n *      recipient, optionally sourcing approvals from either this contract\n *      directly or from the offerer's chosen conduit if one is specified. An\n *      execution is not provided as an argument, but rather is derived via\n *      orders, criteria resolvers, and fulfillments (where the total number of\n *      executions will be less than or equal to the total number of indicated\n *      fulfillments) and returned as part of `matchOrders`.\n */\nstruct Execution {\n    ReceivedItem item;\n    address offerer;\n    bytes32 conduitKey;\n}\n"
    },
    "contracts/lib/CounterManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.13;\n\n// prettier-ignore\nimport {\n    ConsiderationEventsAndErrors\n} from \"../interfaces/ConsiderationEventsAndErrors.sol\";\n\nimport { ReentrancyGuard } from \"./ReentrancyGuard.sol\";\n\n/**\n * @title CounterManager\n * @author 0age\n * @notice CounterManager contains a storage mapping and related functionality\n *         for retrieving and incrementing a per-offerer counter.\n */\ncontract CounterManager is ConsiderationEventsAndErrors, ReentrancyGuard {\n    // Only orders signed using an offerer's current counter are fulfillable.\n    mapping(address => uint256) private _counters;\n\n    /**\n     * @dev Internal function to cancel all orders from a given offerer with a\n     *      given zone in bulk by incrementing a counter. Note that only the\n     *      offerer may increment the counter.\n     *\n     * @return newCounter The new counter.\n     */\n    function _incrementCounter() internal returns (uint256 newCounter) {\n        // Ensure that the reentrancy guard is not currently set.\n        _assertNonReentrant();\n\n        // Skip overflow check as counter cannot be incremented that far.\n        unchecked {\n            // Increment current counter for the supplied offerer.\n            newCounter = ++_counters[msg.sender];\n        }\n\n        // Emit an event containing the new counter.\n        emit CounterIncremented(newCounter, msg.sender);\n    }\n\n    /**\n     * @dev Internal view function to retrieve the current counter for a given\n     *      offerer.\n     *\n     * @param offerer The offerer in question.\n     *\n     * @return currentCounter The current counter.\n     */\n    function _getCounter(address offerer)\n        internal\n        view\n        returns (uint256 currentCounter)\n    {\n        // Return the counter for the supplied offerer.\n        currentCounter = _counters[offerer];\n    }\n}\n"
    },
    "contracts/lib/CriteriaResolution.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.13;\n\nimport { ItemType, Side } from \"./ConsiderationEnums.sol\";\n\n// prettier-ignore\nimport {\n    OfferItem,\n    ConsiderationItem,\n    OrderParameters,\n    AdvancedOrder,\n    CriteriaResolver\n} from \"./ConsiderationStructs.sol\";\n\nimport \"./ConsiderationConstants.sol\";\n\n// prettier-ignore\nimport {\n    CriteriaResolutionErrors\n} from \"../interfaces/CriteriaResolutionErrors.sol\";\n\n/**\n * @title CriteriaResolution\n * @author 0age\n * @notice CriteriaResolution contains a collection of pure functions related to\n *         resolving criteria-based items.\n */\ncontract CriteriaResolution is CriteriaResolutionErrors {\n    /**\n     * @dev Internal pure function to apply criteria resolvers containing\n     *      specific token identifiers and associated proofs to order items.\n     *\n     * @param advancedOrders     The orders to apply criteria resolvers to.\n     * @param criteriaResolvers  An array where each element contains a\n     *                           reference to a specific order as well as that\n     *                           order's offer or consideration, a token\n     *                           identifier, and a proof that the supplied token\n     *                           identifier is contained in the order's merkle\n     *                           root. Note that a root of zero indicates that\n     *                           any transferable token identifier is valid and\n     *                           that no proof needs to be supplied.\n     */\n    function _applyCriteriaResolvers(\n        AdvancedOrder[] memory advancedOrders,\n        CriteriaResolver[] memory criteriaResolvers\n    ) internal pure {\n        // Skip overflow checks as all for loops are indexed starting at zero.\n        unchecked {\n            // Retrieve length of criteria resolvers array and place on stack.\n            uint256 totalCriteriaResolvers = criteriaResolvers.length;\n\n            // Retrieve length of orders array and place on stack.\n            uint256 totalAdvancedOrders = advancedOrders.length;\n\n            // Iterate over each criteria resolver.\n            for (uint256 i = 0; i < totalCriteriaResolvers; ++i) {\n                // Retrieve the criteria resolver.\n                CriteriaResolver memory criteriaResolver = (\n                    criteriaResolvers[i]\n                );\n\n                // Read the order index from memory and place it on the stack.\n                uint256 orderIndex = criteriaResolver.orderIndex;\n\n                // Ensure that the order index is in range.\n                if (orderIndex >= totalAdvancedOrders) {\n                    revert OrderCriteriaResolverOutOfRange();\n                }\n\n                // Skip criteria resolution for order if not fulfilled.\n                if (advancedOrders[orderIndex].numerator == 0) {\n                    continue;\n                }\n\n                // Retrieve the parameters for the order.\n                OrderParameters memory orderParameters = (\n                    advancedOrders[orderIndex].parameters\n                );\n\n                // Read component index from memory and place it on the stack.\n                uint256 componentIndex = criteriaResolver.index;\n\n                // Declare values for item's type and criteria.\n                ItemType itemType;\n                uint256 identifierOrCriteria;\n\n                // If the criteria resolver refers to an offer item...\n                if (criteriaResolver.side == Side.OFFER) {\n                    // Retrieve the offer.\n                    OfferItem[] memory offer = orderParameters.offer;\n\n                    // Ensure that the component index is in range.\n                    if (componentIndex >= offer.length) {\n                        revert OfferCriteriaResolverOutOfRange();\n                    }\n\n                    // Retrieve relevant item using the component index.\n                    OfferItem memory offerItem = offer[componentIndex];\n\n                    // Read item type and criteria from memory & place on stack.\n                    itemType = offerItem.itemType;\n                    identifierOrCriteria = offerItem.identifierOrCriteria;\n\n                    // Optimistically update item type to remove criteria usage.\n                    // Use assembly to operate on ItemType enum as a number.\n                    ItemType newItemType;\n                    assembly {\n                        // Item type 4 becomes 2 and item type 5 becomes 3.\n                        newItemType := sub(3, eq(itemType, 4))\n                    }\n                    offerItem.itemType = newItemType;\n\n                    // Optimistically update identifier w/ supplied identifier.\n                    offerItem.identifierOrCriteria = criteriaResolver\n                        .identifier;\n                } else {\n                    // Otherwise, the resolver refers to a consideration item.\n                    ConsiderationItem[] memory consideration = (\n                        orderParameters.consideration\n                    );\n\n                    // Ensure that the component index is in range.\n                    if (componentIndex >= consideration.length) {\n                        revert ConsiderationCriteriaResolverOutOfRange();\n                    }\n\n                    // Retrieve relevant item using order and component index.\n                    ConsiderationItem memory considerationItem = (\n                        consideration[componentIndex]\n                    );\n\n                    // Read item type and criteria from memory & place on stack.\n                    itemType = considerationItem.itemType;\n                    identifierOrCriteria = (\n                        considerationItem.identifierOrCriteria\n                    );\n\n                    // Optimistically update item type to remove criteria usage.\n                    // Use assembly to operate on ItemType enum as a number.\n                    ItemType newItemType;\n                    assembly {\n                        // Item type 4 becomes 2 and item type 5 becomes 3.\n                        newItemType := sub(3, eq(itemType, 4))\n                    }\n                    considerationItem.itemType = newItemType;\n\n                    // Optimistically update identifier w/ supplied identifier.\n                    considerationItem.identifierOrCriteria = (\n                        criteriaResolver.identifier\n                    );\n                }\n\n                // Ensure the specified item type indicates criteria usage.\n                if (!_isItemWithCriteria(itemType)) {\n                    revert CriteriaNotEnabledForItem();\n                }\n\n                // If criteria is not 0 (i.e. a collection-wide offer)...\n                if (identifierOrCriteria != uint256(0)) {\n                    // Verify identifier inclusion in criteria root using proof.\n                    _verifyProof(\n                        criteriaResolver.identifier,\n                        identifierOrCriteria,\n                        criteriaResolver.criteriaProof\n                    );\n                }\n            }\n\n            // Iterate over each advanced order.\n            for (uint256 i = 0; i < totalAdvancedOrders; ++i) {\n                // Retrieve the advanced order.\n                AdvancedOrder memory advancedOrder = advancedOrders[i];\n\n                // Skip criteria resolution for order if not fulfilled.\n                if (advancedOrder.numerator == 0) {\n                    continue;\n                }\n\n                // Retrieve the parameters for the order.\n                OrderParameters memory orderParameters = (\n                    advancedOrder.parameters\n                );\n\n                // Read consideration length from memory and place on stack.\n                uint256 totalItems = orderParameters.consideration.length;\n\n                // Iterate over each consideration item on the order.\n                for (uint256 j = 0; j < totalItems; ++j) {\n                    // Ensure item type no longer indicates criteria usage.\n                    if (\n                        _isItemWithCriteria(\n                            orderParameters.consideration[j].itemType\n                        )\n                    ) {\n                        revert UnresolvedConsiderationCriteria();\n                    }\n                }\n\n                // Read offer length from memory and place on stack.\n                totalItems = orderParameters.offer.length;\n\n                // Iterate over each offer item on the order.\n                for (uint256 j = 0; j < totalItems; ++j) {\n                    // Ensure item type no longer indicates criteria usage.\n                    if (\n                        _isItemWithCriteria(orderParameters.offer[j].itemType)\n                    ) {\n                        revert UnresolvedOfferCriteria();\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Internal pure function to check whether a given item type represents\n     *      a criteria-based ERC721 or ERC1155 item (e.g. an item that can be\n     *      resolved to one of a number of different identifiers at the time of\n     *      order fulfillment).\n     *\n     * @param itemType The item type in question.\n     *\n     * @return withCriteria A boolean indicating that the item type in question\n     *                      represents a criteria-based item.\n     */\n    function _isItemWithCriteria(ItemType itemType)\n        internal\n        pure\n        returns (bool withCriteria)\n    {\n        // ERC721WithCriteria is ItemType 4. ERC1155WithCriteria is ItemType 5.\n        assembly {\n            withCriteria := gt(itemType, 3)\n        }\n    }\n\n    /**\n     * @dev Internal pure function to ensure that a given element is contained\n     *      in a merkle root via a supplied proof.\n     *\n     * @param leaf  The element for which to prove inclusion.\n     * @param root  The merkle root that inclusion will be proved against.\n     * @param proof The merkle proof.\n     */\n    function _verifyProof(\n        uint256 leaf,\n        uint256 root,\n        bytes32[] memory proof\n    ) internal pure {\n        // Declare a variable that will be used to determine proof validity.\n        bool isValid;\n\n        // Utilize assembly to efficiently verify the proof against the root.\n        assembly {\n            // Store the leaf at the beginning of scratch space.\n            mstore(0, leaf)\n\n            // Derive the hash of the leaf to use as the initial proof element.\n            let computedHash := keccak256(0, OneWord)\n\n            // Based on: https://github.com/Rari-Capital/solmate/blob/v7/src/utils/MerkleProof.sol\n            // Get memory start location of the first element in proof array.\n            let data := add(proof, OneWord)\n\n            // Iterate over each proof element to compute the root hash.\n            for {\n                // Left shift by 5 is equivalent to multiplying by 0x20.\n                let end := add(data, shl(5, mload(proof)))\n            } lt(data, end) {\n                // Increment by one word at a time.\n                data := add(data, OneWord)\n            } {\n                // Get the proof element.\n                let loadedData := mload(data)\n\n                // Sort proof elements and place them in scratch space.\n                // Slot of `computedHash` in scratch space.\n                // If the condition is true: 0x20, otherwise: 0x00.\n                let scratch := shl(5, gt(computedHash, loadedData))\n\n                // Store elements to hash contiguously in scratch space. Scratch\n                // space is 64 bytes (0x00 - 0x3f) & both elements are 32 bytes.\n                mstore(scratch, computedHash)\n                mstore(xor(scratch, OneWord), loadedData)\n\n                // Derive the updated hash.\n                computedHash := keccak256(0, TwoWords)\n            }\n\n            // Compare the final hash to the supplied root.\n            isValid := eq(computedHash, root)\n        }\n\n        // Revert if computed hash does not equal supplied root.\n        if (!isValid) {\n            revert InvalidProof();\n        }\n    }\n}\n"
    },
    "contracts/lib/Executor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.13;\n\nimport { ConduitInterface } from \"../interfaces/ConduitInterface.sol\";\n\nimport { ConduitItemType } from \"../conduit/lib/ConduitEnums.sol\";\n\nimport { ItemType } from \"./ConsiderationEnums.sol\";\n\nimport { ReceivedItem } from \"./ConsiderationStructs.sol\";\n\nimport { Verifiers } from \"./Verifiers.sol\";\n\nimport { TokenTransferrer } from \"./TokenTransferrer.sol\";\n\nimport \"./ConsiderationConstants.sol\";\n\n/**\n * @title Executor\n * @author 0age\n * @notice Executor contains functions related to processing executions (i.e.\n *         transferring items, either directly or via conduits).\n */\ncontract Executor is Verifiers, TokenTransferrer {\n    /**\n     * @dev Derive and set hashes, reference chainId, and associated domain\n     *      separator during deployment.\n     *\n     * @param conduitController A contract that deploys conduits, or proxies\n     *                          that may optionally be used to transfer approved\n     *                          ERC20/721/1155 tokens.\n     */\n    constructor(address conduitController) Verifiers(conduitController) {}\n\n    /**\n     * @dev Internal function to transfer a given item, either directly or via\n     *      a corresponding conduit.\n     *\n     * @param item        The item to transfer, including an amount and a\n     *                    recipient.\n     * @param from        The account supplying the item.\n     * @param conduitKey  A bytes32 value indicating what corresponding conduit,\n     *                    if any, to source token approvals from. The zero hash\n     *                    signifies that no conduit should be used, with direct\n     *                    approvals set on this contract.\n     * @param accumulator An open-ended array that collects transfers to execute\n     *                    against a given conduit in a single call.\n     */\n    function _transfer(\n        ReceivedItem memory item,\n        address from,\n        bytes32 conduitKey,\n        bytes memory accumulator\n    ) internal {\n        // If the item type indicates Ether or a native token...\n        if (item.itemType == ItemType.NATIVE) {\n            // Ensure neither the token nor the identifier parameters are set.\n            if ((uint160(item.token) | item.identifier) != 0) {\n                revert UnusedItemParameters();\n            }\n\n            // transfer the native tokens to the recipient.\n            _transferEth(item.recipient, item.amount);\n        } else if (item.itemType == ItemType.ERC20) {\n            // Ensure that no identifier is supplied.\n            if (item.identifier != 0) {\n                revert UnusedItemParameters();\n            }\n\n            // Transfer ERC20 tokens from the source to the recipient.\n            _transferERC20(\n                item.token,\n                from,\n                item.recipient,\n                item.amount,\n                conduitKey,\n                accumulator\n            );\n        } else if (item.itemType == ItemType.ERC721) {\n            // Transfer ERC721 token from the source to the recipient.\n            _transferERC721(\n                item.token,\n                from,\n                item.recipient,\n                item.identifier,\n                item.amount,\n                conduitKey,\n                accumulator\n            );\n        } else {\n            // Transfer ERC1155 token from the source to the recipient.\n            _transferERC1155(\n                item.token,\n                from,\n                item.recipient,\n                item.identifier,\n                item.amount,\n                conduitKey,\n                accumulator\n            );\n        }\n    }\n\n    /**\n     * @dev Internal function to transfer an individual ERC721 or ERC1155 item\n     *      from a given originator to a given recipient. The accumulator will\n     *      be bypassed, meaning that this function should be utilized in cases\n     *      where multiple item transfers can be accumulated into a single\n     *      conduit call. Sufficient approvals must be set, either on the\n     *      respective conduit or on this contract itself.\n     *\n     * @param itemType   The type of item to transfer, either ERC721 or ERC1155.\n     * @param token      The token to transfer.\n     * @param from       The originator of the transfer.\n     * @param to         The recipient of the transfer.\n     * @param identifier The tokenId to transfer.\n     * @param amount     The amount to transfer.\n     * @param conduitKey A bytes32 value indicating what corresponding conduit,\n     *                   if any, to source token approvals from. The zero hash\n     *                   signifies that no conduit should be used, with direct\n     *                   approvals set on this contract.\n     */\n    function _transferIndividual721Or1155Item(\n        ItemType itemType,\n        address token,\n        address from,\n        address to,\n        uint256 identifier,\n        uint256 amount,\n        bytes32 conduitKey\n    ) internal {\n        // Determine if the transfer is to be performed via a conduit.\n        if (conduitKey != bytes32(0)) {\n            // Use free memory pointer as calldata offset for the conduit call.\n            uint256 callDataOffset;\n\n            // Utilize assembly to place each argument in free memory.\n            assembly {\n                // Retrieve the free memory pointer and use it as the offset.\n                callDataOffset := mload(FreeMemoryPointerSlot)\n\n                // Write ConduitInterface.execute.selector to memory.\n                mstore(callDataOffset, Conduit_execute_signature)\n\n                // Write the offset to the ConduitTransfer array in memory.\n                mstore(\n                    add(\n                        callDataOffset,\n                        Conduit_execute_ConduitTransfer_offset_ptr\n                    ),\n                    Conduit_execute_ConduitTransfer_ptr\n                )\n\n                // Write the length of the ConduitTransfer array to memory.\n                mstore(\n                    add(\n                        callDataOffset,\n                        Conduit_execute_ConduitTransfer_length_ptr\n                    ),\n                    Conduit_execute_ConduitTransfer_length\n                )\n\n                // Write the item type to memory.\n                mstore(\n                    add(callDataOffset, Conduit_execute_transferItemType_ptr),\n                    itemType\n                )\n\n                // Write the token to memory.\n                mstore(\n                    add(callDataOffset, Conduit_execute_transferToken_ptr),\n                    token\n                )\n\n                // Write the transfer source to memory.\n                mstore(\n                    add(callDataOffset, Conduit_execute_transferFrom_ptr),\n                    from\n                )\n\n                // Write the transfer recipient to memory.\n                mstore(add(callDataOffset, Conduit_execute_transferTo_ptr), to)\n\n                // Write the token identifier to memory.\n                mstore(\n                    add(callDataOffset, Conduit_execute_transferIdentifier_ptr),\n                    identifier\n                )\n\n                // Write the transfer amount to memory.\n                mstore(\n                    add(callDataOffset, Conduit_execute_transferAmount_ptr),\n                    amount\n                )\n            }\n\n            // Perform the call to the conduit.\n            _callConduitUsingOffsets(\n                conduitKey,\n                callDataOffset,\n                OneConduitExecute_size\n            );\n        } else {\n            // Otherwise, determine whether it is an ERC721 or ERC1155 item.\n            if (itemType == ItemType.ERC721) {\n                // Ensure that exactly one 721 item is being transferred.\n                if (amount != 1) {\n                    revert InvalidERC721TransferAmount();\n                }\n\n                // Perform transfer via the token contract directly.\n                _performERC721Transfer(token, from, to, identifier);\n            } else {\n                // Perform transfer via the token contract directly.\n                _performERC1155Transfer(token, from, to, identifier, amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Internal function to transfer Ether or other native tokens to a\n     *      given recipient.\n     *\n     * @param to     The recipient of the transfer.\n     * @param amount The amount to transfer.\n     */\n    function _transferEth(address payable to, uint256 amount) internal {\n        // Ensure that the supplied amount is non-zero.\n        _assertNonZeroAmount(amount);\n\n        // Declare a variable indicating whether the call was successful or not.\n        bool success;\n\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            success := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        // If the call fails...\n        if (!success) {\n            // Revert and pass the revert reason along if one was returned.\n            _revertWithReasonIfOneIsReturned();\n\n            // Otherwise, revert with a generic error message.\n            revert EtherTransferGenericFailure(to, amount);\n        }\n    }\n\n    /**\n     * @dev Internal function to transfer ERC20 tokens from a given originator\n     *      to a given recipient using a given conduit if applicable. Sufficient\n     *      approvals must be set on this contract or on a respective conduit.\n     *\n     * @param token       The ERC20 token to transfer.\n     * @param from        The originator of the transfer.\n     * @param to          The recipient of the transfer.\n     * @param amount      The amount to transfer.\n     * @param conduitKey  A bytes32 value indicating what corresponding conduit,\n     *                    if any, to source token approvals from. The zero hash\n     *                    signifies that no conduit should be used, with direct\n     *                    approvals set on this contract.\n     * @param accumulator An open-ended array that collects transfers to execute\n     *                    against a given conduit in a single call.\n     */\n    function _transferERC20(\n        address token,\n        address from,\n        address to,\n        uint256 amount,\n        bytes32 conduitKey,\n        bytes memory accumulator\n    ) internal {\n        // Ensure that the supplied amount is non-zero.\n        _assertNonZeroAmount(amount);\n\n        // Trigger accumulated transfers if the conduits differ.\n        _triggerIfArmedAndNotAccumulatable(accumulator, conduitKey);\n\n        // If no conduit has been specified...\n        if (conduitKey == bytes32(0)) {\n            // Perform the token transfer directly.\n            _performERC20Transfer(token, from, to, amount);\n        } else {\n            // Insert the call to the conduit into the accumulator.\n            _insert(\n                conduitKey,\n                accumulator,\n                ConduitItemType.ERC20,\n                token,\n                from,\n                to,\n                uint256(0),\n                amount\n            );\n        }\n    }\n\n    /**\n     * @dev Internal function to transfer a single ERC721 token from a given\n     *      originator to a given recipient. Sufficient approvals must be set,\n     *      either on the respective conduit or on this contract itself.\n     *\n     * @param token       The ERC721 token to transfer.\n     * @param from        The originator of the transfer.\n     * @param to          The recipient of the transfer.\n     * @param identifier  The tokenId to transfer (must be 1 for ERC721).\n     * @param amount      The amount to transfer.\n     * @param conduitKey  A bytes32 value indicating what corresponding conduit,\n     *                    if any, to source token approvals from. The zero hash\n     *                    signifies that no conduit should be used, with direct\n     *                    approvals set on this contract.\n     * @param accumulator An open-ended array that collects transfers to execute\n     *                    against a given conduit in a single call.\n     */\n    function _transferERC721(\n        address token,\n        address from,\n        address to,\n        uint256 identifier,\n        uint256 amount,\n        bytes32 conduitKey,\n        bytes memory accumulator\n    ) internal {\n        // Trigger accumulated transfers if the conduits differ.\n        _triggerIfArmedAndNotAccumulatable(accumulator, conduitKey);\n\n        // If no conduit has been specified...\n        if (conduitKey == bytes32(0)) {\n            // Ensure that exactly one 721 item is being transferred.\n            if (amount != 1) {\n                revert InvalidERC721TransferAmount();\n            }\n\n            // Perform transfer via the token contract directly.\n            _performERC721Transfer(token, from, to, identifier);\n        } else {\n            // Insert the call to the conduit into the accumulator.\n            _insert(\n                conduitKey,\n                accumulator,\n                ConduitItemType.ERC721,\n                token,\n                from,\n                to,\n                identifier,\n                amount\n            );\n        }\n    }\n\n    /**\n     * @dev Internal function to transfer ERC1155 tokens from a given originator\n     *      to a given recipient. Sufficient approvals must be set, either on\n     *      the respective conduit or on this contract itself.\n     *\n     * @param token       The ERC1155 token to transfer.\n     * @param from        The originator of the transfer.\n     * @param to          The recipient of the transfer.\n     * @param identifier  The id to transfer.\n     * @param amount      The amount to transfer.\n     * @param conduitKey  A bytes32 value indicating what corresponding conduit,\n     *                    if any, to source token approvals from. The zero hash\n     *                    signifies that no conduit should be used, with direct\n     *                    approvals set on this contract.\n     * @param accumulator An open-ended array that collects transfers to execute\n     *                    against a given conduit in a single call.\n     */\n    function _transferERC1155(\n        address token,\n        address from,\n        address to,\n        uint256 identifier,\n        uint256 amount,\n        bytes32 conduitKey,\n        bytes memory accumulator\n    ) internal {\n        // Ensure that the supplied amount is non-zero.\n        _assertNonZeroAmount(amount);\n\n        // Trigger accumulated transfers if the conduits differ.\n        _triggerIfArmedAndNotAccumulatable(accumulator, conduitKey);\n\n        // If no conduit has been specified...\n        if (conduitKey == bytes32(0)) {\n            // Perform transfer via the token contract directly.\n            _performERC1155Transfer(token, from, to, identifier, amount);\n        } else {\n            // Insert the call to the conduit into the accumulator.\n            _insert(\n                conduitKey,\n                accumulator,\n                ConduitItemType.ERC1155,\n                token,\n                from,\n                to,\n                identifier,\n                amount\n            );\n        }\n    }\n\n    /**\n     * @dev Internal function to trigger a call to the conduit currently held by\n     *      the accumulator if the accumulator contains item transfers (i.e. it\n     *      is \"armed\") and the supplied conduit key does not match the key held\n     *      by the accumulator.\n     *\n     * @param accumulator An open-ended array that collects transfers to execute\n     *                    against a given conduit in a single call.\n     * @param conduitKey  A bytes32 value indicating what corresponding conduit,\n     *                    if any, to source token approvals from. The zero hash\n     *                    signifies that no conduit should be used, with direct\n     *                    approvals set on this contract.\n     */\n    function _triggerIfArmedAndNotAccumulatable(\n        bytes memory accumulator,\n        bytes32 conduitKey\n    ) internal {\n        // Retrieve the current conduit key from the accumulator.\n        bytes32 accumulatorConduitKey = _getAccumulatorConduitKey(accumulator);\n\n        // Perform conduit call if the set key does not match the supplied key.\n        if (accumulatorConduitKey != conduitKey) {\n            _triggerIfArmed(accumulator);\n        }\n    }\n\n    /**\n     * @dev Internal function to trigger a call to the conduit currently held by\n     *      the accumulator if the accumulator contains item transfers (i.e. it\n     *      is \"armed\").\n     *\n     * @param accumulator An open-ended array that collects transfers to execute\n     *                    against a given conduit in a single call.\n     */\n    function _triggerIfArmed(bytes memory accumulator) internal {\n        // Exit if the accumulator is not \"armed\".\n        if (accumulator.length != AccumulatorArmed) {\n            return;\n        }\n\n        // Retrieve the current conduit key from the accumulator.\n        bytes32 accumulatorConduitKey = _getAccumulatorConduitKey(accumulator);\n\n        // Perform conduit call.\n        _trigger(accumulatorConduitKey, accumulator);\n    }\n\n    /**\n     * @dev Internal function to trigger a call to the conduit corresponding to\n     *      a given conduit key, supplying all accumulated item transfers. The\n     *      accumulator will be \"disarmed\" and reset in the process.\n     *\n     * @param conduitKey  A bytes32 value indicating what corresponding conduit,\n     *                    if any, to source token approvals from. The zero hash\n     *                    signifies that no conduit should be used, with direct\n     *                    approvals set on this contract.\n     * @param accumulator An open-ended array that collects transfers to execute\n     *                    against a given conduit in a single call.\n     */\n    function _trigger(bytes32 conduitKey, bytes memory accumulator) internal {\n        // Declare variables for offset in memory & size of calldata to conduit.\n        uint256 callDataOffset;\n        uint256 callDataSize;\n\n        // Call the conduit with all the accumulated transfers.\n        assembly {\n            // Call begins at third word; the first is length or \"armed\" status,\n            // and the second is the current conduit key.\n            callDataOffset := add(accumulator, TwoWords)\n\n            // 68 + items * 192\n            callDataSize := add(\n                Accumulator_array_offset_ptr,\n                mul(\n                    mload(add(accumulator, Accumulator_array_length_ptr)),\n                    Conduit_transferItem_size\n                )\n            )\n        }\n\n        // Call conduit derived from conduit key & supply accumulated transfers.\n        _callConduitUsingOffsets(conduitKey, callDataOffset, callDataSize);\n\n        // Reset accumulator length to signal that it is now \"disarmed\".\n        assembly {\n            mstore(accumulator, AccumulatorDisarmed)\n        }\n    }\n\n    /**\n     * @dev Internal function to perform a call to the conduit corresponding to\n     *      a given conduit key based on the offset and size of the calldata in\n     *      question in memory.\n     *\n     * @param conduitKey     A bytes32 value indicating what corresponding\n     *                       conduit, if any, to source token approvals from.\n     *                       The zero hash signifies that no conduit should be\n     *                       used, with direct approvals set on this contract.\n     * @param callDataOffset The memory pointer where calldata is contained.\n     * @param callDataSize   The size of calldata in memory.\n     */\n    function _callConduitUsingOffsets(\n        bytes32 conduitKey,\n        uint256 callDataOffset,\n        uint256 callDataSize\n    ) internal {\n        // Derive the address of the conduit using the conduit key.\n        address conduit = _deriveConduit(conduitKey);\n\n        bool success;\n        bytes4 result;\n\n        // call the conduit.\n        assembly {\n            // Ensure first word of scratch space is empty.\n            mstore(0, 0)\n\n            // Perform call, placing first word of return data in scratch space.\n            success := call(\n                gas(),\n                conduit,\n                0,\n                callDataOffset,\n                callDataSize,\n                0,\n                OneWord\n            )\n\n            // Take value from scratch space and place it on the stack.\n            result := mload(0)\n        }\n\n        // If the call failed...\n        if (!success) {\n            // Pass along whatever revert reason was given by the conduit.\n            _revertWithReasonIfOneIsReturned();\n\n            // Otherwise, revert with a generic error.\n            revert InvalidCallToConduit(conduit);\n        }\n\n        // Ensure result was extracted and matches EIP-1271 magic value.\n        if (result != ConduitInterface.execute.selector) {\n            revert InvalidConduit(conduitKey, conduit);\n        }\n    }\n\n    /**\n     * @dev Internal pure function to retrieve the current conduit key set for\n     *      the accumulator.\n     *\n     * @param accumulator An open-ended array that collects transfers to execute\n     *                    against a given conduit in a single call.\n     *\n     * @return accumulatorConduitKey The conduit key currently set for the\n     *                               accumulator.\n     */\n    function _getAccumulatorConduitKey(bytes memory accumulator)\n        internal\n        pure\n        returns (bytes32 accumulatorConduitKey)\n    {\n        // Retrieve the current conduit key from the accumulator.\n        assembly {\n            accumulatorConduitKey := mload(\n                add(accumulator, Accumulator_conduitKey_ptr)\n            )\n        }\n    }\n\n    /**\n     * @dev Internal pure function to place an item transfer into an accumulator\n     *      that collects a series of transfers to execute against a given\n     *      conduit in a single call.\n     *\n     * @param conduitKey  A bytes32 value indicating what corresponding conduit,\n     *                    if any, to source token approvals from. The zero hash\n     *                    signifies that no conduit should be used, with direct\n     *                    approvals set on this contract.\n     * @param accumulator An open-ended array that collects transfers to execute\n     *                    against a given conduit in a single call.\n     * @param itemType    The type of the item to transfer.\n     * @param token       The token to transfer.\n     * @param from        The originator of the transfer.\n     * @param to          The recipient of the transfer.\n     * @param identifier  The tokenId to transfer.\n     * @param amount      The amount to transfer.\n     */\n    function _insert(\n        bytes32 conduitKey,\n        bytes memory accumulator,\n        ConduitItemType itemType,\n        address token,\n        address from,\n        address to,\n        uint256 identifier,\n        uint256 amount\n    ) internal pure {\n        uint256 elements;\n        // \"Arm\" and prime accumulator if it's not already armed. The sentinel\n        // value is held in the length of the accumulator array.\n        if (accumulator.length == AccumulatorDisarmed) {\n            elements = 1;\n            bytes4 selector = ConduitInterface.execute.selector;\n            assembly {\n                mstore(accumulator, AccumulatorArmed) // \"arm\" the accumulator.\n                mstore(add(accumulator, Accumulator_conduitKey_ptr), conduitKey)\n                mstore(add(accumulator, Accumulator_selector_ptr), selector)\n                mstore(\n                    add(accumulator, Accumulator_array_offset_ptr),\n                    Accumulator_array_offset\n                )\n                mstore(add(accumulator, Accumulator_array_length_ptr), elements)\n            }\n        } else {\n            // Otherwise, increase the number of elements by one.\n            assembly {\n                elements := add(\n                    mload(add(accumulator, Accumulator_array_length_ptr)),\n                    1\n                )\n                mstore(add(accumulator, Accumulator_array_length_ptr), elements)\n            }\n        }\n\n        // Insert the item.\n        assembly {\n            let itemPointer := sub(\n                add(accumulator, mul(elements, Conduit_transferItem_size)),\n                Accumulator_itemSizeOffsetDifference\n            )\n            mstore(itemPointer, itemType)\n            mstore(add(itemPointer, Conduit_transferItem_token_ptr), token)\n            mstore(add(itemPointer, Conduit_transferItem_from_ptr), from)\n            mstore(add(itemPointer, Conduit_transferItem_to_ptr), to)\n            mstore(\n                add(itemPointer, Conduit_transferItem_identifier_ptr),\n                identifier\n            )\n            mstore(add(itemPointer, Conduit_transferItem_amount_ptr), amount)\n        }\n    }\n}\n"
    },
    "contracts/lib/FulfillmentApplier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.13;\n\nimport { ItemType, Side } from \"./ConsiderationEnums.sol\";\n\n// prettier-ignore\nimport {\n    OfferItem,\n    ConsiderationItem,\n    ReceivedItem,\n    OrderParameters,\n    AdvancedOrder,\n    Execution,\n    FulfillmentComponent\n} from \"./ConsiderationStructs.sol\";\n\nimport \"./ConsiderationConstants.sol\";\n\n// prettier-ignore\nimport {\n    FulfillmentApplicationErrors\n} from \"../interfaces/FulfillmentApplicationErrors.sol\";\n\n/**\n * @title FulfillmentApplier\n * @author 0age\n * @notice FulfillmentApplier contains logic related to applying fulfillments,\n *         both as part of order matching (where offer items are matched to\n *         consideration items) as well as fulfilling available orders (where\n *         order items and consideration items are independently aggregated).\n */\ncontract FulfillmentApplier is FulfillmentApplicationErrors {\n    /**\n     * @dev Internal pure function to match offer items to consideration items\n     *      on a group of orders via a supplied fulfillment.\n     *\n     * @param advancedOrders          The orders to match.\n     * @param offerComponents         An array designating offer components to\n     *                                match to consideration components.\n     * @param considerationComponents An array designating consideration\n     *                                components to match to offer components.\n     *                                Note that each consideration amount must\n     *                                be zero in order for the match operation\n     *                                to be valid.\n     *\n     * @return execution The transfer performed as a result of the fulfillment.\n     */\n    function _applyFulfillment(\n        AdvancedOrder[] memory advancedOrders,\n        FulfillmentComponent[] calldata offerComponents,\n        FulfillmentComponent[] calldata considerationComponents\n    ) internal pure returns (Execution memory execution) {\n        // Ensure 1+ of both offer and consideration components are supplied.\n        if (\n            offerComponents.length == 0 || considerationComponents.length == 0\n        ) {\n            revert OfferAndConsiderationRequiredOnFulfillment();\n        }\n\n        // Declare a new Execution struct.\n        Execution memory considerationExecution;\n\n        // Validate & aggregate consideration items to new Execution object.\n        _aggregateValidFulfillmentConsiderationItems(\n            advancedOrders,\n            considerationComponents,\n            considerationExecution\n        );\n\n        // Retrieve the consideration item from the execution struct.\n        ReceivedItem memory considerationItem = considerationExecution.item;\n\n        // Recipient does not need to be specified because it will always be set\n        // to that of the consideration.\n        // Validate & aggregate offer items to Execution object.\n        _aggregateValidFulfillmentOfferItems(\n            advancedOrders,\n            offerComponents,\n            execution\n        );\n\n        // Ensure offer and consideration share types, tokens and identifiers.\n        if (\n            execution.item.itemType != considerationItem.itemType ||\n            execution.item.token != considerationItem.token ||\n            execution.item.identifier != considerationItem.identifier\n        ) {\n            revert MismatchedFulfillmentOfferAndConsiderationComponents();\n        }\n\n        // If total consideration amount exceeds the offer amount...\n        if (considerationItem.amount > execution.item.amount) {\n            // Retrieve the first consideration component from the fulfillment.\n            FulfillmentComponent memory targetComponent = (\n                considerationComponents[0]\n            );\n\n            // Skip underflow check as the conditional being true implies that\n            // considerationItem.amount > execution.item.amount.\n            unchecked {\n                // Add excess consideration item amount to original order array.\n                advancedOrders[targetComponent.orderIndex]\n                    .parameters\n                    .consideration[targetComponent.itemIndex]\n                    .startAmount = (considerationItem.amount -\n                    execution.item.amount);\n            }\n\n            // Reduce total consideration amount to equal the offer amount.\n            considerationItem.amount = execution.item.amount;\n        } else {\n            // Retrieve the first offer component from the fulfillment.\n            FulfillmentComponent memory targetComponent = offerComponents[0];\n\n            // Skip underflow check as the conditional being false implies that\n            // execution.item.amount >= considerationItem.amount.\n            unchecked {\n                // Add excess offer item amount to the original array of orders.\n                advancedOrders[targetComponent.orderIndex]\n                    .parameters\n                    .offer[targetComponent.itemIndex]\n                    .startAmount = (execution.item.amount -\n                    considerationItem.amount);\n            }\n\n            // Reduce total offer amount to equal the consideration amount.\n            execution.item.amount = considerationItem.amount;\n        }\n\n        // Reuse consideration recipient.\n        execution.item.recipient = considerationItem.recipient;\n\n        // Return the final execution that will be triggered for relevant items.\n        return execution; // Execution(considerationItem, offerer, conduitKey);\n    }\n\n    /**\n     * @dev Internal view function to aggregate offer or consideration items\n     *      from a group of orders into a single execution via a supplied array\n     *      of fulfillment components. Items that are not available to aggregate\n     *      will not be included in the aggregated execution.\n     *\n     * @param advancedOrders        The orders to aggregate.\n     * @param side                  The side (i.e. offer or consideration).\n     * @param fulfillmentComponents An array designating item components to\n     *                              aggregate if part of an available order.\n     * @param fulfillerConduitKey   A bytes32 value indicating what conduit, if\n     *                              any, to source the fulfiller's token\n     *                              approvals from. The zero hash signifies that\n     *                              no conduit should be used, with approvals\n     *                              set directly on this contract.\n     * @param recipient             The intended recipient for all received\n     *                              items.\n     *\n     * @return execution The transfer performed as a result of the fulfillment.\n     */\n    function _aggregateAvailable(\n        AdvancedOrder[] memory advancedOrders,\n        Side side,\n        FulfillmentComponent[] memory fulfillmentComponents,\n        bytes32 fulfillerConduitKey,\n        address recipient\n    ) internal view returns (Execution memory execution) {\n        // Skip overflow / underflow checks; conditions checked or unreachable.\n        unchecked {\n            // Retrieve fulfillment components array length and place on stack.\n            // Ensure at least one fulfillment component has been supplied.\n            if (fulfillmentComponents.length == 0) {\n                revert MissingFulfillmentComponentOnAggregation(side);\n            }\n\n            // If the fulfillment components are offer components...\n            if (side == Side.OFFER) {\n                // Set the supplied recipient on the execution item.\n                execution.item.recipient = payable(recipient);\n\n                // Return execution for aggregated items provided by offerer.\n                _aggregateValidFulfillmentOfferItems(\n                    advancedOrders,\n                    fulfillmentComponents,\n                    execution\n                );\n            } else {\n                // Otherwise, fulfillment components are consideration\n                // components. Return execution for aggregated items provided by\n                // the fulfiller.\n                _aggregateValidFulfillmentConsiderationItems(\n                    advancedOrders,\n                    fulfillmentComponents,\n                    execution\n                );\n\n                // Set the caller as the offerer on the execution.\n                execution.offerer = msg.sender;\n\n                // Set fulfiller conduit key as the conduit key on execution.\n                execution.conduitKey = fulfillerConduitKey;\n            }\n\n            // Set the offerer and recipient to null address if execution\n            // amount is zero. This will cause the execution item to be skipped.\n            if (execution.item.amount == 0) {\n                execution.offerer = address(0);\n                execution.item.recipient = payable(0);\n            }\n        }\n    }\n\n    /**\n     * @dev Internal pure function to aggregate a group of offer items using\n     *      supplied directives on which component items are candidates for\n     *      aggregation, skipping items on orders that are not available.\n     *\n     * @param advancedOrders  The orders to aggregate offer items from.\n     * @param offerComponents An array of FulfillmentComponent structs\n     *                        indicating the order index and item index of each\n     *                        candidate offer item for aggregation.\n     * @param execution       The execution to apply the aggregation to.\n     */\n    function _aggregateValidFulfillmentOfferItems(\n        AdvancedOrder[] memory advancedOrders,\n        FulfillmentComponent[] memory offerComponents,\n        Execution memory execution\n    ) internal pure {\n        assembly {\n            // Declare function for reverts on invalid fulfillment data.\n            function throwInvalidFulfillmentComponentData() {\n                // Store the InvalidFulfillmentComponentData error signature.\n                mstore(0, InvalidFulfillmentComponentData_error_signature)\n\n                // Return, supplying InvalidFulfillmentComponentData signature.\n                revert(0, InvalidFulfillmentComponentData_error_len)\n            }\n\n            // Declare function for reverts due to arithmetic overflows.\n            function throwOverflow() {\n                // Store the Panic error signature.\n                mstore(0, Panic_error_signature)\n\n                // Store the arithmetic (0x11) panic code as initial argument.\n                mstore(Panic_error_offset, Panic_arithmetic)\n\n                // Return, supplying Panic signature and arithmetic code.\n                revert(0, Panic_error_length)\n            }\n\n            // Get position in offerComponents head.\n            let fulfillmentHeadPtr := add(offerComponents, OneWord)\n\n            // Retrieve the order index using the fulfillment pointer.\n            let orderIndex := mload(mload(fulfillmentHeadPtr))\n\n            // Ensure that the order index is not out of range.\n            if iszero(lt(orderIndex, mload(advancedOrders))) {\n                throwInvalidFulfillmentComponentData()\n            }\n\n            // Read advancedOrders[orderIndex] pointer from its array head.\n            let orderPtr := mload(\n                // Calculate head position of advancedOrders[orderIndex].\n                add(add(advancedOrders, OneWord), mul(orderIndex, OneWord))\n            )\n\n            // Read the pointer to OrderParameters from the AdvancedOrder.\n            let paramsPtr := mload(orderPtr)\n\n            // Load the offer array pointer.\n            let offerArrPtr := mload(\n                add(paramsPtr, OrderParameters_offer_head_offset)\n            )\n\n            // Retrieve item index using an offset of the fulfillment pointer.\n            let itemIndex := mload(\n                add(mload(fulfillmentHeadPtr), Fulfillment_itemIndex_offset)\n            )\n\n            // Only continue if the fulfillment is not invalid.\n            if iszero(lt(itemIndex, mload(offerArrPtr))) {\n                throwInvalidFulfillmentComponentData()\n            }\n\n            // Retrieve consideration item pointer using the item index.\n            let offerItemPtr := mload(\n                add(\n                    // Get pointer to beginning of receivedItem.\n                    add(offerArrPtr, OneWord),\n                    // Calculate offset to pointer for desired order.\n                    mul(itemIndex, OneWord)\n                )\n            )\n\n            // Declare a variable for the final aggregated item amount.\n            let amount := 0\n\n            // Create variable to track errors encountered with amount.\n            let errorBuffer := 0\n\n            // Only add offer amount to execution amount on a nonzero numerator.\n            if mload(add(orderPtr, AdvancedOrder_numerator_offset)) {\n                // Retrieve amount pointer using consideration item pointer.\n                let amountPtr := add(offerItemPtr, Common_amount_offset)\n\n                // Set the amount.\n                amount := mload(amountPtr)\n\n                // Zero out amount on item to indicate it is credited.\n                mstore(amountPtr, 0)\n\n                // Buffer indicating whether issues were found.\n                errorBuffer := iszero(amount)\n            }\n\n            // Retrieve the received item pointer.\n            let receivedItemPtr := mload(execution)\n\n            // Set the item type on the received item.\n            mstore(receivedItemPtr, mload(offerItemPtr))\n\n            // Set the token on the received item.\n            mstore(\n                add(receivedItemPtr, Common_token_offset),\n                mload(add(offerItemPtr, Common_token_offset))\n            )\n\n            // Set the identifier on the received item.\n            mstore(\n                add(receivedItemPtr, Common_identifier_offset),\n                mload(add(offerItemPtr, Common_identifier_offset))\n            )\n\n            // Set the offerer on returned execution using order pointer.\n            mstore(add(execution, Execution_offerer_offset), mload(paramsPtr))\n\n            // Set conduitKey on returned execution via offset of order pointer.\n            mstore(\n                add(execution, Execution_conduit_offset),\n                mload(add(paramsPtr, OrderParameters_conduit_offset))\n            )\n\n            // Calculate the hash of (itemType, token, identifier).\n            let dataHash := keccak256(\n                receivedItemPtr,\n                ReceivedItem_CommonParams_size\n            )\n\n            // Get position one word past last element in head of array.\n            let endPtr := add(\n                offerComponents,\n                mul(mload(offerComponents), OneWord)\n            )\n\n            // Iterate over remaining offer components.\n            // prettier-ignore\n            for {} lt(fulfillmentHeadPtr,  endPtr) {} {\n                // Increment the pointer to the fulfillment head by one word.\n                fulfillmentHeadPtr := add(fulfillmentHeadPtr, OneWord)\n\n                // Get the order index using the fulfillment pointer.\n                orderIndex := mload(mload(fulfillmentHeadPtr))\n\n                // Ensure the order index is in range.\n                if iszero(lt(orderIndex, mload(advancedOrders))) {\n                  throwInvalidFulfillmentComponentData()\n                }\n\n                // Get pointer to AdvancedOrder element.\n                orderPtr := mload(\n                    add(\n                        add(advancedOrders, OneWord),\n                        mul(orderIndex, OneWord)\n                    )\n                )\n\n                // Only continue if numerator is not zero.\n                if iszero(mload(\n                    add(orderPtr, AdvancedOrder_numerator_offset)\n                )) {\n                  continue\n                }\n\n                // Read the pointer to OrderParameters from the AdvancedOrder.\n                paramsPtr := mload(orderPtr)\n\n                // Load offer array pointer.\n                offerArrPtr := mload(\n                    add(\n                        paramsPtr,\n                        OrderParameters_offer_head_offset\n                    )\n                )\n\n                // Get the item index using the fulfillment pointer.\n                itemIndex := mload(add(mload(fulfillmentHeadPtr), OneWord))\n\n                // Throw if itemIndex is out of the range of array.\n                if iszero(\n                    lt(itemIndex, mload(offerArrPtr))\n                ) {\n                    throwInvalidFulfillmentComponentData()\n                }\n\n                // Retrieve offer item pointer using index.\n                offerItemPtr := mload(\n                    add(\n                        // Get pointer to beginning of receivedItem.\n                        add(offerArrPtr, OneWord),\n                        // Use offset to pointer for desired order.\n                        mul(itemIndex, OneWord)\n                    )\n                )\n\n                // Retrieve amount pointer using offer item pointer.\n                let amountPtr := add(\n                      offerItemPtr,\n                      Common_amount_offset\n                )\n\n                // Add offer amount to execution amount.\n                let newAmount := add(amount, mload(amountPtr))\n\n                // Update error buffer: 1 = zero amount, 2 = overflow, 3 = both.\n                errorBuffer := or(\n                  errorBuffer,\n                  or(\n                    shl(1, lt(newAmount, amount)),\n                    iszero(mload(amountPtr))\n                  )\n                )\n\n                // Update the amount to the new, summed amount.\n                amount := newAmount\n\n                // Zero out amount on original item to indicate it is credited.\n                mstore(amountPtr, 0)\n\n                // Ensure the indicated item matches original item.\n                if iszero(\n                    and(\n                        and(\n                          // The offerer must match on both items.\n                          eq(\n                              mload(paramsPtr),\n                              mload(\n                                  add(execution, Execution_offerer_offset)\n                              )\n                          ),\n                          // The conduit key must match on both items.\n                          eq(\n                              mload(\n                                  add(\n                                      paramsPtr,\n                                      OrderParameters_conduit_offset\n                                  )\n                              ),\n                              mload(\n                                  add(\n                                      execution,\n                                      Execution_conduit_offset\n                                  )\n                              )\n                          )\n                        ),\n                        // The itemType, token, and identifier must match.\n                        eq(\n                            dataHash,\n                            keccak256(\n                                offerItemPtr,\n                                ReceivedItem_CommonParams_size\n                            )\n                        )\n                    )\n                ) {\n                    // Throw if any of the requirements are not met.\n                    throwInvalidFulfillmentComponentData()\n                }\n            }\n            // Write final amount to execution.\n            mstore(add(mload(execution), Common_amount_offset), amount)\n\n            // Determine whether the error buffer contains a nonzero error code.\n            if errorBuffer {\n                // If errorBuffer is 1, an item had an amount of zero.\n                if eq(errorBuffer, 1) {\n                    // Store the MissingItemAmount error signature.\n                    mstore(0, MissingItemAmount_error_signature)\n\n                    // Return, supplying MissingItemAmount signature.\n                    revert(0, MissingItemAmount_error_len)\n                }\n\n                // If errorBuffer is not 1 or 0, the sum overflowed.\n                // Panic!\n                throwOverflow()\n            }\n        }\n    }\n\n    /**\n     * @dev Internal pure function to aggregate a group of consideration items\n     *      using supplied directives on which component items are candidates\n     *      for aggregation, skipping items on orders that are not available.\n     *\n     * @param advancedOrders          The orders to aggregate consideration\n     *                                items from.\n     * @param considerationComponents An array of FulfillmentComponent structs\n     *                                indicating the order index and item index\n     *                                of each candidate consideration item for\n     *                                aggregation.\n     * @param execution       The execution to apply the aggregation to.\n     */\n    function _aggregateValidFulfillmentConsiderationItems(\n        AdvancedOrder[] memory advancedOrders,\n        FulfillmentComponent[] memory considerationComponents,\n        Execution memory execution\n    ) internal pure {\n        // Utilize assembly in order to efficiently aggregate the items.\n        assembly {\n            // Declare function for reverts on invalid fulfillment data.\n            function throwInvalidFulfillmentComponentData() {\n                // Store the InvalidFulfillmentComponentData error signature.\n                mstore(0, InvalidFulfillmentComponentData_error_signature)\n\n                // Return, supplying InvalidFulfillmentComponentData signature.\n                revert(0, InvalidFulfillmentComponentData_error_len)\n            }\n\n            // Declare function for reverts due to arithmetic overflows.\n            function throwOverflow() {\n                // Store the Panic error signature.\n                mstore(0, Panic_error_signature)\n\n                // Store the arithmetic (0x11) panic code as initial argument.\n                mstore(Panic_error_offset, Panic_arithmetic)\n\n                // Return, supplying Panic signature and arithmetic code.\n                revert(0, Panic_error_length)\n            }\n\n            // Get position in considerationComponents head.\n            let fulfillmentHeadPtr := add(considerationComponents, OneWord)\n\n            // Retrieve the order index using the fulfillment pointer.\n            let orderIndex := mload(mload(fulfillmentHeadPtr))\n\n            // Ensure that the order index is not out of range.\n            if iszero(lt(orderIndex, mload(advancedOrders))) {\n                throwInvalidFulfillmentComponentData()\n            }\n\n            // Read advancedOrders[orderIndex] pointer from its array head.\n            let orderPtr := mload(\n                // Calculate head position of advancedOrders[orderIndex].\n                add(add(advancedOrders, OneWord), mul(orderIndex, OneWord))\n            )\n\n            // Load consideration array pointer.\n            let considerationArrPtr := mload(\n                add(\n                    // Read pointer to OrderParameters from the AdvancedOrder.\n                    mload(orderPtr),\n                    OrderParameters_consideration_head_offset\n                )\n            )\n\n            // Retrieve item index using an offset of the fulfillment pointer.\n            let itemIndex := mload(\n                add(mload(fulfillmentHeadPtr), Fulfillment_itemIndex_offset)\n            )\n\n            // Ensure that the order index is not out of range.\n            if iszero(lt(itemIndex, mload(considerationArrPtr))) {\n                throwInvalidFulfillmentComponentData()\n            }\n\n            // Retrieve consideration item pointer using the item index.\n            let considerationItemPtr := mload(\n                add(\n                    // Get pointer to beginning of receivedItem.\n                    add(considerationArrPtr, OneWord),\n                    // Calculate offset to pointer for desired order.\n                    mul(itemIndex, OneWord)\n                )\n            )\n\n            // Declare a variable for the final aggregated item amount.\n            let amount := 0\n\n            // Create variable to track errors encountered with amount.\n            let errorBuffer := 0\n\n            // Only add consideration amount to execution amount if numerator is\n            // greater than zero.\n            if mload(add(orderPtr, AdvancedOrder_numerator_offset)) {\n                // Retrieve amount pointer using consideration item pointer.\n                let amountPtr := add(considerationItemPtr, Common_amount_offset)\n\n                // Set the amount.\n                amount := mload(amountPtr)\n\n                // Set error bit if amount is zero.\n                errorBuffer := iszero(amount)\n\n                // Zero out amount on item to indicate it is credited.\n                mstore(amountPtr, 0)\n            }\n\n            // Retrieve ReceivedItem pointer from Execution.\n            let receivedItem := mload(execution)\n\n            // Set the item type on the received item.\n            mstore(receivedItem, mload(considerationItemPtr))\n\n            // Set the token on the received item.\n            mstore(\n                add(receivedItem, Common_token_offset),\n                mload(add(considerationItemPtr, Common_token_offset))\n            )\n\n            // Set the identifier on the received item.\n            mstore(\n                add(receivedItem, Common_identifier_offset),\n                mload(add(considerationItemPtr, Common_identifier_offset))\n            )\n\n            // Set the recipient on the received item.\n            mstore(\n                add(receivedItem, ReceivedItem_recipient_offset),\n                mload(\n                    add(\n                        considerationItemPtr,\n                        ConsiderationItem_recipient_offset\n                    )\n                )\n            )\n\n            // Calculate the hash of (itemType, token, identifier).\n            let dataHash := keccak256(\n                receivedItem,\n                ReceivedItem_CommonParams_size\n            )\n\n            // Get position one word past last element in head of array.\n            let endPtr := add(\n                considerationComponents,\n                mul(mload(considerationComponents), OneWord)\n            )\n\n            // Iterate over remaining offer components.\n            // prettier-ignore\n            for {} lt(fulfillmentHeadPtr,  endPtr) {} {\n                // Increment position in considerationComponents head.\n                fulfillmentHeadPtr := add(fulfillmentHeadPtr, OneWord)\n\n                // Get the order index using the fulfillment pointer.\n                orderIndex := mload(mload(fulfillmentHeadPtr))\n\n                // Ensure the order index is in range.\n                if iszero(lt(orderIndex, mload(advancedOrders))) {\n                  throwInvalidFulfillmentComponentData()\n                }\n\n                // Get pointer to AdvancedOrder element.\n                orderPtr := mload(\n                    add(\n                        add(advancedOrders, OneWord),\n                        mul(orderIndex, OneWord)\n                    )\n                )\n\n                // Only continue if numerator is not zero.\n                if iszero(\n                    mload(add(orderPtr, AdvancedOrder_numerator_offset))\n                ) {\n                  continue\n                }\n\n                // Load consideration array pointer from OrderParameters.\n                considerationArrPtr := mload(\n                    add(\n                        // Get pointer to OrderParameters from AdvancedOrder.\n                        mload(orderPtr),\n                        OrderParameters_consideration_head_offset\n                    )\n                )\n\n                // Get the item index using the fulfillment pointer.\n                itemIndex := mload(add(mload(fulfillmentHeadPtr), OneWord))\n\n                // Check if itemIndex is within the range of array.\n                if iszero(lt(itemIndex, mload(considerationArrPtr))) {\n                    throwInvalidFulfillmentComponentData()\n                }\n\n                // Retrieve consideration item pointer using index.\n                considerationItemPtr := mload(\n                    add(\n                        // Get pointer to beginning of receivedItem.\n                        add(considerationArrPtr, OneWord),\n                        // Use offset to pointer for desired order.\n                        mul(itemIndex, OneWord)\n                    )\n                )\n\n                // Retrieve amount pointer using consideration item pointer.\n                let amountPtr := add(\n                      considerationItemPtr,\n                      Common_amount_offset\n                )\n\n                // Add offer amount to execution amount.\n                let newAmount := add(amount, mload(amountPtr))\n\n                // Update error buffer: 1 = zero amount, 2 = overflow, 3 = both.\n                errorBuffer := or(\n                  errorBuffer,\n                  or(\n                    shl(1, lt(newAmount, amount)),\n                    iszero(mload(amountPtr))\n                  )\n                )\n\n                // Update the amount to the new, summed amount.\n                amount := newAmount\n\n                // Zero out amount on original item to indicate it is credited.\n                mstore(amountPtr, 0)\n\n                // Ensure the indicated item matches original item.\n                if iszero(\n                    and(\n                        // Item recipients must match.\n                        eq(\n                            mload(\n                                add(\n                                    considerationItemPtr,\n                                    ConsiderItem_recipient_offset\n                                )\n                            ),\n                            mload(\n                                add(\n                                    receivedItem,\n                                    ReceivedItem_recipient_offset\n                                )\n                            )\n                        ),\n                        // The itemType, token, identifier must match.\n                        eq(\n                          dataHash,\n                          keccak256(\n                            considerationItemPtr,\n                            ReceivedItem_CommonParams_size\n                          )\n                        )\n                    )\n                ) {\n                    // Throw if any of the requirements are not met.\n                    throwInvalidFulfillmentComponentData()\n                }\n            }\n            // Write final amount to execution.\n            mstore(add(receivedItem, Common_amount_offset), amount)\n\n            // Determine whether the error buffer contains a nonzero error code.\n            if errorBuffer {\n                // If errorBuffer is 1, an item had an amount of zero.\n                if eq(errorBuffer, 1) {\n                    // Store the MissingItemAmount error signature.\n                    mstore(0, MissingItemAmount_error_signature)\n\n                    // Return, supplying MissingItemAmount signature.\n                    revert(0, MissingItemAmount_error_len)\n                }\n\n                // If errorBuffer is not 1 or 0, the sum overflowed.\n                // Panic!\n                throwOverflow()\n            }\n        }\n    }\n}\n"
    },
    "contracts/lib/GettersAndDerivers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.13;\n\nimport { OrderParameters } from \"./ConsiderationStructs.sol\";\n\nimport { ConsiderationBase } from \"./ConsiderationBase.sol\";\n\nimport \"./ConsiderationConstants.sol\";\n\n/**\n * @title GettersAndDerivers\n * @author 0age\n * @notice ConsiderationInternal contains pure and internal view functions\n *         related to getting or deriving various values.\n */\ncontract GettersAndDerivers is ConsiderationBase {\n    /**\n     * @dev Derive and set hashes, reference chainId, and associated domain\n     *      separator during deployment.\n     *\n     * @param conduitController A contract that deploys conduits, or proxies\n     *                          that may optionally be used to transfer approved\n     *                          ERC20/721/1155 tokens.\n     */\n    constructor(address conduitController)\n        ConsiderationBase(conduitController)\n    {}\n\n    /**\n     * @dev Internal view function to derive the order hash for a given order.\n     *      Note that only the original consideration items are included in the\n     *      order hash, as additional consideration items may be supplied by the\n     *      caller.\n     *\n     * @param orderParameters The parameters of the order to hash.\n     * @param counter           The counter of the order to hash.\n     *\n     * @return orderHash The hash.\n     */\n    function _deriveOrderHash(\n        OrderParameters memory orderParameters,\n        uint256 counter\n    ) internal view returns (bytes32 orderHash) {\n        // Get length of original consideration array and place it on the stack.\n        uint256 originalConsiderationLength = (\n            orderParameters.totalOriginalConsiderationItems\n        );\n\n        /*\n         * Memory layout for an array of structs (dynamic or not) is similar\n         * to ABI encoding of dynamic types, with a head segment followed by\n         * a data segment. The main difference is that the head of an element\n         * is a memory pointer rather than an offset.\n         */\n\n        // Declare a variable for the derived hash of the offer array.\n        bytes32 offerHash;\n\n        // Read offer item EIP-712 typehash from runtime code & place on stack.\n        bytes32 typeHash = _OFFER_ITEM_TYPEHASH;\n\n        // Utilize assembly so that memory regions can be reused across hashes.\n        assembly {\n            // Retrieve the free memory pointer and place on the stack.\n            let hashArrPtr := mload(FreeMemoryPointerSlot)\n\n            // Get the pointer to the offers array.\n            let offerArrPtr := mload(\n                add(orderParameters, OrderParameters_offer_head_offset)\n            )\n\n            // Load the length.\n            let offerLength := mload(offerArrPtr)\n\n            // Set the pointer to the first offer's head.\n            offerArrPtr := add(offerArrPtr, OneWord)\n\n            // Iterate over the offer items.\n            // prettier-ignore\n            for { let i := 0 } lt(i, offerLength) {\n                i := add(i, 1)\n            } {\n                // Read the pointer to the offer data and subtract one word\n                // to get typeHash pointer.\n                let ptr := sub(mload(offerArrPtr), OneWord)\n\n                // Read the current value before the offer data.\n                let value := mload(ptr)\n\n                // Write the type hash to the previous word.\n                mstore(ptr, typeHash)\n\n                // Take the EIP712 hash and store it in the hash array.\n                mstore(hashArrPtr, keccak256(ptr, EIP712_OfferItem_size))\n\n                // Restore the previous word.\n                mstore(ptr, value)\n\n                // Increment the array pointers by one word.\n                offerArrPtr := add(offerArrPtr, OneWord)\n                hashArrPtr := add(hashArrPtr, OneWord)\n            }\n\n            // Derive the offer hash using the hashes of each item.\n            offerHash := keccak256(\n                mload(FreeMemoryPointerSlot),\n                mul(offerLength, OneWord)\n            )\n        }\n\n        // Declare a variable for the derived hash of the consideration array.\n        bytes32 considerationHash;\n\n        // Read consideration item typehash from runtime code & place on stack.\n        typeHash = _CONSIDERATION_ITEM_TYPEHASH;\n\n        // Utilize assembly so that memory regions can be reused across hashes.\n        assembly {\n            // Retrieve the free memory pointer and place on the stack.\n            let hashArrPtr := mload(FreeMemoryPointerSlot)\n\n            // Get the pointer to the consideration array.\n            let considerationArrPtr := add(\n                mload(\n                    add(\n                        orderParameters,\n                        OrderParameters_consideration_head_offset\n                    )\n                ),\n                OneWord\n            )\n\n            // Iterate over the consideration items (not including tips).\n            // prettier-ignore\n            for { let i := 0 } lt(i, originalConsiderationLength) {\n                i := add(i, 1)\n            } {\n                // Read the pointer to the consideration data and subtract one\n                // word to get typeHash pointer.\n                let ptr := sub(mload(considerationArrPtr), OneWord)\n\n                // Read the current value before the consideration data.\n                let value := mload(ptr)\n\n                // Write the type hash to the previous word.\n                mstore(ptr, typeHash)\n\n                // Take the EIP712 hash and store it in the hash array.\n                mstore(\n                    hashArrPtr,\n                    keccak256(ptr, EIP712_ConsiderationItem_size)\n                )\n\n                // Restore the previous word.\n                mstore(ptr, value)\n\n                // Increment the array pointers by one word.\n                considerationArrPtr := add(considerationArrPtr, OneWord)\n                hashArrPtr := add(hashArrPtr, OneWord)\n            }\n\n            // Derive the consideration hash using the hashes of each item.\n            considerationHash := keccak256(\n                mload(FreeMemoryPointerSlot),\n                mul(originalConsiderationLength, OneWord)\n            )\n        }\n\n        // Read order item EIP-712 typehash from runtime code & place on stack.\n        typeHash = _ORDER_TYPEHASH;\n\n        // Utilize assembly to access derived hashes & other arguments directly.\n        assembly {\n            // Retrieve pointer to the region located just behind parameters.\n            let typeHashPtr := sub(orderParameters, OneWord)\n\n            // Store the value at that pointer location to restore later.\n            let previousValue := mload(typeHashPtr)\n\n            // Store the order item EIP-712 typehash at the typehash location.\n            mstore(typeHashPtr, typeHash)\n\n            // Retrieve the pointer for the offer array head.\n            let offerHeadPtr := add(\n                orderParameters,\n                OrderParameters_offer_head_offset\n            )\n\n            // Retrieve the data pointer referenced by the offer head.\n            let offerDataPtr := mload(offerHeadPtr)\n\n            // Store the offer hash at the retrieved memory location.\n            mstore(offerHeadPtr, offerHash)\n\n            // Retrieve the pointer for the consideration array head.\n            let considerationHeadPtr := add(\n                orderParameters,\n                OrderParameters_consideration_head_offset\n            )\n\n            // Retrieve the data pointer referenced by the consideration head.\n            let considerationDataPtr := mload(considerationHeadPtr)\n\n            // Store the consideration hash at the retrieved memory location.\n            mstore(considerationHeadPtr, considerationHash)\n\n            // Retrieve the pointer for the counter.\n            let counterPtr := add(\n                orderParameters,\n                OrderParameters_counter_offset\n            )\n\n            // Store the counter at the retrieved memory location.\n            mstore(counterPtr, counter)\n\n            // Derive the order hash using the full range of order parameters.\n            orderHash := keccak256(typeHashPtr, EIP712_Order_size)\n\n            // Restore the value previously held at typehash pointer location.\n            mstore(typeHashPtr, previousValue)\n\n            // Restore offer data pointer at the offer head pointer location.\n            mstore(offerHeadPtr, offerDataPtr)\n\n            // Restore consideration data pointer at the consideration head ptr.\n            mstore(considerationHeadPtr, considerationDataPtr)\n\n            // Restore consideration item length at the counter pointer.\n            mstore(counterPtr, originalConsiderationLength)\n        }\n    }\n\n    /**\n     * @dev Internal view function to derive the address of a given conduit\n     *      using a corresponding conduit key.\n     *\n     * @param conduitKey A bytes32 value indicating what corresponding conduit,\n     *                   if any, to source token approvals from. This value is\n     *                   the \"salt\" parameter supplied by the deployer (i.e. the\n     *                   conduit controller) when deploying the given conduit.\n     *\n     * @return conduit The address of the conduit associated with the given\n     *                 conduit key.\n     */\n    function _deriveConduit(bytes32 conduitKey)\n        internal\n        view\n        returns (address conduit)\n    {\n        // Read conduit controller address from runtime and place on the stack.\n        address conduitController = address(_CONDUIT_CONTROLLER);\n\n        // Read conduit creation code hash from runtime and place on the stack.\n        bytes32 conduitCreationCodeHash = _CONDUIT_CREATION_CODE_HASH;\n\n        // Leverage scratch space to perform an efficient hash.\n        assembly {\n            // Retrieve the free memory pointer; it will be replaced afterwards.\n            let freeMemoryPointer := mload(FreeMemoryPointerSlot)\n\n            // Place the control character and the conduit controller in scratch\n            // space; note that eleven bytes at the beginning are left unused.\n            mstore(0, or(MaskOverByteTwelve, conduitController))\n\n            // Place the conduit key in the next region of scratch space.\n            mstore(OneWord, conduitKey)\n\n            // Place conduit creation code hash in free memory pointer location.\n            mstore(TwoWords, conduitCreationCodeHash)\n\n            // Derive conduit by hashing and applying a mask over last 20 bytes.\n            conduit := and(\n                // Hash the relevant region.\n                keccak256(\n                    // The region starts at memory pointer 11.\n                    Create2AddressDerivation_ptr,\n                    // The region is 85 bytes long (1 + 20 + 32 + 32).\n                    Create2AddressDerivation_length\n                ),\n                // The address equals the last twenty bytes of the hash.\n                MaskOverLastTwentyBytes\n            )\n\n            // Restore the free memory pointer.\n            mstore(FreeMemoryPointerSlot, freeMemoryPointer)\n        }\n    }\n\n    /**\n     * @dev Internal view function to get the EIP-712 domain separator. If the\n     *      chainId matches the chainId set on deployment, the cached domain\n     *      separator will be returned; otherwise, it will be derived from\n     *      scratch.\n     *\n     * @return The domain separator.\n     */\n    function _domainSeparator() internal view returns (bytes32) {\n        // prettier-ignore\n        return block.chainid == _CHAIN_ID\n            ? _DOMAIN_SEPARATOR\n            : _deriveDomainSeparator();\n    }\n\n    /**\n     * @dev Internal view function to retrieve configuration information for\n     *      this contract.\n     *\n     * @return version           The contract version.\n     * @return domainSeparator   The domain separator for this contract.\n     * @return conduitController The conduit Controller set for this contract.\n     */\n    function _information()\n        internal\n        view\n        returns (\n            string memory version,\n            bytes32 domainSeparator,\n            address conduitController\n        )\n    {\n        // Derive the domain separator.\n        domainSeparator = _domainSeparator();\n\n        // Declare variable as immutables cannot be accessed within assembly.\n        conduitController = address(_CONDUIT_CONTROLLER);\n\n        // Allocate a string with the intended length.\n        version = new string(Version_length);\n\n        // Set the version as data on the newly allocated string.\n        assembly {\n            mstore(add(version, OneWord), shl(Version_shift, Version))\n        }\n    }\n\n    /**\n     * @dev Internal pure function to efficiently derive an digest to sign for\n     *      an order in accordance with EIP-712.\n     *\n     * @param domainSeparator The domain separator.\n     * @param orderHash       The order hash.\n     *\n     * @return value The hash.\n     */\n    function _deriveEIP712Digest(bytes32 domainSeparator, bytes32 orderHash)\n        internal\n        pure\n        returns (bytes32 value)\n    {\n        // Leverage scratch space to perform an efficient hash.\n        assembly {\n            // Place the EIP-712 prefix at the start of scratch space.\n            mstore(0, EIP_712_PREFIX)\n\n            // Place the domain separator in the next region of scratch space.\n            mstore(EIP712_DomainSeparator_offset, domainSeparator)\n\n            // Place the order hash in scratch space, spilling into the first\n            // two bytes of the free memory pointer — this should never be set\n            // as memory cannot be expanded to that size, and will be zeroed out\n            // after the hash is performed.\n            mstore(EIP712_OrderHash_offset, orderHash)\n\n            // Hash the relevant region (65 bytes).\n            value := keccak256(0, EIP712_DigestPayload_size)\n\n            // Clear out the dirtied bits in the memory pointer.\n            mstore(EIP712_OrderHash_offset, 0)\n        }\n    }\n}\n"
    },
    "contracts/lib/LowLevelHelpers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.13;\n\nimport \"./ConsiderationConstants.sol\";\n\n/**\n * @title LowLevelHelpers\n * @author 0age\n * @notice LowLevelHelpers contains logic for performing various low-level\n *         operations.\n */\ncontract LowLevelHelpers {\n    /**\n     * @dev Internal view function to staticcall an arbitrary target with given\n     *      calldata. Note that no data is written to memory and no contract\n     *      size check is performed.\n     *\n     * @param target   The account to staticcall.\n     * @param callData The calldata to supply when staticcalling the target.\n     *\n     * @return success The status of the staticcall to the target.\n     */\n    function _staticcall(address target, bytes memory callData)\n        internal\n        view\n        returns (bool success)\n    {\n        assembly {\n            // Perform the staticcall.\n            success := staticcall(\n                gas(),\n                target,\n                add(callData, OneWord),\n                mload(callData),\n                0,\n                0\n            )\n        }\n    }\n\n    /**\n     * @dev Internal view function to revert and pass along the revert reason if\n     *      data was returned by the last call and that the size of that data\n     *      does not exceed the currently allocated memory size.\n     */\n    function _revertWithReasonIfOneIsReturned() internal view {\n        assembly {\n            // If it returned a message, bubble it up as long as sufficient gas\n            // remains to do so:\n            if returndatasize() {\n                // Ensure that sufficient gas is available to copy returndata\n                // while expanding memory where necessary. Start by computing\n                // the word size of returndata and allocated memory.\n                let returnDataWords := div(\n                    add(returndatasize(), AlmostOneWord),\n                    OneWord\n                )\n\n                // Note: use the free memory pointer in place of msize() to work\n                // around a Yul warning that prevents accessing msize directly\n                // when the IR pipeline is activated.\n                let msizeWords := div(mload(FreeMemoryPointerSlot), OneWord)\n\n                // Next, compute the cost of the returndatacopy.\n                let cost := mul(CostPerWord, returnDataWords)\n\n                // Then, compute cost of new memory allocation.\n                if gt(returnDataWords, msizeWords) {\n                    cost := add(\n                        cost,\n                        add(\n                            mul(sub(returnDataWords, msizeWords), CostPerWord),\n                            div(\n                                sub(\n                                    mul(returnDataWords, returnDataWords),\n                                    mul(msizeWords, msizeWords)\n                                ),\n                                MemoryExpansionCoefficient\n                            )\n                        )\n                    )\n                }\n\n                // Finally, add a small constant and compare to gas remaining;\n                // bubble up the revert data if enough gas is still available.\n                if lt(add(cost, ExtraGasBuffer), gas()) {\n                    // Copy returndata to memory; overwrite existing memory.\n                    returndatacopy(0, 0, returndatasize())\n\n                    // Revert, specifying memory region with copied returndata.\n                    revert(0, returndatasize())\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Internal pure function to determine if the first word of returndata\n     *      matches an expected magic value.\n     *\n     * @param expected The expected magic value.\n     *\n     * @return A boolean indicating whether the expected value matches the one\n     *         located in the first word of returndata.\n     */\n    function _doesNotMatchMagic(bytes4 expected) internal pure returns (bool) {\n        // Declare a variable for the value held by the return data buffer.\n        bytes4 result;\n\n        // Utilize assembly in order to read directly from returndata buffer.\n        assembly {\n            // Only put result on stack if return data is exactly one word.\n            if eq(returndatasize(), OneWord) {\n                // Copy the word directly from return data into scratch space.\n                returndatacopy(0, 0, OneWord)\n\n                // Take value from scratch space and place it on the stack.\n                result := mload(0)\n            }\n        }\n\n        // Return a boolean indicating whether expected and located value match.\n        return result != expected;\n    }\n}\n"
    },
    "contracts/lib/OrderCombiner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.13;\n\nimport { Side, ItemType } from \"./ConsiderationEnums.sol\";\n\n// prettier-ignore\nimport {\n    OfferItem,\n    ConsiderationItem,\n    ReceivedItem,\n    OrderParameters,\n    Fulfillment,\n    FulfillmentComponent,\n    Execution,\n    Order,\n    AdvancedOrder,\n    CriteriaResolver\n} from \"./ConsiderationStructs.sol\";\n\nimport { OrderFulfiller } from \"./OrderFulfiller.sol\";\n\nimport { FulfillmentApplier } from \"./FulfillmentApplier.sol\";\n\nimport \"./ConsiderationConstants.sol\";\n\n/**\n * @title OrderCombiner\n * @author 0age\n * @notice OrderCombiner contains logic for fulfilling combinations of orders,\n *         either by matching offer items to consideration items or by\n *         fulfilling orders where available.\n */\ncontract OrderCombiner is OrderFulfiller, FulfillmentApplier {\n    /**\n     * @dev Derive and set hashes, reference chainId, and associated domain\n     *      separator during deployment.\n     *\n     * @param conduitController A contract that deploys conduits, or proxies\n     *                          that may optionally be used to transfer approved\n     *                          ERC20/721/1155 tokens.\n     */\n    constructor(address conduitController) OrderFulfiller(conduitController) {}\n\n    /**\n     * @notice Internal function to attempt to fill a group of orders, fully or\n     *         partially, with an arbitrary number of items for offer and\n     *         consideration per order alongside criteria resolvers containing\n     *         specific token identifiers and associated proofs. Any order that\n     *         is not currently active, has already been fully filled, or has\n     *         been cancelled will be omitted. Remaining offer and consideration\n     *         items will then be aggregated where possible as indicated by the\n     *         supplied offer and consideration component arrays and aggregated\n     *         items will be transferred to the fulfiller or to each intended\n     *         recipient, respectively. Note that a failing item transfer or an\n     *         issue with order formatting will cause the entire batch to fail.\n     *\n     * @param advancedOrders            The orders to fulfill along with the\n     *                                  fraction of those orders to attempt to\n     *                                  fill. Note that both the offerer and the\n     *                                  fulfiller must first approve this\n     *                                  contract (or a conduit if indicated by\n     *                                  the order) to transfer any relevant\n     *                                  tokens on their behalf and that\n     *                                  contracts must implement\n     *                                  `onERC1155Received` in order to receive\n     *                                  ERC1155 tokens as consideration. Also\n     *                                  note that all offer and consideration\n     *                                  components must have no remainder after\n     *                                  multiplication of the respective amount\n     *                                  with the supplied fraction for an\n     *                                  order's partial fill amount to be\n     *                                  considered valid.\n     * @param criteriaResolvers         An array where each element contains a\n     *                                  reference to a specific offer or\n     *                                  consideration, a token identifier, and a\n     *                                  proof that the supplied token identifier\n     *                                  is contained in the merkle root held by\n     *                                  the item in question's criteria element.\n     *                                  Note that an empty criteria indicates\n     *                                  that any (transferable) token\n     *                                  identifier on the token in question is\n     *                                  valid and that no associated proof needs\n     *                                  to be supplied.\n     * @param offerFulfillments         An array of FulfillmentComponent arrays\n     *                                  indicating which offer items to attempt\n     *                                  to aggregate when preparing executions.\n     * @param considerationFulfillments An array of FulfillmentComponent arrays\n     *                                  indicating which consideration items to\n     *                                  attempt to aggregate when preparing\n     *                                  executions.\n     * @param fulfillerConduitKey       A bytes32 value indicating what conduit,\n     *                                  if any, to source the fulfiller's token\n     *                                  approvals from. The zero hash signifies\n     *                                  that no conduit should be used (and\n     *                                  direct approvals set on Consideration).\n     * @param recipient                 The intended recipient for all received\n     *                                  items.\n     * @param maximumFulfilled          The maximum number of orders to fulfill.\n     *\n     * @return availableOrders An array of booleans indicating if each order\n     *                         with an index corresponding to the index of the\n     *                         returned boolean was fulfillable or not.\n     * @return executions      An array of elements indicating the sequence of\n     *                         transfers performed as part of matching the given\n     *                         orders.\n     */\n    function _fulfillAvailableAdvancedOrders(\n        AdvancedOrder[] memory advancedOrders,\n        CriteriaResolver[] memory criteriaResolvers,\n        FulfillmentComponent[][] calldata offerFulfillments,\n        FulfillmentComponent[][] calldata considerationFulfillments,\n        bytes32 fulfillerConduitKey,\n        address recipient,\n        uint256 maximumFulfilled\n    )\n        internal\n        returns (bool[] memory availableOrders, Execution[] memory executions)\n    {\n        // Validate orders, apply amounts, & determine if they utilize conduits.\n        _validateOrdersAndPrepareToFulfill(\n            advancedOrders,\n            criteriaResolvers,\n            false, // Signifies that invalid orders should NOT revert.\n            maximumFulfilled,\n            recipient\n        );\n\n        // Aggregate used offer and consideration items and execute transfers.\n        (availableOrders, executions) = _executeAvailableFulfillments(\n            advancedOrders,\n            offerFulfillments,\n            considerationFulfillments,\n            fulfillerConduitKey,\n            recipient\n        );\n\n        // Return order fulfillment details and executions.\n        return (availableOrders, executions);\n    }\n\n    /**\n     * @dev Internal function to validate a group of orders, update their\n     *      statuses, reduce amounts by their previously filled fractions, apply\n     *      criteria resolvers, and emit OrderFulfilled events.\n     *\n     * @param advancedOrders    The advanced orders to validate and reduce by\n     *                          their previously filled amounts.\n     * @param criteriaResolvers An array where each element contains a reference\n     *                          to a specific order as well as that order's\n     *                          offer or consideration, a token identifier, and\n     *                          a proof that the supplied token identifier is\n     *                          contained in the order's merkle root. Note that\n     *                          a root of zero indicates that any transferable\n     *                          token identifier is valid and that no proof\n     *                          needs to be supplied.\n     * @param revertOnInvalid   A boolean indicating whether to revert on any\n     *                          order being invalid; setting this to false will\n     *                          instead cause the invalid order to be skipped.\n     * @param maximumFulfilled  The maximum number of orders to fulfill.\n     * @param recipient         The intended recipient for all received items.\n     */\n    function _validateOrdersAndPrepareToFulfill(\n        AdvancedOrder[] memory advancedOrders,\n        CriteriaResolver[] memory criteriaResolvers,\n        bool revertOnInvalid,\n        uint256 maximumFulfilled,\n        address recipient\n    ) internal {\n        // Ensure this function cannot be triggered during a reentrant call.\n        _setReentrancyGuard();\n\n        // Read length of orders array and place on the stack.\n        uint256 totalOrders = advancedOrders.length;\n\n        // Track the order hash for each order being fulfilled.\n        bytes32[] memory orderHashes = new bytes32[](totalOrders);\n\n        // Override orderHashes length to zero after memory has been allocated.\n        assembly {\n            mstore(orderHashes, 0)\n        }\n\n        // Declare an error buffer indicating status of any native offer items.\n        // {00} == 0 => In a match function, no native offer items: allow.\n        // {01} == 1 => In a match function, some native offer items: allow.\n        // {10} == 2 => Not in a match function, no native offer items: allow.\n        // {11} == 3 => Not in a match function, some native offer items: THROW.\n        uint256 invalidNativeOfferItemErrorBuffer;\n\n        // Use assembly to set the value for the second bit of the error buffer.\n        assembly {\n            // Use the second bit of the error buffer to indicate whether the\n            // current function is not matchAdvancedOrders or matchOrders.\n            invalidNativeOfferItemErrorBuffer := shl(\n                1,\n                gt(\n                    // Take the remainder of the selector modulo a magic value.\n                    mod(\n                        shr(NumBitsAfterSelector, calldataload(0)),\n                        NonMatchSelector_MagicModulus\n                    ),\n                    // Check if remainder is higher than the greatest remainder\n                    // of the two match selectors modulo the magic value.\n                    NonMatchSelector_MagicRemainder\n                )\n            )\n        }\n\n        // Skip overflow checks as all for loops are indexed starting at zero.\n        unchecked {\n            // Iterate over each order.\n            for (uint256 i = 0; i < totalOrders; ++i) {\n                // Retrieve the current order.\n                AdvancedOrder memory advancedOrder = advancedOrders[i];\n\n                // Determine if max number orders have already been fulfilled.\n                if (maximumFulfilled == 0) {\n                    // Mark fill fraction as zero as the order will not be used.\n                    advancedOrder.numerator = 0;\n\n                    // Update the length of the orderHashes array.\n                    assembly {\n                        mstore(orderHashes, add(i, 1))\n                    }\n\n                    // Continue iterating through the remaining orders.\n                    continue;\n                }\n\n                // Validate it, update status, and determine fraction to fill.\n                (\n                    bytes32 orderHash,\n                    uint256 numerator,\n                    uint256 denominator\n                ) = _validateOrderAndUpdateStatus(\n                        advancedOrder,\n                        criteriaResolvers,\n                        revertOnInvalid,\n                        orderHashes\n                    );\n\n                // Update the length of the orderHashes array.\n                assembly {\n                    mstore(orderHashes, add(i, 1))\n                }\n\n                // Do not track hash or adjust prices if order is not fulfilled.\n                if (numerator == 0) {\n                    // Mark fill fraction as zero if the order is not fulfilled.\n                    advancedOrder.numerator = 0;\n\n                    // Continue iterating through the remaining orders.\n                    continue;\n                }\n\n                // Otherwise, track the order hash in question.\n                orderHashes[i] = orderHash;\n\n                // Decrement the number of fulfilled orders.\n                // Skip underflow check as the condition before\n                // implies that maximumFulfilled > 0.\n                maximumFulfilled--;\n\n                // Place the start time for the order on the stack.\n                uint256 startTime = advancedOrder.parameters.startTime;\n\n                // Place the end time for the order on the stack.\n                uint256 endTime = advancedOrder.parameters.endTime;\n\n                // Retrieve array of offer items for the order in question.\n                OfferItem[] memory offer = advancedOrder.parameters.offer;\n\n                // Read length of offer array and place on the stack.\n                uint256 totalOfferItems = offer.length;\n\n                // Iterate over each offer item on the order.\n                for (uint256 j = 0; j < totalOfferItems; ++j) {\n                    // Retrieve the offer item.\n                    OfferItem memory offerItem = offer[j];\n\n                    assembly {\n                        // If the offer item is for the native token, set the\n                        // first bit of the error buffer to true.\n                        invalidNativeOfferItemErrorBuffer := or(\n                            invalidNativeOfferItemErrorBuffer,\n                            iszero(mload(offerItem))\n                        )\n                    }\n\n                    // Apply order fill fraction to offer item end amount.\n                    uint256 endAmount = _getFraction(\n                        numerator,\n                        denominator,\n                        offerItem.endAmount\n                    );\n\n                    // Reuse same fraction if start and end amounts are equal.\n                    if (offerItem.startAmount == offerItem.endAmount) {\n                        // Apply derived amount to both start and end amount.\n                        offerItem.startAmount = endAmount;\n                    } else {\n                        // Apply order fill fraction to offer item start amount.\n                        offerItem.startAmount = _getFraction(\n                            numerator,\n                            denominator,\n                            offerItem.startAmount\n                        );\n                    }\n\n                    // Update end amount in memory to match the derived amount.\n                    offerItem.endAmount = endAmount;\n\n                    // Adjust offer amount using current time; round down.\n                    offerItem.startAmount = _locateCurrentAmount(\n                        offerItem.startAmount,\n                        offerItem.endAmount,\n                        startTime,\n                        endTime,\n                        false // round down\n                    );\n                }\n\n                // Retrieve array of consideration items for order in question.\n                ConsiderationItem[] memory consideration = (\n                    advancedOrder.parameters.consideration\n                );\n\n                // Read length of consideration array and place on the stack.\n                uint256 totalConsiderationItems = consideration.length;\n\n                // Iterate over each consideration item on the order.\n                for (uint256 j = 0; j < totalConsiderationItems; ++j) {\n                    // Retrieve the consideration item.\n                    ConsiderationItem memory considerationItem = (\n                        consideration[j]\n                    );\n\n                    // Apply fraction to consideration item end amount.\n                    uint256 endAmount = _getFraction(\n                        numerator,\n                        denominator,\n                        considerationItem.endAmount\n                    );\n\n                    // Reuse same fraction if start and end amounts are equal.\n                    if (\n                        considerationItem.startAmount ==\n                        considerationItem.endAmount\n                    ) {\n                        // Apply derived amount to both start and end amount.\n                        considerationItem.startAmount = endAmount;\n                    } else {\n                        // Apply fraction to consideration item start amount.\n                        considerationItem.startAmount = _getFraction(\n                            numerator,\n                            denominator,\n                            considerationItem.startAmount\n                        );\n                    }\n\n                    // Update end amount in memory to match the derived amount.\n                    considerationItem.endAmount = endAmount;\n\n                    // Adjust consideration amount using current time; round up.\n                    considerationItem.startAmount = (\n                        _locateCurrentAmount(\n                            considerationItem.startAmount,\n                            considerationItem.endAmount,\n                            startTime,\n                            endTime,\n                            true // round up\n                        )\n                    );\n\n                    // Utilize assembly to manually \"shift\" the recipient value.\n                    assembly {\n                        // Write recipient to endAmount, as endAmount is not\n                        // used from this point on and can be repurposed to fit\n                        // the layout of a ReceivedItem.\n                        mstore(\n                            add(\n                                considerationItem,\n                                ReceivedItem_recipient_offset // old endAmount\n                            ),\n                            mload(\n                                add(\n                                    considerationItem,\n                                    ConsiderationItem_recipient_offset\n                                )\n                            )\n                        )\n                    }\n                }\n            }\n        }\n\n        // If the first bit is set, a native offer item was encountered. If the\n        // second bit is set in the error buffer, the current function is not\n        // matchOrders or matchAdvancedOrders. If the value is three, both the\n        // first and second bits were set; in that case, revert with an error.\n        if (invalidNativeOfferItemErrorBuffer == 3) {\n            revert InvalidNativeOfferItem();\n        }\n\n        // Apply criteria resolvers to each order as applicable.\n        _applyCriteriaResolvers(advancedOrders, criteriaResolvers);\n\n        // Emit an event for each order signifying that it has been fulfilled.\n        // Skip overflow checks as all for loops are indexed starting at zero.\n        unchecked {\n            // Iterate over each order.\n            for (uint256 i = 0; i < totalOrders; ++i) {\n                // Do not emit an event if no order hash is present.\n                if (orderHashes[i] == bytes32(0)) {\n                    continue;\n                }\n\n                // Retrieve parameters for the order in question.\n                OrderParameters memory orderParameters = (\n                    advancedOrders[i].parameters\n                );\n\n                // Emit an OrderFulfilled event.\n                _emitOrderFulfilledEvent(\n                    orderHashes[i],\n                    orderParameters.offerer,\n                    orderParameters.zone,\n                    recipient,\n                    orderParameters.offer,\n                    orderParameters.consideration\n                );\n            }\n        }\n    }\n\n    /**\n     * @dev Internal function to fulfill a group of validated orders, fully or\n     *      partially, with an arbitrary number of items for offer and\n     *      consideration per order and to execute transfers. Any order that is\n     *      not currently active, has already been fully filled, or has been\n     *      cancelled will be omitted. Remaining offer and consideration items\n     *      will then be aggregated where possible as indicated by the supplied\n     *      offer and consideration component arrays and aggregated items will\n     *      be transferred to the fulfiller or to each intended recipient,\n     *      respectively. Note that a failing item transfer or an issue with\n     *      order formatting will cause the entire batch to fail.\n     *\n     * @param advancedOrders            The orders to fulfill along with the\n     *                                  fraction of those orders to attempt to\n     *                                  fill. Note that both the offerer and the\n     *                                  fulfiller must first approve this\n     *                                  contract (or the conduit if indicated by\n     *                                  the order) to transfer any relevant\n     *                                  tokens on their behalf and that\n     *                                  contracts must implement\n     *                                  `onERC1155Received` in order to receive\n     *                                  ERC1155 tokens as consideration. Also\n     *                                  note that all offer and consideration\n     *                                  components must have no remainder after\n     *                                  multiplication of the respective amount\n     *                                  with the supplied fraction for an\n     *                                  order's partial fill amount to be\n     *                                  considered valid.\n     * @param offerFulfillments         An array of FulfillmentComponent arrays\n     *                                  indicating which offer items to attempt\n     *                                  to aggregate when preparing executions.\n     * @param considerationFulfillments An array of FulfillmentComponent arrays\n     *                                  indicating which consideration items to\n     *                                  attempt to aggregate when preparing\n     *                                  executions.\n     * @param fulfillerConduitKey       A bytes32 value indicating what conduit,\n     *                                  if any, to source the fulfiller's token\n     *                                  approvals from. The zero hash signifies\n     *                                  that no conduit should be used, with\n     *                                  direct approvals set on Consideration.\n     * @param recipient                 The intended recipient for all received\n     *                                  items.\n     *\n     * @return availableOrders An array of booleans indicating if each order\n     *                         with an index corresponding to the index of the\n     *                         returned boolean was fulfillable or not.\n     * @return executions      An array of elements indicating the sequence of\n     *                         transfers performed as part of matching the given\n     *                         orders.\n     */\n    function _executeAvailableFulfillments(\n        AdvancedOrder[] memory advancedOrders,\n        FulfillmentComponent[][] memory offerFulfillments,\n        FulfillmentComponent[][] memory considerationFulfillments,\n        bytes32 fulfillerConduitKey,\n        address recipient\n    )\n        internal\n        returns (bool[] memory availableOrders, Execution[] memory executions)\n    {\n        // Retrieve length of offer fulfillments array and place on the stack.\n        uint256 totalOfferFulfillments = offerFulfillments.length;\n\n        // Retrieve length of consideration fulfillments array & place on stack.\n        uint256 totalConsiderationFulfillments = (\n            considerationFulfillments.length\n        );\n\n        // Allocate an execution for each offer and consideration fulfillment.\n        executions = new Execution[](\n            totalOfferFulfillments + totalConsiderationFulfillments\n        );\n\n        // Skip overflow checks as all for loops are indexed starting at zero.\n        unchecked {\n            // Track number of filtered executions.\n            uint256 totalFilteredExecutions = 0;\n\n            // Iterate over each offer fulfillment.\n            for (uint256 i = 0; i < totalOfferFulfillments; ++i) {\n                /// Retrieve the offer fulfillment components in question.\n                FulfillmentComponent[] memory components = (\n                    offerFulfillments[i]\n                );\n\n                // Derive aggregated execution corresponding with fulfillment.\n                Execution memory execution = _aggregateAvailable(\n                    advancedOrders,\n                    Side.OFFER,\n                    components,\n                    fulfillerConduitKey,\n                    recipient\n                );\n\n                // If offerer and recipient on the execution are the same...\n                if (execution.item.recipient == execution.offerer) {\n                    // Increment total filtered executions.\n                    ++totalFilteredExecutions;\n                } else {\n                    // Otherwise, assign the execution to the executions array.\n                    executions[i - totalFilteredExecutions] = execution;\n                }\n            }\n\n            // Iterate over each consideration fulfillment.\n            for (uint256 i = 0; i < totalConsiderationFulfillments; ++i) {\n                /// Retrieve consideration fulfillment components in question.\n                FulfillmentComponent[] memory components = (\n                    considerationFulfillments[i]\n                );\n\n                // Derive aggregated execution corresponding with fulfillment.\n                Execution memory execution = _aggregateAvailable(\n                    advancedOrders,\n                    Side.CONSIDERATION,\n                    components,\n                    fulfillerConduitKey,\n                    address(0) // unused\n                );\n\n                // If offerer and recipient on the execution are the same...\n                if (execution.item.recipient == execution.offerer) {\n                    // Increment total filtered executions.\n                    ++totalFilteredExecutions;\n                } else {\n                    // Otherwise, assign the execution to the executions array.\n                    executions[\n                        i + totalOfferFulfillments - totalFilteredExecutions\n                    ] = execution;\n                }\n            }\n\n            // If some number of executions have been filtered...\n            if (totalFilteredExecutions != 0) {\n                // reduce the total length of the executions array.\n                assembly {\n                    mstore(\n                        executions,\n                        sub(mload(executions), totalFilteredExecutions)\n                    )\n                }\n            }\n        }\n\n        // Revert if no orders are available.\n        if (executions.length == 0) {\n            revert NoSpecifiedOrdersAvailable();\n        }\n\n        // Perform final checks and return.\n        availableOrders = _performFinalChecksAndExecuteOrders(\n            advancedOrders,\n            executions\n        );\n\n        return (availableOrders, executions);\n    }\n\n    /**\n     * @dev Internal function to perform a final check that each consideration\n     *      item for an arbitrary number of fulfilled orders has been met and to\n     *      trigger associated executions, transferring the respective items.\n     *\n     * @param advancedOrders     The orders to check and perform executions for.\n     * @param executions         An array of elements indicating the sequence of\n     *                           transfers to perform when fulfilling the given\n     *                           orders.\n     *\n     * @return availableOrders An array of booleans indicating if each order\n     *                         with an index corresponding to the index of the\n     *                         returned boolean was fulfillable or not.\n     */\n    function _performFinalChecksAndExecuteOrders(\n        AdvancedOrder[] memory advancedOrders,\n        Execution[] memory executions\n    ) internal returns (bool[] memory availableOrders) {\n        // Retrieve the length of the advanced orders array and place on stack.\n        uint256 totalOrders = advancedOrders.length;\n\n        // Initialize array for tracking available orders.\n        availableOrders = new bool[](totalOrders);\n\n        // Skip overflow checks as all for loops are indexed starting at zero.\n        unchecked {\n            // Iterate over orders to ensure all considerations are met.\n            for (uint256 i = 0; i < totalOrders; ++i) {\n                // Retrieve the order in question.\n                AdvancedOrder memory advancedOrder = advancedOrders[i];\n\n                // Skip consideration item checks for order if not fulfilled.\n                if (advancedOrder.numerator == 0) {\n                    // Note: orders do not need to be marked as unavailable as a\n                    // new memory region has been allocated. Review carefully if\n                    // altering compiler version or managing memory manually.\n                    continue;\n                }\n\n                // Mark the order as available.\n                availableOrders[i] = true;\n\n                // Retrieve consideration items to ensure they are fulfilled.\n                ConsiderationItem[] memory consideration = (\n                    advancedOrder.parameters.consideration\n                );\n\n                // Read length of consideration array and place on the stack.\n                uint256 totalConsiderationItems = consideration.length;\n\n                // Iterate over each consideration item to ensure it is met.\n                for (uint256 j = 0; j < totalConsiderationItems; ++j) {\n                    // Retrieve remaining amount on the consideration item.\n                    uint256 unmetAmount = consideration[j].startAmount;\n\n                    // Revert if the remaining amount is not zero.\n                    if (unmetAmount != 0) {\n                        revert ConsiderationNotMet(i, j, unmetAmount);\n                    }\n                }\n            }\n        }\n\n        // Put ether value supplied by the caller on the stack.\n        uint256 etherRemaining = msg.value;\n\n        // Initialize an accumulator array. From this point forward, no new\n        // memory regions can be safely allocated until the accumulator is no\n        // longer being utilized, as the accumulator operates in an open-ended\n        // fashion from this memory pointer; existing memory may still be\n        // accessed and modified, however.\n        bytes memory accumulator = new bytes(AccumulatorDisarmed);\n\n        // Retrieve the length of the executions array and place on stack.\n        uint256 totalExecutions = executions.length;\n\n        // Iterate over each execution.\n        for (uint256 i = 0; i < totalExecutions; ) {\n            // Retrieve the execution and the associated received item.\n            Execution memory execution = executions[i];\n            ReceivedItem memory item = execution.item;\n\n            // If execution transfers native tokens, reduce value available.\n            if (item.itemType == ItemType.NATIVE) {\n                // Ensure that sufficient native tokens are still available.\n                if (item.amount > etherRemaining) {\n                    revert InsufficientEtherSupplied();\n                }\n\n                // Skip underflow check as amount is less than ether remaining.\n                unchecked {\n                    etherRemaining -= item.amount;\n                }\n            }\n\n            // Transfer the item specified by the execution.\n            _transfer(\n                item,\n                execution.offerer,\n                execution.conduitKey,\n                accumulator\n            );\n\n            // Skip overflow check as for loop is indexed starting at zero.\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Trigger any remaining accumulated transfers via call to the conduit.\n        _triggerIfArmed(accumulator);\n\n        // If any ether remains after fulfillments, return it to the caller.\n        if (etherRemaining != 0) {\n            _transferEth(payable(msg.sender), etherRemaining);\n        }\n\n        // Clear the reentrancy guard.\n        _clearReentrancyGuard();\n\n        // Return the array containing available orders.\n        return (availableOrders);\n    }\n\n    /**\n     * @dev Internal function to match an arbitrary number of full or partial\n     *      orders, each with an arbitrary number of items for offer and\n     *      consideration, supplying criteria resolvers containing specific\n     *      token identifiers and associated proofs as well as fulfillments\n     *      allocating offer components to consideration components.\n     *\n     * @param advancedOrders    The advanced orders to match. Note that both the\n     *                          offerer and fulfiller on each order must first\n     *                          approve this contract (or their conduit if\n     *                          indicated by the order) to transfer any relevant\n     *                          tokens on their behalf and each consideration\n     *                          recipient must implement `onERC1155Received` in\n     *                          order to receive ERC1155 tokens. Also note that\n     *                          the offer and consideration components for each\n     *                          order must have no remainder after multiplying\n     *                          the respective amount with the supplied fraction\n     *                          in order for the group of partial fills to be\n     *                          considered valid.\n     * @param criteriaResolvers An array where each element contains a reference\n     *                          to a specific order as well as that order's\n     *                          offer or consideration, a token identifier, and\n     *                          a proof that the supplied token identifier is\n     *                          contained in the order's merkle root. Note that\n     *                          an empty root indicates that any (transferable)\n     *                          token identifier is valid and that no associated\n     *                          proof needs to be supplied.\n     * @param fulfillments      An array of elements allocating offer components\n     *                          to consideration components. Note that each\n     *                          consideration component must be fully met in\n     *                          order for the match operation to be valid.\n     *\n     * @return executions An array of elements indicating the sequence of\n     *                    transfers performed as part of matching the given\n     *                    orders.\n     */\n    function _matchAdvancedOrders(\n        AdvancedOrder[] memory advancedOrders,\n        CriteriaResolver[] memory criteriaResolvers,\n        Fulfillment[] calldata fulfillments\n    ) internal returns (Execution[] memory executions) {\n        // Validate orders, update order status, and determine item amounts.\n        _validateOrdersAndPrepareToFulfill(\n            advancedOrders,\n            criteriaResolvers,\n            true, // Signifies that invalid orders should revert.\n            advancedOrders.length,\n            address(0) // OrderFulfilled event has no recipient when matching.\n        );\n\n        // Fulfill the orders using the supplied fulfillments.\n        return _fulfillAdvancedOrders(advancedOrders, fulfillments);\n    }\n\n    /**\n     * @dev Internal function to fulfill an arbitrary number of orders, either\n     *      full or partial, after validating, adjusting amounts, and applying\n     *      criteria resolvers.\n     *\n     * @param advancedOrders     The orders to match, including a fraction to\n     *                           attempt to fill for each order.\n     * @param fulfillments       An array of elements allocating offer\n     *                           components to consideration components. Note\n     *                           that the final amount of each consideration\n     *                           component must be zero for a match operation to\n     *                           be considered valid.\n     *\n     * @return executions An array of elements indicating the sequence of\n     *                    transfers performed as part of matching the given\n     *                    orders.\n     */\n    function _fulfillAdvancedOrders(\n        AdvancedOrder[] memory advancedOrders,\n        Fulfillment[] calldata fulfillments\n    ) internal returns (Execution[] memory executions) {\n        // Retrieve fulfillments array length and place on the stack.\n        uint256 totalFulfillments = fulfillments.length;\n\n        // Allocate executions by fulfillment and apply them to each execution.\n        executions = new Execution[](totalFulfillments);\n\n        // Skip overflow checks as all for loops are indexed starting at zero.\n        unchecked {\n            // Track number of filtered executions.\n            uint256 totalFilteredExecutions = 0;\n\n            // Iterate over each fulfillment.\n            for (uint256 i = 0; i < totalFulfillments; ++i) {\n                /// Retrieve the fulfillment in question.\n                Fulfillment calldata fulfillment = fulfillments[i];\n\n                // Derive the execution corresponding with the fulfillment.\n                Execution memory execution = _applyFulfillment(\n                    advancedOrders,\n                    fulfillment.offerComponents,\n                    fulfillment.considerationComponents\n                );\n\n                // If offerer and recipient on the execution are the same...\n                if (execution.item.recipient == execution.offerer) {\n                    // Increment total filtered executions.\n                    ++totalFilteredExecutions;\n                } else {\n                    // Otherwise, assign the execution to the executions array.\n                    executions[i - totalFilteredExecutions] = execution;\n                }\n            }\n\n            // If some number of executions have been filtered...\n            if (totalFilteredExecutions != 0) {\n                // reduce the total length of the executions array.\n                assembly {\n                    mstore(\n                        executions,\n                        sub(mload(executions), totalFilteredExecutions)\n                    )\n                }\n            }\n        }\n\n        // Perform final checks and execute orders.\n        _performFinalChecksAndExecuteOrders(advancedOrders, executions);\n\n        // Return the executions array.\n        return (executions);\n    }\n}\n"
    },
    "contracts/lib/OrderFulfiller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.13;\n\nimport { ItemType } from \"./ConsiderationEnums.sol\";\n\n// prettier-ignore\nimport {\n    OfferItem,\n    ConsiderationItem,\n    SpentItem,\n    ReceivedItem,\n    OrderParameters,\n    Order,\n    AdvancedOrder,\n    CriteriaResolver\n} from \"./ConsiderationStructs.sol\";\n\nimport { BasicOrderFulfiller } from \"./BasicOrderFulfiller.sol\";\n\nimport { CriteriaResolution } from \"./CriteriaResolution.sol\";\n\nimport { AmountDeriver } from \"./AmountDeriver.sol\";\n\nimport \"./ConsiderationConstants.sol\";\n\n/**\n * @title OrderFulfiller\n * @author 0age\n * @notice OrderFulfiller contains logic related to order fulfillment where a\n *         single order is being fulfilled and where basic order fulfillment is\n *         not available as an option.\n */\ncontract OrderFulfiller is\n    BasicOrderFulfiller,\n    CriteriaResolution,\n    AmountDeriver\n{\n    /**\n     * @dev Derive and set hashes, reference chainId, and associated domain\n     *      separator during deployment.\n     *\n     * @param conduitController A contract that deploys conduits, or proxies\n     *                          that may optionally be used to transfer approved\n     *                          ERC20/721/1155 tokens.\n     */\n    constructor(address conduitController)\n        BasicOrderFulfiller(conduitController)\n    {}\n\n    /**\n     * @dev Internal function to validate an order and update its status, adjust\n     *      prices based on current time, apply criteria resolvers, determine\n     *      what portion to fill, and transfer relevant tokens.\n     *\n     * @param advancedOrder       The order to fulfill as well as the fraction\n     *                            to fill. Note that all offer and consideration\n     *                            components must divide with no remainder for\n     *                            the partial fill to be valid.\n     * @param criteriaResolvers   An array where each element contains a\n     *                            reference to a specific offer or\n     *                            consideration, a token identifier, and a proof\n     *                            that the supplied token identifier is\n     *                            contained in the order's merkle root. Note\n     *                            that a criteria of zero indicates that any\n     *                            (transferable) token identifier is valid and\n     *                            that no proof needs to be supplied.\n     * @param fulfillerConduitKey A bytes32 value indicating what conduit, if\n     *                            any, to source the fulfiller's token approvals\n     *                            from. The zero hash signifies that no conduit\n     *                            should be used, with direct approvals set on\n     *                            Consideration.\n     * @param recipient           The intended recipient for all received items.\n     *\n     * @return A boolean indicating whether the order has been fulfilled.\n     */\n    function _validateAndFulfillAdvancedOrder(\n        AdvancedOrder memory advancedOrder,\n        CriteriaResolver[] memory criteriaResolvers,\n        bytes32 fulfillerConduitKey,\n        address recipient\n    ) internal returns (bool) {\n        // Ensure this function cannot be triggered during a reentrant call.\n        _setReentrancyGuard();\n\n        // Declare empty bytes32 array (unused, will remain empty).\n        bytes32[] memory priorOrderHashes;\n\n        // Validate order, update status, and determine fraction to fill.\n        (\n            bytes32 orderHash,\n            uint256 fillNumerator,\n            uint256 fillDenominator\n        ) = _validateOrderAndUpdateStatus(\n                advancedOrder,\n                criteriaResolvers,\n                true,\n                priorOrderHashes\n            );\n\n        // Create an array with length 1 containing the order.\n        AdvancedOrder[] memory advancedOrders = new AdvancedOrder[](1);\n\n        // Populate the order as the first and only element of the new array.\n        advancedOrders[0] = advancedOrder;\n\n        // Apply criteria resolvers using generated orders and details arrays.\n        _applyCriteriaResolvers(advancedOrders, criteriaResolvers);\n\n        // Retrieve the order parameters after applying criteria resolvers.\n        OrderParameters memory orderParameters = advancedOrders[0].parameters;\n\n        // Perform each item transfer with the appropriate fractional amount.\n        _applyFractionsAndTransferEach(\n            orderParameters,\n            fillNumerator,\n            fillDenominator,\n            fulfillerConduitKey,\n            recipient\n        );\n\n        // Emit an event signifying that the order has been fulfilled.\n        _emitOrderFulfilledEvent(\n            orderHash,\n            orderParameters.offerer,\n            orderParameters.zone,\n            recipient,\n            orderParameters.offer,\n            orderParameters.consideration\n        );\n\n        // Clear the reentrancy guard.\n        _clearReentrancyGuard();\n\n        return true;\n    }\n\n    /**\n     * @dev Internal function to transfer each item contained in a given single\n     *      order fulfillment after applying a respective fraction to the amount\n     *      being transferred.\n     *\n     * @param orderParameters     The parameters for the fulfilled order.\n     * @param numerator           A value indicating the portion of the order\n     *                            that should be filled.\n     * @param denominator         A value indicating the total order size.\n     * @param fulfillerConduitKey A bytes32 value indicating what conduit, if\n     *                            any, to source the fulfiller's token approvals\n     *                            from. The zero hash signifies that no conduit\n     *                            should be used, with direct approvals set on\n     *                            Consideration.\n     * @param recipient           The intended recipient for all received items.\n     */\n    function _applyFractionsAndTransferEach(\n        OrderParameters memory orderParameters,\n        uint256 numerator,\n        uint256 denominator,\n        bytes32 fulfillerConduitKey,\n        address recipient\n    ) internal {\n        // Read start time & end time from order parameters and place on stack.\n        uint256 startTime = orderParameters.startTime;\n        uint256 endTime = orderParameters.endTime;\n\n        // Initialize an accumulator array. From this point forward, no new\n        // memory regions can be safely allocated until the accumulator is no\n        // longer being utilized, as the accumulator operates in an open-ended\n        // fashion from this memory pointer; existing memory may still be\n        // accessed and modified, however.\n        bytes memory accumulator = new bytes(AccumulatorDisarmed);\n\n        // As of solidity 0.6.0, inline assembly cannot directly access function\n        // definitions, but can still access locally scoped function variables.\n        // This means that in order to recast the type of a function, we need to\n        // create a local variable to reference the internal function definition\n        // (using the same type) and a local variable with the desired type,\n        // and then cast the original function pointer to the desired type.\n\n        /**\n         * Repurpose existing OfferItem memory regions on the offer array for\n         * the order by overriding the _transfer function pointer to accept a\n         * modified OfferItem argument in place of the usual ReceivedItem:\n         *\n         *   ========= OfferItem ==========   ====== ReceivedItem ======\n         *   ItemType itemType; ------------> ItemType itemType;\n         *   address token; ----------------> address token;\n         *   uint256 identifierOrCriteria; -> uint256 identifier;\n         *   uint256 startAmount; ----------> uint256 amount;\n         *   uint256 endAmount; ------------> address recipient;\n         */\n\n        // Declare a nested scope to minimize stack depth.\n        unchecked {\n            // Declare a virtual function pointer taking an OfferItem argument.\n            function(OfferItem memory, address, bytes32, bytes memory)\n                internal _transferOfferItem;\n\n            {\n                // Assign _transfer function to a new function pointer (it takes\n                // a ReceivedItem as its initial argument)\n                function(ReceivedItem memory, address, bytes32, bytes memory)\n                    internal _transferReceivedItem = _transfer;\n\n                // Utilize assembly to override the virtual function pointer.\n                assembly {\n                    // Cast initial ReceivedItem type to an OfferItem type.\n                    _transferOfferItem := _transferReceivedItem\n                }\n            }\n\n            // Read offer array length from memory and place on stack.\n            uint256 totalOfferItems = orderParameters.offer.length;\n\n            // Iterate over each offer on the order.\n            // Skip overflow check as for loop is indexed starting at zero.\n            for (uint256 i = 0; i < totalOfferItems; ++i) {\n                // Retrieve the offer item.\n                OfferItem memory offerItem = orderParameters.offer[i];\n\n                // Offer items for the native token can not be received\n                // outside of a match order function.\n                if (offerItem.itemType == ItemType.NATIVE) {\n                    revert InvalidNativeOfferItem();\n                }\n\n                // Declare an additional nested scope to minimize stack depth.\n                {\n                    // Apply fill fraction to get offer item amount to transfer.\n                    uint256 amount = _applyFraction(\n                        offerItem.startAmount,\n                        offerItem.endAmount,\n                        numerator,\n                        denominator,\n                        startTime,\n                        endTime,\n                        false\n                    );\n\n                    // Utilize assembly to set overloaded offerItem arguments.\n                    assembly {\n                        // Write new fractional amount to startAmount as amount.\n                        mstore(\n                            add(offerItem, ReceivedItem_amount_offset),\n                            amount\n                        )\n\n                        // Write recipient to endAmount.\n                        mstore(\n                            add(offerItem, ReceivedItem_recipient_offset),\n                            recipient\n                        )\n                    }\n                }\n\n                // Transfer the item from the offerer to the recipient.\n                _transferOfferItem(\n                    offerItem,\n                    orderParameters.offerer,\n                    orderParameters.conduitKey,\n                    accumulator\n                );\n            }\n        }\n\n        // Put ether value supplied by the caller on the stack.\n        uint256 etherRemaining = msg.value;\n\n        /**\n         * Repurpose existing ConsiderationItem memory regions on the\n         * consideration array for the order by overriding the _transfer\n         * function pointer to accept a modified ConsiderationItem argument in\n         * place of the usual ReceivedItem:\n         *\n         *   ====== ConsiderationItem =====   ====== ReceivedItem ======\n         *   ItemType itemType; ------------> ItemType itemType;\n         *   address token; ----------------> address token;\n         *   uint256 identifierOrCriteria;--> uint256 identifier;\n         *   uint256 startAmount; ----------> uint256 amount;\n         *   uint256 endAmount;        /----> address recipient;\n         *   address recipient; ------/\n         */\n\n        // Declare a nested scope to minimize stack depth.\n        unchecked {\n            // Declare virtual function pointer with ConsiderationItem argument.\n            function(ConsiderationItem memory, address, bytes32, bytes memory)\n                internal _transferConsiderationItem;\n            {\n                // Reassign _transfer function to a new function pointer (it\n                // takes a ReceivedItem as its initial argument).\n                function(ReceivedItem memory, address, bytes32, bytes memory)\n                    internal _transferReceivedItem = _transfer;\n\n                // Utilize assembly to override the virtual function pointer.\n                assembly {\n                    // Cast ReceivedItem type to ConsiderationItem type.\n                    _transferConsiderationItem := _transferReceivedItem\n                }\n            }\n\n            // Read consideration array length from memory and place on stack.\n            uint256 totalConsiderationItems = orderParameters\n                .consideration\n                .length;\n\n            // Iterate over each consideration item on the order.\n            // Skip overflow check as for loop is indexed starting at zero.\n            for (uint256 i = 0; i < totalConsiderationItems; ++i) {\n                // Retrieve the consideration item.\n                ConsiderationItem memory considerationItem = (\n                    orderParameters.consideration[i]\n                );\n\n                // Apply fraction & derive considerationItem amount to transfer.\n                uint256 amount = _applyFraction(\n                    considerationItem.startAmount,\n                    considerationItem.endAmount,\n                    numerator,\n                    denominator,\n                    startTime,\n                    endTime,\n                    true\n                );\n\n                // Use assembly to set overloaded considerationItem arguments.\n                assembly {\n                    // Write derived fractional amount to startAmount as amount.\n                    mstore(\n                        add(considerationItem, ReceivedItem_amount_offset),\n                        amount\n                    )\n\n                    // Write original recipient to endAmount as recipient.\n                    mstore(\n                        add(considerationItem, ReceivedItem_recipient_offset),\n                        mload(\n                            add(\n                                considerationItem,\n                                ConsiderationItem_recipient_offset\n                            )\n                        )\n                    )\n                }\n\n                // Reduce available value if offer spent ETH or a native token.\n                if (considerationItem.itemType == ItemType.NATIVE) {\n                    // Ensure that sufficient native tokens are still available.\n                    if (amount > etherRemaining) {\n                        revert InsufficientEtherSupplied();\n                    }\n\n                    // Skip underflow check as a comparison has just been made.\n                    etherRemaining -= amount;\n                }\n\n                // Transfer item from caller to recipient specified by the item.\n                _transferConsiderationItem(\n                    considerationItem,\n                    msg.sender,\n                    fulfillerConduitKey,\n                    accumulator\n                );\n            }\n        }\n\n        // Trigger any remaining accumulated transfers via call to the conduit.\n        _triggerIfArmed(accumulator);\n\n        // If any ether remains after fulfillments...\n        if (etherRemaining != 0) {\n            // return it to the caller.\n            _transferEth(payable(msg.sender), etherRemaining);\n        }\n    }\n\n    /**\n     * @dev Internal function to emit an OrderFulfilled event. OfferItems are\n     *      translated into SpentItems and ConsiderationItems are translated\n     *      into ReceivedItems.\n     *\n     * @param orderHash     The order hash.\n     * @param offerer       The offerer for the order.\n     * @param zone          The zone for the order.\n     * @param fulfiller     The fulfiller of the order, or the null address if\n     *                      the order was fulfilled via order matching.\n     * @param offer         The offer items for the order.\n     * @param consideration The consideration items for the order.\n     */\n    function _emitOrderFulfilledEvent(\n        bytes32 orderHash,\n        address offerer,\n        address zone,\n        address fulfiller,\n        OfferItem[] memory offer,\n        ConsiderationItem[] memory consideration\n    ) internal {\n        // Cast already-modified offer memory region as spent items.\n        SpentItem[] memory spentItems;\n        assembly {\n            spentItems := offer\n        }\n\n        // Cast already-modified consideration memory region as received items.\n        ReceivedItem[] memory receivedItems;\n        assembly {\n            receivedItems := consideration\n        }\n\n        // Emit an event signifying that the order has been fulfilled.\n        emit OrderFulfilled(\n            orderHash,\n            offerer,\n            zone,\n            fulfiller,\n            spentItems,\n            receivedItems\n        );\n    }\n\n    /**\n     * @dev Internal pure function to convert an order to an advanced order with\n     *      numerator and denominator of 1 and empty extraData.\n     *\n     * @param order The order to convert.\n     *\n     * @return advancedOrder The new advanced order.\n     */\n    function _convertOrderToAdvanced(Order calldata order)\n        internal\n        pure\n        returns (AdvancedOrder memory advancedOrder)\n    {\n        // Convert to partial order (1/1 or full fill) and return new value.\n        advancedOrder = AdvancedOrder(\n            order.parameters,\n            1,\n            1,\n            order.signature,\n            \"\"\n        );\n    }\n\n    /**\n     * @dev Internal pure function to convert an array of orders to an array of\n     *      advanced orders with numerator and denominator of 1.\n     *\n     * @param orders The orders to convert.\n     *\n     * @return advancedOrders The new array of partial orders.\n     */\n    function _convertOrdersToAdvanced(Order[] calldata orders)\n        internal\n        pure\n        returns (AdvancedOrder[] memory advancedOrders)\n    {\n        // Read the number of orders from calldata and place on the stack.\n        uint256 totalOrders = orders.length;\n\n        // Allocate new empty array for each partial order in memory.\n        advancedOrders = new AdvancedOrder[](totalOrders);\n\n        // Skip overflow check as the index for the loop starts at zero.\n        unchecked {\n            // Iterate over the given orders.\n            for (uint256 i = 0; i < totalOrders; ++i) {\n                // Convert to partial order (1/1 or full fill) and update array.\n                advancedOrders[i] = _convertOrderToAdvanced(orders[i]);\n            }\n        }\n\n        // Return the array of advanced orders.\n        return advancedOrders;\n    }\n}\n"
    },
    "contracts/lib/OrderValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.13;\n\nimport { OrderType } from \"./ConsiderationEnums.sol\";\n\n// prettier-ignore\nimport {\n    OrderParameters,\n    Order,\n    AdvancedOrder,\n    OrderComponents,\n    OrderStatus,\n    CriteriaResolver\n} from \"./ConsiderationStructs.sol\";\n\nimport \"./ConsiderationConstants.sol\";\n\nimport { Executor } from \"./Executor.sol\";\n\nimport { ZoneInteraction } from \"./ZoneInteraction.sol\";\n\n/**\n * @title OrderValidator\n * @author 0age\n * @notice OrderValidator contains functionality related to validating orders\n *         and updating their status.\n */\ncontract OrderValidator is Executor, ZoneInteraction {\n    // Track status of each order (validated, cancelled, and fraction filled).\n    mapping(bytes32 => OrderStatus) private _orderStatus;\n\n    /**\n     * @dev Derive and set hashes, reference chainId, and associated domain\n     *      separator during deployment.\n     *\n     * @param conduitController A contract that deploys conduits, or proxies\n     *                          that may optionally be used to transfer approved\n     *                          ERC20/721/1155 tokens.\n     */\n    constructor(address conduitController) Executor(conduitController) {}\n\n    /**\n     * @dev Internal function to verify and update the status of a basic order.\n     *\n     * @param orderHash The hash of the order.\n     * @param offerer   The offerer of the order.\n     * @param signature A signature from the offerer indicating that the order\n     *                  has been approved.\n     */\n    function _validateBasicOrderAndUpdateStatus(\n        bytes32 orderHash,\n        address offerer,\n        bytes memory signature\n    ) internal {\n        // Retrieve the order status for the given order hash.\n        OrderStatus storage orderStatus = _orderStatus[orderHash];\n\n        // Ensure order is fillable and is not cancelled.\n        _verifyOrderStatus(\n            orderHash,\n            orderStatus,\n            true, // Only allow unused orders when fulfilling basic orders.\n            true // Signifies to revert if the order is invalid.\n        );\n\n        // If the order is not already validated, verify the supplied signature.\n        if (!orderStatus.isValidated) {\n            _verifySignature(offerer, orderHash, signature);\n        }\n\n        // Update order status as fully filled, packing struct values.\n        orderStatus.isValidated = true;\n        orderStatus.isCancelled = false;\n        orderStatus.numerator = 1;\n        orderStatus.denominator = 1;\n    }\n\n    /**\n     * @dev Internal function to validate an order, determine what portion to\n     *      fill, and update its status. The desired fill amount is supplied as\n     *      a fraction, as is the returned amount to fill.\n     *\n     * @param advancedOrder     The order to fulfill as well as the fraction to\n     *                          fill. Note that all offer and consideration\n     *                          amounts must divide with no remainder in order\n     *                          for a partial fill to be valid.\n     * @param criteriaResolvers An array where each element contains a reference\n     *                          to a specific offer or consideration, a token\n     *                          identifier, and a proof that the supplied token\n     *                          identifier is contained in the order's merkle\n     *                          root. Note that a criteria of zero indicates\n     *                          that any (transferable) token identifier is\n     *                          valid and that no proof needs to be supplied.\n     * @param revertOnInvalid   A boolean indicating whether to revert if the\n     *                          order is invalid due to the time or status.\n     * @param priorOrderHashes  The order hashes of each order supplied prior to\n     *                          the current order as part of a \"match\" variety\n     *                          of order fulfillment (e.g. this array will be\n     *                          empty for single or \"fulfill available\").\n     *\n     * @return orderHash      The order hash.\n     * @return newNumerator   A value indicating the portion of the order that\n     *                        will be filled.\n     * @return newDenominator A value indicating the total size of the order.\n     */\n    function _validateOrderAndUpdateStatus(\n        AdvancedOrder memory advancedOrder,\n        CriteriaResolver[] memory criteriaResolvers,\n        bool revertOnInvalid,\n        bytes32[] memory priorOrderHashes\n    )\n        internal\n        returns (\n            bytes32 orderHash,\n            uint256 newNumerator,\n            uint256 newDenominator\n        )\n    {\n        // Retrieve the parameters for the order.\n        OrderParameters memory orderParameters = advancedOrder.parameters;\n\n        // Ensure current timestamp falls between order start time and end time.\n        if (\n            !_verifyTime(\n                orderParameters.startTime,\n                orderParameters.endTime,\n                revertOnInvalid\n            )\n        ) {\n            // Assuming an invalid time and no revert, return zeroed out values.\n            return (bytes32(0), 0, 0);\n        }\n\n        // Read numerator and denominator from memory and place on the stack.\n        uint256 numerator = uint256(advancedOrder.numerator);\n        uint256 denominator = uint256(advancedOrder.denominator);\n\n        // Ensure that the supplied numerator and denominator are valid.\n        if (numerator > denominator || numerator == 0) {\n            revert BadFraction();\n        }\n\n        // If attempting partial fill (n < d) check order type & ensure support.\n        if (\n            numerator < denominator &&\n            _doesNotSupportPartialFills(orderParameters.orderType)\n        ) {\n            // Revert if partial fill was attempted on an unsupported order.\n            revert PartialFillsNotEnabledForOrder();\n        }\n\n        // Retrieve current counter & use it w/ parameters to derive order hash.\n        orderHash = _assertConsiderationLengthAndGetOrderHash(orderParameters);\n\n        // Ensure restricted orders have a valid submitter or pass a zone check.\n        _assertRestrictedAdvancedOrderValidity(\n            advancedOrder,\n            criteriaResolvers,\n            priorOrderHashes,\n            orderHash,\n            orderParameters.zoneHash,\n            orderParameters.orderType,\n            orderParameters.offerer,\n            orderParameters.zone\n        );\n\n        // Retrieve the order status using the derived order hash.\n        OrderStatus storage orderStatus = _orderStatus[orderHash];\n\n        // Ensure order is fillable and is not cancelled.\n        if (\n            !_verifyOrderStatus(\n                orderHash,\n                orderStatus,\n                false, // Allow partially used orders to be filled.\n                revertOnInvalid\n            )\n        ) {\n            // Assuming an invalid order status and no revert, return zero fill.\n            return (orderHash, 0, 0);\n        }\n\n        // If the order is not already validated, verify the supplied signature.\n        if (!orderStatus.isValidated) {\n            _verifySignature(\n                orderParameters.offerer,\n                orderHash,\n                advancedOrder.signature\n            );\n        }\n\n        // Read filled amount as numerator and denominator and put on the stack.\n        uint256 filledNumerator = orderStatus.numerator;\n        uint256 filledDenominator = orderStatus.denominator;\n\n        // If order (orderStatus) currently has a non-zero denominator it is\n        // partially filled.\n        if (filledDenominator != 0) {\n            // If denominator of 1 supplied, fill all remaining amount on order.\n            if (denominator == 1) {\n                // Scale numerator & denominator to match current denominator.\n                numerator = filledDenominator;\n                denominator = filledDenominator;\n            }\n            // Otherwise, if supplied denominator differs from current one...\n            else if (filledDenominator != denominator) {\n                // scale current numerator by the supplied denominator, then...\n                filledNumerator *= denominator;\n\n                // the supplied numerator & denominator by current denominator.\n                numerator *= filledDenominator;\n                denominator *= filledDenominator;\n            }\n\n            // Once adjusted, if current+supplied numerator exceeds denominator:\n            if (filledNumerator + numerator > denominator) {\n                // Skip underflow check: denominator >= orderStatus.numerator\n                unchecked {\n                    // Reduce current numerator so it + supplied = denominator.\n                    numerator = denominator - filledNumerator;\n                }\n            }\n\n            // Increment the filled numerator by the new numerator.\n            filledNumerator += numerator;\n\n            // Use assembly to ensure fractional amounts are below max uint120.\n            assembly {\n                // Check filledNumerator and denominator for uint120 overflow.\n                if or(\n                    gt(filledNumerator, MaxUint120),\n                    gt(denominator, MaxUint120)\n                ) {\n                    // Derive greatest common divisor using euclidean algorithm.\n                    function gcd(_a, _b) -> out {\n                        for {\n\n                        } _b {\n\n                        } {\n                            let _c := _b\n                            _b := mod(_a, _c)\n                            _a := _c\n                        }\n                        out := _a\n                    }\n                    let scaleDown := gcd(\n                        numerator,\n                        gcd(filledNumerator, denominator)\n                    )\n\n                    // Ensure that the divisor is at least one.\n                    let safeScaleDown := add(scaleDown, iszero(scaleDown))\n\n                    // Scale all fractional values down by gcd.\n                    numerator := div(numerator, safeScaleDown)\n                    filledNumerator := div(filledNumerator, safeScaleDown)\n                    denominator := div(denominator, safeScaleDown)\n\n                    // Perform the overflow check a second time.\n                    if or(\n                        gt(filledNumerator, MaxUint120),\n                        gt(denominator, MaxUint120)\n                    ) {\n                        // Store the Panic error signature.\n                        mstore(0, Panic_error_signature)\n\n                        // Set arithmetic (0x11) panic code as initial argument.\n                        mstore(Panic_error_offset, Panic_arithmetic)\n\n                        // Return, supplying Panic signature & arithmetic code.\n                        revert(0, Panic_error_length)\n                    }\n                }\n            }\n            // Skip overflow check: checked above unless numerator is reduced.\n            unchecked {\n                // Update order status and fill amount, packing struct values.\n                orderStatus.isValidated = true;\n                orderStatus.isCancelled = false;\n                orderStatus.numerator = uint120(filledNumerator);\n                orderStatus.denominator = uint120(denominator);\n            }\n        } else {\n            // Update order status and fill amount, packing struct values.\n            orderStatus.isValidated = true;\n            orderStatus.isCancelled = false;\n            orderStatus.numerator = uint120(numerator);\n            orderStatus.denominator = uint120(denominator);\n        }\n\n        // Return order hash, a modified numerator, and a modified denominator.\n        return (orderHash, numerator, denominator);\n    }\n\n    /**\n     * @dev Internal function to cancel an arbitrary number of orders. Note that\n     *      only the offerer or the zone of a given order may cancel it. Callers\n     *      should ensure that the intended order was cancelled by calling\n     *      `getOrderStatus` and confirming that `isCancelled` returns `true`.\n     *\n     * @param orders The orders to cancel.\n     *\n     * @return cancelled A boolean indicating whether the supplied orders were\n     *                   successfully cancelled.\n     */\n    function _cancel(OrderComponents[] calldata orders)\n        internal\n        returns (bool cancelled)\n    {\n        // Ensure that the reentrancy guard is not currently set.\n        _assertNonReentrant();\n\n        // Declare variables outside of the loop.\n        OrderStatus storage orderStatus;\n        address offerer;\n        address zone;\n\n        // Skip overflow check as for loop is indexed starting at zero.\n        unchecked {\n            // Read length of the orders array from memory and place on stack.\n            uint256 totalOrders = orders.length;\n\n            // Iterate over each order.\n            for (uint256 i = 0; i < totalOrders; ) {\n                // Retrieve the order.\n                OrderComponents calldata order = orders[i];\n\n                offerer = order.offerer;\n                zone = order.zone;\n\n                // Ensure caller is either offerer or zone of the order.\n                if (msg.sender != offerer && msg.sender != zone) {\n                    revert InvalidCanceller();\n                }\n\n                // Derive order hash using the order parameters and the counter.\n                bytes32 orderHash = _deriveOrderHash(\n                    OrderParameters(\n                        offerer,\n                        zone,\n                        order.offer,\n                        order.consideration,\n                        order.orderType,\n                        order.startTime,\n                        order.endTime,\n                        order.zoneHash,\n                        order.salt,\n                        order.conduitKey,\n                        order.consideration.length\n                    ),\n                    order.counter\n                );\n\n                // Retrieve the order status using the derived order hash.\n                orderStatus = _orderStatus[orderHash];\n\n                // Update the order status as not valid and cancelled.\n                orderStatus.isValidated = false;\n                orderStatus.isCancelled = true;\n\n                // Emit an event signifying that the order has been cancelled.\n                emit OrderCancelled(orderHash, offerer, zone);\n\n                // Increment counter inside body of loop for gas efficiency.\n                ++i;\n            }\n        }\n\n        // Return a boolean indicating that orders were successfully cancelled.\n        cancelled = true;\n    }\n\n    /**\n     * @dev Internal function to validate an arbitrary number of orders, thereby\n     *      registering their signatures as valid and allowing the fulfiller to\n     *      skip signature verification on fulfillment. Note that validated\n     *      orders may still be unfulfillable due to invalid item amounts or\n     *      other factors; callers should determine whether validated orders are\n     *      fulfillable by simulating the fulfillment call prior to execution.\n     *      Also note that anyone can validate a signed order, but only the\n     *      offerer can validate an order without supplying a signature.\n     *\n     * @param orders The orders to validate.\n     *\n     * @return validated A boolean indicating whether the supplied orders were\n     *                   successfully validated.\n     */\n    function _validate(Order[] calldata orders)\n        internal\n        returns (bool validated)\n    {\n        // Ensure that the reentrancy guard is not currently set.\n        _assertNonReentrant();\n\n        // Declare variables outside of the loop.\n        OrderStatus storage orderStatus;\n        bytes32 orderHash;\n        address offerer;\n\n        // Skip overflow check as for loop is indexed starting at zero.\n        unchecked {\n            // Read length of the orders array from memory and place on stack.\n            uint256 totalOrders = orders.length;\n\n            // Iterate over each order.\n            for (uint256 i = 0; i < totalOrders; ) {\n                // Retrieve the order.\n                Order calldata order = orders[i];\n\n                // Retrieve the order parameters.\n                OrderParameters calldata orderParameters = order.parameters;\n\n                // Move offerer from memory to the stack.\n                offerer = orderParameters.offerer;\n\n                // Get current counter & use it w/ params to derive order hash.\n                orderHash = _assertConsiderationLengthAndGetOrderHash(\n                    orderParameters\n                );\n\n                // Retrieve the order status using the derived order hash.\n                orderStatus = _orderStatus[orderHash];\n\n                // Ensure order is fillable and retrieve the filled amount.\n                _verifyOrderStatus(\n                    orderHash,\n                    orderStatus,\n                    false, // Signifies that partially filled orders are valid.\n                    true // Signifies to revert if the order is invalid.\n                );\n\n                // If the order has not already been validated...\n                if (!orderStatus.isValidated) {\n                    // Verify the supplied signature.\n                    _verifySignature(offerer, orderHash, order.signature);\n\n                    // Update order status to mark the order as valid.\n                    orderStatus.isValidated = true;\n\n                    // Emit an event signifying the order has been validated.\n                    emit OrderValidated(\n                        orderHash,\n                        offerer,\n                        orderParameters.zone\n                    );\n                }\n\n                // Increment counter inside body of the loop for gas efficiency.\n                ++i;\n            }\n        }\n\n        // Return a boolean indicating that orders were successfully validated.\n        validated = true;\n    }\n\n    /**\n     * @dev Internal view function to retrieve the status of a given order by\n     *      hash, including whether the order has been cancelled or validated\n     *      and the fraction of the order that has been filled.\n     *\n     * @param orderHash The order hash in question.\n     *\n     * @return isValidated A boolean indicating whether the order in question\n     *                     has been validated (i.e. previously approved or\n     *                     partially filled).\n     * @return isCancelled A boolean indicating whether the order in question\n     *                     has been cancelled.\n     * @return totalFilled The total portion of the order that has been filled\n     *                     (i.e. the \"numerator\").\n     * @return totalSize   The total size of the order that is either filled or\n     *                     unfilled (i.e. the \"denominator\").\n     */\n    function _getOrderStatus(bytes32 orderHash)\n        internal\n        view\n        returns (\n            bool isValidated,\n            bool isCancelled,\n            uint256 totalFilled,\n            uint256 totalSize\n        )\n    {\n        // Retrieve the order status using the order hash.\n        OrderStatus storage orderStatus = _orderStatus[orderHash];\n\n        // Return the fields on the order status.\n        return (\n            orderStatus.isValidated,\n            orderStatus.isCancelled,\n            orderStatus.numerator,\n            orderStatus.denominator\n        );\n    }\n\n    /**\n     * @dev Internal pure function to check whether a given order type indicates\n     *      that partial fills are not supported (e.g. only \"full fills\" are\n     *      allowed for the order in question).\n     *\n     * @param orderType The order type in question.\n     *\n     * @return isFullOrder A boolean indicating whether the order type only\n     *                     supports full fills.\n     */\n    function _doesNotSupportPartialFills(OrderType orderType)\n        internal\n        pure\n        returns (bool isFullOrder)\n    {\n        // The \"full\" order types are even, while \"partial\" order types are odd.\n        // Bitwise and by 1 is equivalent to modulo by 2, but 2 gas cheaper.\n        assembly {\n            // Equivalent to `uint256(orderType) & 1 == 0`.\n            isFullOrder := iszero(and(orderType, 1))\n        }\n    }\n}\n"
    },
    "contracts/lib/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.13;\n\nimport { ReentrancyErrors } from \"../interfaces/ReentrancyErrors.sol\";\n\nimport \"./ConsiderationConstants.sol\";\n\n/**\n * @title ReentrancyGuard\n * @author 0age\n * @notice ReentrancyGuard contains a storage variable and related functionality\n *         for protecting against reentrancy.\n */\ncontract ReentrancyGuard is ReentrancyErrors {\n    // Prevent reentrant calls on protected functions.\n    uint256 private _reentrancyGuard;\n\n    /**\n     * @dev Initialize the reentrancy guard during deployment.\n     */\n    constructor() {\n        // Initialize the reentrancy guard in a cleared state.\n        _reentrancyGuard = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Internal function to ensure that the sentinel value for the\n     *      reentrancy guard is not currently set and, if not, to set the\n     *      sentinel value for the reentrancy guard.\n     */\n    function _setReentrancyGuard() internal {\n        // Ensure that the reentrancy guard is not already set.\n        _assertNonReentrant();\n\n        // Set the reentrancy guard.\n        _reentrancyGuard = _ENTERED;\n    }\n\n    /**\n     * @dev Internal function to unset the reentrancy guard sentinel value.\n     */\n    function _clearReentrancyGuard() internal {\n        // Clear the reentrancy guard.\n        _reentrancyGuard = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Internal view function to ensure that the sentinel value for the\n            reentrancy guard is not currently set.\n     */\n    function _assertNonReentrant() internal view {\n        // Ensure that the reentrancy guard is not currently set.\n        if (_reentrancyGuard != _NOT_ENTERED) {\n            revert NoReentrantCalls();\n        }\n    }\n}\n"
    },
    "contracts/lib/SignatureVerification.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.13;\n\nimport { EIP1271Interface } from \"../interfaces/EIP1271Interface.sol\";\n\n// prettier-ignore\nimport {\n    SignatureVerificationErrors\n} from \"../interfaces/SignatureVerificationErrors.sol\";\n\nimport { LowLevelHelpers } from \"./LowLevelHelpers.sol\";\n\nimport \"./ConsiderationConstants.sol\";\n\n/**\n * @title SignatureVerification\n * @author 0age\n * @notice SignatureVerification contains logic for verifying signatures.\n */\ncontract SignatureVerification is SignatureVerificationErrors, LowLevelHelpers {\n    /**\n     * @dev Internal view function to verify the signature of an order. An\n     *      ERC-1271 fallback will be attempted if either the signature length\n     *      is not 64 or 65 bytes or if the recovered signer does not match the\n     *      supplied signer.\n     *\n     * @param signer    The signer for the order.\n     * @param digest    The digest to verify the signature against.\n     * @param signature A signature from the signer indicating that the order\n     *                  has been approved.\n     */\n    function _assertValidSignature(\n        address signer,\n        bytes32 digest,\n        bytes memory signature\n    ) internal view {\n        // Declare value for ecrecover equality or 1271 call success status.\n        bool success;\n\n        // Utilize assembly to perform optimized signature verification check.\n        assembly {\n            // Ensure that first word of scratch space is empty.\n            mstore(0, 0)\n\n            // Declare value for v signature parameter.\n            let v\n\n            // Get the length of the signature.\n            let signatureLength := mload(signature)\n\n            // Get the pointer to the value preceding the signature length.\n            // This will be used for temporary memory overrides - either the\n            // signature head for isValidSignature or the digest for ecrecover.\n            let wordBeforeSignaturePtr := sub(signature, OneWord)\n\n            // Cache the current value behind the signature to restore it later.\n            let cachedWordBeforeSignature := mload(wordBeforeSignaturePtr)\n\n            // Declare lenDiff + recoveredSigner scope to manage stack pressure.\n            {\n                // Take the difference between the max ECDSA signature length\n                // and the actual signature length. Overflow desired for any\n                // values > 65. If the diff is not 0 or 1, it is not a valid\n                // ECDSA signature - move on to EIP1271 check.\n                let lenDiff := sub(ECDSA_MaxLength, signatureLength)\n\n                // Declare variable for recovered signer.\n                let recoveredSigner\n\n                // If diff is 0 or 1, it may be an ECDSA signature.\n                // Try to recover signer.\n                if iszero(gt(lenDiff, 1)) {\n                    // Read the signature `s` value.\n                    let originalSignatureS := mload(\n                        add(signature, ECDSA_signature_s_offset)\n                    )\n\n                    // Read the first byte of the word after `s`. If the\n                    // signature is 65 bytes, this will be the real `v` value.\n                    // If not, it will need to be modified - doing it this way\n                    // saves an extra condition.\n                    v := byte(\n                        0,\n                        mload(add(signature, ECDSA_signature_v_offset))\n                    )\n\n                    // If lenDiff is 1, parse 64-byte signature as ECDSA.\n                    if lenDiff {\n                        // Extract yParity from highest bit of vs and add 27 to\n                        // get v.\n                        v := add(\n                            shr(MaxUint8, originalSignatureS),\n                            Signature_lower_v\n                        )\n\n                        // Extract canonical s from vs, all but the highest bit.\n                        // Temporarily overwrite the original `s` value in the\n                        // signature.\n                        mstore(\n                            add(signature, ECDSA_signature_s_offset),\n                            and(\n                                originalSignatureS,\n                                EIP2098_allButHighestBitMask\n                            )\n                        )\n                    }\n                    // Temporarily overwrite the signature length with `v` to\n                    // conform to the expected input for ecrecover.\n                    mstore(signature, v)\n\n                    // Temporarily overwrite the word before the length with\n                    // `digest` to conform to the expected input for ecrecover.\n                    mstore(wordBeforeSignaturePtr, digest)\n\n                    // Attempt to recover the signer for the given signature. Do\n                    // not check the call status as ecrecover will return a null\n                    // address if the signature is invalid.\n                    pop(\n                        staticcall(\n                            gas(),\n                            Ecrecover_precompile, // Call ecrecover precompile.\n                            wordBeforeSignaturePtr, // Use data memory location.\n                            Ecrecover_args_size, // Size of digest, v, r, and s.\n                            0, // Write result to scratch space.\n                            OneWord // Provide size of returned result.\n                        )\n                    )\n\n                    // Restore cached word before signature.\n                    mstore(wordBeforeSignaturePtr, cachedWordBeforeSignature)\n\n                    // Restore cached signature length.\n                    mstore(signature, signatureLength)\n\n                    // Restore cached signature `s` value.\n                    mstore(\n                        add(signature, ECDSA_signature_s_offset),\n                        originalSignatureS\n                    )\n\n                    // Read the recovered signer from the buffer given as return\n                    // space for ecrecover.\n                    recoveredSigner := mload(0)\n                }\n\n                // Set success to true if the signature provided was a valid\n                // ECDSA signature and the signer is not the null address. Use\n                // gt instead of direct as success is used outside of assembly.\n                success := and(eq(signer, recoveredSigner), gt(signer, 0))\n            }\n\n            // If the signature was not verified with ecrecover, try EIP1271.\n            if iszero(success) {\n                // Temporarily overwrite the word before the signature length\n                // and use it as the head of the signature input to\n                // `isValidSignature`, which has a value of 64.\n                mstore(\n                    wordBeforeSignaturePtr,\n                    EIP1271_isValidSignature_signature_head_offset\n                )\n\n                // Get pointer to use for the selector of `isValidSignature`.\n                let selectorPtr := sub(\n                    signature,\n                    EIP1271_isValidSignature_selector_negativeOffset\n                )\n\n                // Cache the value currently stored at the selector pointer.\n                let cachedWordOverwrittenBySelector := mload(selectorPtr)\n\n                // Get pointer to use for `digest` input to `isValidSignature`.\n                let digestPtr := sub(\n                    signature,\n                    EIP1271_isValidSignature_digest_negativeOffset\n                )\n\n                // Cache the value currently stored at the digest pointer.\n                let cachedWordOverwrittenByDigest := mload(digestPtr)\n\n                // Write the selector first, since it overlaps the digest.\n                mstore(selectorPtr, EIP1271_isValidSignature_selector)\n\n                // Next, write the digest.\n                mstore(digestPtr, digest)\n\n                // Call signer with `isValidSignature` to validate signature.\n                success := staticcall(\n                    gas(),\n                    signer,\n                    selectorPtr,\n                    add(\n                        signatureLength,\n                        EIP1271_isValidSignature_calldata_baseLength\n                    ),\n                    0,\n                    OneWord\n                )\n\n                // Determine if the signature is valid on successful calls.\n                if success {\n                    // If first word of scratch space does not contain EIP-1271\n                    // signature selector, revert.\n                    if iszero(eq(mload(0), EIP1271_isValidSignature_selector)) {\n                        // Revert with bad 1271 signature if signer has code.\n                        if extcodesize(signer) {\n                            // Bad contract signature.\n                            mstore(0, BadContractSignature_error_signature)\n                            revert(0, BadContractSignature_error_length)\n                        }\n\n                        // Check if signature length was invalid.\n                        if gt(sub(ECDSA_MaxLength, signatureLength), 1) {\n                            // Revert with generic invalid signature error.\n                            mstore(0, InvalidSignature_error_signature)\n                            revert(0, InvalidSignature_error_length)\n                        }\n\n                        // Check if v was invalid.\n                        if iszero(\n                            byte(v, ECDSA_twentySeventhAndTwentyEighthBytesSet)\n                        ) {\n                            // Revert with invalid v value.\n                            mstore(0, BadSignatureV_error_signature)\n                            mstore(BadSignatureV_error_offset, v)\n                            revert(0, BadSignatureV_error_length)\n                        }\n\n                        // Revert with generic invalid signer error message.\n                        mstore(0, InvalidSigner_error_signature)\n                        revert(0, InvalidSigner_error_length)\n                    }\n                }\n\n                // Restore the cached values overwritten by selector, digest and\n                // signature head.\n                mstore(wordBeforeSignaturePtr, cachedWordBeforeSignature)\n                mstore(selectorPtr, cachedWordOverwrittenBySelector)\n                mstore(digestPtr, cachedWordOverwrittenByDigest)\n            }\n        }\n\n        // If the call failed...\n        if (!success) {\n            // Revert and pass reason along if one was returned.\n            _revertWithReasonIfOneIsReturned();\n\n            // Otherwise, revert with error indicating bad contract signature.\n            assembly {\n                mstore(0, BadContractSignature_error_signature)\n                revert(0, BadContractSignature_error_length)\n            }\n        }\n    }\n}\n"
    },
    "contracts/lib/TokenTransferrer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\nimport \"./TokenTransferrerConstants.sol\";\n\n// prettier-ignore\nimport {\n    TokenTransferrerErrors\n} from \"../interfaces/TokenTransferrerErrors.sol\";\n\nimport { ConduitBatch1155Transfer } from \"../conduit/lib/ConduitStructs.sol\";\n\n/**\n * @title TokenTransferrer\n * @author 0age\n * @custom:coauthor d1ll0n\n * @custom:coauthor transmissions11\n * @notice TokenTransferrer is a library for performing optimized ERC20, ERC721,\n *         ERC1155, and batch ERC1155 transfers, used by both Seaport as well as\n *         by conduits deployed by the ConduitController. Use great caution when\n *         considering these functions for use in other codebases, as there are\n *         significant side effects and edge cases that need to be thoroughly\n *         understood and carefully addressed.\n */\ncontract TokenTransferrer is TokenTransferrerErrors {\n    /**\n     * @dev Internal function to transfer ERC20 tokens from a given originator\n     *      to a given recipient. Sufficient approvals must be set on the\n     *      contract performing the transfer.\n     *\n     * @param token      The ERC20 token to transfer.\n     * @param from       The originator of the transfer.\n     * @param to         The recipient of the transfer.\n     * @param amount     The amount to transfer.\n     */\n    function _performERC20Transfer(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        // Utilize assembly to perform an optimized ERC20 token transfer.\n        assembly {\n            // The free memory pointer memory slot will be used when populating\n            // call data for the transfer; read the value and restore it later.\n            let memPointer := mload(FreeMemoryPointerSlot)\n\n            // Write call data into memory, starting with function selector.\n            mstore(ERC20_transferFrom_sig_ptr, ERC20_transferFrom_signature)\n            mstore(ERC20_transferFrom_from_ptr, from)\n            mstore(ERC20_transferFrom_to_ptr, to)\n            mstore(ERC20_transferFrom_amount_ptr, amount)\n\n            // Make call & copy up to 32 bytes of return data to scratch space.\n            // Scratch space does not need to be cleared ahead of time, as the\n            // subsequent check will ensure that either at least a full word of\n            // return data is received (in which case it will be overwritten) or\n            // that no data is received (in which case scratch space will be\n            // ignored) on a successful call to the given token.\n            let callStatus := call(\n                gas(),\n                token,\n                0,\n                ERC20_transferFrom_sig_ptr,\n                ERC20_transferFrom_length,\n                0,\n                OneWord\n            )\n\n            // Determine whether transfer was successful using status & result.\n            let success := and(\n                // Set success to whether the call reverted, if not check it\n                // either returned exactly 1 (can't just be non-zero data), or\n                // had no return data.\n                or(\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\n                    iszero(returndatasize())\n                ),\n                callStatus\n            )\n\n            // Handle cases where either the transfer failed or no data was\n            // returned. Group these, as most transfers will succeed with data.\n            // Equivalent to `or(iszero(success), iszero(returndatasize()))`\n            // but after it's inverted for JUMPI this expression is cheaper.\n            if iszero(and(success, iszero(iszero(returndatasize())))) {\n                // If the token has no code or the transfer failed: Equivalent\n                // to `or(iszero(success), iszero(extcodesize(token)))` but\n                // after it's inverted for JUMPI this expression is cheaper.\n                if iszero(and(iszero(iszero(extcodesize(token))), success)) {\n                    // If the transfer failed:\n                    if iszero(success) {\n                        // If it was due to a revert:\n                        if iszero(callStatus) {\n                            // If it returned a message, bubble it up as long as\n                            // sufficient gas remains to do so:\n                            if returndatasize() {\n                                // Ensure that sufficient gas is available to\n                                // copy returndata while expanding memory where\n                                // necessary. Start by computing the word size\n                                // of returndata and allocated memory. Round up\n                                // to the nearest full word.\n                                let returnDataWords := div(\n                                    add(returndatasize(), AlmostOneWord),\n                                    OneWord\n                                )\n\n                                // Note: use the free memory pointer in place of\n                                // msize() to work around a Yul warning that\n                                // prevents accessing msize directly when the IR\n                                // pipeline is activated.\n                                let msizeWords := div(memPointer, OneWord)\n\n                                // Next, compute the cost of the returndatacopy.\n                                let cost := mul(CostPerWord, returnDataWords)\n\n                                // Then, compute cost of new memory allocation.\n                                if gt(returnDataWords, msizeWords) {\n                                    cost := add(\n                                        cost,\n                                        add(\n                                            mul(\n                                                sub(\n                                                    returnDataWords,\n                                                    msizeWords\n                                                ),\n                                                CostPerWord\n                                            ),\n                                            div(\n                                                sub(\n                                                    mul(\n                                                        returnDataWords,\n                                                        returnDataWords\n                                                    ),\n                                                    mul(msizeWords, msizeWords)\n                                                ),\n                                                MemoryExpansionCoefficient\n                                            )\n                                        )\n                                    )\n                                }\n\n                                // Finally, add a small constant and compare to\n                                // gas remaining; bubble up the revert data if\n                                // enough gas is still available.\n                                if lt(add(cost, ExtraGasBuffer), gas()) {\n                                    // Copy returndata to memory; overwrite\n                                    // existing memory.\n                                    returndatacopy(0, 0, returndatasize())\n\n                                    // Revert, specifying memory region with\n                                    // copied returndata.\n                                    revert(0, returndatasize())\n                                }\n                            }\n\n                            // Otherwise revert with a generic error message.\n                            mstore(\n                                TokenTransferGenericFailure_error_sig_ptr,\n                                TokenTransferGenericFailure_error_signature\n                            )\n                            mstore(\n                                TokenTransferGenericFailure_error_token_ptr,\n                                token\n                            )\n                            mstore(\n                                TokenTransferGenericFailure_error_from_ptr,\n                                from\n                            )\n                            mstore(TokenTransferGenericFailure_error_to_ptr, to)\n                            mstore(TokenTransferGenericFailure_error_id_ptr, 0)\n                            mstore(\n                                TokenTransferGenericFailure_error_amount_ptr,\n                                amount\n                            )\n                            revert(\n                                TokenTransferGenericFailure_error_sig_ptr,\n                                TokenTransferGenericFailure_error_length\n                            )\n                        }\n\n                        // Otherwise revert with a message about the token\n                        // returning false or non-compliant return values.\n                        mstore(\n                            BadReturnValueFromERC20OnTransfer_error_sig_ptr,\n                            BadReturnValueFromERC20OnTransfer_error_signature\n                        )\n                        mstore(\n                            BadReturnValueFromERC20OnTransfer_error_token_ptr,\n                            token\n                        )\n                        mstore(\n                            BadReturnValueFromERC20OnTransfer_error_from_ptr,\n                            from\n                        )\n                        mstore(\n                            BadReturnValueFromERC20OnTransfer_error_to_ptr,\n                            to\n                        )\n                        mstore(\n                            BadReturnValueFromERC20OnTransfer_error_amount_ptr,\n                            amount\n                        )\n                        revert(\n                            BadReturnValueFromERC20OnTransfer_error_sig_ptr,\n                            BadReturnValueFromERC20OnTransfer_error_length\n                        )\n                    }\n\n                    // Otherwise, revert with error about token not having code:\n                    mstore(NoContract_error_sig_ptr, NoContract_error_signature)\n                    mstore(NoContract_error_token_ptr, token)\n                    revert(NoContract_error_sig_ptr, NoContract_error_length)\n                }\n\n                // Otherwise, the token just returned no data despite the call\n                // having succeeded; no need to optimize for this as it's not\n                // technically ERC20 compliant.\n            }\n\n            // Restore the original free memory pointer.\n            mstore(FreeMemoryPointerSlot, memPointer)\n\n            // Restore the zero slot to zero.\n            mstore(ZeroSlot, 0)\n        }\n    }\n\n    /**\n     * @dev Internal function to transfer an ERC721 token from a given\n     *      originator to a given recipient. Sufficient approvals must be set on\n     *      the contract performing the transfer. Note that this function does\n     *      not check whether the receiver can accept the ERC721 token (i.e. it\n     *      does not use `safeTransferFrom`).\n     *\n     * @param token      The ERC721 token to transfer.\n     * @param from       The originator of the transfer.\n     * @param to         The recipient of the transfer.\n     * @param identifier The tokenId to transfer.\n     */\n    function _performERC721Transfer(\n        address token,\n        address from,\n        address to,\n        uint256 identifier\n    ) internal {\n        // Utilize assembly to perform an optimized ERC721 token transfer.\n        assembly {\n            // If the token has no code, revert.\n            if iszero(extcodesize(token)) {\n                mstore(NoContract_error_sig_ptr, NoContract_error_signature)\n                mstore(NoContract_error_token_ptr, token)\n                revert(NoContract_error_sig_ptr, NoContract_error_length)\n            }\n\n            // The free memory pointer memory slot will be used when populating\n            // call data for the transfer; read the value and restore it later.\n            let memPointer := mload(FreeMemoryPointerSlot)\n\n            // Write call data to memory starting with function selector.\n            mstore(ERC721_transferFrom_sig_ptr, ERC721_transferFrom_signature)\n            mstore(ERC721_transferFrom_from_ptr, from)\n            mstore(ERC721_transferFrom_to_ptr, to)\n            mstore(ERC721_transferFrom_id_ptr, identifier)\n\n            // Perform the call, ignoring return data.\n            let success := call(\n                gas(),\n                token,\n                0,\n                ERC721_transferFrom_sig_ptr,\n                ERC721_transferFrom_length,\n                0,\n                0\n            )\n\n            // If the transfer reverted:\n            if iszero(success) {\n                // If it returned a message, bubble it up as long as sufficient\n                // gas remains to do so:\n                if returndatasize() {\n                    // Ensure that sufficient gas is available to copy\n                    // returndata while expanding memory where necessary. Start\n                    // by computing word size of returndata & allocated memory.\n                    // Round up to the nearest full word.\n                    let returnDataWords := div(\n                        add(returndatasize(), AlmostOneWord),\n                        OneWord\n                    )\n\n                    // Note: use the free memory pointer in place of msize() to\n                    // work around a Yul warning that prevents accessing msize\n                    // directly when the IR pipeline is activated.\n                    let msizeWords := div(memPointer, OneWord)\n\n                    // Next, compute the cost of the returndatacopy.\n                    let cost := mul(CostPerWord, returnDataWords)\n\n                    // Then, compute cost of new memory allocation.\n                    if gt(returnDataWords, msizeWords) {\n                        cost := add(\n                            cost,\n                            add(\n                                mul(\n                                    sub(returnDataWords, msizeWords),\n                                    CostPerWord\n                                ),\n                                div(\n                                    sub(\n                                        mul(returnDataWords, returnDataWords),\n                                        mul(msizeWords, msizeWords)\n                                    ),\n                                    MemoryExpansionCoefficient\n                                )\n                            )\n                        )\n                    }\n\n                    // Finally, add a small constant and compare to gas\n                    // remaining; bubble up the revert data if enough gas is\n                    // still available.\n                    if lt(add(cost, ExtraGasBuffer), gas()) {\n                        // Copy returndata to memory; overwrite existing memory.\n                        returndatacopy(0, 0, returndatasize())\n\n                        // Revert, giving memory region with copied returndata.\n                        revert(0, returndatasize())\n                    }\n                }\n\n                // Otherwise revert with a generic error message.\n                mstore(\n                    TokenTransferGenericFailure_error_sig_ptr,\n                    TokenTransferGenericFailure_error_signature\n                )\n                mstore(TokenTransferGenericFailure_error_token_ptr, token)\n                mstore(TokenTransferGenericFailure_error_from_ptr, from)\n                mstore(TokenTransferGenericFailure_error_to_ptr, to)\n                mstore(TokenTransferGenericFailure_error_id_ptr, identifier)\n                mstore(TokenTransferGenericFailure_error_amount_ptr, 1)\n                revert(\n                    TokenTransferGenericFailure_error_sig_ptr,\n                    TokenTransferGenericFailure_error_length\n                )\n            }\n\n            // Restore the original free memory pointer.\n            mstore(FreeMemoryPointerSlot, memPointer)\n\n            // Restore the zero slot to zero.\n            mstore(ZeroSlot, 0)\n        }\n    }\n\n    /**\n     * @dev Internal function to transfer ERC1155 tokens from a given\n     *      originator to a given recipient. Sufficient approvals must be set on\n     *      the contract performing the transfer and contract recipients must\n     *      implement the ERC1155TokenReceiver interface to indicate that they\n     *      are willing to accept the transfer.\n     *\n     * @param token      The ERC1155 token to transfer.\n     * @param from       The originator of the transfer.\n     * @param to         The recipient of the transfer.\n     * @param identifier The id to transfer.\n     * @param amount     The amount to transfer.\n     */\n    function _performERC1155Transfer(\n        address token,\n        address from,\n        address to,\n        uint256 identifier,\n        uint256 amount\n    ) internal {\n        // Utilize assembly to perform an optimized ERC1155 token transfer.\n        assembly {\n            // If the token has no code, revert.\n            if iszero(extcodesize(token)) {\n                mstore(NoContract_error_sig_ptr, NoContract_error_signature)\n                mstore(NoContract_error_token_ptr, token)\n                revert(NoContract_error_sig_ptr, NoContract_error_length)\n            }\n\n            // The following memory slots will be used when populating call data\n            // for the transfer; read the values and restore them later.\n            let memPointer := mload(FreeMemoryPointerSlot)\n            let slot0x80 := mload(Slot0x80)\n            let slot0xA0 := mload(Slot0xA0)\n            let slot0xC0 := mload(Slot0xC0)\n\n            // Write call data into memory, beginning with function selector.\n            mstore(\n                ERC1155_safeTransferFrom_sig_ptr,\n                ERC1155_safeTransferFrom_signature\n            )\n            mstore(ERC1155_safeTransferFrom_from_ptr, from)\n            mstore(ERC1155_safeTransferFrom_to_ptr, to)\n            mstore(ERC1155_safeTransferFrom_id_ptr, identifier)\n            mstore(ERC1155_safeTransferFrom_amount_ptr, amount)\n            mstore(\n                ERC1155_safeTransferFrom_data_offset_ptr,\n                ERC1155_safeTransferFrom_data_length_offset\n            )\n            mstore(ERC1155_safeTransferFrom_data_length_ptr, 0)\n\n            // Perform the call, ignoring return data.\n            let success := call(\n                gas(),\n                token,\n                0,\n                ERC1155_safeTransferFrom_sig_ptr,\n                ERC1155_safeTransferFrom_length,\n                0,\n                0\n            )\n\n            // If the transfer reverted:\n            if iszero(success) {\n                // If it returned a message, bubble it up as long as sufficient\n                // gas remains to do so:\n                if returndatasize() {\n                    // Ensure that sufficient gas is available to copy\n                    // returndata while expanding memory where necessary. Start\n                    // by computing word size of returndata & allocated memory.\n                    // Round up to the nearest full word.\n                    let returnDataWords := div(\n                        add(returndatasize(), AlmostOneWord),\n                        OneWord\n                    )\n\n                    // Note: use the free memory pointer in place of msize() to\n                    // work around a Yul warning that prevents accessing msize\n                    // directly when the IR pipeline is activated.\n                    let msizeWords := div(memPointer, OneWord)\n\n                    // Next, compute the cost of the returndatacopy.\n                    let cost := mul(CostPerWord, returnDataWords)\n\n                    // Then, compute cost of new memory allocation.\n                    if gt(returnDataWords, msizeWords) {\n                        cost := add(\n                            cost,\n                            add(\n                                mul(\n                                    sub(returnDataWords, msizeWords),\n                                    CostPerWord\n                                ),\n                                div(\n                                    sub(\n                                        mul(returnDataWords, returnDataWords),\n                                        mul(msizeWords, msizeWords)\n                                    ),\n                                    MemoryExpansionCoefficient\n                                )\n                            )\n                        )\n                    }\n\n                    // Finally, add a small constant and compare to gas\n                    // remaining; bubble up the revert data if enough gas is\n                    // still available.\n                    if lt(add(cost, ExtraGasBuffer), gas()) {\n                        // Copy returndata to memory; overwrite existing memory.\n                        returndatacopy(0, 0, returndatasize())\n\n                        // Revert, giving memory region with copied returndata.\n                        revert(0, returndatasize())\n                    }\n                }\n\n                // Otherwise revert with a generic error message.\n                mstore(\n                    TokenTransferGenericFailure_error_sig_ptr,\n                    TokenTransferGenericFailure_error_signature\n                )\n                mstore(TokenTransferGenericFailure_error_token_ptr, token)\n                mstore(TokenTransferGenericFailure_error_from_ptr, from)\n                mstore(TokenTransferGenericFailure_error_to_ptr, to)\n                mstore(TokenTransferGenericFailure_error_id_ptr, identifier)\n                mstore(TokenTransferGenericFailure_error_amount_ptr, amount)\n                revert(\n                    TokenTransferGenericFailure_error_sig_ptr,\n                    TokenTransferGenericFailure_error_length\n                )\n            }\n\n            mstore(Slot0x80, slot0x80) // Restore slot 0x80.\n            mstore(Slot0xA0, slot0xA0) // Restore slot 0xA0.\n            mstore(Slot0xC0, slot0xC0) // Restore slot 0xC0.\n\n            // Restore the original free memory pointer.\n            mstore(FreeMemoryPointerSlot, memPointer)\n\n            // Restore the zero slot to zero.\n            mstore(ZeroSlot, 0)\n        }\n    }\n\n    /**\n     * @dev Internal function to transfer ERC1155 tokens from a given\n     *      originator to a given recipient. Sufficient approvals must be set on\n     *      the contract performing the transfer and contract recipients must\n     *      implement the ERC1155TokenReceiver interface to indicate that they\n     *      are willing to accept the transfer. NOTE: this function is not\n     *      memory-safe; it will overwrite existing memory, restore the free\n     *      memory pointer to the default value, and overwrite the zero slot.\n     *      This function should only be called once memory is no longer\n     *      required and when uninitialized arrays are not utilized, and memory\n     *      should be considered fully corrupted (aside from the existence of a\n     *      default-value free memory pointer) after calling this function.\n     *\n     * @param batchTransfers The group of 1155 batch transfers to perform.\n     */\n    function _performERC1155BatchTransfers(\n        ConduitBatch1155Transfer[] calldata batchTransfers\n    ) internal {\n        // Utilize assembly to perform optimized batch 1155 transfers.\n        assembly {\n            let len := batchTransfers.length\n            // Pointer to first head in the array, which is offset to the struct\n            // at each index. This gets incremented after each loop to avoid\n            // multiplying by 32 to get the offset for each element.\n            let nextElementHeadPtr := batchTransfers.offset\n\n            // Pointer to beginning of the head of the array. This is the\n            // reference position each offset references. It's held static to\n            // let each loop calculate the data position for an element.\n            let arrayHeadPtr := nextElementHeadPtr\n\n            // Write the function selector, which will be reused for each call:\n            // safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\n            mstore(\n                ConduitBatch1155Transfer_from_offset,\n                ERC1155_safeBatchTransferFrom_signature\n            )\n\n            // Iterate over each batch transfer.\n            for {\n                let i := 0\n            } lt(i, len) {\n                i := add(i, 1)\n            } {\n                // Read the offset to the beginning of the element and add\n                // it to pointer to the beginning of the array head to get\n                // the absolute position of the element in calldata.\n                let elementPtr := add(\n                    arrayHeadPtr,\n                    calldataload(nextElementHeadPtr)\n                )\n\n                // Retrieve the token from calldata.\n                let token := calldataload(elementPtr)\n\n                // If the token has no code, revert.\n                if iszero(extcodesize(token)) {\n                    mstore(NoContract_error_sig_ptr, NoContract_error_signature)\n                    mstore(NoContract_error_token_ptr, token)\n                    revert(NoContract_error_sig_ptr, NoContract_error_length)\n                }\n\n                // Get the total number of supplied ids.\n                let idsLength := calldataload(\n                    add(elementPtr, ConduitBatch1155Transfer_ids_length_offset)\n                )\n\n                // Determine the expected offset for the amounts array.\n                let expectedAmountsOffset := add(\n                    ConduitBatch1155Transfer_amounts_length_baseOffset,\n                    mul(idsLength, OneWord)\n                )\n\n                // Validate struct encoding.\n                let invalidEncoding := iszero(\n                    and(\n                        // ids.length == amounts.length\n                        eq(\n                            idsLength,\n                            calldataload(add(elementPtr, expectedAmountsOffset))\n                        ),\n                        and(\n                            // ids_offset == 0xa0\n                            eq(\n                                calldataload(\n                                    add(\n                                        elementPtr,\n                                        ConduitBatch1155Transfer_ids_head_offset\n                                    )\n                                ),\n                                ConduitBatch1155Transfer_ids_length_offset\n                            ),\n                            // amounts_offset == 0xc0 + ids.length*32\n                            eq(\n                                calldataload(\n                                    add(\n                                        elementPtr,\n                                        ConduitBatchTransfer_amounts_head_offset\n                                    )\n                                ),\n                                expectedAmountsOffset\n                            )\n                        )\n                    )\n                )\n\n                // Revert with an error if the encoding is not valid.\n                if invalidEncoding {\n                    mstore(\n                        Invalid1155BatchTransferEncoding_ptr,\n                        Invalid1155BatchTransferEncoding_selector\n                    )\n                    revert(\n                        Invalid1155BatchTransferEncoding_ptr,\n                        Invalid1155BatchTransferEncoding_length\n                    )\n                }\n\n                // Update the offset position for the next loop\n                nextElementHeadPtr := add(nextElementHeadPtr, OneWord)\n\n                // Copy the first section of calldata (before dynamic values).\n                calldatacopy(\n                    BatchTransfer1155Params_ptr,\n                    add(elementPtr, ConduitBatch1155Transfer_from_offset),\n                    ConduitBatch1155Transfer_usable_head_size\n                )\n\n                // Determine size of calldata required for ids and amounts. Note\n                // that the size includes both lengths as well as the data.\n                let idsAndAmountsSize := add(TwoWords, mul(idsLength, TwoWords))\n\n                // Update the offset for the data array in memory.\n                mstore(\n                    BatchTransfer1155Params_data_head_ptr,\n                    add(\n                        BatchTransfer1155Params_ids_length_offset,\n                        idsAndAmountsSize\n                    )\n                )\n\n                // Set the length of the data array in memory to zero.\n                mstore(\n                    add(\n                        BatchTransfer1155Params_data_length_basePtr,\n                        idsAndAmountsSize\n                    ),\n                    0\n                )\n\n                // Determine the total calldata size for the call to transfer.\n                let transferDataSize := add(\n                    BatchTransfer1155Params_calldata_baseSize,\n                    idsAndAmountsSize\n                )\n\n                // Copy second section of calldata (including dynamic values).\n                calldatacopy(\n                    BatchTransfer1155Params_ids_length_ptr,\n                    add(elementPtr, ConduitBatch1155Transfer_ids_length_offset),\n                    idsAndAmountsSize\n                )\n\n                // Perform the call to transfer 1155 tokens.\n                let success := call(\n                    gas(),\n                    token,\n                    0,\n                    ConduitBatch1155Transfer_from_offset, // Data portion start.\n                    transferDataSize, // Location of the length of callData.\n                    0,\n                    0\n                )\n\n                // If the transfer reverted:\n                if iszero(success) {\n                    // If it returned a message, bubble it up as long as\n                    // sufficient gas remains to do so:\n                    if returndatasize() {\n                        // Ensure that sufficient gas is available to copy\n                        // returndata while expanding memory where necessary.\n                        // Start by computing word size of returndata and\n                        // allocated memory. Round up to the nearest full word.\n                        let returnDataWords := div(\n                            add(returndatasize(), AlmostOneWord),\n                            OneWord\n                        )\n\n                        // Note: use transferDataSize in place of msize() to\n                        // work around a Yul warning that prevents accessing\n                        // msize directly when the IR pipeline is activated.\n                        // The free memory pointer is not used here because\n                        // this function does almost all memory management\n                        // manually and does not update it, and transferDataSize\n                        // should be the largest memory value used (unless a\n                        // previous batch was larger).\n                        let msizeWords := div(transferDataSize, OneWord)\n\n                        // Next, compute the cost of the returndatacopy.\n                        let cost := mul(CostPerWord, returnDataWords)\n\n                        // Then, compute cost of new memory allocation.\n                        if gt(returnDataWords, msizeWords) {\n                            cost := add(\n                                cost,\n                                add(\n                                    mul(\n                                        sub(returnDataWords, msizeWords),\n                                        CostPerWord\n                                    ),\n                                    div(\n                                        sub(\n                                            mul(\n                                                returnDataWords,\n                                                returnDataWords\n                                            ),\n                                            mul(msizeWords, msizeWords)\n                                        ),\n                                        MemoryExpansionCoefficient\n                                    )\n                                )\n                            )\n                        }\n\n                        // Finally, add a small constant and compare to gas\n                        // remaining; bubble up the revert data if enough gas is\n                        // still available.\n                        if lt(add(cost, ExtraGasBuffer), gas()) {\n                            // Copy returndata to memory; overwrite existing.\n                            returndatacopy(0, 0, returndatasize())\n\n                            // Revert with memory region containing returndata.\n                            revert(0, returndatasize())\n                        }\n                    }\n\n                    // Set the error signature.\n                    mstore(\n                        0,\n                        ERC1155BatchTransferGenericFailure_error_signature\n                    )\n\n                    // Write the token.\n                    mstore(ERC1155BatchTransferGenericFailure_token_ptr, token)\n\n                    // Increase the offset to ids by 32.\n                    mstore(\n                        BatchTransfer1155Params_ids_head_ptr,\n                        ERC1155BatchTransferGenericFailure_ids_offset\n                    )\n\n                    // Increase the offset to amounts by 32.\n                    mstore(\n                        BatchTransfer1155Params_amounts_head_ptr,\n                        add(\n                            OneWord,\n                            mload(BatchTransfer1155Params_amounts_head_ptr)\n                        )\n                    )\n\n                    // Return modified region. The total size stays the same as\n                    // `token` uses the same number of bytes as `data.length`.\n                    revert(0, transferDataSize)\n                }\n            }\n\n            // Reset the free memory pointer to the default value; memory must\n            // be assumed to be dirtied and not reused from this point forward.\n            // Also note that the zero slot is not reset to zero, meaning empty\n            // arrays cannot be safely created or utilized until it is restored.\n            mstore(FreeMemoryPointerSlot, DefaultFreeMemoryPointer)\n        }\n    }\n}\n"
    },
    "contracts/lib/TokenTransferrerConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\n/*\n * -------------------------- Disambiguation & Other Notes ---------------------\n *    - The term \"head\" is used as it is in the documentation for ABI encoding,\n *      but only in reference to dynamic types, i.e. it always refers to the\n *      offset or pointer to the body of a dynamic type. In calldata, the head\n *      is always an offset (relative to the parent object), while in memory,\n *      the head is always the pointer to the body. More information found here:\n *      https://docs.soliditylang.org/en/v0.8.14/abi-spec.html#argument-encoding\n *        - Note that the length of an array is separate from and precedes the\n *          head of the array.\n *\n *    - The term \"body\" is used in place of the term \"head\" used in the ABI\n *      documentation. It refers to the start of the data for a dynamic type,\n *      e.g. the first word of a struct or the first word of the first element\n *      in an array.\n *\n *    - The term \"pointer\" is used to describe the absolute position of a value\n *      and never an offset relative to another value.\n *        - The suffix \"_ptr\" refers to a memory pointer.\n *        - The suffix \"_cdPtr\" refers to a calldata pointer.\n *\n *    - The term \"offset\" is used to describe the position of a value relative\n *      to some parent value. For example, OrderParameters_conduit_offset is the\n *      offset to the \"conduit\" value in the OrderParameters struct relative to\n *      the start of the body.\n *        - Note: Offsets are used to derive pointers.\n *\n *    - Some structs have pointers defined for all of their fields in this file.\n *      Lines which are commented out are fields that are not used in the\n *      codebase but have been left in for readability.\n */\n\nuint256 constant AlmostOneWord = 0x1f;\nuint256 constant OneWord = 0x20;\nuint256 constant TwoWords = 0x40;\nuint256 constant ThreeWords = 0x60;\n\nuint256 constant FreeMemoryPointerSlot = 0x40;\nuint256 constant ZeroSlot = 0x60;\nuint256 constant DefaultFreeMemoryPointer = 0x80;\n\nuint256 constant Slot0x80 = 0x80;\nuint256 constant Slot0xA0 = 0xa0;\nuint256 constant Slot0xC0 = 0xc0;\n\n// abi.encodeWithSignature(\"transferFrom(address,address,uint256)\")\nuint256 constant ERC20_transferFrom_signature = (\n    0x23b872dd00000000000000000000000000000000000000000000000000000000\n);\nuint256 constant ERC20_transferFrom_sig_ptr = 0x0;\nuint256 constant ERC20_transferFrom_from_ptr = 0x04;\nuint256 constant ERC20_transferFrom_to_ptr = 0x24;\nuint256 constant ERC20_transferFrom_amount_ptr = 0x44;\nuint256 constant ERC20_transferFrom_length = 0x64; // 4 + 32 * 3 == 100\n\n// abi.encodeWithSignature(\n//     \"safeTransferFrom(address,address,uint256,uint256,bytes)\"\n// )\nuint256 constant ERC1155_safeTransferFrom_signature = (\n    0xf242432a00000000000000000000000000000000000000000000000000000000\n);\nuint256 constant ERC1155_safeTransferFrom_sig_ptr = 0x0;\nuint256 constant ERC1155_safeTransferFrom_from_ptr = 0x04;\nuint256 constant ERC1155_safeTransferFrom_to_ptr = 0x24;\nuint256 constant ERC1155_safeTransferFrom_id_ptr = 0x44;\nuint256 constant ERC1155_safeTransferFrom_amount_ptr = 0x64;\nuint256 constant ERC1155_safeTransferFrom_data_offset_ptr = 0x84;\nuint256 constant ERC1155_safeTransferFrom_data_length_ptr = 0xa4;\nuint256 constant ERC1155_safeTransferFrom_length = 0xc4; // 4 + 32 * 6 == 196\nuint256 constant ERC1155_safeTransferFrom_data_length_offset = 0xa0;\n\n// abi.encodeWithSignature(\n//     \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\"\n// )\nuint256 constant ERC1155_safeBatchTransferFrom_signature = (\n    0x2eb2c2d600000000000000000000000000000000000000000000000000000000\n);\n\nbytes4 constant ERC1155_safeBatchTransferFrom_selector = bytes4(\n    bytes32(ERC1155_safeBatchTransferFrom_signature)\n);\n\nuint256 constant ERC721_transferFrom_signature = ERC20_transferFrom_signature;\nuint256 constant ERC721_transferFrom_sig_ptr = 0x0;\nuint256 constant ERC721_transferFrom_from_ptr = 0x04;\nuint256 constant ERC721_transferFrom_to_ptr = 0x24;\nuint256 constant ERC721_transferFrom_id_ptr = 0x44;\nuint256 constant ERC721_transferFrom_length = 0x64; // 4 + 32 * 3 == 100\n\n// abi.encodeWithSignature(\"NoContract(address)\")\nuint256 constant NoContract_error_signature = (\n    0x5f15d67200000000000000000000000000000000000000000000000000000000\n);\nuint256 constant NoContract_error_sig_ptr = 0x0;\nuint256 constant NoContract_error_token_ptr = 0x4;\nuint256 constant NoContract_error_length = 0x24; // 4 + 32 == 36\n\n// abi.encodeWithSignature(\n//     \"TokenTransferGenericFailure(address,address,address,uint256,uint256)\"\n// )\nuint256 constant TokenTransferGenericFailure_error_signature = (\n    0xf486bc8700000000000000000000000000000000000000000000000000000000\n);\nuint256 constant TokenTransferGenericFailure_error_sig_ptr = 0x0;\nuint256 constant TokenTransferGenericFailure_error_token_ptr = 0x4;\nuint256 constant TokenTransferGenericFailure_error_from_ptr = 0x24;\nuint256 constant TokenTransferGenericFailure_error_to_ptr = 0x44;\nuint256 constant TokenTransferGenericFailure_error_id_ptr = 0x64;\nuint256 constant TokenTransferGenericFailure_error_amount_ptr = 0x84;\n\n// 4 + 32 * 5 == 164\nuint256 constant TokenTransferGenericFailure_error_length = 0xa4;\n\n// abi.encodeWithSignature(\n//     \"BadReturnValueFromERC20OnTransfer(address,address,address,uint256)\"\n// )\nuint256 constant BadReturnValueFromERC20OnTransfer_error_signature = (\n    0x9889192300000000000000000000000000000000000000000000000000000000\n);\nuint256 constant BadReturnValueFromERC20OnTransfer_error_sig_ptr = 0x0;\nuint256 constant BadReturnValueFromERC20OnTransfer_error_token_ptr = 0x4;\nuint256 constant BadReturnValueFromERC20OnTransfer_error_from_ptr = 0x24;\nuint256 constant BadReturnValueFromERC20OnTransfer_error_to_ptr = 0x44;\nuint256 constant BadReturnValueFromERC20OnTransfer_error_amount_ptr = 0x64;\n\n// 4 + 32 * 4 == 132\nuint256 constant BadReturnValueFromERC20OnTransfer_error_length = 0x84;\n\nuint256 constant ExtraGasBuffer = 0x20;\nuint256 constant CostPerWord = 3;\nuint256 constant MemoryExpansionCoefficient = 0x200;\n\n// Values are offset by 32 bytes in order to write the token to the beginning\n// in the event of a revert\nuint256 constant BatchTransfer1155Params_ptr = 0x24;\nuint256 constant BatchTransfer1155Params_ids_head_ptr = 0x64;\nuint256 constant BatchTransfer1155Params_amounts_head_ptr = 0x84;\nuint256 constant BatchTransfer1155Params_data_head_ptr = 0xa4;\nuint256 constant BatchTransfer1155Params_data_length_basePtr = 0xc4;\nuint256 constant BatchTransfer1155Params_calldata_baseSize = 0xc4;\n\nuint256 constant BatchTransfer1155Params_ids_length_ptr = 0xc4;\n\nuint256 constant BatchTransfer1155Params_ids_length_offset = 0xa0;\nuint256 constant BatchTransfer1155Params_amounts_length_baseOffset = 0xc0;\nuint256 constant BatchTransfer1155Params_data_length_baseOffset = 0xe0;\n\nuint256 constant ConduitBatch1155Transfer_usable_head_size = 0x80;\n\nuint256 constant ConduitBatch1155Transfer_from_offset = 0x20;\nuint256 constant ConduitBatch1155Transfer_ids_head_offset = 0x60;\nuint256 constant ConduitBatch1155Transfer_amounts_head_offset = 0x80;\nuint256 constant ConduitBatch1155Transfer_ids_length_offset = 0xa0;\nuint256 constant ConduitBatch1155Transfer_amounts_length_baseOffset = 0xc0;\nuint256 constant ConduitBatch1155Transfer_calldata_baseSize = 0xc0;\n\n// Note: abbreviated version of above constant to adhere to line length limit.\nuint256 constant ConduitBatchTransfer_amounts_head_offset = 0x80;\n\nuint256 constant Invalid1155BatchTransferEncoding_ptr = 0x00;\nuint256 constant Invalid1155BatchTransferEncoding_length = 0x04;\nuint256 constant Invalid1155BatchTransferEncoding_selector = (\n    0xeba2084c00000000000000000000000000000000000000000000000000000000\n);\n\nuint256 constant ERC1155BatchTransferGenericFailure_error_signature = (\n    0xafc445e200000000000000000000000000000000000000000000000000000000\n);\nuint256 constant ERC1155BatchTransferGenericFailure_token_ptr = 0x04;\nuint256 constant ERC1155BatchTransferGenericFailure_ids_offset = 0xc0;\n"
    },
    "contracts/lib/Verifiers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.13;\n\nimport { OrderStatus } from \"./ConsiderationStructs.sol\";\n\nimport { Assertions } from \"./Assertions.sol\";\n\nimport { SignatureVerification } from \"./SignatureVerification.sol\";\n\n/**\n * @title Verifiers\n * @author 0age\n * @notice Verifiers contains functions for performing verifications.\n */\ncontract Verifiers is Assertions, SignatureVerification {\n    /**\n     * @dev Derive and set hashes, reference chainId, and associated domain\n     *      separator during deployment.\n     *\n     * @param conduitController A contract that deploys conduits, or proxies\n     *                          that may optionally be used to transfer approved\n     *                          ERC20/721/1155 tokens.\n     */\n    constructor(address conduitController) Assertions(conduitController) {}\n\n    /**\n     * @dev Internal view function to ensure that the current time falls within\n     *      an order's valid timespan.\n     *\n     * @param startTime       The time at which the order becomes active.\n     * @param endTime         The time at which the order becomes inactive.\n     * @param revertOnInvalid A boolean indicating whether to revert if the\n     *                        order is not active.\n     *\n     * @return valid A boolean indicating whether the order is active.\n     */\n    function _verifyTime(\n        uint256 startTime,\n        uint256 endTime,\n        bool revertOnInvalid\n    ) internal view returns (bool valid) {\n        // Revert if order's timespan hasn't started yet or has already ended.\n        if (startTime > block.timestamp || endTime <= block.timestamp) {\n            // Only revert if revertOnInvalid has been supplied as true.\n            if (revertOnInvalid) {\n                revert InvalidTime();\n            }\n\n            // Return false as the order is invalid.\n            return false;\n        }\n\n        // Return true as the order time is valid.\n        valid = true;\n    }\n\n    /**\n     * @dev Internal view function to verify the signature of an order. An\n     *      ERC-1271 fallback will be attempted if either the signature length\n     *      is not 32 or 33 bytes or if the recovered signer does not match the\n     *      supplied offerer. Note that in cases where a 32 or 33 byte signature\n     *      is supplied, only standard ECDSA signatures that recover to a\n     *      non-zero address are supported.\n     *\n     * @param offerer   The offerer for the order.\n     * @param orderHash The order hash.\n     * @param signature A signature from the offerer indicating that the order\n     *                  has been approved.\n     */\n    function _verifySignature(\n        address offerer,\n        bytes32 orderHash,\n        bytes memory signature\n    ) internal view {\n        // Skip signature verification if the offerer is the caller.\n        if (offerer == msg.sender) {\n            return;\n        }\n\n        // Derive EIP-712 digest using the domain separator and the order hash.\n        bytes32 digest = _deriveEIP712Digest(_domainSeparator(), orderHash);\n\n        // Ensure that the signature for the digest is valid for the offerer.\n        _assertValidSignature(offerer, digest, signature);\n    }\n\n    /**\n     * @dev Internal view function to validate that a given order is fillable\n     *      and not cancelled based on the order status.\n     *\n     * @param orderHash       The order hash.\n     * @param orderStatus     The status of the order, including whether it has\n     *                        been cancelled and the fraction filled.\n     * @param onlyAllowUnused A boolean flag indicating whether partial fills\n     *                        are supported by the calling function.\n     * @param revertOnInvalid A boolean indicating whether to revert if the\n     *                        order has been cancelled or filled beyond the\n     *                        allowable amount.\n     *\n     * @return valid A boolean indicating whether the order is valid.\n     */\n    function _verifyOrderStatus(\n        bytes32 orderHash,\n        OrderStatus storage orderStatus,\n        bool onlyAllowUnused,\n        bool revertOnInvalid\n    ) internal view returns (bool valid) {\n        // Ensure that the order has not been cancelled.\n        if (orderStatus.isCancelled) {\n            // Only revert if revertOnInvalid has been supplied as true.\n            if (revertOnInvalid) {\n                revert OrderIsCancelled(orderHash);\n            }\n\n            // Return false as the order status is invalid.\n            return false;\n        }\n\n        // Read order status numerator from storage and place on stack.\n        uint256 orderStatusNumerator = orderStatus.numerator;\n\n        // If the order is not entirely unused...\n        if (orderStatusNumerator != 0) {\n            // ensure the order has not been partially filled when not allowed.\n            if (onlyAllowUnused) {\n                // Always revert on partial fills when onlyAllowUnused is true.\n                revert OrderPartiallyFilled(orderHash);\n            }\n            // Otherwise, ensure that order has not been entirely filled.\n            else if (orderStatusNumerator >= orderStatus.denominator) {\n                // Only revert if revertOnInvalid has been supplied as true.\n                if (revertOnInvalid) {\n                    revert OrderAlreadyFilled(orderHash);\n                }\n\n                // Return false as the order status is invalid.\n                return false;\n            }\n        }\n\n        // Return true as the order status is valid.\n        valid = true;\n    }\n}\n"
    },
    "contracts/lib/ZoneInteraction.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.13;\n\nimport { ZoneInterface } from \"../interfaces/ZoneInterface.sol\";\n\nimport { OrderType } from \"./ConsiderationEnums.sol\";\n\n// prettier-ignore\nimport { AdvancedOrder, CriteriaResolver } from \"./ConsiderationStructs.sol\";\n\nimport \"./ConsiderationConstants.sol\";\n\n// prettier-ignore\nimport {\n    ZoneInteractionErrors\n} from \"../interfaces/ZoneInteractionErrors.sol\";\n\nimport { LowLevelHelpers } from \"./LowLevelHelpers.sol\";\n\n/**\n * @title ZoneInteraction\n * @author 0age\n * @notice ZoneInteraction contains logic related to interacting with zones.\n */\ncontract ZoneInteraction is ZoneInteractionErrors, LowLevelHelpers {\n    /**\n     * @dev Internal view function to determine if an order has a restricted\n     *      order type and, if so, to ensure that either the offerer or the zone\n     *      are the fulfiller or that a staticcall to `isValidOrder` on the zone\n     *      returns a magic value indicating that the order is currently valid.\n     *\n     * @param orderHash The hash of the order.\n     * @param zoneHash  The hash to provide upon calling the zone.\n     * @param orderType The type of the order.\n     * @param offerer   The offerer in question.\n     * @param zone      The zone in question.\n     */\n    function _assertRestrictedBasicOrderValidity(\n        bytes32 orderHash,\n        bytes32 zoneHash,\n        OrderType orderType,\n        address offerer,\n        address zone\n    ) internal view {\n        // Order type 2-3 require zone or offerer be caller or zone to approve.\n        if (\n            uint256(orderType) > 1 &&\n            msg.sender != zone &&\n            msg.sender != offerer\n        ) {\n            // Perform minimal staticcall to the zone.\n            _callIsValidOrder(zone, orderHash, offerer, zoneHash);\n        }\n    }\n\n    function _callIsValidOrder(\n        address zone,\n        bytes32 orderHash,\n        address offerer,\n        bytes32 zoneHash\n    ) internal view {\n        // Perform minimal staticcall to the zone.\n        bool success = _staticcall(\n            zone,\n            abi.encodeWithSelector(\n                ZoneInterface.isValidOrder.selector,\n                orderHash,\n                msg.sender,\n                offerer,\n                zoneHash\n            )\n        );\n\n        // Ensure call was successful and returned the correct magic value.\n        _assertIsValidOrderStaticcallSuccess(success, orderHash);\n    }\n\n    /**\n     * @dev Internal view function to determine whether an order is a restricted\n     *      order and, if so, to ensure that it was either submitted by the\n     *      offerer or the zone for the order, or that the zone returns the\n     *      expected magic value upon performing a staticcall to `isValidOrder`\n     *      or `isValidOrderIncludingExtraData` depending on whether the order\n     *      fulfillment specifies extra data or criteria resolvers.\n     *\n     * @param advancedOrder     The advanced order in question.\n     * @param criteriaResolvers An array where each element contains a reference\n     *                          to a specific offer or consideration, a token\n     *                          identifier, and a proof that the supplied token\n     *                          identifier is contained in the order's merkle\n     *                          root. Note that a criteria of zero indicates\n     *                          that any (transferable) token identifier is\n     *                          valid and that no proof needs to be supplied.\n     * @param priorOrderHashes  The order hashes of each order supplied prior to\n     *                          the current order as part of a \"match\" variety\n     *                          of order fulfillment (e.g. this array will be\n     *                          empty for single or \"fulfill available\").\n     * @param orderHash         The hash of the order.\n     * @param zoneHash          The hash to provide upon calling the zone.\n     * @param orderType         The type of the order.\n     * @param offerer           The offerer in question.\n     * @param zone              The zone in question.\n     */\n    function _assertRestrictedAdvancedOrderValidity(\n        AdvancedOrder memory advancedOrder,\n        CriteriaResolver[] memory criteriaResolvers,\n        bytes32[] memory priorOrderHashes,\n        bytes32 orderHash,\n        bytes32 zoneHash,\n        OrderType orderType,\n        address offerer,\n        address zone\n    ) internal view {\n        // Order type 2-3 require zone or offerer be caller or zone to approve.\n        if (\n            uint256(orderType) > 1 &&\n            msg.sender != zone &&\n            msg.sender != offerer\n        ) {\n            // If no extraData or criteria resolvers are supplied...\n            if (\n                advancedOrder.extraData.length == 0 &&\n                criteriaResolvers.length == 0\n            ) {\n                // Perform minimal staticcall to the zone.\n                _callIsValidOrder(zone, orderHash, offerer, zoneHash);\n            } else {\n                // Otherwise, extra data or criteria resolvers were supplied; in\n                // that event, perform a more verbose staticcall to the zone.\n                bool success = _staticcall(\n                    zone,\n                    abi.encodeWithSelector(\n                        ZoneInterface.isValidOrderIncludingExtraData.selector,\n                        orderHash,\n                        msg.sender,\n                        advancedOrder,\n                        priorOrderHashes,\n                        criteriaResolvers\n                    )\n                );\n\n                // Ensure call was successful and returned correct magic value.\n                _assertIsValidOrderStaticcallSuccess(success, orderHash);\n            }\n        }\n    }\n\n    /**\n     * @dev Internal view function to ensure that a staticcall to `isValidOrder`\n     *      or `isValidOrderIncludingExtraData` as part of validating a\n     *      restricted order that was not submitted by the named offerer or zone\n     *      was successful and returned the required magic value.\n     *\n     * @param success   A boolean indicating the status of the staticcall.\n     * @param orderHash The order hash of the order in question.\n     */\n    function _assertIsValidOrderStaticcallSuccess(\n        bool success,\n        bytes32 orderHash\n    ) internal view {\n        // If the call failed...\n        if (!success) {\n            // Revert and pass reason along if one was returned.\n            _revertWithReasonIfOneIsReturned();\n\n            // Otherwise, revert with a generic error message.\n            revert InvalidRestrictedOrder(orderHash);\n        }\n\n        // Ensure result was extracted and matches isValidOrder magic value.\n        if (_doesNotMatchMagic(ZoneInterface.isValidOrder.selector)) {\n            revert InvalidRestrictedOrder(orderHash);\n        }\n    }\n}\n"
    },
    "contracts/loan/LoanAuction.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { AmountDeriver } from \"../lib/AmountDeriver.sol\";\nimport \"../PeriFiAdmin.sol\";\nimport \"./LoanAuctionEnums.sol\";\nimport \"./LoanAuctionEventsAndErrors.sol\";\nimport \"./LoanAuctionStructs.sol\";\nimport \"./LoanRepaymentCalculator.sol\";\nimport \"../vault/Vault.sol\";\nimport \"../access/MWOwnable.sol\";\nimport \"hardhat/console.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\ncontract LoanAuction is\n    ReentrancyGuard,\n    AmountDeriver,\n    LoanAuctionEventsAndErrors,\n    UUPSUpgradeable,\n    MWOwnable\n{\n    uint256 public auctionCount;\n    mapping(uint256 => Auction) public auctions;\n    mapping(uint256 => AuctionStatus) public status;\n    mapping(uint256 => uint256) public bidAmounts;\n    mapping(uint256 => address) public bidders;\n    address public periFiAdminAddr;\n    address public loanRepaymentAddr;\n    uint256 public decrementInterval;\n\n    function initialize(\n        address _periFiAdminAddr,\n        address _loanRepaymentAddr\n    ) public virtual initializer {\n        periFiAdminAddr = _periFiAdminAddr;\n        loanRepaymentAddr = _loanRepaymentAddr;\n        decrementInterval = 1 days;\n        \n        __MWOwnable_init();\n    }\n\n    // display current price\n\n    // display price for borrower\n\n    function beginAuction(\n        AuctionParameters calldata params\n    ) external virtual onlyOwner nonReentrant {\n        Auction memory auction = Auction({\n            id: auctionCount,\n            protectedUntil: 0,\n            parameters: params\n        });\n\n        address owner = IERC721(params.tokenAddress).ownerOf(params.tokenId);\n\n        // We will assume auction contract will hold the defaulted collateral for ease of use.\n        if (owner != address(this)) {\n            revert CollateralOwnershipNotTransferred();\n        }\n\n        if (params.startAmount <= params.endAmount) {\n            revert InvalidPriceRange(params.startAmount, params.endAmount);\n        }\n\n        if (params.startTime >= params.endTime) {\n            revert InvalidTimeRange(params.startTime, params.endTime);\n        }\n\n        if (block.timestamp >= params.endTime) {\n            revert InvalidTimeRange(params.startTime, params.endTime);\n        }\n\n        if (params.stepDownConfig.length != 0) {\n            validateStepDownConfig(\n                params.startTime,\n                params.endTime,\n                params.stepDownConfig\n            );\n        }\n\n        // set liquidation protection expiration\n        if (params.isProtected) {\n            uint256 protection = PeriFiAdmin(periFiAdminAddr)\n                .liquidateProtectionDuration();\n            auction.protectedUntil = params.startTime + protection;\n        }\n\n        auctions[auctionCount] = auction;\n        status[auctionCount] = AuctionStatus.Registered;\n        auctionCount += 1;\n        emit LoanAuctionBegun(\n            auction.id,\n            params.loanId,\n            params.tokenAddress,\n            params.paymentToken,\n            params.loanBorrower,\n            params.tokenId,\n            params.startAmount,\n            params.endAmount,\n            params.startTime,\n            params.endTime,\n            auction.protectedUntil,\n            params.loanRepaymentAmount,\n            params.stepDownConfig\n        );\n    }\n\n    function makeBid(\n        uint256 auctionId\n    ) external virtual nonReentrant returns (bool completed) {\n        if (status[auctionId] != AuctionStatus.Registered) {\n            revert AuctionInvalidStatus(auctionId, status[auctionId]);\n        }\n\n        uint256 currentPrice = currentBidPrice(auctionId);\n\n        Auction memory item = auctions[auctionId];\n        AuctionParameters memory params = item.parameters;\n\n        if (item.protectedUntil > block.timestamp) {\n            // hold the asset until the protection period is over\n            IERC20(params.paymentToken).transferFrom(\n                msg.sender,\n                address(this),\n                currentPrice\n            );\n            bidders[auctionId] = msg.sender;\n            status[auctionId] = AuctionStatus.Protected;\n            bidAmounts[auctionId] = currentPrice;\n            emit LoanAuctionSoldAndProtected(\n                auctionId,\n                msg.sender,\n                params.loanBorrower,\n                currentPrice\n            );\n            return false;\n        }\n\n        IERC721(params.tokenAddress).transferFrom(\n            address(this),\n            msg.sender,\n            params.tokenId\n        );\n\n        // transfer erc20 from this contract to all the recipients\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(\n            loanRepaymentAddr\n        );\n        Repayment[] memory repayments = calculator.getDestinations(\n            params.loanId,\n            params.loanRepaymentAmount,\n            params.loanAmount,\n            params.lender\n        );\n        address insuranceVaultAddr = calculator.insuranceVaultAddress();\n        IERC20 erc20 = IERC20(params.paymentToken);\n        uint256 bidAmountLeft = currentPrice;\n        uint256 insuranceLeft = erc20.balanceOf(insuranceVaultAddr);\n        uint repaymentLength = repayments.length;\n        for (uint idx = 0; idx < repaymentLength; idx++) {\n            Repayment memory repaymentItem = repayments[idx];\n            uint256 paymentLeft = repaymentItem.value;\n\n            // cover the repayment from deposit amount from bid\n            if (bidAmountLeft > 0) {\n                if (bidAmountLeft >= paymentLeft) {\n                    console.log(\n                        \"sending from %s to %s, %s\",\n                        msg.sender,\n                        repaymentItem.targetAddress,\n                        paymentLeft\n                    );\n                    erc20.transferFrom(\n                        msg.sender,\n                        repaymentItem.targetAddress,\n                        paymentLeft\n                    );\n                    bidAmountLeft -= paymentLeft;\n                    continue;\n                }\n                console.log(\n                    \"sending partial from %s to %s, %s\",\n                    msg.sender,\n                    repaymentItem.targetAddress,\n                    bidAmountLeft\n                );\n                erc20.transferFrom(\n                    msg.sender,\n                    repaymentItem.targetAddress,\n                    bidAmountLeft\n                );\n                paymentLeft -= bidAmountLeft;\n                bidAmountLeft = 0;\n            }\n            if (insuranceVaultAddr == repaymentItem.targetAddress) {\n                continue;\n            }\n\n            // if not guaranteed, next\n            if (!repaymentItem.guaranteed) {\n                continue;\n            }\n            // if guaranteed, pay with insurance\n            if (insuranceLeft >= paymentLeft) {\n                console.log(\n                    \"sending from IV to %s, %s\",\n                    repaymentItem.targetAddress,\n                    paymentLeft\n                );\n\n                Vault(payable(insuranceVaultAddr)).transferERC20(\n                    params.paymentToken,\n                    repaymentItem.targetAddress,\n                    paymentLeft\n                );\n                insuranceLeft -= paymentLeft;\n                continue;\n            }\n\n            // if insurance can't cover the current payment, pay what it has, and stop\n            if (insuranceLeft > 0) {\n                console.log(\n                    \"sending partial from IV to %s, %s\",\n                    repaymentItem.targetAddress,\n                    insuranceLeft\n                );\n                Vault(payable(insuranceVaultAddr)).transferERC20(\n                    params.paymentToken,\n                    repaymentItem.targetAddress,\n                    insuranceLeft\n                );\n            }\n            break;\n        }\n        if (bidAmountLeft > 0) {\n            console.log(\n                \"sending from %s to %s, %s\",\n                msg.sender,\n                params.loanBorrower,\n                bidAmountLeft\n            );\n            erc20.transferFrom(msg.sender, params.loanBorrower, bidAmountLeft);\n        }\n        emit LoanAuctionSoldToBidder(auctionId, msg.sender, currentPrice);\n        status[auctionId] = AuctionStatus.SoldToBidder;\n        return true;\n    }\n\n    function claim(uint256 auctionId) external virtual nonReentrant {\n        if (status[auctionId] != AuctionStatus.Protected) {\n            revert AuctionInvalidStatus(auctionId, status[auctionId]);\n        }\n\n        Auction memory item = auctions[auctionId];\n\n        AuctionParameters memory params = item.parameters;\n\n        if (block.timestamp < item.protectedUntil) {\n            revert ProtectionNotOver();\n        }\n\n        IERC721(params.tokenAddress).transferFrom(\n            address(this),\n            msg.sender,\n            params.tokenId\n        );\n        status[auctionId] = AuctionStatus.SoldToBidder;\n        uint256 bidAmount = bidAmounts[auctionId];\n        address bidder = bidders[auctionId];\n\n        // transfer erc20 from this contract to all the recipients\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(\n            loanRepaymentAddr\n        );\n        Repayment[] memory repayments = calculator.getDestinations(\n            params.loanId,\n            params.loanRepaymentAmount,\n            params.loanAmount,\n            params.lender\n        );\n\n        address insuranceVaultAddr = calculator.insuranceVaultAddress();\n        IERC20 erc20 = IERC20(params.paymentToken);\n        uint256 bidAmountLeft = bidAmount;\n        uint256 insuranceLeft = erc20.balanceOf(insuranceVaultAddr);\n        uint repaymentLength = repayments.length;\n        for (uint idx = 0; idx < repaymentLength; idx++) {\n            Repayment memory repaymentItem = repayments[idx];\n            uint256 paymentLeft = repaymentItem.value;\n\n            // cover the repayment from deposit amount from bid\n            if (bidAmountLeft > 0) {\n                if (bidAmountLeft >= paymentLeft) {\n                    console.log(\n                        \"sending from %s to %s, %s\",\n                        address(this),\n                        repaymentItem.targetAddress,\n                        paymentLeft\n                    );\n                    erc20.transfer(repaymentItem.targetAddress, paymentLeft);\n                    bidAmountLeft -= paymentLeft;\n                    continue;\n                }\n                console.log(\n                    \"sending partial from %s to %s, %s\",\n                    address(this),\n                    repaymentItem.targetAddress,\n                    bidAmountLeft\n                );\n                erc20.transfer(repaymentItem.targetAddress, bidAmountLeft);\n                paymentLeft -= bidAmountLeft;\n                bidAmountLeft = 0;\n            }\n            if (insuranceVaultAddr == repaymentItem.targetAddress) {\n                continue;\n            }\n            // if not guaranteed, next\n            if (!repaymentItem.guaranteed) {\n                continue;\n            }\n            // if guaranteed, pay with insurance\n            if (insuranceLeft >= paymentLeft) {\n                console.log(\n                    \"sending from IV to %s, %s\",\n                    repaymentItem.targetAddress,\n                    paymentLeft\n                );\n                Vault(payable(insuranceVaultAddr)).transferERC20(\n                    params.paymentToken,\n                    repaymentItem.targetAddress,\n                    paymentLeft\n                );\n                insuranceLeft -= paymentLeft;\n                continue;\n            }\n\n            // if insurance can't cover the current payment, pay what it has, and stop\n            if (insuranceLeft > 0) {\n                console.log(\n                    \"sending partial from IV to %s, %s\",\n                    repaymentItem.targetAddress,\n                    insuranceLeft\n                );\n                Vault(payable(insuranceVaultAddr)).transferERC20(\n                    params.paymentToken,\n                    repaymentItem.targetAddress,\n                    insuranceLeft\n                );\n            }\n            break;\n        }\n        if (bidAmountLeft > 0) {\n            console.log(\n                \"sending from %s to %s, %s\",\n                address(this),\n                params.loanBorrower,\n                bidAmountLeft\n            );\n            erc20.transfer(params.loanBorrower, bidAmountLeft);\n        }\n        emit LoanAuctionSoldToBidder(auctionId, bidder, bidAmount);\n    }\n\n    function payout(uint256 auctionId) external virtual nonReentrant {\n        AuctionStatus currentStatus = status[auctionId];\n\n        if (\n            currentStatus != AuctionStatus.Registered &&\n            currentStatus != AuctionStatus.Protected\n        ) {\n            revert AuctionInvalidStatus(auctionId, currentStatus);\n        }\n\n        Auction memory item = auctions[auctionId];\n        AuctionParameters memory params = item.parameters;\n\n        if (msg.sender != params.loanBorrower) {\n            revert NotAuthorized();\n        }\n\n        // check auction's protection period has been expired\n        if (block.timestamp > item.protectedUntil) {\n            revert ProtectionOver();\n        }\n\n        uint256 repayment = params.loanRepaymentAmount;\n        uint256 penalty = 0;\n        if (currentStatus == AuctionStatus.Protected) {\n            uint bidAmount = bidAmounts[auctionId];\n            penalty = (bidAmount * 5) / 100;\n            IERC20(params.paymentToken).transferFrom(\n                msg.sender,\n                bidders[auctionId],\n                penalty\n            );\n            IERC20(params.paymentToken).transfer(bidders[auctionId], bidAmount);\n            bidAmounts[auctionId] = 0;\n        }\n        uint256 fullRepayment = repayment + penalty;\n        IERC721(params.tokenAddress).transferFrom(\n            address(this),\n            msg.sender,\n            params.tokenId\n        );\n\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(\n            loanRepaymentAddr\n        );\n        Repayment[] memory repayments = calculator.getDestinations(\n            params.loanId,\n            params.loanRepaymentAmount,\n            params.loanAmount,\n            params.lender\n        );\n        IERC20 erc20 = IERC20(params.paymentToken);\n        uint repaymentLength = repayments.length;\n        for (uint idx = 0; idx < repaymentLength; idx++) {\n            Repayment memory repaymentItem = repayments[idx];\n            erc20.transferFrom(\n                msg.sender,\n                repaymentItem.targetAddress,\n                repaymentItem.value\n            );\n        }\n        status[auctionId] = AuctionStatus.SoldToBorrower;\n        emit LoanAuctionCancelledByPayout(auctionId, msg.sender, fullRepayment);\n    }\n\n    function currentDebt(uint256 auctionId) public virtual view returns (uint256 debt) {\n        AuctionStatus currentStatus = status[auctionId];\n\n        if (\n            currentStatus != AuctionStatus.Registered &&\n            currentStatus != AuctionStatus.Protected\n        ) {\n            return 0;\n        }\n\n        Auction memory item = auctions[auctionId];\n        AuctionParameters memory params = item.parameters;\n\n        if (msg.sender != params.loanBorrower) {\n            return 0;\n        }\n\n        uint256 repayment = params.loanRepaymentAmount;\n        uint256 penalty = 0;\n        if (currentStatus == AuctionStatus.Protected) {\n            uint bidAmount = bidAmounts[auctionId];\n            penalty = (bidAmount * 5) / 100;\n        }\n        return repayment + penalty;\n    }\n\n    function currentBidPrice(\n        uint256 auctionId\n    ) public view returns (uint256 amount) {\n        if (status[auctionId] != AuctionStatus.Registered) {\n            return 0;\n        }\n\n        Auction memory item = auctions[auctionId];\n        AuctionParameters memory params = item.parameters;\n        if (params.stepDownConfig.length == 0) {\n            // no stepDown\n            return\n                _locateCurrentAmount(\n                    params.startAmount,\n                    params.endAmount,\n                    params.startTime,\n                    params.endTime,\n                    true\n                );\n        }\n\n        // stepDown\n        return\n            _locateCurrentStepDownAmount(\n                params.startAmount,\n                params.endAmount,\n                params.startTime,\n                params.stepDownConfig,\n                true\n            );\n    }\n\n    function validateStepDownConfig(\n        uint256 startTime,\n        uint256 endTime,\n        bytes memory config\n    ) internal virtual view {\n        if (config.length <= 0) {\n            revert InvalidStepDownConfig();\n        }\n\n        uint accDecrement;\n        uint8 actualLength;\n        uint length = config.length;\n        for (uint idx = 0; idx < length; idx++) {\n            uint8 decrement = uint8(config[idx]);\n            if (decrement == 255) {\n                break;\n            }\n            accDecrement += decrement;\n            actualLength++;\n        }\n\n        uint256 duration = endTime - startTime;\n        uint256 minDuration = uint256(actualLength * decrementInterval);\n        uint256 maxDuration = uint256((actualLength + 2) * decrementInterval);\n        if (duration <= minDuration) {\n            revert StepDownConfigAndAuctionTimeMismatch();\n        }\n        if (duration >= maxDuration) {\n            revert StepDownConfigAndAuctionTimeMismatch();\n        }\n    }\n\n    function updateDecrementInterval(uint256 intervalInSec) public {\n        require(intervalInSec != 0, \"interval must be non-zero value\");\n        decrementInterval = intervalInSec;\n    }\n\n    function _locateCurrentStepDownAmount(\n        uint256 startAmount,\n        uint256 endAmount,\n        uint256 startTime,\n        bytes memory stepDownConfig,\n        bool roundUp\n    ) internal virtual view returns (uint256 amount) {\n        // Only modify end amount if it doesn't already equal start amount.\n        if (startAmount != endAmount) {\n            // Declare variables to derive in the subsequent unchecked scope.\n            uint256 duration;\n            uint256 elapsed;\n            uint256 remaining;\n\n            uint256 elapsedTs;\n            uint accDecrement;\n            uint totalDecrement;\n            // Skip underflow checks as startTime <= block.timestamp < endTime.\n            unchecked {\n                // Derive the duration for the order and place it on the stack.\n                // duration = endTime - startTime;\n\n                // Derive time elapsed since the order started & place on stack.\n                elapsedTs = block.timestamp - startTime;\n\n                // Derive time remaining until order expires and place on stack.\n                // remaining = duration - elapsed;\n            }\n            uint256 daysPassed = elapsedTs / decrementInterval;\n            uint length = stepDownConfig.length;\n            for (uint idx = 0; idx < length; idx++) {\n                uint8 decrement = uint8(stepDownConfig[idx]);\n                if (decrement == 255) {\n                    break;\n                }\n                if (idx < daysPassed) {\n                    accDecrement += decrement;\n                }\n                totalDecrement += decrement;\n            }\n            duration = totalDecrement;\n            elapsed = accDecrement;\n            remaining = duration - elapsed;\n            // Aggregate new amounts weighted by time with rounding factor.\n            uint256 totalBeforeDivision = ((startAmount * remaining) +\n                (endAmount * elapsed));\n\n            // Use assembly to combine operations and skip divide-by-zero check.\n            assembly {\n                // Multiply by iszero(iszero(totalBeforeDivision)) to ensure\n                // amount is set to zero if totalBeforeDivision is zero,\n                // as intermediate overflow can occur if it is zero.\n                amount := mul(\n                    iszero(iszero(totalBeforeDivision)),\n                    // Subtract 1 from the numerator and add 1 to the result if\n                    // roundUp is true to get the proper rounding direction.\n                    // Division is performed with no zero check as duration\n                    // cannot be zero as long as startTime < endTime.\n                    add(\n                        div(sub(totalBeforeDivision, roundUp), duration),\n                        roundUp\n                    )\n                )\n            }\n\n            // Return the current amount.\n            return amount;\n        }\n\n        // Return the original amount as startAmount == endAmount.\n        return endAmount;\n    }\n\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\n}\n"
    },
    "contracts/loan/LoanAuctionEnums.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\nenum AuctionStatus {\n    NotRegistered,\n    Registered,\n    Protected,\n    SoldToBidder,\n    SoldToBorrower\n}\n\nenum RecipientType {\n    LendingPool,\n    Lender,\n    Commission,\n    Borrower\n}"
    },
    "contracts/loan/LoanAuctionEventsAndErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\nimport \"./LoanAuctionEnums.sol\";\n\ninterface LoanAuctionEventsAndErrors{\n    error InvalidStepDownConfig();\n    error StepDownConfigOverflow();\n    error IncompleteStepDownConfig();\n    error StepDownConfigAndAuctionTimeMismatch();\n    \n    error CollateralOwnershipNotTransferred();\n    error AuctionInvalidStatus(uint256 auctionId, AuctionStatus status);\n    error AuctionNotRegistered();\n    error ProtectionNotOver();\n    error ProtectionOver();\n    error InvalidPriceRange(uint256 startAmount, uint256 endAmount);\n    error InvalidTimeRange(uint256 startTime, uint256 endTime);\n    error NotAuthorized();\n\n    event LoanAuctionBegun(uint256 indexed auctionId, uint256 loanId, \n        address tokenAddr, address paymentToken, \n        address loanBorrower, uint256 tokenId, uint256 startAmount, uint256 endAmount,\n        uint256 startTime, uint256 endTime, uint256 protectedUntil, uint256 loanRepaymentAmount,\n        bytes stepDownConfig);\n    event LoanAuctionSoldAndProtected(uint256 indexed auctionId, address bidder, address borrower, uint256 bidAmount);\n    event LoanAuctionSoldToBidder(uint256 indexed auctionId, address bidder, uint256 bidAmount);\n    event LoanAuctionCancelledByPayout(uint256 indexed auctionId, address borrower, uint256 payout);\n}"
    },
    "contracts/loan/LoanAuctionStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\nimport \"./LoanAuctionEnums.sol\";\n\nstruct AuctionParameters {\n    uint256 loanId;\n    address tokenAddress;\n    address paymentToken;\n    uint256 tokenId;\n    uint256 startAmount;\n    uint256 endAmount;\n    uint256 startTime;\n    uint256 endTime;\n    bytes stepDownConfig;\n    address loanBorrower;\n    uint256 loanAmount;\n    uint256 loanRepaymentAmount;\n    address lender;\n    bool isProtected;\n}\n\n\nstruct PaymentRecipients {\n    address recipient;\n    uint256 amount;\n    RecipientType recipientType;\n}\n\nstruct Auction {\n    uint256 id;\n    uint256 protectedUntil;\n    AuctionParameters parameters;\n}"
    },
    "contracts/loan/LoanRepaymentCalculator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\nimport \"../PeriFiAdmin.sol\";\nimport \"../vault/LendingPool.sol\";\n\nenum DestinationType {\n    Pool,\n    Lender,\n    InsuranceVault,\n    Commission,\n    CurationRewardPool\n}\n\nstruct Repayment {\n    address targetAddress;\n    uint256 value;\n    bool guaranteed;\n}\n\n\ncontract LoanRepaymentCalculator {\n    address public insuranceVaultAddress;\n    address public lendingPoolAddress;\n    address public masterWalletAddress;\n    address public periFiAdminAddress;\n    address public curationRewardPoolAddress;\n\n    constructor(\n        address _insuranceVaultAddress,\n        address _lendingPoolAddress,\n        address _masterWalletAddress,\n        address _periFiAdminAddress,\n        address _curationRewardPoolAddress) {\n        insuranceVaultAddress = _insuranceVaultAddress;\n        lendingPoolAddress = _lendingPoolAddress;\n        masterWalletAddress = _masterWalletAddress;\n        periFiAdminAddress = _periFiAdminAddress;\n        curationRewardPoolAddress = _curationRewardPoolAddress;\n    }\n\n    function getDestinations(\n        uint256 loanId,\n        uint256 repaymentAmount, \n        uint256 loanAmount,\n        address lender\n    ) external view returns (Repayment[] memory results) {\n        uint256 interestDue = repaymentAmount - loanAmount;\n\n        LendingPool lendingPool = LendingPool(payable(lendingPoolAddress));\n        uint256 leverageAmount = lendingPool.loanToLeverage(loanId);\n\n        // if there is no interest\n        if (interestDue == 0) {\n            if (leverageAmount == 0){\n                results = new Repayment[](1);\n                results[0] = Repayment(lender, loanAmount, false);\n            } else {\n                results = new Repayment[](2);\n                results[0] = Repayment(lendingPoolAddress, leverageAmount, true);\n                results[1] = Repayment(lender, loanAmount - leverageAmount, false);\n            }\n            return results;\n        }\n\n        uint256 interestForPool = interestDue * leverageAmount / loanAmount;\n        uint256 interestForLender = interestDue - interestForPool;\n        uint256 loanAmountByLender = loanAmount - leverageAmount;\n\n        uint256 lenderForIFL;\n        uint256 commissionForIFL;\n        uint256 curationRewardForIFL;\n\n        (\n            lenderForIFL, \n            commissionForIFL, \n            curationRewardForIFL\n        ) = distributeIFL(interestForLender);\n\n        if (leverageAmount == 0) {\n            // no leverage Used, only need to get InterestForLender (IFL)\n            results = new Repayment[](3);\n            results[0] = Repayment(lender, loanAmountByLender + lenderForIFL, false);\n            results[1] = Repayment(masterWalletAddress, commissionForIFL, false);\n            results[2] = Repayment(curationRewardPoolAddress, curationRewardForIFL, true);\n        } else {\n            PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddress);\n\n            uint256 poolUsageInBasisPoints = lendingPool.loanToPoolUsageInBasisPoint(loanId);\n            uint256 ivCommissionForIFP = periFiAdmin.ivCommissionForIFP();\n\n            uint256 commissionBasisPoint = poolCommissionInBasisPointByPoolUsage(poolUsageInBasisPoints);\n            \n            uint256 poolForIFP = interestForPool * commissionBasisPoint / 10000;\n            uint256 insuranceVaultForIFP = interestForPool * ivCommissionForIFP / 10000;\n            uint256 lenderForIFP = interestForPool - (poolForIFP + insuranceVaultForIFP);\n\n            results = new Repayment[](7);\n            results[0] = Repayment(lendingPoolAddress, leverageAmount, true);\n            results[1] = Repayment(lender, loanAmountByLender, false);\n            results[2] = Repayment(lendingPoolAddress, poolForIFP, false);\n            results[3] = Repayment(lender, lenderForIFP + lenderForIFL, false);\n            results[4] = Repayment(curationRewardPoolAddress, curationRewardForIFL, true);\n            results[5] = Repayment(insuranceVaultAddress, insuranceVaultForIFP, false);\n            results[6] = Repayment(masterWalletAddress, commissionForIFL, false);\n        }\n    }\n\n    function distributeIFL(\n        uint256 interestForLender) internal view returns (\n            uint256 lenderForIFL,\n            uint256 commissionForIFL,\n            uint256 curationRewardForIFL\n        ) {\n            PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddress);\n            uint256 commissionInBasisPoints = periFiAdmin.commissionForIFL();\n            if (commissionInBasisPoints < 100) {\n                commissionInBasisPoints = 100; // to ensure curation reward commission\n            }\n            // no leverage Used, only need to get InterestForLender (IFL)\n            uint256 totalCommission = interestForLender * commissionInBasisPoints / 10000;\n            curationRewardForIFL = interestForLender / 100; // take 1%\n            commissionForIFL = totalCommission - curationRewardForIFL;\n            lenderForIFL = interestForLender - totalCommission;\n        }\n\n    function poolCommissionInBasisPointByPoolUsage(uint256 poolUsageInBasisPoints) internal view returns (uint256 basisPoint) {\n            PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddress);\n            if (poolUsageInBasisPoints <= 2000) {\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo20();\n            }\n            else if (poolUsageInBasisPoints <= 3000) {\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo30();\n            }\n            else if (poolUsageInBasisPoints <= 4000) {\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo40();\n            }\n            else if (poolUsageInBasisPoints <= 5000) {\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo50();\n            }\n            else if (poolUsageInBasisPoints <= 6000) {\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo60();\n            }\n            else if (poolUsageInBasisPoints <= 7000) {\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo70();\n            }\n            else if (poolUsageInBasisPoints <= 8000) {\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo80();\n            }\n            else if (poolUsageInBasisPoints <= 9000) {\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo90();\n            }\n            else {\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo100();\n            }\n            return basisPoint;\n    }\n\n}"
    },
    "contracts/loan/PeriFiLoan.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\n// import \"./PeriFiLoanAdmin.sol\";\nimport \"../PeriFiAdmin.sol\";\nimport \"./TrustDeed.sol\";\nimport \"../PeriFiAdmin.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\";\nimport \"../interfaces/INonStandardERC721Transfer.sol\";\nimport \"./LoanAuction.sol\";\nimport \"./LoanRepaymentCalculator.sol\";\nimport \"../vault/LendingPool.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\nenum LiquidationTrigger {\n    OverDue,\n    LowHealthFactor\n}\n\nenum LiquidationMethod {\n    Auction,\n    TransferredToLender\n}\n\n// contract PeriFiLoan is PeriFiLoanAdmin, ERC721, ERC721URIStorage {\ncontract PeriFiLoan is\n    ERC721URIStorageUpgradeable,\n    ReentrancyGuard,\n    UUPSUpgradeable,\n    PausableUpgradeable,\n    MWOwnable\n{\n    using SafeMath for uint256;\n    using ECDSA for bytes32;\n\n    struct Loan {\n        // A unique identifier for this particular loan, sourced from the\n        // continuously increasing parameter totalNumLoans.\n        uint256 index;\n        // The original sum of money transferred from lender to borrower at the\n        // beginning of the loan, measured in paymentToken's smallest\n        // units.\n        uint256 loanAmount;\n        // The original sum of money transferred from leverage pool to borrower\n        // at the beginnig of the loan, measured in paymentToken's\n        // smallest units.\n        uint256 loanLeveragedAmount;\n        // The maximum amount of money that the borrower would be required to\n        // repay retrieve their collateral, measured in paymentToken's\n        // smallest units. If interestIsProRated is set to false, then the\n        // borrower will always have to pay this amount to retrieve their\n        // collateral, regardless of whether they repay early.\n        uint256 repaymentAmount;\n        // The ID within the tokenAddress for the NFT being used as\n        // collateral for this loan. The NFT is stored within this contract\n        // during the duration of the loan.\n        uint256 tokenId;\n        // The block.timestamp when the loan first began (measured in seconds).\n        uint64 loanStartTime;\n        // The amount of time (measured in seconds) that can elapse before the\n        // lender can liquidate the loan and seize the underlying collateral.\n        uint32 loanDuration;\n        uint32 commissionBasisPoints;\n        // The ERC721 contract of the NFT collateral\n        address tokenAddress;\n        // The ERC20 contract of the currency being used as principal/interest\n        // for this loan.\n        address paymentToken;\n        // The address of the borrower.\n        address borrower;\n        bool liquidateViaAuction;\n    }\n\n    event LoanStarted(\n        uint256 loanIndex,\n        address borrower,\n        address lender,\n        uint256 loanAmount,\n        uint256 loanLeveragedAmount,\n        uint256 repaymentAmount,\n        uint256 tokenId,\n        uint256 loanStartTime,\n        uint256 loanDuration,\n        address tokenAddress,\n        address paymentToken,\n        bool liquidateViaAuction\n    );\n\n    event LoanTrustDeedIssued(uint256 loanIndex);\n\n    event LoanRepaid(\n        uint256 loanIndex,\n        address borrower,\n        address lender,\n        uint256 loanAmount,\n        uint256 tokenId,\n        uint256 amountPaidToLender,\n        uint256 interestForIV,\n        address tokenAddress,\n        address paymentToken\n    );\n\n    event LoanLiquidated(\n        uint256 loanIndex,\n        address borrower,\n        address lender,\n        uint256 loanAmount,\n        uint256 tokenId,\n        uint256 loanMaturityDate,\n        uint256 loanLiquidationDate,\n        address tokenAddress,\n        LiquidationTrigger trigger,\n        LiquidationMethod method\n    );\n\n    address public periFiAdminAddr;\n\n    address public loanRepaymentAddr;\n\n    address public trustDeedAddr;\n\n    address public auctionAddr;\n\n    uint256 public totalNumLoans;\n\n    uint256 public totalActiveLoans;\n\n    mapping(uint256 => Loan) public indexToLoan;\n\n    mapping(uint256 => uint256) public indexToMaturityDate;\n\n    mapping(uint256 => bool) public loanRepaidOrLiquidated;\n\n    mapping(address => mapping(uint256 => bool))\n        private _nonceHasBeenUsedForUser;\n\n    function initialize(\n        address _periFiAdminAddr,\n        address _loanRepaymentAddr,\n        address _auctionAddr,\n        address _trustDeedAddr\n    ) public virtual initializer {\n        periFiAdminAddr = _periFiAdminAddr;\n        auctionAddr = _auctionAddr;\n        trustDeedAddr = _trustDeedAddr;\n        loanRepaymentAddr = _loanRepaymentAddr;\n\n        __ERC721_init(\"PeriFi Loan Promissory Note\", \"PPN\");\n        __Pausable_init();\n        __MWOwnable_init();\n    }\n\n    function _burn(\n        uint256 tokenId\n    ) internal virtual override(ERC721URIStorageUpgradeable) {\n        super._burn(tokenId);\n    }\n\n    function setTokenURI(uint256 tokenId, string memory uri) external virtual {\n        super._setTokenURI(tokenId, uri);\n    }\n\n    function tokenURI(\n        uint256 tokenId\n    )\n        public\n        view\n        virtual\n        override(ERC721URIStorageUpgradeable)\n        returns (string memory)\n    {\n        return super.tokenURI(tokenId);\n    }\n\n    function beginLoan(\n        uint256 _loanAmount,\n        uint256 _loanLeveragedAmount,\n        uint256 _repaymentAmount,\n        uint256 _tokenId,\n        uint256 _loanDuration,\n        uint256 _commissionBasisPoints,\n        uint256[2] memory _borrowerAndLenderNonces,\n        address _tokenAddress,\n        address _paymentToken,\n        address _lender,\n        bytes memory _borrowerSignature,\n        bytes memory _lenderSignature,\n        bool _liquidateViaAuction\n    ) public virtual whenNotPaused nonReentrant {\n        // Save loan details to a struct in memory first, to save on gas if any\n        // of the below checks fail, and to avoid the \"Stack Too Deep\" error by\n        // clumping the parameters together into one struct held in memory.\n        Loan memory loan = Loan({\n            index: totalNumLoans, //currentloanIndex,\n            loanAmount: _loanAmount,\n            loanLeveragedAmount: _loanLeveragedAmount,\n            repaymentAmount: _repaymentAmount,\n            tokenId: _tokenId,\n            loanStartTime: uint64(block.timestamp), //_loanStartTime\n            loanDuration: uint32(_loanDuration),\n            // loanInterestRateForDurationInBasisPoints: uint32(_loanInterestRateForDurationInBasisPoints),\n            commissionBasisPoints: uint32(_commissionBasisPoints),\n            tokenAddress: _tokenAddress,\n            paymentToken: _paymentToken,\n            borrower: msg.sender, //borrower\n            // interestIsProRated: (_loanInterestRateForDurationInBasisPoints != ~(uint32(0))),\n            liquidateViaAuction: _liquidateViaAuction\n        });\n\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\n        // Sanity check loan values.\n        require(\n            loan.repaymentAmount >= loan.loanAmount,\n            \"Negative interest rate loans are not allowed.\"\n        );\n        require(\n            uint256(loan.loanDuration) <= periFiAdmin.maximumLoanDuration(),\n            \"Loan duration exceeds maximum loan duration\"\n        );\n        require(\n            uint256(loan.loanDuration) != 0,\n            \"Loan duration cannot be zero\"\n        );\n        // require(uint256(loan.commissionBasisPoints) == periFiAdmin.commissionForIFL(), 'The admin fee has changed since this order was signed.');\n\n        require(\n            loan.loanAmount > loan.loanLeveragedAmount,\n            \"Leveraged value exceeds total loan amount\"\n        );\n        // Check that both the collateral and the principal come from supported\n        // contracts.\n\n        // require(periFiAdmin.erc20CurrencyIsWhitelisted(loan.paymentToken), 'Currency denomination is not whitelisted to be used by this contract');\n        // require(PeriFiAdmin(perifiAdmin).nftContractIsWhitelisted(loan.tokenAddress), 'NFT collateral contract is not whitelisted to be used by this contract');\n\n        // Check loan nonces. These are different from Ethereum account nonces.\n        // Here, these are uint256 numbers that should uniquely identify\n        // each signature for each user (i.e. each user should only create one\n        // off-chain signature for each nonce, with a nonce being any arbitrary\n        // uint256 value that they have not used yet for an off-chain\n        // signature).\n        require(\n            !_nonceHasBeenUsedForUser[msg.sender][_borrowerAndLenderNonces[0]],\n            \"Borrower nonce invalid, borrower has either cancelled/begun this loan, or reused this nonce when signing\"\n        );\n        _nonceHasBeenUsedForUser[msg.sender][\n            _borrowerAndLenderNonces[0]\n        ] = true;\n        require(\n            !_nonceHasBeenUsedForUser[_lender][_borrowerAndLenderNonces[1]],\n            \"Lender nonce invalid, lender has either cancelled/begun this loan, or reused this nonce when signing\"\n        );\n        _nonceHasBeenUsedForUser[_lender][_borrowerAndLenderNonces[1]] = true;\n\n        // Check that both signatures are valid.\n        require(\n            isValidBorrowerSignature(\n                loan.tokenId,\n                _borrowerAndLenderNonces[0], //_borrowerNonce,\n                loan.tokenAddress,\n                msg.sender, //borrower,\n                _borrowerSignature\n            ),\n            \"Borrower signature is invalid\"\n        );\n\n        require(\n            isValidLenderSignature(\n                loan.loanAmount,\n                loan.loanLeveragedAmount,\n                loan.repaymentAmount,\n                loan.tokenId,\n                loan.loanDuration,\n                // loan.loanInterestRateForDurationInBasisPoints,\n                loan.commissionBasisPoints,\n                _borrowerAndLenderNonces[1], //_lenderNonce,\n                loan.tokenAddress,\n                loan.paymentToken,\n                _lender,\n                loan.liquidateViaAuction,\n                // loan.interestIsProRated,\n                _lenderSignature\n            ),\n            \"Lender signature is invalid\"\n        );\n\n        // Add the loan to storage before moving collateral/principal to follow\n        // the Checks-Effects-Interactions pattern.\n        indexToLoan[totalNumLoans] = loan;\n\n        uint256 loanMaturityDate = (uint256(loan.loanStartTime)).add(\n            uint256(loan.loanDuration)\n        );\n        indexToMaturityDate[totalNumLoans] = loanMaturityDate;\n\n        totalNumLoans = totalNumLoans.add(1);\n\n        // Update number of active loans.\n        totalActiveLoans = totalActiveLoans.add(1);\n        require(\n            totalActiveLoans <= periFiAdmin.maximumNumberOfActiveLoans(),\n            \"Contract has reached the maximum number of active loans allowed by admins\"\n        );\n\n        // Transfer collateral from borrower to this contract to be held until\n        // loan completion.liquidateOverdueLoan\n        IERC721(loan.tokenAddress).transferFrom(\n            msg.sender,\n            address(this),\n            loan.tokenId\n        );\n\n        uint256 lenderAllowance = IERC20(loan.paymentToken).allowance(\n            _lender,\n            address(this)\n        );\n        if (loan.loanLeveragedAmount > 0) {\n            uint256 loanFromLender = loan.loanAmount - loan.loanLeveragedAmount;\n            // Transfer principal from lender to borrower.\n            // uint256 poolAllowance = IERC20(loan.paymentToken).allowance(lendingPoolAddr, address(this));\n            require(\n                lenderAllowance >= loanFromLender,\n                \"ERC20 allowance is not set by lender or not enough balance\"\n            );\n            // require(poolAllowance >= loan.loanLeveragedAmount, 'ERC20 allowance is not set by lender or not enough balance');\n            IERC20(loan.paymentToken).transferFrom(\n                _lender,\n                msg.sender,\n                loanFromLender\n            );\n            LoanRepaymentCalculator calculator = LoanRepaymentCalculator(\n                loanRepaymentAddr\n            );\n            address lendingPoolAddr = calculator.lendingPoolAddress();\n            LendingPool(payable(lendingPoolAddr)).leverageLoan(\n                loan.index,\n                loan.paymentToken,\n                loan.loanLeveragedAmount,\n                msg.sender\n            );\n            // IERC20(loan.paymentToken).transferFrom(lendingPoolAddr, msg.sender, loan.loanLeveragedAmount);\n        } else {\n            require(\n                lenderAllowance >= loan.loanAmount,\n                \"ERC20 allowance is not set by lender or not enough balance\"\n            );\n            IERC20(loan.paymentToken).transferFrom(\n                _lender,\n                msg.sender,\n                loan.loanAmount\n            );\n        }\n\n        // Issue an ERC721 promissory note to the lender that gives them the\n        // right to either the principal-plus-interest or the collateral.\n        _mint(_lender, loan.index);\n\n        // Emit an event with all relevant details from this transaction.\n        emit LoanStarted(\n            loan.index,\n            msg.sender, //borrower,\n            _lender,\n            loan.loanAmount,\n            loan.loanLeveragedAmount,\n            loan.repaymentAmount,\n            loan.tokenId,\n            block.timestamp, //_loanStartTime\n            loan.loanDuration,\n            // loan.loanInterestRateForDurationInBasisPoints,\n            loan.tokenAddress,\n            loan.paymentToken,\n            loan.liquidateViaAuction\n            // loan.interestIsProRated\n        );\n    }\n\n    function issueTrustDeed(uint256 _loanIndex) external virtual nonReentrant {\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have\n        // never been called on this loanIndex. Depending on how the rest of the\n        // code turns out, this check may be unnecessary.\n        require(\n            !loanRepaidOrLiquidated[_loanIndex],\n            \"Loan has already been repaid or liquidated\"\n        );\n\n        require(\n            trustDeedAddr != address(0),\n            \"Trust Deed contract hasn't bee set up\"\n        );\n\n        // Fetch loan details from storage, but store them in memory for the\n        // sake of saving gas.\n        Loan memory loan = indexToLoan[_loanIndex];\n\n        // Check that the borrower is the caller, only the borrower is entitled\n        // to the collateral.\n        require(\n            msg.sender == loan.borrower,\n            \"Only the borrower can pay back a loan and reclaim the underlying NFT\"\n        );\n\n        TrustDeed trustDeedContract = TrustDeed(trustDeedAddr);\n        trustDeedContract.safeMint(msg.sender, _loanIndex);\n        emit LoanTrustDeedIssued(_loanIndex);\n    }\n\n    function payBackLoan(uint256 _loanIndex) external virtual nonReentrant {\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have\n        // never been called on this loanIndex. Depending on how the rest of the\n        // code turns out, this check may be unnecessary.\n        require(\n            !loanRepaidOrLiquidated[_loanIndex],\n            \"Loan has already been repaid or liquidated\"\n        );\n\n        // Fetch loan details from storage, but store them in memory for the\n        // sake of saving gas.\n        Loan memory loan = indexToLoan[_loanIndex];\n\n        // Check that the borrower is the caller, only the borrower is entitled\n        // to the collateral.\n        address currentBorrower = borrower(_loanIndex);\n        require(\n            msg.sender == currentBorrower,\n            \"Only the borrower can pay back a loan and reclaim the underlying NFT\"\n        );\n\n        // Fetch current owner of loan promissory note.\n        address lender = ownerOf(_loanIndex);\n\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(\n            loanRepaymentAddr\n        );\n        Repayment[] memory repayments = calculator.getDestinations(\n            _loanIndex,\n            loan.repaymentAmount,\n            loan.loanAmount,\n            lender\n        );\n        IERC20 erc20 = IERC20(loan.paymentToken);\n        uint repaymentLength = repayments.length;\n        for (uint idx = 0; idx < repaymentLength; idx++) {\n            Repayment memory repayment = repayments[idx];\n            erc20.transferFrom(\n                currentBorrower,\n                repayment.targetAddress,\n                repayment.value\n            );\n        }\n\n        // Record the ifp amount in lending pool\n        Vault(payable(calculator.lendingPoolAddress())).namedBalanceReceive(\n            \"ifp\",\n            loan.paymentToken,\n            repayments[1].value\n        );\n\n        // // Calculate amounts to send to lender and admins\n        // uint256 interestDue = (loan.repaymentAmount).sub(loan.loanAmount);\n        // if(loan.interestIsProRated == true){\n        //     interestDue = _computeInterestDue(\n        //         loan.loanAmount,\n        //         loan.repaymentAmount,\n        //         block.timestamp.sub(uint256(loan.loanStartTime)),\n        //         uint256(loan.loanDuration),\n        //         uint256(loan.loanInterestRateForDurationInBasisPoints)\n        //     );\n        // }\n        // uint256 iv = _computeInterestForIV(interestDue, uint256(loan.interestForIVInBasisPoints));\n        // uint256 interestForLender = computeInterestDistributionForLender(loan.loanAmount, loan.loanLeveragedAmount, interestDue);\n\n        // uint256 payoffAmount = (loan.loanAmount.sub(loan.loanLeveragedAmount)).add(interestForLender);\n        // uint256 poolPayoffAmount = (loan.loanLeveragedAmount).add(interestDue.sub(iv).sub(interestForLender));\n        // uint256 payoffAmount = ((loan.loanAmount).add(interestDue)).sub(iv);\n\n        // Mark loan as repaid before doing any external transfers to follow\n        // the Checks-Effects-Interactions design pattern.\n        loanRepaidOrLiquidated[_loanIndex] = true;\n\n        // Update number of active loans.\n        totalActiveLoans = totalActiveLoans.sub(1);\n\n        // use suggested calculation for leverage\n        // Transfer principal-plus-interest from borrower to lender\n        // IERC20(loan.paymentToken).transferFrom(currentBorrower, lender, payoffAmount);\n\n        // Transfer principal-plus-interest from borrower to leverage pool\n\n        // IERC20(loan.paymentToken).transferFrom(currentBorrower, lendingPoolAddr, poolPayoffAmount);\n\n        // Transfer fees from borrower to insurance vault\n        // IERC20(loan.paymentToken).transferFrom(currentBorrower, insuranceVaultAddr, iv);\n\n        // Transfer collateral from this contract to borrower.\n        require(\n            _transferNftToAddress(\n                loan.tokenAddress,\n                loan.tokenId,\n                currentBorrower\n            ),\n            \"NFT was not successfully transferred\"\n        );\n\n        // Destroy the lender's promissory note.\n        _burn(_loanIndex);\n        _burnTrustDeed(_loanIndex);\n        // Emit an event with all relevant details from this transaction.\n        emit LoanRepaid(\n            _loanIndex,\n            currentBorrower,\n            lender,\n            loan.loanAmount,\n            loan.tokenId,\n            loan.repaymentAmount,\n            loan.commissionBasisPoints,\n            loan.tokenAddress,\n            loan.paymentToken\n        );\n\n        // Delete the loan from storage in order to achieve a substantial gas\n        // savings and to lessen the burden of storage on Ethereum nodes, since\n        // we will never access this loan's details again, and the details are\n        // still available through event data.\n        delete indexToLoan[_loanIndex];\n    }\n\n    function liquidateLowHealthFactorLoanViaAuction(\n        uint256 _loanIndex\n    ) external virtual onlyOwner nonReentrant {\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have\n        // never been called on this loanIndex. Depending on how the rest of the\n        // code turns out, this check may be unnecessary.\n        require(\n            !loanRepaidOrLiquidated[_loanIndex],\n            \"Loan has already been repaid or liquidated\"\n        );\n\n        require(!isOverdue(_loanIndex, 0), \"Loan is overdue\");\n        // Fetch loan details from storage, but store them in memory for the\n        // sake of saving gas.\n        Loan memory loan = indexToLoan[_loanIndex];\n\n        // uint256 loanMaturityDate = (uint256(loan.loanStartTime))\n        //         .add(uint256(loan.loanDuration));\n\n        // require(block.timestamp < loanMaturityDate, 'Loan is overdue');\n\n        address lender = ownerOf(_loanIndex);\n\n        // Mark loan as liquidated before doing any external transfers to\n        // follow the Checks-Effects-Interactions design pattern.\n        loanRepaidOrLiquidated[_loanIndex] = true;\n\n        // Update number of active loans.\n        totalActiveLoans = totalActiveLoans.sub(1);\n\n        require(\n            _transferNftToAddress(loan.tokenAddress, loan.tokenId, auctionAddr),\n            \"NFT was not successfully transferred\"\n        );\n\n        address currentBorrower = borrower(_loanIndex);\n        _burn(_loanIndex);\n        _burnTrustDeed(_loanIndex);\n        // Emit an event with all relevant details from this transaction.\n        emit LoanLiquidated(\n            _loanIndex,\n            currentBorrower,\n            lender,\n            loan.loanAmount,\n            loan.tokenId,\n            indexToMaturityDate[_loanIndex],\n            // loanMaturityDate,\n            block.timestamp,\n            loan.tokenAddress,\n            LiquidationTrigger.LowHealthFactor,\n            LiquidationMethod.Auction\n        );\n\n        // Delete the loan from storage in order to achieve a substantial gas\n        // savings and to lessen the burden of storage on Ethereum nodes, since\n        // we will never access this loan's details again, and the details are\n        // still available through event data.\n        delete indexToLoan[_loanIndex];\n    }\n\n    function liquidateOverdueLoanViaAuction(\n        uint256 _loanIndex\n    ) external virtual nonReentrant {\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have\n        // never been called on this loanIndex. Depending on how the rest of the\n        // code turns out, this check may be unnecessary.\n        require(\n            !loanRepaidOrLiquidated[_loanIndex],\n            \"Loan has already been repaid or liquidated\"\n        );\n\n        // Fetch loan details from storage, but store them in memory for the\n        // sake of saving gas.\n        Loan memory loan = indexToLoan[_loanIndex];\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\n\n        uint256 extraDuration = periFiAdmin.preLiquidationDuration();\n        if (!loan.liquidateViaAuction) {\n            extraDuration += periFiAdmin.claimCollateralDuration();\n        }\n\n        require(\n            isOverdue(_loanIndex, extraDuration),\n            \"Loan is not overdue yet\"\n        );\n\n        // uint256 loanMaturityDate;\n        // if (loan.liquidateViaAuction){\n        //     loanMaturityDate = (uint256(loan.loanStartTime))\n        //         .add(uint256(loan.loanDuration))\n        //         .add(periFiAdmin.preLiquidationDuration());\n        // } else {\n        //     // check extra 24 hours for the lender to claim\n        //     loanMaturityDate = (uint256(loan.loanStartTime))\n        //         .add(uint256(loan.loanDuration))\n        //         .add(periFiAdmin.preLiquidationDuration())\n        //         .add(periFiAdmin.claimCollateralDuration());\n        // }\n        // require(block.timestamp > loanMaturityDate, 'Loan is not overdue yet');\n\n        address lender = ownerOf(_loanIndex);\n\n        // Mark loan as liquidated before doing any external transfers to\n        // follow the Checks-Effects-Interactions design pattern.\n        loanRepaidOrLiquidated[_loanIndex] = true;\n\n        // Update number of active loans.\n        totalActiveLoans = totalActiveLoans.sub(1);\n\n        require(\n            _transferNftToAddress(loan.tokenAddress, loan.tokenId, auctionAddr),\n            \"NFT was not successfully transferred\"\n        );\n\n        address currentBorrower = borrower(_loanIndex);\n        _burn(_loanIndex);\n        _burnTrustDeed(_loanIndex);\n        // Emit an event with all relevant details from this transaction.\n        emit LoanLiquidated(\n            _loanIndex,\n            currentBorrower,\n            lender,\n            loan.loanAmount,\n            loan.tokenId,\n            indexToMaturityDate[_loanIndex],\n            // loanMaturityDate,\n            block.timestamp,\n            loan.tokenAddress,\n            LiquidationTrigger.OverDue,\n            LiquidationMethod.Auction\n        );\n\n        // Delete the loan from storage in order to achieve a substantial gas\n        // savings and to lessen the burden of storage on Ethereum nodes, since\n        // we will never access this loan's details again, and the details are\n        // still available through event data.\n        delete indexToLoan[_loanIndex];\n    }\n\n    function liquidateOverdueLoan(\n        uint256 _loanIndex\n    ) external virtual nonReentrant {\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have\n        // never been called on this loanIndex. Depending on how the rest of the\n        // code turns out, this check may be unnecessary.\n        require(\n            !loanRepaidOrLiquidated[_loanIndex],\n            \"Loan has already been repaid or liquidated\"\n        );\n\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\n        require(\n            isOverdue(_loanIndex, periFiAdmin.preLiquidationDuration()),\n            \"Loan is not overdue yet\"\n        );\n        // Fetch loan details from storage, but store them in memory for the\n        // sake of saving gas.\n        Loan memory loan = indexToLoan[_loanIndex];\n\n        require(\n            !loan.liquidateViaAuction,\n            \"Loan is configured to be liquidated only via auction\"\n        );\n        // Ensure that the loan is indeed overdue, since we can only liquidate\n        // overdue loans.\n\n        // uint256 loanMaturityDate = (uint256(loan.loanStartTime))\n        //     .add(uint256(loan.loanDuration))\n        //     .add(periFiAdmin.preLiquidationDuration());\n        // require(block.timestamp > loanMaturityDate, 'Loan is not overdue yet');\n\n        // Fetch the current lender of the promissory note corresponding to\n        // this overdue loan.\n\n        address lender = ownerOf(_loanIndex);\n        // If the loan is leveraged, the lender must pay for the leverage and its interest.\n        // if (loan.loanLeveragedAmount > 0)\n        // {\n        //     require(msg.sender == lender, 'Only the lender can pay for the leverage and liquidate the underlying NFT');\n        //     LoanRepaymentCalculator calculator = LoanRepaymentCalculator(loanRepaymentAddr);\n        //     Repayment[] memory repayments = calculator.getDestinations(\n        //         _loanIndex,\n        //         loan.repaymentAmount,\n        //         loan.loanAmount,\n        //         lender);\n        //     IERC20 erc20 = IERC20(loan.paymentToken);\n        //     uint repaymentLength = repayments.length;\n        //     for (uint idx = 0; idx < repaymentLength; idx++) {\n        //         Repayment memory repayment = repayments[idx];\n        //         if (msg.sender == repayment.targetAddress) {\n        //             continue;\n        //         }\n        //         erc20.transferFrom(msg.sender, repayment.targetAddress, repayment.value);\n        //     }\n\n        //     // uint256 interestDue = (loan.repaymentAmount).sub(loan.loanAmount);\n        //     // uint256 iv = _computeInterestForIV(interestDue, uint256(loan.interestForIVInBasisPoints));\n        //     // uint256 lenderToPay = _computePriceOfLenderToPay(\n        //     //     loan.loanAmount,\n        //     //     loan.loanLeveragedAmount,\n        //     //     loan.repaymentAmount);\n        //     // uint256 poolAmount = lenderToPay.sub(iv);\n\n        //     // IERC20(loan.paymentToken).transferFrom(lender, lendingPoolAddr, poolAmount);\n        //     // IERC20(loan.paymentToken).transferFrom(lender, insuranceVaultAddr, iv);\n        // }\n\n        require(\n            msg.sender == lender,\n            \"Only the lender can pay for the leverage and liquidate the underlying NFT\"\n        );\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(\n            loanRepaymentAddr\n        );\n        Repayment[] memory repayments = calculator.getDestinations(\n            _loanIndex,\n            loan.repaymentAmount,\n            loan.loanAmount,\n            lender\n        );\n        IERC20 erc20 = IERC20(loan.paymentToken);\n        uint repaymentLength = repayments.length;\n        for (uint idx = 0; idx < repaymentLength; idx++) {\n            Repayment memory repayment = repayments[idx];\n            if (msg.sender == repayment.targetAddress) {\n                continue;\n            }\n            erc20.transferFrom(\n                msg.sender,\n                repayment.targetAddress,\n                repayment.value\n            );\n        }\n\n        // Mark loan as liquidated before doing any external transfers to\n        // follow the Checks-Effects-Interactions design pattern.\n        loanRepaidOrLiquidated[_loanIndex] = true;\n\n        // Update number of active loans.\n        totalActiveLoans = totalActiveLoans.sub(1);\n\n        // Transfer collateral from this contract to the lender, since the\n        // lender is seizing collateral for an overdue loan.\n        require(\n            _transferNftToAddress(loan.tokenAddress, loan.tokenId, lender),\n            \"NFT was not successfully transferred\"\n        );\n\n        address currentBorrower = borrower(_loanIndex);\n        // Destroy the lender's promissory note for this loan, since by seizing\n        // the collateral, the lender has forfeit the rights to the loan\n        // principal-plus-interest.\n        _burn(_loanIndex);\n        _burnTrustDeed(_loanIndex);\n        // Emit an event with all relevant details from this transaction.\n        emit LoanLiquidated(\n            _loanIndex,\n            currentBorrower,\n            lender,\n            loan.loanAmount,\n            loan.tokenId,\n            indexToMaturityDate[_loanIndex],\n            // loanMaturityDate,\n            block.timestamp,\n            loan.tokenAddress,\n            LiquidationTrigger.OverDue,\n            LiquidationMethod.TransferredToLender\n        );\n\n        // Delete the loan from storage in order to achieve a substantial gas\n        // savings and to lessen the burden of storage on Ethereum nodes, since\n        // we will never access this loan's details again, and the details are\n        // still available through event data.\n        delete indexToLoan[_loanIndex];\n    }\n\n    function cancelLoanCommitmentBeforeLoanHasBegun(\n        uint256 _nonce\n    ) external virtual {\n        require(\n            !_nonceHasBeenUsedForUser[msg.sender][_nonce],\n            \"Nonce invalid, user has either cancelled/begun this loan, or reused a nonce when signing\"\n        );\n        _nonceHasBeenUsedForUser[msg.sender][_nonce] = true;\n    }\n\n    /* ******************* */\n    /* READ-ONLY FUNCTIONS */\n    /* ******************* */\n\n    function getPayoffAmount(\n        uint256 _loanIndex\n    ) public view virtual returns (uint256) {\n        Loan storage loan = indexToLoan[_loanIndex];\n        // if(loan.interestIsProRated == false){\n        //     return loan.repaymentAmount;\n        // } else {\n        //     uint256 loanDurationSoFarInSeconds = block.timestamp.sub(uint256(loan.loanStartTime));\n        //     uint256 interestDue = _computeInterestDue(loan.loanAmount, loan.repaymentAmount, loanDurationSoFarInSeconds, uint256(loan.loanDuration), uint256(loan.loanInterestRateForDurationInBasisPoints));\n        //     return (loan.loanAmount).add(interestDue);\n        // }\n\n        return loan.repaymentAmount;\n    }\n\n    function getInterestForLender(\n        uint256 _loanIndex\n    ) public view virtual returns (uint256) {\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have\n        // never been called on this loanIndex. Depending on how the rest of the\n        // code turns out, this check may be unnecessary.\n        require(\n            !loanRepaidOrLiquidated[_loanIndex],\n            \"Loan has already been repaid or liquidated\"\n        );\n\n        // Fetch loan details from storage, but store them in memory for the\n        // sake of saving gas.\n        Loan memory loan = indexToLoan[_loanIndex];\n\n        // Fetch current owner of loan promissory note.\n        address lender = ownerOf(_loanIndex);\n\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(\n            loanRepaymentAddr\n        );\n        Repayment[] memory repayments = calculator.getDestinations(\n            _loanIndex,\n            loan.repaymentAmount,\n            loan.loanAmount,\n            lender\n        );\n\n        uint repaymentLength = repayments.length;\n        uint256 lenderPayment;\n\n        for (uint idx = 0; idx < repaymentLength; idx++) {\n            Repayment memory repayment = repayments[idx];\n            if (repayment.targetAddress == lender) {\n                lenderPayment += repayment.value;\n            }\n        }\n        return lenderPayment - (loan.loanAmount - loan.loanLeveragedAmount);\n    }\n\n    function getWhetherNonceHasBeenUsedForUser(\n        address _user,\n        uint256 _nonce\n    ) public view virtual returns (bool) {\n        return _nonceHasBeenUsedForUser[_user][_nonce];\n    }\n\n    function isOverdue(\n        uint256 _loanIndex,\n        uint256 extraTime\n    ) public view virtual returns (bool) {\n        uint256 loanMaturityDate = indexToMaturityDate[_loanIndex] + extraTime;\n        return block.timestamp > loanMaturityDate;\n    }\n\n    function isPreliquidationOverdue(\n        uint256 _loanIndex\n    ) external view virtual returns (bool) {\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\n\n        uint256 extraDuration = periFiAdmin.preLiquidationDuration();\n        return\n            block.timestamp > indexToMaturityDate[_loanIndex] + extraDuration;\n    }\n\n    function approve(address to, uint256 tokenId) public virtual override(ERC721Upgradeable, IERC721Upgradeable) {\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\n        uint256 extraDuration = periFiAdmin.preLiquidationDuration();\n\n        require(!isOverdue(tokenId, extraDuration), \"Loan is overdue\");\n        super.approve(to, tokenId);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override(ERC721Upgradeable, IERC721Upgradeable) {\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\n        uint256 extraDuration = periFiAdmin.preLiquidationDuration();\n\n        require(!isOverdue(tokenId, extraDuration), \"Loan is overdue\");\n        super.transferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override(ERC721Upgradeable, IERC721Upgradeable) {\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\n        uint256 extraDuration = periFiAdmin.preLiquidationDuration();\n\n        require(!isOverdue(tokenId, extraDuration), \"Loan is overdue\");\n        super.safeTransferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override(ERC721Upgradeable, IERC721Upgradeable) {\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\n        uint256 extraDuration = periFiAdmin.preLiquidationDuration();\n\n        require(!isOverdue(tokenId, extraDuration), \"Loan is overdue\");\n        super.safeTransferFrom(from, to, tokenId, _data);\n    }\n\n    // function _computeInterestDue(uint256 _loanAmount, uint256 _repaymentAmount, uint256 _loanDurationSoFarInSeconds, uint256 _loanTotalDurationAgreedTo, uint256 _loanInterestRateForDurationInBasisPoints) internal pure returns (uint256) {\n    //     uint256 interestDueAfterEntireDuration = (_loanAmount.mul(_loanInterestRateForDurationInBasisPoints)).div(uint256(10000));\n    //     uint256 interestDueAfterElapsedDuration = (interestDueAfterEntireDuration.mul(_loanDurationSoFarInSeconds)).div(_loanTotalDurationAgreedTo);\n    //     if(_loanAmount.add(interestDueAfterElapsedDuration) > _repaymentAmount){\n    //         return _repaymentAmount.sub(_loanAmount);\n    //     } else {\n    //         return interestDueAfterElapsedDuration;\n    //     }\n    // }\n    // function _computeInterestForIV(uint256 _interestDue, uint256 _interestForIVInBasisPoints) internal pure returns (uint256) {\n    // \treturn (_interestDue.mul(_interestForIVInBasisPoints)).div(10000);\n    // }\n\n    function _transferNftToAddress(\n        address _nftContract,\n        uint256 _nftId,\n        address _recipient\n    ) internal virtual returns (bool) {\n        // Try to call transferFrom()\n        bool transferFromSucceeded = _attemptTransferFrom(\n            _nftContract,\n            _nftId,\n            _recipient\n        );\n        if (transferFromSucceeded) {\n            return true;\n        } else {\n            // Try to call transfer()\n            bool transferSucceeded = _attemptTransfer(\n                _nftContract,\n                _nftId,\n                _recipient\n            );\n            return transferSucceeded;\n        }\n    }\n\n    function _attemptTransferFrom(\n        address _nftContract,\n        uint256 _nftId,\n        address _recipient\n    ) internal virtual returns (bool) {\n        // @notice Some NFT contracts will not allow you to approve an NFT that\n        //         you own, so we cannot simply call approve() here, we have to\n        //         try to call it in a manner that allows the call to fail.\n        (bool success, ) = _nftContract.call(\n            abi.encodeWithSelector(\n                IERC721(_nftContract).approve.selector,\n                address(this),\n                _nftId\n            )\n        );\n\n        // @notice Some NFT contracts will not allow you to call transferFrom()\n        //         for an NFT that you own but that is not approved, so we\n        //         cannot simply call transferFrom() here, we have to try to\n        //         call it in a manner that allows the call to fail.\n        (success, ) = _nftContract.call(\n            abi.encodeWithSelector(\n                IERC721(_nftContract).transferFrom.selector,\n                address(this),\n                _recipient,\n                _nftId\n            )\n        );\n        return success;\n    }\n\n    function _attemptTransfer(\n        address _nftContract,\n        uint256 _nftId,\n        address _recipient\n    ) internal virtual returns (bool) {\n        // @notice Some NFT contracts do not implement transfer(), since it is\n        //         not a part of the official ERC721 standard, but many\n        //         prominent NFT projects do implement it (such as\n        //         Cryptokitties), so we cannot simply call transfer() here, we\n        //         have to try to call it in a manner that allows the call to\n        //         fail.\n        (bool success, ) = _nftContract.call(\n            abi.encodeWithSelector(\n                INonStandardERC721Transfer(_nftContract).transfer.selector,\n                _recipient,\n                _nftId\n            )\n        );\n        return success;\n    }\n\n    /* ***************** */\n    /* FALLBACK FUNCTION */\n    /* ***************** */\n\n    // @notice By calling 'revert' in the fallback function, we prevent anyone\n    //         from accidentally sending funds directly to this contract.\n    fallback() external payable virtual {\n        revert();\n    }\n\n    receive() external payable virtual {\n        revert();\n    }\n\n    // @notice This function gets the current chain ID.\n    function getChainID() public view virtual returns (uint256) {\n        uint256 id;\n        assembly {\n            id := chainid()\n        }\n        return id;\n    }\n\n    function isValidBorrowerSignature(\n        uint256 _tokenId,\n        uint256 _borrowerNonce,\n        address _tokenAddress,\n        address _borrower,\n        bytes memory _borrowerSignature\n    ) public view virtual returns (bool) {\n        if (_borrower == address(0)) {\n            return false;\n        } else {\n            uint256 chainId;\n            chainId = getChainID();\n            bytes32 message = keccak256(\n                abi.encodePacked(\n                    _tokenId,\n                    _borrowerNonce,\n                    _tokenAddress,\n                    _borrower,\n                    chainId\n                )\n            );\n\n            bytes32 messageWithEthSignPrefix = message.toEthSignedMessageHash();\n\n            return (messageWithEthSignPrefix.recover(_borrowerSignature) ==\n                _borrower);\n        }\n    }\n\n    function isValidLenderSignature(\n        uint256 _loanAmount,\n        uint256 _loanLeveragedAmount,\n        uint256 _repaymentAmount,\n        uint256 _tokenId,\n        uint256 _loanDuration,\n        // uint256 _loanInterestRateForDurationInBasisPoints,\n        uint256 _commissionBasisPoints,\n        uint256 _lenderNonce,\n        address _tokenAddress,\n        address _paymentToken,\n        address _lender,\n        bool _liquidateViaAuction,\n        // bool _interestIsProRated,\n        bytes memory _lenderSignature\n    ) public view virtual returns (bool) {\n        if (_lender == address(0)) {\n            return false;\n        } else {\n            uint256 chainId;\n            chainId = getChainID();\n            bytes32 message = keccak256(\n                abi.encodePacked(\n                    _loanAmount,\n                    _loanLeveragedAmount,\n                    _repaymentAmount,\n                    _tokenId,\n                    _loanDuration,\n                    _commissionBasisPoints,\n                    _lenderNonce,\n                    _tokenAddress,\n                    _paymentToken,\n                    _lender,\n                    _liquidateViaAuction,\n                    chainId\n                )\n            );\n\n            bytes32 messageWithEthSignPrefix = message.toEthSignedMessageHash();\n\n            return (messageWithEthSignPrefix.recover(_lenderSignature) ==\n                _lender);\n        }\n    }\n\n    // function computeInterestDistributionForLender(\n    //     uint256 _loanAmount,\n    //     uint256 _loanLeveragedAmount,\n    //     uint256 _interestDue\n    //     ) public pure virtual returns(uint256) {\n    //         uint256 rate = 55;\n    //         if (_loanLeveragedAmount != 0) {\n    //             uint256 leveraged = (_loanAmount).div(_loanLeveragedAmount);\n    //             if (leveraged <= 30) {\n    //                 rate = 50;\n    //             }\n    //             else if (leveraged <= 50) {\n    //                 rate = 45;\n    //             }\n    //             else if (leveraged <= 60) {\n    //                 rate = 40;\n    //             }\n    //             else if (leveraged <= 70) {\n    //                 rate = 35;\n    //             }\n    //             else if (leveraged <= 80) {\n    //                 rate = 25;\n    //             }\n    //             else if (leveraged <= 90) {\n    //                 rate = 15;\n    //             }\n    //             else {\n    //                 rate = 5;\n    //             }\n    //         }\n    //         return (_interestDue).mul(rate).div(10000);\n    // }\n\n    // function _computePriceOfLenderToPay(uint256 loanAmount, uint256 leveragedAmount, uint256 repaymentAmount) internal pure virtual returns(uint256) {\n    //     uint256 interestDue = (repaymentAmount).sub(loanAmount);\n    //         uint256 interestForLender = computeInterestDistributionForLender(\n    //             loanAmount,\n    //             leveragedAmount,\n    //             interestDue\n    //         );\n    //         return leveragedAmount.add(interestDue).sub(interestForLender);\n    // }\n\n    function computePriceOfLenderToPay(\n        uint256 _loanIndex\n    ) external view virtual returns (uint256) {\n        require(\n            !loanRepaidOrLiquidated[_loanIndex],\n            \"Loan has already been repaid or liquidated\"\n        );\n        Loan memory loan = indexToLoan[_loanIndex];\n\n        address lender = ownerOf(_loanIndex);\n\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(\n            loanRepaymentAddr\n        );\n        Repayment[] memory repayments = calculator.getDestinations(\n            _loanIndex,\n            loan.repaymentAmount,\n            loan.loanAmount,\n            lender\n        );\n        // IERC20 erc20 = IERC20(loan.paymentToken);\n        uint repaymentLength = repayments.length;\n        uint256 lenderToPay = 0;\n        for (uint idx = 0; idx < repaymentLength; idx++) {\n            Repayment memory repayment = repayments[idx];\n            if (msg.sender == repayment.targetAddress) {\n                continue;\n            }\n            lenderToPay += repayment.value;\n        }\n        return lenderToPay;\n        // // Fetch loan details from storage, but store them in memory for the\n        // // sake of saving gas.\n        // return _computePriceOfLenderToPay(loan.loanAmount, loan.loanLeveragedAmount, loan.repaymentAmount);\n    }\n\n    function _burnTrustDeed(uint256 loanIndex) internal virtual {\n        // check trust deed contract address is set\n        if (trustDeedAddr == address(0)) {\n            return;\n        }\n        TrustDeed trustDeedContract = TrustDeed(trustDeedAddr);\n        trustDeedContract.safeBurn(loanIndex);\n    }\n\n    function borrower(uint256 loanIndex) public view virtual returns (address) {\n        if (loanRepaidOrLiquidated[loanIndex]) {\n            return address(0);\n        }\n\n        // check trust deed contract address is set\n        if (trustDeedAddr != address(0)) {\n            TrustDeed trustDeedContract = TrustDeed(trustDeedAddr);\n            // check whether the trust deed has been issued\n            try trustDeedContract.ownerOf(loanIndex) returns (\n                address potentionBorrower\n            ) {\n                if (potentionBorrower != address(0)) {\n                    return potentionBorrower;\n                }\n            } catch {}\n        }\n\n        // if no trust deed has been issued, return original borrower\n        Loan memory loan = indexToLoan[loanIndex];\n\n        return loan.borrower;\n    }\n\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\n}\n"
    },
    "contracts/loan/PeriFiLoanAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\n// import \"@openzeppelin/contracts/security/Pausable.sol\";\n// import \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n// import \"../PeriFiAdmin.sol\";\n// import \"../access/MWOwnable.sol\";\n\n// // @title Admin contract for the loan. Holds owner-only functions to adjust\n// //        contract-wide fees, parameters, etc.\n// // @author smartcontractdev.eth, creator of wrappedkitties.eth, cwhelper.eth, and\n// //         kittybounties.eth\n// contract PeriFiLoanAdmin is MWOwnable, Pausable, ReentrancyGuard {\n//     /* ******* */\n//     /* STORAGE */\n//     /* ******* */\n\n//     // @notice The maximum duration of any loan started on this platform,\n//     //         measured in seconds. This is both a sanity-check for borrowers\n//     //         and an upper limit on how long admins will have to support v1 of\n//     //         this contract if they eventually deprecate it, as well as a check\n//     //         to ensure that the loan duration never exceeds the space alotted\n//     //         for it in the loan struct.\n//     uint256 public maximumLoanDuration = 53 weeks;\n\n//     // @notice The maximum number of active loans allowed on this platform.\n//     //         This parameter is used to limit the risk while\n//     //         the project is first getting started.\n//     uint256 public maximumNumberOfActiveLoans = 100;\n\n\n//     address public periFiAdminAddr;\n\n//     /* *********** */\n//     /* CONSTRUCTOR */\n//     /* *********** */\n\n//     constructor(address _periFiAdminAddr) {\n//         periFiAdminAddr = _periFiAdminAddr;\n//     }\n\n//     /* ********* */\n//     /* FUNCTIONS */\n//     /* ********* */\n\n//     // @notice This function can be called by admins to change the\n//     //         maximumLoanDuration. Note that they can never change\n//     //         maximumLoanDuration to be greater than UINT32_MAX, since that's\n//     //         the maximum space alotted for the duration in the loan struct.\n//     // @param  _newMaximumLoanDuration - The new maximum loan duration, measured\n//     //         in seconds.\n//     function updateMaximumLoanDuration(uint256 _newMaximumLoanDuration) external onlyOwner {\n//         require(_newMaximumLoanDuration <= uint256(~uint32(0)), 'loan duration cannot exceed space alotted in struct');\n//         maximumLoanDuration = _newMaximumLoanDuration;\n//     }\n\n//     // @notice This function can be called by admins to change the\n//     //         maximumNumberOfActiveLoans. \n//     // @param  _newMaximumNumberOfActiveLoans - The new maximum number of\n//     //         active loans, used to limit the risk while the\n//     //         project is first getting started.\n//     function updateMaximumNumberOfActiveLoans(uint256 _newMaximumNumberOfActiveLoans) external onlyOwner {\n//         maximumNumberOfActiveLoans = _newMaximumNumberOfActiveLoans;\n//     }\n\n//     function interestForIVInBasisPoints() internal view returns (uint256) {\n//         return PeriFiAdmin(periFiAdminAddr).interestForIVInBasisPoints();\n//     }\n//     function preLiquidationDuration() internal view returns (uint256) {\n//         return PeriFiAdmin(periFiAdminAddr).preLiquidationDuration();\n//     }\n//     function liquidateProtectionDuration() internal view returns (uint256) {\n//         return PeriFiAdmin(periFiAdminAddr).liquidateProtectionDuration();\n//     }\n// }"
    },
    "contracts/loan/TrustDeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"../access/SimpleRoleAccess.sol\";\nimport \"./PeriFiLoan.sol\";\nimport \"../PeriFiAdmin.sol\";\nimport \"hardhat/console.sol\";\n\ncontract TrustDeed is\n    ERC721URIStorageUpgradeable,\n    ERC721BurnableUpgradeable,\n    SimpleRoleAccess,\n    UUPSUpgradeable\n{\n    address payable public periFiLoanAddr;\n    address public periFiAdminAddr;\n\n    function initialize() public virtual initializer {\n        __ERC721_init(\"PeriFi Loan Trust Deed\", \"PTD\");\n        __MWOwnable_init();\n    }\n\n    function setLoanAddress(\n        address payable loanAddr\n    ) external virtual onlyOwner {\n        console.log(\"owner: %s sender: %s\", owner(), msg.sender);\n        periFiLoanAddr = loanAddr;\n    }\n\n    function setAdminAddress(address adminAddr) external virtual onlyOwner {\n        periFiAdminAddr = adminAddr;\n    }\n\n    function safeMint(\n        address to,\n        uint256 tokenId\n    ) public virtual onlyRole(\"minter\") {\n        _safeMint(to, tokenId);\n    }\n\n    function safeBurn(uint256 tokenId) external virtual onlyRole(\"minter\") {\n        if (_exists(tokenId)) {\n            _burn(tokenId);\n        }\n    }\n\n    function setTokenURI(uint256 tokenId, string memory uri) external virtual {\n        super._setTokenURI(tokenId, uri);\n    }\n\n    function tokenURI(\n        uint256 tokenId\n    )\n        public\n        view\n        virtual\n        override(ERC721Upgradeable, ERC721URIStorageUpgradeable)\n        returns (string memory)\n    {\n        return super.tokenURI(tokenId);\n    }\n\n    function _burn(\n        uint256 tokenId\n    )\n        internal\n        virtual\n        override(ERC721Upgradeable, ERC721URIStorageUpgradeable)\n    {\n        super._burn(tokenId);\n    }\n\n    function approve(address to, uint256 tokenId) public virtual override(ERC721Upgradeable, IERC721Upgradeable) {\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\n        PeriFiLoan periFiLoan = PeriFiLoan(periFiLoanAddr);\n        uint256 extraDuration = periFiAdmin.preLiquidationDuration();\n\n        require(\n            !periFiLoan.isOverdue(tokenId, extraDuration),\n            \"Loan is overdue\"\n        );\n        super.approve(to, tokenId);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override(ERC721Upgradeable, IERC721Upgradeable) {\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\n        PeriFiLoan periFiLoan = PeriFiLoan(periFiLoanAddr);\n        uint256 extraDuration = periFiAdmin.preLiquidationDuration();\n\n        require(\n            !periFiLoan.isOverdue(tokenId, extraDuration),\n            \"Loan is overdue\"\n        );\n        super.transferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override(ERC721Upgradeable, IERC721Upgradeable) {\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\n        PeriFiLoan periFiLoan = PeriFiLoan(periFiLoanAddr);\n        uint256 extraDuration = periFiAdmin.preLiquidationDuration();\n\n        require(\n            !periFiLoan.isOverdue(tokenId, extraDuration),\n            \"Loan is overdue\"\n        );\n        super.safeTransferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override(ERC721Upgradeable, IERC721Upgradeable) {\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\n        PeriFiLoan periFiLoan = PeriFiLoan(periFiLoanAddr);\n        uint256 extraDuration = periFiAdmin.preLiquidationDuration();\n\n        require(\n            !periFiLoan.isOverdue(tokenId, extraDuration),\n            \"Loan is overdue\"\n        );\n        super.safeTransferFrom(from, to, tokenId, _data);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Upgradeable, ERC721URIStorageUpgradeable) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\n}\n"
    },
    "contracts/PeriFiAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\nimport \"./access/MWOwnable.sol\";\n\ncontract PeriFiAdmin is MWOwnable {\n    uint256 public maximumLoanDuration = 53 weeks;\n    uint256 public maximumNumberOfActiveLoans = 100;\n\n    uint256 public poolCommissionIFPUpTo20 = 4000;\n    uint256 public poolCommissionIFPUpTo30 = 4500;\n    uint256 public poolCommissionIFPUpTo40 = 5000;\n    uint256 public poolCommissionIFPUpTo50 = 5000;\n    uint256 public poolCommissionIFPUpTo60 = 5500;\n    uint256 public poolCommissionIFPUpTo70 = 6000;\n    uint256 public poolCommissionIFPUpTo80 = 7000;\n    uint256 public poolCommissionIFPUpTo90 = 8000;\n    uint256 public poolCommissionIFPUpTo100 = 9000;\n\n    uint256 public ivCommissionForIFP = 500; // 5%\n    uint256 public commissionForIFL = 500;\n    \n    // uint256 public loanCommissionInBasisPoints = 500; // 5%\n    uint256 public preLiquidationDuration = 24 hours;\n    uint256 public claimCollateralDuration = 24 hours;\n    uint256 public liquidateProtectionDuration = 48 hours;\n    \n    uint256 public liquidationThresholdInBasisPoints = 8000; // 80%\n    \n    function updateMaximumLoanDuration(uint256 _newMaximumLoanDuration) external onlyOwner {\n        require(_newMaximumLoanDuration <= uint256(~uint32(0)), 'loan duration cannot exceed space alotted in struct');\n        maximumLoanDuration = _newMaximumLoanDuration;\n    }\n\n    function updateMaximumNumberOfActiveLoans(uint256 _newMaximumNumberOfActiveLoans) external onlyOwner {\n        maximumNumberOfActiveLoans = _newMaximumNumberOfActiveLoans;\n    }\n    function updatePoolCommission(uint256 leveragePercent, uint256 poolCommissionInBasisPoint) external onlyOwner {\n        require(leveragePercent % 10 == 0, \"leveragePercent must be multiples of 10\");\n        require(leveragePercent >= 20, \"leveragePercent must be bigger than or equal to 20\");\n        require(leveragePercent <= 100, \"leveragePercent must be smaller than or equal to 100\");\n\n        if (leveragePercent == 20){\n            poolCommissionIFPUpTo20 = poolCommissionInBasisPoint;\n        } else if (leveragePercent == 30){\n            poolCommissionIFPUpTo30 = poolCommissionInBasisPoint;\n        } else if (leveragePercent == 40){\n            poolCommissionIFPUpTo40 = poolCommissionInBasisPoint;\n        } else if (leveragePercent == 50){\n            poolCommissionIFPUpTo50 = poolCommissionInBasisPoint;\n        } else if (leveragePercent == 60){\n            poolCommissionIFPUpTo60 = poolCommissionInBasisPoint;\n        } else if (leveragePercent == 70){\n            poolCommissionIFPUpTo70 = poolCommissionInBasisPoint;\n        } else if (leveragePercent == 80){\n            poolCommissionIFPUpTo80 = poolCommissionInBasisPoint;\n        } else if (leveragePercent == 90){\n            poolCommissionIFPUpTo90 = poolCommissionInBasisPoint;\n        } else if (leveragePercent == 100){\n            poolCommissionIFPUpTo100 = poolCommissionInBasisPoint;\n        }\n    }\n\n\n    function updateIVCommissionForIFP(uint256 _newIVCommissionForIFP) external onlyOwner {\n        require(_newIVCommissionForIFP <= 10000, 'By definition, basis points cannot exceed 10000');\n        ivCommissionForIFP = _newIVCommissionForIFP;\n        // emit InterestForIVUpdated(_newInterestForIVInBasisPoints);\n    }\n\n    function updateCommissionForIFL(uint256 _newCommissionForIFL) external onlyOwner {\n        require(_newCommissionForIFL <= 10000, 'By definition, basis points cannot exceed 10000');\n        commissionForIFL = _newCommissionForIFL;\n        // emit InterestForIVUpdated(_newInterestForIVInBasisPoints);\n    }\n    \n\n    function updateLiquidateProtectionDuration(uint256 _newLiquidateProtectionDuration) external onlyOwner {\n        liquidateProtectionDuration = _newLiquidateProtectionDuration;\n    }\n\n    function updatePreLiquidationDuration(uint256 _newPreLiquidationDuration) external onlyOwner {\n        preLiquidationDuration = _newPreLiquidationDuration;\n    }\n    function updateClaimCollateralDuration(uint256 _newClaimCollateralDuration) external onlyOwner {\n        claimCollateralDuration = _newClaimCollateralDuration;\n    }\n\n    function updateLiquidationThreshold(uint256 _newLiquidationThresholdInBasisPoints) external onlyOwner {\n        require(_newLiquidationThresholdInBasisPoints <= 10000, 'By definition, basis points cannot exceed 10000');\n        liquidationThresholdInBasisPoints = _newLiquidationThresholdInBasisPoints;\n        // emit InterestForIVUpdated(_newLiquidationThresholdInBasisPoints);\n    }\n\n    // function updateloanCommissionInBasisPoints(uint256 _newLoanCommissionInBasisPoints) external onlyOwner {\n    //     require(_newLoanCommissionInBasisPoints <= 10000, 'By definition, basis points cannot exceed 10000');\n    //     loanCommissionInBasisPoints = _newLoanCommissionInBasisPoints;\n    //     // emit LoanCommissionUpdated(_newLoanCommissionInBasisPoints);\n    // }\n}\n    // event InterestForIVUpdated(\n    //     uint256 basisPointValue\n    // );\n\n    // event LoanCommissionUpdated(\n    //     uint256 basisPointValue\n    // );\n\n    // event LiquidationThresholdUpdated(\n    //     uint256 basisPointValue\n    // );\n\n    // event ProtectionDurationUpdated(\n    //     uint256 durationInSeconds\n    // );\n\n    // event LiquidateDurationUpdated(\n    //     uint256 durationInSeconds\n    // );\n\n    // event ERC20WhiteListConfigured(\n    //     address erc20,\n    //     bool isWhitelisted\n    // );\n\n    // event CollectionLeverageConfigured(\n    //     address collection,\n    //     bool isAllowed\n    // );\n\n    // event CollectionHealthFactorConfigured(\n    //     address collection,\n    //     bool isTrakcked\n    // );\n\n    // @notice A mapping from from an ERC20 currency address to whether that\n    //         currency is whitelisted to be used by this contract.\n    // mapping (address => bool) public erc20CurrencyIsWhitelisted;\n\n    // mapping (address => bool) public leverageAvailableCollections;\n\n    // mapping (address => bool) public healthFactorEnabledCollection;\n    // @notice The percentage of interest earned by lenders on this platform\n    //         that is taken by the contract admin's as a fee, measured in\n    //         basis points (hundreths of a percent).\n    \n    // function whitelistERC20Currency(address _erc20Currency, bool _setAsWhitelisted) external onlyOwner {\n    //     erc20CurrencyIsWhitelisted[_erc20Currency] = _setAsWhitelisted;\n    //     emit ERC20WhiteListConfigured(_erc20Currency, _setAsWhitelisted);\n    // }\n\n    // function setLeverageOnCollection(address collection, bool allowed) external onlyOwner {\n    //     leverageAvailableCollections[collection] = allowed;\n    //     emit CollectionLeverageConfigured(collection, allowed);\n    // }\n\n    // function setHealthFactorOnCollection(address collection, bool tracked) external onlyOwner {\n    //     healthFactorEnabledCollection[collection] = tracked;\n    //     emit CollectionHealthFactorConfigured(collection, tracked);\n    // }\n"
    },
    "contracts/staking/interfaces/ILendingPoolStaking.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface ILendingPoolStaking {\n    error InsufficientBalance();\n    error InvalidArgument(string details);\n    error InvalidState();\n    error Unauthorized();\n\n    enum StakeStatus {\n        DEFAULT, // Not staked, only applicable to escrowed reward\n        STAKED, // Stake ongoing\n        FULFILLED // Stake ended gracefully\n    }\n\n    enum EscrowStatus {\n        DEFAULT, // Not issued\n        ISSUED,\n        CLAIMED\n    }\n\n    struct Stake {\n        // Staker address\n        address staker;\n        // Stake token address\n        address token;\n        // The time of deposit\n        uint48 start;\n        // The time of withdrawal\n        uint48 end;\n        // The amount staked by each stake duration\n        uint256[3] amountsPerDuration;\n        // The amount of stake token that will be rewarded upon finishing the stake duration\n        uint256 rewardAllocated;\n        // Stake is escrow\n        bool isEscrow;\n        // Status of eab\n        EscrowStatus escrowStatus;\n        // Status of stake\n        StakeStatus stakeStatus;\n    }\n\n    event Staked(\n        uint256 stakeId,\n        address staker,\n        address token,\n        uint48 start,\n        uint48 end,\n        uint256[3] amountsPerDuration,\n        bool isEscrow\n    );\n    event StakeStatusChanged(uint256 stakeId, StakeStatus status);\n    event EscrowStatusChanged(uint256 stakeId, EscrowStatus status);\n    event InflationRewardDistributed();\n    event NonInflationRewardDistributed();\n\n    function deposit(\n        address _stakeToken,\n        uint256 _amount,\n        uint8 _durationId\n    ) external payable;\n\n    function stakeEscrowedReward(uint256 _stakeId) external;\n\n    function distributeInflationRewards(uint256 _inflationReward) external;\n\n    function distributeNonInflationRewards() external;\n\n    function hasPendingNonInflationRewards() external view returns (bool);\n\n    function unstake(uint256 _stakeId) external;\n\n    function addStakeToken(address _stakeToken) external;\n\n    function removeStakeToken(address _stakeToken) external;\n}\n"
    },
    "contracts/staking/interfaces/ILendingPoolStakingV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface ILendingPoolStakingV2 {\n    error InsufficientBalance();\n    error InvalidArgument(string details);\n    error InvalidState();\n    error Unauthorized();\n    error AlreadyClaimed();\n    error NoRewardsAvailable();\n    error StakeNotFound();\n    error NotOwned();\n    error NoStakeYet();\n\n    enum StakeStatus {\n        DEFAULT, // Not staked, only applicable to escrowed reward\n        STAKED, // Stake ongoing\n        FULFILLED // Stake ended gracefully\n    }\n\n    enum EscrowStatus {\n        DEFAULT, // Not issued\n        ISSUED,\n        CLAIMED\n    }\n    struct IFPRewardPeriod {\n        uint256 rewardToDistribute;\n        uint256 rewardClaimed;\n    }\n\n    struct RewardPeriod {\n        uint64 periodId;\n        uint64 startTime;\n        uint256 rewardsToDistribute;\n        uint256 rewardsStaked;\n        mapping(address => IFPRewardPeriod) ifpRewardPeriod;\n    }\n\n    /**\n     * @notice Combined stake mapping data structure\n     * @dev Used to optimize storage by consolidating bidirectional mappings\n     */\n    struct StakeMappingEntry {\n        address user; // Owner of the stake\n        uint256 userIndex; // Index in user's personal mapping\n        uint256 stakeId; // Global stake ID\n        bool exists; // Flag to confirm entry exists\n    }\n\n    struct Stake {\n        // Staker address\n        address staker;\n        // Stake token address\n        address token;\n        // The time of deposit\n        uint48 start;\n        // The time of withdrawal\n        uint48 end;\n        // The amount staked by each stake duration\n        uint256[3] amountsPerDuration;\n        // The amount of stake token that will be rewarded upon finishing the stake duration\n        uint256 rewardAllocated;\n        // Stake is escrow\n        bool isEscrow;\n        // Status of eab\n        EscrowStatus escrowStatus;\n        // Status of stake\n        StakeStatus stakeStatus;\n    }\n\n    event Staked(\n        uint256 indexed stakeId,\n        address indexed staker,\n        address indexed token,\n        uint48 start,\n        uint48 end,\n        uint256[3] amountsPerDuration,\n        bool isEscrow\n    );\n    event StakeStatusChanged(uint256 indexed stakeId, StakeStatus status);\n    event EscrowStatusChanged(uint256 indexed stakeId, EscrowStatus status);\n    event InflationRewardDistributed();\n    event BatchMigrationCompleted(uint256 indexed startId, uint256 endId);\n\n    event NewPeriodStarted(\n        uint64 periodId,\n        uint64 timestamp\n    );\n\n    event RewardsClaimed(\n        uint256 indexed stakeId,\n        address indexed user,\n        address indexed token,\n        uint256 inflationReward,\n        uint256 ifpReward,\n        uint64 periodId\n    );\n    function deposit(\n        address _stakeToken,\n        uint256 _amount,\n        uint8 _durationId\n    ) external payable;\n\n    function stakeEscrowedReward(uint256 _stakeId) external;\n\n    function distributeInflationRewards(uint256 _inflationReward) external;\n\n    // function hasPendingNonInflationRewards() external view returns (bool);\n\n    function unstake(uint256 _stakeId) external;\n\n    function addStakeToken(address _stakeToken) external;\n\n    function removeStakeToken(address _stakeToken) external;\n}\n"
    },
    "contracts/staking/interfaces/ILiquidityPoolStaking.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface ILiquidityPoolStaking {\n    event FarmCreated(\n        uint256 farmId,\n        address token,\n        uint48 start,\n        uint48 end,\n        uint256 totalReward\n    );\n    event FarmClosed(\n        uint256 farmId\n    );\n    event Staked(\n        uint256 stakeId,\n        address staker,\n        uint256 farmId,\n        uint48 start,\n        uint256 amount\n    );\n    event Unstaked(uint256 stakeId, uint48 unstakedAt);\n    event RewardClaimed(uint256 stakeId, uint256 rewardClaimed, uint48 lastClaimedAt);\n\n    struct Farm {\n        address token;\n        uint48 start;\n        uint48 end;\n        uint256 totalReward;\n        uint256 totalStaked;\n    }\n\n    struct Stake {\n        // Staker address\n        address staker;\n        // Stake token address\n        uint256 farmId;\n        // The time of deposit\n        uint48 start;\n        // The time of unstake\n        uint48 end;\n        // The time of last reward claim\n        uint48 lastClaimedAt;\n        // The staked amount\n        uint256 amount;\n        // The amount of NEND claimed\n        uint256 rewardClaimed;\n    }\n\n    function create(\n        address _stakeToken,\n        uint48 _end,\n        uint256 _totalReward\n    ) external;\n\n    function deposit(\n        uint256 _farmId,\n        uint256 _amount\n    ) external;\n\n    function unstake(uint256 _stakeId) external;\n\n    function claim(uint256 _stakeId) external;\n\n    function claimBatch(uint256 _farmId) external;\n}\n"
    },
    "contracts/staking/LendingPoolStaking.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\";\nimport \"../vault/Vault.sol\";\nimport \"./interfaces/ILendingPoolStaking.sol\";\nimport \"../test/Testing.sol\";\nimport \"../access/SimpleRoleAccess.sol\";\nimport \"../access/MWOwnable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\ncontract LendingPoolStaking is\n    ILendingPoolStaking,\n    ERC721URIStorageUpgradeable,\n    Testing,\n    SimpleRoleAccess,\n    UUPSUpgradeable\n{\n    address public nend;\n    Vault public lendingPool;\n    mapping(address => bool) public activeStakeTokens;\n    mapping(address => uint256) public inflationRollOver;\n    address[] public stakeTokens;\n    uint48 public escrowLockPeriod;\n    // Active stake token count\n    uint256 public stakeTokenCount;\n    // Active stake count\n    uint256 public ongoingStakeCount;\n    mapping(address => uint256) internal ifpTokenToAmount;\n    // User address to this week's escrowed reward stake id\n    mapping(address => mapping(address => uint256)) userToStakeTokenToLastEscrowId;\n    mapping(address => mapping(uint8 => uint256))\n        public lastEscrowRewardByToken_Duration;\n    Stake[] public stakes;\n    uint48[3] public stakeDurations;\n    // Token address => duration id => amount\n    mapping(address => mapping(uint8 => uint256))\n        public totalStakedByToken_Duration;\n    uint8[3] public rewardAllocations;\n    uint256 public poolRollOver;\n\n    function setRewardAllocations(\n        uint8[3] memory _rewardAllocations\n    ) external virtual onlyRole(\"admin\") {\n        if (\n            _rewardAllocations[0] +\n                _rewardAllocations[1] +\n                _rewardAllocations[2] !=\n            100\n        ) {\n            revert InvalidArgument(\"Must sum up to 100\");\n        }\n        rewardAllocations = _rewardAllocations;\n    }\n\n    function initialize(\n        address _nend,\n        Vault _lendingPool\n    ) public virtual initializer {\n        nend = _nend;\n        lendingPool = _lendingPool;\n        // Add native token\n        activeStakeTokens[address(0)] = true;\n        stakeTokens.push(address(0));\n        stakeTokenCount++;\n\n        // Add nend\n        activeStakeTokens[_nend] = true;\n        stakeTokens.push(_nend);\n        stakeTokenCount++;\n\n        escrowLockPeriod = 30 weeks;\n        stakeDurations = [1 weeks, 4 weeks, 12 weeks];\n        rewardAllocations = [20, 30, 50];\n\n        __ERC721_init(\"Escrowed Asset Bond\", \"EAB\");\n        __MWOwnable_init();\n        __Testing_init();\n    }\n\n    function deposit(\n        address _token,\n        uint256 _amount,\n        uint8 _durationId\n    ) external payable virtual override {\n        if (_amount == 0) {\n            revert InvalidArgument(\"Amount cannot be zero\");\n        }\n        if (!activeStakeTokens[_token]) {\n            revert InvalidArgument(\"Invalid stake token\");\n        }\n\n        bool isNativeCoin = _token == address(0);\n\n        if (!isNativeCoin && IERC20(_token).balanceOf(msg.sender) < _amount) {\n            revert InsufficientBalance();\n        }\n\n        if (isNativeCoin) {\n            if (msg.value != _amount) {\n                revert InvalidArgument(\"Incorrect native coin stake amount\");\n            }\n            \n            (bool sent, ) = address(lendingPool).call{ value: _amount }(\"\");\n            require(sent, \"Failed to transfer native token\");\n        } else {\n            IERC20(_token).transferFrom(\n                msg.sender,\n                address(lendingPool),\n                _amount\n            );\n        }\n\n        uint256[3] memory _amounts;\n        _amounts[_durationId] = _amount;\n\n        stakes.push(\n            Stake(\n                msg.sender,\n                _token,\n                uint48(block.timestamp),\n                uint48(block.timestamp) +\n                    (stakeDurations[_durationId] / (testing ? 1008 : 1)),\n                _amounts,\n                0,\n                false,\n                EscrowStatus.DEFAULT,\n                StakeStatus.STAKED\n            )\n        );\n\n        totalStakedByToken_Duration[_token][_durationId] += _amount;\n        ongoingStakeCount++;\n\n        _emitStaked(stakes.length);\n    }\n\n    function stakeEscrowedReward(uint256 _stakeId) external virtual override {\n        Stake storage _stake = stakes[_stakeId - 1];\n        if (_stake.staker != msg.sender) {\n            revert Unauthorized();\n        }\n\n        // Stake is not escrow or is already staked\n        if (!_stake.isEscrow || _stake.stakeStatus != StakeStatus.DEFAULT) {\n            revert InvalidState();\n        }\n\n        _stake.stakeStatus = StakeStatus.STAKED;\n        ongoingStakeCount++;\n\n        for (uint8 i = 0; i < 3; i++) {\n            totalStakedByToken_Duration[nend][i] += _stake.amountsPerDuration[\n                i\n            ];\n        }\n\n        emit StakeStatusChanged(_stakeId, _stake.stakeStatus);\n    }\n\n    function _compoundEscrow(\n        uint256 _stakeId,\n        uint256 _inflationReward\n    ) internal virtual {\n        Stake storage _stake = stakes[_stakeId - 1];\n        uint256 lastEscrowId = userToStakeTokenToLastEscrowId[_stake.staker][\n            _stake.isEscrow ? nend : _stake.token\n        ];\n        if (\n            lastEscrowId == 0 ||\n            stakes[lastEscrowId - 1].start != uint48(block.timestamp)\n        ) {\n            uint256[3] memory _amounts;\n            stakes.push(\n                Stake(\n                    _stake.staker,\n                    _stake.isEscrow ? nend : _stake.token,\n                    uint48(block.timestamp),\n                    uint48(block.timestamp) +\n                        escrowLockPeriod /\n                        (testing ? 1008 : 1),\n                    _amounts,\n                    0,\n                    true,\n                    EscrowStatus.DEFAULT,\n                    StakeStatus.DEFAULT\n                )\n            );\n\n            lastEscrowId = userToStakeTokenToLastEscrowId[_stake.staker][\n                _stake.isEscrow ? nend : _stake.token\n            ] = stakes.length;\n        }\n\n        Stake storage _escrow = stakes[lastEscrowId - 1];\n\n        for (uint8 i = 0; i < 3; i++) {\n            uint256 _reward = _calculateReward(\n                _stake.isEscrow ? nend : _stake.token,\n                i,\n                _stake.amountsPerDuration[i],\n                _inflationReward /\n                    stakeTokenCount +\n                    inflationRollOver[_stake.isEscrow ? nend : _stake.token]\n            );\n            _escrow.amountsPerDuration[i] += _reward;\n        }\n    }\n\n    function _accrueNonInflationReward(\n        uint256 _stakeId,\n        uint256 _nonInflationReward\n    ) internal virtual {\n        Stake storage _stake = stakes[_stakeId - 1];\n\n        for (uint8 i = 0; i < 3; i++) {\n            uint256 _reward = _calculateReward(\n                _stake.isEscrow ? nend : _stake.token,\n                i,\n                _stake.amountsPerDuration[i],\n                _nonInflationReward\n            );\n            _stake.rewardAllocated += _reward;\n\n            lendingPool.namedBalanceSpend(\n                \"ifp\",\n                _stake.isEscrow ? nend : _stake.token,\n                _reward\n            );\n        }\n    }\n\n    function distributeInflationRewards(\n        uint256 _inflationReward\n    ) external virtual override {\n        if (msg.sender != nend) {\n            revert Unauthorized();\n        }\n\n        uint256 _rolledOverInflationReward = _inflationReward + poolRollOver;\n        poolRollOver = 0;\n\n        // Deal with list being modified during loop\n        uint256 _stakeCount = stakes.length;\n\n        for (uint256 i = 0; i < _stakeCount; i++) {\n            Stake storage _stake = stakes[i];\n\n            if (_stake.stakeStatus != StakeStatus.STAKED) {\n                continue;\n            }\n\n            _compoundEscrow(i + 1, _rolledOverInflationReward);\n        }\n\n        for (uint256 i = _stakeCount; i < stakes.length; i++) {\n            _emitStaked(i + 1);\n        }\n\n        for (uint256 i = 0; i < stakeTokens.length; i++) {\n            address tokenAddr = stakeTokens[i];\n            uint256 poolReward = _rolledOverInflationReward /\n                stakeTokenCount +\n                inflationRollOver[tokenAddr];\n            inflationRollOver[tokenAddr] = 0;\n            uint8 predefinedRollOverCount = 0;\n            for (uint8 j = 0; j < 3; j++) {\n                uint256 predefinedDurationReward = (poolReward *\n                    rewardAllocations[j]) / 100;\n                if (totalStakedByToken_Duration[tokenAddr][j] == 0) {\n                    inflationRollOver[tokenAddr] += predefinedDurationReward;\n                    predefinedRollOverCount++;\n                }\n                lastEscrowRewardByToken_Duration[tokenAddr][\n                    j\n                ] = predefinedDurationReward;\n            }\n            // Reward for all durations was rolled over => Pool rollover\n            if (predefinedRollOverCount == 3) {\n                inflationRollOver[tokenAddr] = 0;\n                poolRollOver += _inflationReward / stakeTokenCount;\n            }\n        }\n\n        emit InflationRewardDistributed();\n    }\n\n    function distributeNonInflationRewards()\n        external\n        virtual\n        override\n        onlyOwner\n    {\n        for (uint256 i = 0; i < stakeTokens.length; i++) {\n            ifpTokenToAmount[stakeTokens[i]] = lendingPool.getNamedBalance(\n                \"ifp\",\n                stakeTokens[i]\n            );\n        }\n\n        for (uint256 i = 0; i < stakes.length; i++) {\n            Stake storage _stake = stakes[i];\n\n            if (_stake.stakeStatus != StakeStatus.STAKED) {\n                continue;\n            }\n\n            _accrueNonInflationReward(\n                i + 1,\n                ifpTokenToAmount[_stake.isEscrow ? nend : _stake.token]\n            );\n        }\n\n        for (uint256 i = 0; i < stakeTokens.length; i++) {\n            uint256 distributedAmount = ifpTokenToAmount[stakeTokens[i]] -\n                lendingPool.getNamedBalance(\n                    \"ifp\",\n                    stakeTokens[i]\n                );\n\n            if (distributedAmount > 0) {\n                lendingPool.transferERC20(\n                    stakeTokens[i],\n                    address(this),\n                    distributedAmount\n                );\n            }\n        }\n\n        emit NonInflationRewardDistributed();\n    }\n\n    function hasPendingNonInflationRewards()\n        external\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        for (uint256 i = 0; i < stakeTokens.length; i++) {\n            address token = stakeTokens[i];\n            uint256 reward = lendingPool.getNamedBalance(\n                \"ifp\",\n                token\n            );\n\n            uint256 stakedAmount = totalStakedByToken_Duration[token][0] +\n                totalStakedByToken_Duration[token][1] +\n                totalStakedByToken_Duration[token][2];\n\n            if (reward > 0 && stakedAmount > 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    function issueEAB(uint256 _stakeId) external virtual {\n        Stake storage _stake = stakes[_stakeId - 1];\n        if (_stake.staker != msg.sender) {\n            revert Unauthorized();\n        }\n\n        if (\n            _stake.stakeStatus == StakeStatus.FULFILLED ||\n            _stake.escrowStatus != EscrowStatus.DEFAULT\n        ) {\n            revert InvalidState();\n        }\n\n        _stake.escrowStatus = EscrowStatus.ISSUED;\n        _mint(msg.sender, _stakeId);\n\n        emit EscrowStatusChanged(_stakeId, EscrowStatus.ISSUED);\n    }\n\n    function unstake(uint256 _stakeId) external virtual override {\n        Stake storage _stake = stakes[_stakeId - 1];\n\n        if (_stake.staker != msg.sender) {\n            revert Unauthorized();\n        }\n        if (\n            _stake.end > block.timestamp ||\n            _stake.stakeStatus == StakeStatus.FULFILLED ||\n            _stake.escrowStatus == EscrowStatus.CLAIMED\n        ) {\n            revert InvalidState();\n        }\n\n        // Transfer original staked amount\n        uint256 _stakedAmount = _stake.amountsPerDuration[0] +\n            _stake.amountsPerDuration[1] +\n            _stake.amountsPerDuration[2];\n\n        if (_stake.isEscrow) {\n            IERC20(nend).transfer(msg.sender, _stakedAmount);\n        } else {\n            _lendingPoolTransfer(_stake.token, msg.sender, _stakedAmount);\n        }\n\n        // Transfer ifp reward\n        if (_stake.rewardAllocated > 0) {\n            IERC20(_stake.isEscrow ? nend : _stake.token).transfer(\n                msg.sender,\n                _stake.rewardAllocated\n            );\n        }\n\n        if (_stake.stakeStatus == StakeStatus.STAKED) {\n            ongoingStakeCount--;\n\n            for (uint8 i = 0; i < 3; i++) {\n                totalStakedByToken_Duration[\n                    _stake.isEscrow ? nend : _stake.token\n                ][i] -= _stake.amountsPerDuration[i];\n            }\n        }\n\n        _stake.stakeStatus = StakeStatus.FULFILLED;\n        emit StakeStatusChanged(_stakeId, StakeStatus.FULFILLED);\n\n        if (_stake.escrowStatus == EscrowStatus.ISSUED || _stake.isEscrow) {\n            _stake.escrowStatus = EscrowStatus.CLAIMED;\n\n            if (_exists(_stakeId)) {\n                _burn(_stakeId);\n            }\n\n            emit EscrowStatusChanged(_stakeId, EscrowStatus.CLAIMED);\n        }\n\n        delete stakes[_stakeId - 1];\n    }\n\n    function addStakeToken(\n        address _stakeToken\n    ) external virtual override onlyRole(\"admin\") {\n        if (!activeStakeTokens[_stakeToken]) {\n            stakeTokenCount++;\n            activeStakeTokens[_stakeToken] = true;\n        }\n\n        for (uint8 i = 0; i < stakeTokens.length; i++) {\n            if (stakeTokens[i] == _stakeToken) {\n                return;\n            }\n        }\n\n        stakeTokens.push(_stakeToken);\n    }\n\n    function removeStakeToken(\n        address _stakeToken\n    ) external override onlyRole(\"admin\") {\n        if (activeStakeTokens[_stakeToken]) {\n            stakeTokenCount--;\n            activeStakeTokens[_stakeToken] = false;\n        }\n    }\n\n    function setTokenURI(\n        uint256 _tokenId,\n        string memory _tokenURI\n    ) external virtual onlyOwner {\n        _setTokenURI(_tokenId, _tokenURI);\n    }\n\n    function _lendingPoolTransfer(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal virtual {\n        bool isNativeCoin = _token == address(0);\n\n        if (isNativeCoin) {\n            if (address(lendingPool).balance < _amount) {\n                revert InsufficientBalance();\n            }\n            lendingPool.transferNative(payable(_to), _amount);\n        } else {\n            if (IERC20(_token).balanceOf(address(lendingPool)) < _amount) {\n                revert InsufficientBalance();\n            }\n            lendingPool.transferERC20(_token, _to, _amount);\n        }\n    }\n\n    function _calculateReward(\n        address _stakeToken,\n        uint8 _durationId,\n        uint256 _amountStaked,\n        uint256 _reward\n    ) internal view virtual returns (uint256) {\n        return\n            _amountStaked == 0\n                ? 0\n                : (_reward * rewardAllocations[_durationId] * _amountStaked) /\n                    100 /\n                    totalStakedByToken_Duration[_stakeToken][_durationId];\n    }\n\n    function _emitStaked(uint256 _stakeId) internal virtual {\n        Stake memory _stake = stakes[_stakeId - 1];\n        emit Staked(\n            _stakeId,\n            _stake.staker,\n            _stake.token,\n            _stake.start,\n            _stake.end,\n            _stake.amountsPerDuration,\n            _stake.isEscrow\n        );\n    }\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256\n    ) internal virtual override {\n        if (from != address(0) && to != address(0)) {\n            stakes[tokenId - 1].staker = to;\n        }\n    }\n\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\n}\n"
    },
    "contracts/staking/LendingPoolStakingV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\";\nimport \"../vault/Vault.sol\";\nimport \"./interfaces/ILendingPoolStakingV2.sol\";\nimport \"../test/TestingV2.sol\";\nimport \"../access/SimpleRoleAccessV2.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"./StakingLib.sol\";\n\n// Storage layout v1: Used _oldStakes[] array\n// Storage layout v2: Uses mapping(uint256 => Stake) stakes\n// Storage layout v3: Uses userStakesById[user][index] for user-centric access\n\ncontract LendingPoolStakingV2 is\n    ILendingPoolStakingV2,\n    ERC721URIStorageUpgradeable,\n    TestingV2,\n    SimpleRoleAccessV2,\n    UUPSUpgradeable\n{\n    address public nend;\n    Vault public lendingPool;\n    mapping(address => bool) public activeStakeTokens;\n    /** @dev DEPRECATED - Do not use. Kept for storage layout compatibility */\n    mapping(address => uint256) public inflationRollOver;\n    address[] public stakeTokens;\n    uint48 public escrowLockPeriod;\n    // Active stake token count\n    uint256 public stakeTokenCount;\n    /** @dev DEPRECATED - Do not use. Kept for storage layout compatibility */\n    uint256 public activeStakesCount;\n    mapping(address => uint256) internal ifpTokenToAmount;\n    /** @dev DEPRECATED - Do not use. Kept for storage layout compatibility */\n    mapping(address => mapping(address => uint256)) userToStakeTokenToLastEscrowId;\n    /** @dev DEPRECATED - Do not use. Kept for storage layout compatibility */\n    mapping(address => mapping(uint8 => uint256))\n        public lastEscrowRewardByToken_Duration;\n    // V1 storage\n    /** @dev DEPRECATED - Do not use. Kept for storage layout compatibility */\n    Stake[] private _oldStakes;\n    uint48[3] public stakeDurations;\n    // Total staked amount per token and per duration. Token address => duration id => amount\n    mapping(address => mapping(uint8 => uint256))\n        public totalStakedByToken_Duration;\n    uint8[3] public rewardAllocations;\n    /** @dev DEPRECATED - Do not use. Kept for storage layout compatibility */\n    uint256 public poolRollOver;\n\n    // V2 storage\n    /** @dev DEPRECATED - Do not use. Kept for storage layout compatibility */\n    mapping(uint256 => Stake) public stakes;\n    uint256 public nextStakeId;\n\n    // A staker can claim from the previous fee period (7 days) only.\n    // The periods stored and managed from [0], such that [0] is always\n    // the current active reward period which is claimable until the\n    // public function distributeInflationRewards() call the\n    // current weeks inflated reward. [1] is last weeks feeperiod\n    // library StakingLib has the same constant\n    uint8 public constant REWARD_PERIOD_LENGTH = 2;\n    // current reward period\n    uint256 private _currentPeriodId;\n    // fee period\n    RewardPeriod[REWARD_PERIOD_LENGTH] private _recentPeriods;\n    // V3 storage\n    mapping(address => mapping(uint256 => Stake)) public userStakesById; // user => stakeId ==> stake\n    mapping(address => uint256) public userStakesCount; // user => stake count\n    // Track which periods a user has claimed rewards for\n    mapping(address => mapping(uint64 => bool)) private _userClaimedForPeriod; // user => periodId => claimed\n    mapping(uint256 => StakeMappingEntry) private _stakeEntries; // stakeId => metadata\n    mapping(address => mapping(uint256 => uint256)) private _userIndexToId; // user => userIndex => stakeId\n\n    // Add this at the contract level\n    bool public stakesDeprecated;\n\n    // Add to contract header\n    /**\n     * @dev IMPORTANT: When adding new storage variables, add them BELOW\n     * this comment and ABOVE the storage gap.\n     */\n    // Reserve space for future upgrades\n    uint256[50] private __gap;\n\n    using StakingLib for *;\n\n    // Helper functions for working with the optimized mappings\n\n    /**\n     * @notice Gets stake entry by ID\n     * @param _stakeId Global stake ID\n     * @return The stake mapping entry\n     */\n    function getStakeEntry(\n        uint256 _stakeId\n    ) external view returns (StakeMappingEntry memory) {\n        return _stakeEntries[_stakeId];\n    }\n\n    /**\n     * @notice Gets stake ID by user and index\n     * @param _user Owner address\n     * @param _userIndex Index in the user's personal mapping\n     * @return The stake ID\n     */\n    function getUserStakeId(\n        address _user,\n        uint256 _userIndex\n    ) public view returns (uint256) {\n        return _userIndexToId[_user][_userIndex];\n    }\n\n    /**\n     * @notice Gets user index by stake ID\n     * @param _stakeId Global stake ID\n     * @return The user index\n     */\n    function getUserStakeIndex(uint256 _stakeId) public view returns (uint256) {\n        StakeMappingEntry memory entry = _stakeEntries[_stakeId];\n        if (entry.userIndex == 0) revert StakeNotFound();\n        return entry.userIndex;\n    }\n\n    // Add batch migration capability for safe upgrades\n    function migrateStakesInBatch(\n        uint256 startId,\n        uint256 batchSize\n    ) external onlyOwner {\n        require(!stakesDeprecated, \"Migration already completed\");\n        uint256 endId = (startId + batchSize) > nextStakeId\n            ? nextStakeId\n            : (startId + batchSize);\n\n        for (uint256 i = startId; i < endId; ) {\n            StakingLib.migrateStake(\n                stakes,\n                userStakesById[stakes[i].staker],\n                userStakesCount,\n                _stakeEntries,\n                _userIndexToId,\n                i,\n                nend\n            );\n            unchecked {\n                ++i;\n            }\n        }\n\n        if (endId >= nextStakeId) {\n            stakesDeprecated = true;\n        }\n\n        emit BatchMigrationCompleted(startId, endId);\n    }\n\n    function getCurrentPeriodId() external view returns (uint256) {\n        return _currentPeriodId;\n    }\n\n    function setStakesDeprecated(\n        bool _deprecated\n    ) external virtual onlyRole(\"admin\") {\n        stakesDeprecated = _deprecated;\n    }\n\n    function getPeriodRewardStat(\n        uint256 _periodId\n    ) external view returns (uint256 rewardsToDistribute, uint256 rewardsStaked) {\n        RewardPeriod storage period = _recentPeriods[_periodId % uint256(REWARD_PERIOD_LENGTH)];\n        rewardsToDistribute = period.rewardsToDistribute;\n        rewardsStaked = period.rewardsStaked;\n    }\n\n    function _recentPeriodsStorage(\n        uint256 index\n    ) internal view returns (RewardPeriod storage) {\n        return\n            _recentPeriods[\n                (_currentPeriodId + index) % uint256(REWARD_PERIOD_LENGTH)\n            ];\n    }\n\n    function setRewardAllocations(\n        uint8[3] memory _rewardAllocations\n    ) external virtual onlyRole(\"admin\") {\n        if (\n            _rewardAllocations[0] +\n                _rewardAllocations[1] +\n                _rewardAllocations[2] !=\n            100\n        ) {\n            revert InvalidArgument(\"Must sum up to 100\");\n        }\n        rewardAllocations = _rewardAllocations;\n    }\n\n    function initialize(\n        address _nend,\n        Vault _lendingPool\n    ) public virtual initializer {\n        require(\n            _nend != address(0) && address(_lendingPool) != address(0),\n            \"Invalid address\"\n        );\n        nend = _nend;\n        lendingPool = _lendingPool;\n\n        // Set initial values\n        nextStakeId = 1;\n\n        // Add native token\n        activeStakeTokens[address(0)] = true;\n        stakeTokens.push(address(0));\n        stakeTokenCount++;\n\n        // Add nend\n        activeStakeTokens[_nend] = true;\n        stakeTokens.push(_nend);\n        stakeTokenCount++;\n\n        escrowLockPeriod = 30 weeks;\n        stakeDurations = [1 weeks, 4 weeks, 12 weeks];\n        rewardAllocations = [20, 30, 50];\n\n        stakesDeprecated = false;\n\n        _recentPeriodsStorage(0).periodId = 1;\n\n        __ERC721_init(\"Escrowed Asset Bond\", \"EAB\");\n        __Ownable_init();\n        __Testing_init();\n\n        __UUPSUpgradeable_init();\n    }\n\n    function deposit(\n        address _token,\n        uint256 _amount,\n        uint8 _durationId\n    ) external payable virtual override {\n        StakingLib.validateStake(\n            activeStakeTokens[_token],\n            _durationId,\n            _amount\n        );\n\n        bool isNativeCoin = _token == address(0);\n\n        if (!isNativeCoin && IERC20(_token).balanceOf(msg.sender) < _amount) {\n            revert InsufficientBalance();\n        }\n\n        if (isNativeCoin) {\n            if (msg.value != _amount) {\n                revert InvalidArgument(\"Incorrect native coin stake amount\");\n            }\n\n            (bool sent, ) = address(lendingPool).call{ value: _amount }(\"\");\n            require(sent, \"Failed to transfer native token\");\n        } else {\n            IERC20(_token).transferFrom(\n                msg.sender,\n                address(lendingPool),\n                _amount\n            );\n        }\n\n        uint256[3] memory _amounts;\n        _amounts[_durationId] = _amount;\n\n        uint256 stakeId = nextStakeId++;\n        uint256 userStakeIdx = ++userStakesCount[msg.sender];\n        // Directly initialize the stake in storage\n        Stake storage newStake = userStakesById[msg.sender][userStakeIdx];\n\n        // Create the stake\n        StakingLib._createAndMapStake(\n            newStake,\n            msg.sender,\n            _amounts,\n            _token,\n            stakeDurations[_durationId],\n            false,\n            stakeId,\n            userStakeIdx,\n            _stakeEntries,\n            _userIndexToId,\n            testing\n        );\n\n        totalStakedByToken_Duration[_token][_durationId] += _amount;\n\n        _emitStaked(stakeId, userStakesById[msg.sender][userStakeIdx]);\n    }\n\n    function getStakeByUserIndex(\n        address _user,\n        uint256 _index\n    ) external view returns (Stake memory) {\n        require(\n            _index > 0 && _index <= userStakesCount[_user],\n            \"Invalid stake index\"\n        );\n        return userStakesById[_user][_index];\n    }\n\n    function stakeEscrowedReward(uint256 _stakeId) external virtual override {\n        // uint256 userIndex = stakeIdToUserIndex[_stakeId][msg.sender];\n        uint256 userIndex = getUserStakeIndex(_stakeId);\n        if (userIndex == 0) revert StakeNotFound();\n        Stake storage _stake = userStakesById[msg.sender][userIndex];\n        if (_stake.staker != msg.sender) revert Unauthorized();\n\n        // Stake is not escrow or is already staked\n        if (!_stake.isEscrow || _stake.stakeStatus != StakeStatus.DEFAULT)\n            revert InvalidState();\n\n        _stake.stakeStatus = StakeStatus.STAKED;\n\n        // Update the total staked amount for the escrowed stake\n        StakingLib._saveStakedRewards(\n            totalStakedByToken_Duration,\n            nend,\n            _stake.amountsPerDuration\n        );\n\n        emit StakeStatusChanged(_stakeId, _stake.stakeStatus);\n    }\n\n    function _createEscrowStake(\n        address _staker,\n        uint256 _rewardAmount,\n        uint256 _ifpReward\n    ) internal returns (uint256 stakeId) {\n        uint256[3] memory _amounts;\n        // Distribute the reward amount across durations according to your allocation policy\n        for (uint8 i = 0; i < 3; ) {\n            _amounts[i] = (_rewardAmount * rewardAllocations[i]) / 100;\n            unchecked {\n                ++i;\n            }\n        }\n\n        stakeId = nextStakeId;\n        nextStakeId++;\n        uint256 userStakeIdx = ++userStakesCount[_staker];\n        // Directly initialize the stake in storage\n        Stake storage newStake = userStakesById[_staker][userStakeIdx];\n\n        // Create the escrow stake - direct initialization avoids memory/storage copying\n        StakingLib._createAndMapStake(\n            newStake,\n            _staker,\n            _amounts,\n            nend,\n            escrowLockPeriod,\n            true,\n            stakeId,\n            userStakeIdx,\n            _stakeEntries,\n            _userIndexToId,\n            testing\n        );\n\n        // set IFP reward\n        newStake.rewardAllocated = _ifpReward;\n\n        // Update the total staked amount for the escrowed stake\n        StakingLib._saveStakedRewards(\n            totalStakedByToken_Duration,\n            nend,\n            _amounts\n        );\n\n        // Emit the event\n        _emitStaked(stakeId, userStakesById[_staker][userStakeIdx]);\n    }\n\n    function distributeInflationRewards(\n        uint256 _inflationReward\n    ) external virtual override {\n        if (!testing && msg.sender != nend) revert Unauthorized();\n\n        // get the pool roll over of the current period\n        (\n            uint256 toDistributeReward,\n            uint256[] memory ifptoDistributeReward\n        ) = StakingLib.calculatePoolRollOver(\n                _recentPeriods[_currentPeriodId],\n                stakeTokens\n            );\n        toDistributeReward += _inflationReward;\n\n        // mapping(address => uint256) ifptoDistributeReward;\n\n        for (uint256 i = 0; i < stakeTokens.length; ) {\n            // Get the staked amount for the token\n            uint256 stakedTokenAmt = StakingLib.getTotalStakesForToken(\n                totalStakedByToken_Duration,\n                stakeTokens[i]\n            );\n            if (stakedTokenAmt != 0) {\n                // Get the accrued IFP token balance for the token\n                uint256 ifpAccredTokenAmt = lendingPool.getNamedBalance(\n                    \"ifp\",\n                    stakeTokens[i]\n                );\n                ifptoDistributeReward[i] += ifpAccredTokenAmt;\n                // subtract the IFP token balance from the pool for backward compatibility\n                lendingPool.namedBalanceSpend(\n                    \"ifp\",\n                    stakeTokens[i],\n                    ifpAccredTokenAmt\n                );\n                // Transfer the IFP tokens to the contract\n                lendingPool.transferERC20(\n                    stakeTokens[i],\n                    address(this),\n                    ifpAccredTokenAmt\n                );\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        // set inflation and IFP rewards to the current period and get the new current period id\n        _currentPeriodId = StakingLib.closeCurrentPeriod(\n            _recentPeriods,\n            _currentPeriodId,\n            toDistributeReward,\n            ifptoDistributeReward,\n            stakeTokens\n        );\n\n        emit NewPeriodStarted(\n            _recentPeriodsStorage(0).periodId,\n            _recentPeriodsStorage(0).startTime\n        );\n    }\n\n    function getClaimableRewards(\n        address _user,\n        address _token\n    ) external view returns (uint256 inflationReward, uint256 ifpReward) {\n        return\n            StakingLib.getClaimableRewards(\n                userStakesById[_user],\n                userStakesCount[_user],\n                _recentPeriods,\n                _userClaimedForPeriod,\n                totalStakedByToken_Duration,\n                _currentPeriodId,\n                nend,\n                _user,\n                _token\n            );\n    }\n\n    function claim(address _token) external {\n        // Get the current period (the claimable one)\n        RewardPeriod storage period = _recentPeriodsStorage(0);\n\n        (\n            uint256 userInflationReward,\n            uint256 userIfpReward,\n            uint64 periodId\n        ) = StakingLib.processClaim(\n                userStakesById[msg.sender],\n                totalStakedByToken_Duration,\n                userStakesCount[msg.sender],\n                _userClaimedForPeriod,\n                period,\n                _token,\n                nend,\n                msg.sender\n            );\n\n        // Create an escrow stake for the inflation reward\n        uint256 stakeId = _createEscrowStake(\n            msg.sender,\n            userInflationReward,\n            userIfpReward\n        );\n        IERC20(_token).transfer(msg.sender, userIfpReward);\n\n        emit RewardsClaimed(\n            stakeId,\n            msg.sender,\n            _token,\n            userInflationReward,\n            userIfpReward,\n            periodId\n        );\n    }\n\n    function getPoolRollOver()\n        external\n        view\n        returns (uint256 inflationRewardRemained)\n    {\n        (inflationRewardRemained, ) = StakingLib.calculatePoolRollOver(\n            _recentPeriods[_currentPeriodId],\n            stakeTokens\n        );\n    }\n\n    // function getToTalStakedForToken(\n    //     address _token\n    // ) external view returns (uint256) {\n    //     return StakingLib.getTotalStakesForToken(\n    //         totalStakedByToken_Duration,\n    //         _token\n    //     );\n    // }\n\n    function getUserStakesTotal(\n        address _user,\n        address _token\n    ) external view returns (uint256) {\n        return\n            StakingLib.calculateUserStakesTotal(\n                userStakesById[_user],\n                userStakesCount[_user],\n                _token,\n                nend\n            );\n    }\n\n    function issueEAB(uint256 _stakeId) external virtual {\n        // uint256 userIndex = stakeIdToUserIndex[_stakeId][msg.sender];\n        uint256 userIndex = getUserStakeIndex(_stakeId);\n        if (userIndex == 0) revert StakeNotFound();\n\n        Stake storage _stake = userStakesById[msg.sender][userIndex];\n        if (_stake.staker != msg.sender) {\n            revert Unauthorized();\n        }\n\n        if (\n            _stake.stakeStatus == StakeStatus.FULFILLED ||\n            _stake.escrowStatus != EscrowStatus.DEFAULT\n        ) {\n            revert InvalidState();\n        }\n\n        _stake.escrowStatus = EscrowStatus.ISSUED;\n        _mint(msg.sender, _stakeId);\n\n        emit EscrowStatusChanged(_stakeId, EscrowStatus.ISSUED);\n    }\n\n    function unstake(uint256 _stakeId) external virtual override {\n        // Stake storage _stake = stakes[_stakeId];\n        // uint256 userIndex = stakeIdToUserIndex[_stakeId][msg.sender];\n        uint256 userIndex = getUserStakeIndex(_stakeId);\n        if (userIndex == 0) revert StakeNotFound();\n\n        Stake storage _stake = userStakesById[msg.sender][userIndex];\n\n        // Use library to handle most of the logic\n        (\n            uint256 stakedAmount,\n            uint256 rewardAmount,\n            address tokenToUse,\n            bool needsBurn\n        ) = StakingLib.processUnstake(\n                _stake,\n                totalStakedByToken_Duration,\n                nend,\n                msg.sender\n            );\n\n        // Handle transfers (kept in contract due to external calls)\n        if (_stake.isEscrow) {\n            IERC20(nend).transfer(msg.sender, stakedAmount);\n        } else {\n            StakingLib.lendingPoolTransfer(\n                lendingPool,\n                tokenToUse,\n                msg.sender,\n                stakedAmount\n            );\n        }\n\n        if (rewardAmount > 0) {\n            IERC20(tokenToUse).transfer(msg.sender, rewardAmount);\n        }\n\n        // Handle events and burns\n        emit StakeStatusChanged(_stakeId, StakeStatus.FULFILLED);\n\n        if (needsBurn) {\n            if (_exists(_stakeId)) {\n                _burn(_stakeId);\n            }\n            emit EscrowStatusChanged(_stakeId, EscrowStatus.CLAIMED);\n        }\n\n        _removeUserStake(msg.sender, _stakeId, userIndex);\n    }\n\n    function addStakeToken(\n        address _stakeToken\n    ) external virtual override onlyRole(\"admin\") {\n        if (!activeStakeTokens[_stakeToken]) {\n            stakeTokenCount++;\n            activeStakeTokens[_stakeToken] = true;\n        }\n\n        for (uint8 i = 0; i < stakeTokens.length; ) {\n            if (stakeTokens[i] == _stakeToken) {\n                return;\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        stakeTokens.push(_stakeToken);\n    }\n\n    function removeStakeToken(\n        address _stakeToken\n    ) external override onlyRole(\"admin\") {\n        if (activeStakeTokens[_stakeToken]) {\n            stakeTokenCount--;\n            activeStakeTokens[_stakeToken] = false;\n        }\n    }\n\n    function setTokenURI(\n        uint256 _tokenId,\n        string memory _tokenURI\n    ) external virtual onlyOwner {\n        _setTokenURI(_tokenId, _tokenURI);\n    }\n\n    function _removeUserStake(\n        address _user,\n        uint256 _stakeId,\n        uint256 _userIndex\n    ) internal virtual {\n        StakingLib.removeUserStake(\n            userStakesById[_user],\n            _stakeEntries,\n            _userIndexToId,\n            userStakesCount,\n            _user,\n            _stakeId,\n            _userIndex\n        );\n    }\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256\n    ) internal virtual override {\n        if (from != address(0) && to != address(0)) {\n            // Find the user index for the token\n            uint256 fromUserIndex = getUserStakeIndex(tokenId);\n            if (fromUserIndex > 0) {\n                // Get the stake into memory first\n                Stake memory stakeCopy = userStakesById[from][fromUserIndex];\n\n                // Update stake owner in memory\n                stakeCopy.staker = to;\n\n                // Remove stake from original owner using extracted function\n                _removeUserStake(from, tokenId, fromUserIndex);\n\n                // Add to new owner\n                uint256 toUserIndex = userStakesCount[to] + 1;\n                userStakesById[to][toUserIndex] = stakeCopy;\n                StakingLib.setStakeMapping(\n                    _stakeEntries,\n                    _userIndexToId,\n                    tokenId,\n                    to,\n                    toUserIndex\n                );\n                userStakesCount[to]++;\n            }\n        }\n    }\n\n    function _emitStaked(\n        uint256 _stakeId,\n        ILendingPoolStakingV2.Stake memory _stake\n    ) private {\n        emit Staked(\n            _stakeId,\n            _stake.staker,\n            _stake.token,\n            _stake.start,\n            _stake.end,\n            _stake.amountsPerDuration,\n            _stake.isEscrow\n        );\n    }\n\n    function _authorizeUpgrade(\n        address newImplementation\n    ) internal virtual override onlyOwner {}\n}\n"
    },
    "contracts/staking/LiquidityPoolStaking.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"./interfaces/ILiquidityPoolStaking.sol\";\nimport \"../access/SimpleRoleAccess.sol\";\nimport \"../vault/Vault.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract LiquidityPoolStaking is ILiquidityPoolStaking, Vault {\n    address public nend;\n    Farm[] public farms;\n    Stake[] public stakes;\n\n    function lpsInitialize(address _nend) public virtual initializer {\n        nend = _nend;\n\n        __Vault_init(\"Liquidity Pool\");\n        __MWOwnable_init();\n    }\n\n    function create(\n        address _stakeToken,\n        uint48 _end,\n        uint256 _totalReward\n    ) external virtual override onlyRole(\"admin\") {\n        require(_end > block.timestamp, \"Invalid end time\");\n        require(\n            IERC20(nend).balanceOf(address(this)) >= _totalReward,\n            \"Not enough liquidity supply\"\n        );\n\n        farms.push(\n            Farm(_stakeToken, uint48(block.timestamp), _end, _totalReward, 0)\n        );\n\n        emit FarmCreated(\n            farms.length - 1,\n            _stakeToken,\n            uint48(block.timestamp),\n            _end,\n            _totalReward\n        );\n    }\n\n    function deposit(\n        uint256 _farmId,\n        uint256 _amount\n    ) external virtual override {\n        Farm storage _farm = farms[_farmId];\n        require(_farm.end > block.timestamp, \"Farm closed\");\n        require(\n            IERC20(_farm.token).balanceOf(msg.sender) >= _amount,\n            \"Insufficient lp token balance\"\n        );\n\n        IERC20(_farm.token).transferFrom(msg.sender, address(this), _amount);\n\n        _farm.totalStaked += _amount;\n\n        stakes.push(\n            Stake(\n                msg.sender,\n                _farmId,\n                uint48(block.timestamp),\n                0,\n                uint48(block.timestamp),\n                _amount,\n                0\n            )\n        );\n\n        emit Staked(\n            stakes.length - 1,\n            msg.sender,\n            _farmId,\n            uint48(block.timestamp),\n            _amount\n        );\n    }\n\n    function unstake(uint256 _stakeId) external virtual override {\n        Stake storage _stake = stakes[_stakeId];\n        Farm storage _farm = farms[_stake.farmId];\n        require(_stake.end == 0, \"Already unstaked\");\n\n        _claim(_stakeId);\n        _stake.end = uint48(block.timestamp);\n        _farm.totalStaked -= _stake.amount;\n        IERC20(_farm.token).transfer(_stake.staker, _stake.amount);\n\n        emit Unstaked(_stakeId, uint48(block.timestamp));\n    }\n\n    function claim(uint256 _stakeId) external virtual override {\n        require(stakes[_stakeId].staker == msg.sender, \"Not own stake\");\n        require(stakes[_stakeId].end == 0, \"Already unstaked\");\n\n        _claim(_stakeId);\n    }\n\n    function claimBatch(uint256 _farmId) external virtual override {\n        for (uint i = 0; i < stakes.length; i++) {\n            Stake memory _stake = stakes[i];\n\n            if (_stake.farmId != _farmId || _stake.end != 0) {\n                continue;\n            }\n\n            _claim(i);\n        }\n    }\n\n    function _claim(uint256 _stakeId) internal virtual {\n        Stake storage _stake = stakes[_stakeId];\n        Farm storage _farm = farms[_stake.farmId];\n        uint256 reward = calculateReward(_stakeId);\n\n        if (reward > 0) {\n            require(\n                IERC20(nend).balanceOf(address(this)) >= reward,\n                \"Insufficient liquidity supply\"\n            );\n\n            _farm.totalReward -= reward;\n            _stake.rewardClaimed += reward;\n            _stake.lastClaimedAt = uint48(block.timestamp);\n            IERC20(nend).transfer(_stake.staker, reward);\n\n            emit RewardClaimed(\n                _stakeId,\n                _stake.rewardClaimed,\n                uint48(_stake.lastClaimedAt)\n            );\n        }\n    }\n\n    function calculateReward(\n        uint256 _stakeId\n    ) public view virtual returns (uint256) {\n        Stake memory _stake = stakes[_stakeId];\n        // Unstaked\n        if (_stake.end != 0) {\n            return 0;\n        }\n        Farm memory _farm = farms[_stake.farmId];\n        uint48 elapsed = (\n            block.timestamp <= _farm.end ? uint48(block.timestamp) : _farm.end\n        ) - _stake.lastClaimedAt;\n\n        return\n            (_stake.amount * _farm.totalReward * elapsed) /\n            _farm.totalStaked /\n            (_farm.end - _farm.start);\n    }\n\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\n}\n"
    },
    "contracts/staking/StakingLib.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../vault/Vault.sol\";\nimport \"./interfaces/ILendingPoolStakingV2.sol\";\n\n/**\n * @title StakingLib\n * @dev Library containing complete function implementations moved from LendingPoolStakingV2\n */\nlibrary StakingLib {\n    uint8 public constant REWARD_PERIOD_LENGTH = 2;\n    event Staked(\n        uint256 stakeId,\n        address staker,\n        address token,\n        uint48 start,\n        uint48 end,\n        uint256[3] amountsPerDuration,\n        bool isEscrow\n    );\n\n    function validateStake(\n        bool isActiveStakeToken,\n        uint8 durationId,\n        uint256 amount\n    ) external pure {\n        if (amount == 0) {\n            revert ILendingPoolStakingV2.InvalidArgument(\n                \"Amount cannot be zero\"\n            );\n        }\n        if (!isActiveStakeToken) {\n            revert ILendingPoolStakingV2.InvalidArgument(\"Invalid stake token\");\n        }\n        if (durationId > 2) {\n            revert ILendingPoolStakingV2.InvalidArgument(\"Invalid duration ID\");\n        }\n    }\n\n    function migrateStake(\n        mapping(uint256 => ILendingPoolStakingV2.Stake) storage stakes,\n        mapping(uint256 => ILendingPoolStakingV2.Stake)\n            storage userSpecificStakes,\n        mapping(address => uint256) storage userStakesCount,\n        mapping(uint256 => ILendingPoolStakingV2.StakeMappingEntry)\n            storage _stakeEntries,\n        mapping(address => mapping(uint256 => uint256)) storage _userIndexToId,\n        uint256 stakeId,\n        address nend\n    ) external returns (bool migrated) {\n        ILendingPoolStakingV2.Stake storage stake = stakes[stakeId];\n\n        if (\n            stake.staker != address(0) &&\n            stake.stakeStatus != ILendingPoolStakingV2.StakeStatus.FULFILLED\n        ) {\n            // Skip if already migrated\n            if (_stakeEntries[stakeId].exists) {\n                return false;\n            }\n\n            // Create a memory copy of the stake\n            ILendingPoolStakingV2.Stake memory stakeCopy = stakes[stakeId];\n\n            // Modify the token if it's an escrow stake\n            if (stakeCopy.isEscrow) {\n                stakeCopy.token = nend;\n            }\n\n            // Get the next available user stake index\n            uint256 userStakeIdx = userStakesCount[stakeCopy.staker] + 1;\n\n            // Store the modified copy, not the original storage reference\n            userSpecificStakes[userStakeIdx] = stakeCopy;\n\n            // Create mapping entry\n            setStakeMapping(\n                _stakeEntries,\n                _userIndexToId,\n                stakeId,\n                stakeCopy.staker,\n                userStakeIdx\n            );\n\n            userStakesCount[stakeCopy.staker]++;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @notice Complete implementation of getClaimableRewards\n     * @dev Moved entirely from main contract to reduce bytecode\n     */\n    function getClaimableRewards(\n        mapping(uint256 => ILendingPoolStakingV2.Stake)\n            storage userSpecificStakes,\n        uint256 userStakeCount,\n        ILendingPoolStakingV2.RewardPeriod[2] storage _recentPeriods,\n        mapping(address => mapping(uint64 => bool))\n            storage _userClaimedForPeriod,\n        mapping(address => mapping(uint8 => uint256))\n            storage totalStakedByToken_Duration,\n        uint256 _currentPeriodId,\n        address nend,\n        address _user,\n        address _token\n    ) external view returns (uint256 inflationReward, uint256 ifpReward) {\n        // Get the current period (the one users can claim from)\n        //\n        ILendingPoolStakingV2.RewardPeriod storage period = _recentPeriods[\n            _currentPeriodId\n        ];\n\n        // If the user already claimed for this period, return zeros\n        if (_userClaimedForPeriod[_user][period.periodId]) {\n            return (0, 0);\n        }\n\n        // Get total staked amount for this token\n        uint256 totalTokenStaked = getTotalStakesForToken(\n            totalStakedByToken_Duration,\n            _token\n        );\n\n        // If nothing staked, no rewards\n        if (totalTokenStaked == 0) {\n            return (0, 0);\n        }\n\n        // Get user's total stake for this token\n        uint256 userStakedAmount = calculateUserStakesTotal(\n            userSpecificStakes,\n            userStakeCount,\n            _token,\n            nend\n        );\n\n        if (userStakedAmount == 0) {\n            return (0, 0);\n        }\n\n        // Calculate proportional rewards\n        inflationReward =\n            (period.rewardsToDistribute * userStakedAmount) /\n            totalTokenStaked;\n        ifpReward =\n            (period.ifpRewardPeriod[_token].rewardToDistribute * userStakedAmount) /\n            totalTokenStaked;\n\n        return (inflationReward, ifpReward);\n    }\n\n    /**\n     * @notice Complete implementation of claim function logic\n     * @dev Moved entirely from main contract to reduce bytecode\n     */\n    function processClaim(\n        mapping(uint256 => ILendingPoolStakingV2.Stake)\n            storage userSpecificStakes,\n        mapping(address => mapping(uint8 => uint256))\n            storage totalStakedByToken_Duration,\n        uint256 userStakeCount,\n        mapping(address => mapping(uint64 => bool))\n            storage _userClaimedForPeriod,\n        ILendingPoolStakingV2.RewardPeriod storage period,\n        address _token,\n        address nend,\n        address user\n    )\n        external\n        returns (uint256 inflationReward, uint256 ifpReward, uint64 periodId)\n    {\n        // Check if already claimed\n        if (_userClaimedForPeriod[user][period.periodId]) {\n            revert ILendingPoolStakingV2.AlreadyClaimed();\n        }\n\n        // Get total staked amount for this token\n        uint256 totalTokenStakeAmount = getTotalStakesForToken(\n            totalStakedByToken_Duration,\n            _token\n        );\n\n        // If nothing staked, no rewards\n        if (totalTokenStakeAmount == 0) {\n            revert ILendingPoolStakingV2.NoStakeYet();\n        }\n\n        // Get user's total stake for this token\n        uint256 userStakeAmount = calculateUserStakesTotal(\n            userSpecificStakes,\n            userStakeCount,\n            _token,\n            nend\n        );\n\n        if (userStakeAmount == 0) {\n            revert ILendingPoolStakingV2.StakeNotFound();\n        }\n\n        // Calculate proportional rewards\n        inflationReward =\n            (period.rewardsToDistribute * userStakeAmount) /\n            totalTokenStakeAmount;\n        ifpReward =\n            (period.ifpRewardPeriod[_token].rewardToDistribute * userStakeAmount) /\n            totalTokenStakeAmount;\n\n        if (inflationReward == 0 && ifpReward == 0) {\n            revert ILendingPoolStakingV2.NoRewardsAvailable();\n        }\n\n        // Update period totals\n        period.rewardsStaked += inflationReward;\n        period.ifpRewardPeriod[_token].rewardClaimed += ifpReward;\n\n        periodId = period.periodId;\n\n        // Mark as claimed for this period\n        _userClaimedForPeriod[user][period.periodId] = true;\n\n        return (inflationReward, ifpReward, periodId);\n    }\n\n    /**\n     * @notice Process unstake operation completely\n     * @dev Moved from main contract with all logic intact\n     */\n    function processUnstake(\n        ILendingPoolStakingV2.Stake storage stake,\n        mapping(address => mapping(uint8 => uint256))\n            storage totalStakedByToken_Duration,\n        address nend,\n        address msgSender\n    )\n        external\n        returns (\n            uint256 stakedAmount,\n            uint256 rewardAmount,\n            address tokenToUse,\n            bool needsBurn\n        )\n    {\n        // Validate\n        if (stake.staker != msgSender) {\n            revert ILendingPoolStakingV2.Unauthorized();\n        }\n\n        if (\n            stake.end > block.timestamp ||\n            stake.stakeStatus == ILendingPoolStakingV2.StakeStatus.FULFILLED ||\n            stake.escrowStatus == ILendingPoolStakingV2.EscrowStatus.CLAIMED\n        ) {\n            revert ILendingPoolStakingV2.InvalidState();\n        }\n\n        // Calculate amount to return\n        unchecked {\n            stakedAmount =\n                stake.amountsPerDuration[0] +\n                stake.amountsPerDuration[1] +\n                stake.amountsPerDuration[2];\n        }\n\n        // Get reward and token\n        rewardAmount = stake.rewardAllocated;\n        tokenToUse = stake.isEscrow ? nend : stake.token;\n\n        // Update totals if staked\n        if (stake.stakeStatus == ILendingPoolStakingV2.StakeStatus.STAKED) {\n            for (uint8 i = 0; i < 3; ) {\n                totalStakedByToken_Duration[\n                    stake.isEscrow ? nend : stake.token\n                ][i] -= stake.amountsPerDuration[i];\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n\n        // Update state\n        stake.stakeStatus = ILendingPoolStakingV2.StakeStatus.FULFILLED;\n\n        // Check if burn needed\n        needsBurn =\n            stake.escrowStatus == ILendingPoolStakingV2.EscrowStatus.ISSUED ||\n            stake.isEscrow;\n\n        if (needsBurn) {\n            stake.escrowStatus = ILendingPoolStakingV2.EscrowStatus.CLAIMED;\n        }\n\n        return (stakedAmount, rewardAmount, tokenToUse, needsBurn);\n    }\n\n    /**\n     * @notice Complete implementation of closing the current period\n     */\n    function closeCurrentPeriod(\n        ILendingPoolStakingV2.RewardPeriod[2] storage _recentPeriods,\n        uint256 _currentPeriodId,\n        uint256 _toDistributeReward,\n        uint[] memory _ifptoDistributeReward,\n        address[] memory _tokens\n    ) external returns (uint256 newCurrentPeriod) {\n        // get new current period index(= previous period != current period)\n        // when old current period is 0, next period is 1\n        // when old current period is 1, next period is 0\n        newCurrentPeriod =\n            (_currentPeriodId + REWARD_PERIOD_LENGTH - 1) %\n            REWARD_PERIOD_LENGTH;\n\n        // Clear old data\n        delete _recentPeriods[newCurrentPeriod];\n\n        // Set up new period\n        _recentPeriods[newCurrentPeriod].periodId =\n            _recentPeriods[_currentPeriodId].periodId +\n            1;\n        _recentPeriods[newCurrentPeriod].startTime = uint64(block.timestamp);\n        _recentPeriods[newCurrentPeriod]\n            .rewardsToDistribute = _toDistributeReward;\n        for (uint8 i = 0; i < _tokens.length; ) {\n            _recentPeriods[newCurrentPeriod].ifpRewardPeriod[\n                _tokens[i]\n            ].rewardToDistribute = _ifptoDistributeReward[i];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return (newCurrentPeriod);\n    }\n\n    /**\n     * @notice Calculates total staked amount by a user for a specific token\n     */\n    function calculateUserStakesTotal(\n        mapping(uint256 => ILendingPoolStakingV2.Stake)\n            storage userSpecificStakes,\n        uint256 userStakesCount,\n        address _token,\n        address nend\n    ) public view returns (uint256 totalAmount) {\n        for (uint256 i = 0; i < userStakesCount; ) {\n            // Using storage to avoid unnecessary copying\n            ILendingPoolStakingV2.Stake storage stake = userSpecificStakes[\n                i + 1\n            ];\n\n            // Only include active stakes for the specific token\n            if (stake.stakeStatus == ILendingPoolStakingV2.StakeStatus.STAKED) {\n                // Check if the token matches:\n                // 1. For escrow stakes, we use nend token\n                // 2. For regular stakes, use the actual token\n                bool isMatchingToken = stake.isEscrow\n                    ? (_token == nend)\n                    : (stake.token == _token);\n\n                if (isMatchingToken) {\n                    // Sum up all durations in unchecked block\n                    unchecked {\n                        totalAmount +=\n                            stake.amountsPerDuration[0] +\n                            stake.amountsPerDuration[1] +\n                            stake.amountsPerDuration[2];\n                    }\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Gets total staked amount for a token across all durations\n     */\n    function getTotalStakesForToken(\n        mapping(address => mapping(uint8 => uint256))\n            storage totalStakedByToken_Duration,\n        address _token\n    ) public view returns (uint256 totalStaked) {\n        unchecked {\n            totalStaked =\n                totalStakedByToken_Duration[_token][0] +\n                totalStakedByToken_Duration[_token][1] +\n                totalStakedByToken_Duration[_token][2];\n        }\n    }\n\n    /**\n     * @notice Calculates pool rollover amounts from previous period\n     */\n    function calculatePoolRollOver(\n        ILendingPoolStakingV2.RewardPeriod storage _currentPeriod,\n        address[] memory _tokens\n    )\n        external\n        view\n        returns (uint256 poolRewardRemained, uint256[] memory ifpPoolRewardRemained)\n    {\n        // Calculate remaining rewards\n        poolRewardRemained =\n            _currentPeriod.rewardsToDistribute -\n            _currentPeriod.rewardsStaked;\n\n        // Calculate remaining IFP rewards for each token\n        ifpPoolRewardRemained = new uint256[](_tokens.length);\n        for (uint8 i = 0; i < _tokens.length; ) {\n            _currentPeriod.ifpRewardPeriod[_tokens[i]].rewardToDistribute -\n                _currentPeriod.ifpRewardPeriod[_tokens[i]].rewardClaimed;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Safely transfers assets from lending pool to recipient\n     */\n    function lendingPoolTransfer(\n        Vault lendingPool,\n        address _token,\n        address _to,\n        uint256 _amount\n    ) external {\n        bool isNativeCoin = _token == address(0);\n\n        if (isNativeCoin) {\n            require(\n                address(lendingPool).balance >= _amount,\n                \"Insufficient balance\"\n            );\n            lendingPool.transferNative(payable(_to), _amount);\n        } else {\n            require(\n                IERC20(_token).balanceOf(address(lendingPool)) >= _amount,\n                \"Insufficient balance\"\n            );\n            lendingPool.transferERC20(_token, _to, _amount);\n        }\n    }\n\n    function setStakeMapping(\n        mapping(uint256 => ILendingPoolStakingV2.StakeMappingEntry)\n            storage _stakeEntries,\n        mapping(address => mapping(uint256 => uint256)) storage _userIndexToId,\n        uint256 _stakeId,\n        address _user,\n        uint256 _userIndex\n    ) public {\n        // Create and store the mapping entry\n        _stakeEntries[_stakeId] = ILendingPoolStakingV2.StakeMappingEntry({\n            user: _user,\n            userIndex: _userIndex,\n            stakeId: _stakeId,\n            exists: true\n        });\n\n        // Update the reverse lookup\n        _userIndexToId[_user][_userIndex] = _stakeId;\n    }\n\n    function removeUserStake(\n        mapping(uint256 => ILendingPoolStakingV2.Stake)\n            storage userSpecificStakes,\n        mapping(uint256 => ILendingPoolStakingV2.StakeMappingEntry)\n            storage _stakeEntries,\n        mapping(address => mapping(uint256 => uint256)) storage _userIndexToId,\n        mapping(address => uint256) storage userStakesCount,\n        address _user,\n        uint256 _stakeId,\n        uint256 _userIndex\n    ) external {\n        // Get the last stake index for this user\n        uint256 lastUserStakeIdx = userStakesCount[_user];\n\n        // If not the last element, swap with the last element\n        if (_userIndex != lastUserStakeIdx) {\n            // Get the last stake\n            ILendingPoolStakingV2.Stake storage lastStake = userSpecificStakes[\n                lastUserStakeIdx\n            ];\n\n            // Get last stake ID using the reverse mapping\n            uint256 lastStakeId = _userIndexToId[_user][lastUserStakeIdx];\n\n            // Move last stake to current position\n            userSpecificStakes[_userIndex] = lastStake;\n\n            // Update the stake ID mapping for the moved stake\n            setStakeMapping(\n                _stakeEntries,\n                _userIndexToId,\n                lastStakeId,\n                _user,\n                _userIndex\n            );\n        }\n\n        // Clean up the last position\n        delete userSpecificStakes[lastUserStakeIdx];\n\n        // Delete the original stake mapping\n        delete _userIndexToId[_user][lastUserStakeIdx];\n        delete _stakeEntries[_stakeId];\n\n        // Decrement the user's stake count\n        userStakesCount[_user]--;\n    }\n\n    function _saveStakedRewards(\n        mapping(address => mapping(uint8 => uint256))\n            storage totalStakedByToken_Duration,\n        address nend,\n        uint256[3] memory _amounts\n    ) internal {\n        for (uint8 i = 0; i < 3; ) {\n            totalStakedByToken_Duration[nend][i] += _amounts[i];\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _createAndMapStake(\n        ILendingPoolStakingV2.Stake storage newStake,\n        address _staker,\n        uint256[3] memory _amounts,\n        address _token,\n        uint48 _duration,\n        bool _isEscrow,\n        uint256 stakeId,\n        uint256 userStakeIdx,\n        mapping(uint256 => ILendingPoolStakingV2.StakeMappingEntry)\n            storage _stakeEntries,\n        mapping(address => mapping(uint256 => uint256)) storage _userIndexToId,\n        bool testing\n    ) internal returns (uint256) {\n\n        // Get lock period for escrow\n        uint48 start = uint48(block.timestamp);\n\n        newStake.staker = _staker;\n        newStake.token = _token;\n        newStake.start = start;\n        newStake.end = start + _duration / (testing ? 1008 : 1);\n        newStake.amountsPerDuration = _amounts;\n        newStake.rewardAllocated = 0;\n        newStake.isEscrow = _isEscrow;\n        newStake.escrowStatus = ILendingPoolStakingV2.EscrowStatus.DEFAULT;\n        newStake.stakeStatus = ILendingPoolStakingV2.StakeStatus.STAKED;\n\n        // Map the stake ID to the user and index\n        setStakeMapping(\n            _stakeEntries,\n            _userIndexToId,\n            stakeId,\n            _staker,\n            userStakeIdx\n        );\n\n        return userStakeIdx;\n    }\n}\n"
    },
    "contracts/test/EIP1271Wallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\ninterface ERC20ApprovalInterface {\n    function approve(address, uint256) external returns (bool);\n}\n\ninterface NFTApprovalInterface {\n    function setApprovalForAll(address, bool) external;\n}\n\ncontract EIP1271Wallet {\n    bytes4 private constant _EIP_1271_MAGIC_VALUE = 0x1626ba7e;\n\n    address public immutable owner;\n\n    bool public showRevertMessage;\n\n    mapping(bytes32 => bool) public digestApproved;\n\n    bool public isValid;\n\n    constructor(address _owner) {\n        owner = _owner;\n        showRevertMessage = true;\n        isValid = true;\n    }\n\n    function setValid(bool valid) external {\n        isValid = valid;\n    }\n\n    function revertWithMessage(bool showMessage) external {\n        showRevertMessage = showMessage;\n    }\n\n    function registerDigest(bytes32 digest, bool approved) external {\n        digestApproved[digest] = approved;\n    }\n\n    function approveERC20(\n        ERC20ApprovalInterface token,\n        address operator,\n        uint256 amount\n    ) external {\n        if (msg.sender != owner) {\n            revert(\"Only owner\");\n        }\n\n        token.approve(operator, amount);\n    }\n\n    function approveNFT(NFTApprovalInterface token, address operator) external {\n        if (msg.sender != owner) {\n            revert(\"Only owner\");\n        }\n\n        token.setApprovalForAll(operator, true);\n    }\n\n    function isValidSignature(bytes32 digest, bytes memory signature)\n        external\n        view\n        returns (bytes4)\n    {\n        if (digestApproved[digest]) {\n            return _EIP_1271_MAGIC_VALUE;\n        }\n\n        // NOTE: this is obviously not secure, do not use outside of testing.\n        if (signature.length == 64) {\n            // All signatures of length 64 are OK as long as valid is true\n            return isValid ? _EIP_1271_MAGIC_VALUE : bytes4(0xffffffff);\n        }\n\n        if (signature.length != 65) {\n            revert();\n        }\n\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        if (\n            uint256(s) >\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\n        ) {\n            revert();\n        }\n\n        if (v != 27 && v != 28) {\n            revert();\n        }\n\n        address signer = ecrecover(digest, v, r, s);\n\n        if (signer == address(0)) {\n            revert();\n        }\n\n        if (signer != owner) {\n            if (showRevertMessage) {\n                revert(\"BAD SIGNER\");\n            }\n\n            revert();\n        }\n\n        return isValid ? _EIP_1271_MAGIC_VALUE : bytes4(0xffffffff);\n    }\n}\n"
    },
    "contracts/test/ERC1155BatchRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\ncontract ERC1155BatchRecipient {\n    error UnexpectedBatchData();\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes memory data\n    ) external pure returns (bytes4) {\n        if (data.length != 0) {\n            revert UnexpectedBatchData();\n        }\n        return ERC1155BatchRecipient.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "contracts/test/ExcessReturnDataRecipient.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.7;\n\ncontract ExcessReturnDataRecipient {\n    uint256 private revertDataSize;\n\n    function setRevertDataSize(uint256 size) external {\n        revertDataSize = size;\n    }\n\n    // Code created with the help of Stack Exchange question\n    // https://ethereum.stackexchange.com/questions/8086\n    // Question by Doug King:\n    // https://ethereum.stackexchange.com/users/2041/doug-king\n    // Answer by Tjaden Hess:\n    // https://ethereum.stackexchange.com/users/131/tjaden-hess\n    // Modified to use Yul instead of Solidity and added change of\n    // base to convert to natural logarithm\n    function ln(uint256 x) internal pure returns (uint256 y) {\n        assembly {\n            let arg := x\n            x := sub(x, 1)\n            x := or(x, div(x, 0x02))\n            x := or(x, div(x, 0x04))\n            x := or(x, div(x, 0x10))\n            x := or(x, div(x, 0x100))\n            x := or(x, div(x, 0x10000))\n            x := or(x, div(x, 0x100000000))\n            x := or(x, div(x, 0x10000000000000000))\n            x := or(x, div(x, 0x100000000000000000000000000000000))\n            x := add(x, 1)\n            let m := mload(0x40)\n            mstore(\n                m,\n                0xf8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd\n            )\n            mstore(\n                add(m, 0x20),\n                0xf5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe\n            )\n            mstore(\n                add(m, 0x40),\n                0xf6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a8272523616\n            )\n            mstore(\n                add(m, 0x60),\n                0xc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff\n            )\n            mstore(\n                add(m, 0x80),\n                0xf7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e\n            )\n            mstore(\n                add(m, 0xa0),\n                0xe39ed557db96902cd38ed14fad815115c786af479b7e83247363534337271707\n            )\n            mstore(\n                add(m, 0xc0),\n                0xc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d2362422606\n            )\n            mstore(\n                add(m, 0xe0),\n                0x753a6d1b65325d0c552a4d1345224105391a310b29122104190a110309020100\n            )\n            mstore(0x40, add(m, 0x100))\n            let\n                magic\n            := 0x818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff\n            let\n                shift\n            := 0x100000000000000000000000000000000000000000000000000000000000000\n            let a := div(mul(x, magic), shift)\n            y := div(mload(add(m, sub(255, a))), shift)\n            y := add(\n                y,\n                mul(\n                    256,\n                    gt(\n                        arg,\n                        0x8000000000000000000000000000000000000000000000000000000000000000\n                    )\n                )\n            )\n            y := mul(y, 10000000000000000)\n            y := div(y, 14426950408889632)\n        }\n    }\n\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        assembly {\n            switch gt(y, 3)\n            case 1 {\n                z := y\n                let x := div(add(y, 1), 2)\n                for {\n\n                } lt(x, z) {\n\n                } {\n                    z := x\n                    x := div(add(div(y, x), x), 2)\n                }\n            }\n            case 0 {\n                z := 1\n            }\n        }\n    }\n\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external view returns (bytes4 magic) {\n        magic = this.onERC1155Received.selector;\n        if (revertDataSize > 0) {\n            uint256 gasToCalculateSqrt = (54 * ln(gasleft())) + 1200;\n            uint256 w = (sqrt(\n                2048 * (gasleft() - gasToCalculateSqrt) + 9431040\n            ) - 3072) / 4;\n\n            assembly {\n                let size := mul(w, 32)\n                calldatacopy(0, 0, mul(w, 32))\n                revert(0, size)\n            }\n        }\n    }\n\n    receive() external payable {\n        if (revertDataSize > 0) {\n            uint256 gasToCalculateSqrt = (54 * ln(gasleft())) + 1200;\n            uint256 w = (sqrt(\n                2048 * (gasleft() - gasToCalculateSqrt) + 9431040\n            ) - 3072) / 2;\n\n            assembly {\n                let size := mul(w, 32)\n                calldatacopy(0, 0, mul(w, 32))\n                revert(0, size)\n            }\n        }\n    }\n}\n"
    },
    "contracts/test/Reenterer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\ncontract Reenterer {\n    address public target;\n    uint256 public msgValue;\n    bytes public callData;\n\n    event Reentered(bytes returnData);\n\n    function prepare(\n        address targetToUse,\n        uint256 msgValueToUse,\n        bytes calldata callDataToUse\n    ) external {\n        target = targetToUse;\n        msgValue = msgValueToUse;\n        callData = callDataToUse;\n    }\n\n    receive() external payable {\n        (bool success, bytes memory returnData) = target.call{\n            value: msgValue\n        }(callData);\n\n        if (!success) {\n            assembly {\n                returndatacopy(0, 0, returndatasize())\n                revert(0, returndatasize())\n            }\n        }\n\n        emit Reentered(returnData);\n    }\n}\n"
    },
    "contracts/test/TestERC1155.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.7;\n\nimport \"@rari-capital/solmate/src/tokens/ERC1155.sol\";\n\n// Used for minting test ERC1155s in our tests\ncontract TestERC1155 is ERC1155 {\n    function mint(\n        address to,\n        uint256 tokenId,\n        uint256 amount\n    ) public returns (bool) {\n        _mint(to, tokenId, amount, \"\");\n        return true;\n    }\n\n    function uri(uint256) public pure override returns (string memory) {\n        return \"uri\";\n    }\n}\n"
    },
    "contracts/test/TestERC20.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.7;\n\nimport \"@rari-capital/solmate/src/tokens/ERC20.sol\";\n\n// Used for minting test ERC20s in our tests\ncontract TestERC20 is ERC20(\"Uniswap NEND-DAI Pair\", \"UP\", 18) {\n    bool public blocked;\n\n    bool public noReturnData;\n\n    constructor() {\n        blocked = false;\n        noReturnData = false;\n    }\n\n    function blockTransfer(bool blocking) external {\n        blocked = blocking;\n    }\n\n    function setNoReturnData(bool noReturn) external {\n        noReturnData = noReturn;\n    }\n\n    function mint(address to, uint256 amount) external returns (bool) {\n        _mint(to, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public override returns (bool ok) {\n        if (blocked) {\n            return false;\n        }\n\n        super.transferFrom(from, to, amount);\n\n        if (noReturnData) {\n            assembly {\n                return(0, 0)\n            }\n        }\n\n        ok = true;\n    }\n}\n"
    },
    "contracts/test/TestERC721.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.7;\n\nimport \"@rari-capital/solmate/src/tokens/ERC721.sol\";\n\n// Used for minting test ERC721s in our tests\ncontract TestERC721 is ERC721(\"Test721\", \"TST721\") {\n    function mint(address to, uint256 tokenId) public returns (bool) {\n        _mint(to, tokenId);\n        return true;\n    }\n\n    function tokenURI(uint256) public pure override returns (string memory) {\n        return \"tokenURI\";\n    }\n}\n"
    },
    "contracts/test/Testing.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.0;\n\nimport \"../access/MWOwnable.sol\";\n\nabstract contract Testing is MWOwnable {\n    bool public testing;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {\n        testing = false;\n    }\n\n    function __Testing_init() public virtual onlyInitializing {\n        testing = false;\n    }\n\n    function setTesting(bool _testing) external onlyOwner {\n        testing = _testing;\n    }\n}\n"
    },
    "contracts/test/TestingV2.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nabstract contract TestingV2 is OwnableUpgradeable {\n    bool public testing;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {\n        testing = false;\n    }\n\n    function __Testing_init() public virtual onlyInitializing {\n        testing = false;\n    }\n\n    function setTesting(bool _testing) external onlyOwner {\n        testing = _testing;\n    }\n}\n"
    },
    "contracts/test/TestZone.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\nimport { ZoneInterface } from \"../interfaces/ZoneInterface.sol\";\n\n// prettier-ignore\nimport {\n    AdvancedOrder,\n    CriteriaResolver\n} from \"../lib/ConsiderationStructs.sol\";\n\ncontract TestZone is ZoneInterface {\n    function isValidOrder(\n        bytes32 orderHash,\n        address caller,\n        address offerer,\n        bytes32 zoneHash\n    ) external pure override returns (bytes4 validOrderMagicValue) {\n        orderHash;\n        caller;\n        offerer;\n\n        if (zoneHash == bytes32(uint256(1))) {\n            revert(\"Revert on zone hash 1\");\n        } else if (zoneHash == bytes32(uint256(2))) {\n            assembly {\n                revert(0, 0)\n            }\n        }\n\n        validOrderMagicValue = zoneHash != bytes32(uint256(3))\n            ? ZoneInterface.isValidOrder.selector\n            : bytes4(0xffffffff);\n    }\n\n    function isValidOrderIncludingExtraData(\n        bytes32 orderHash,\n        address caller,\n        AdvancedOrder calldata order,\n        bytes32[] calldata priorOrderHashes,\n        CriteriaResolver[] calldata criteriaResolvers\n    ) external pure override returns (bytes4 validOrderMagicValue) {\n        orderHash;\n        caller;\n        order;\n        priorOrderHashes;\n        criteriaResolvers;\n\n        if (order.extraData.length == 4) {\n            revert(\"Revert on extraData length 4\");\n        } else if (order.extraData.length == 5) {\n            assembly {\n                revert(0, 0)\n            }\n        }\n\n        validOrderMagicValue = order.parameters.zoneHash != bytes32(uint256(3))\n            ? ZoneInterface.isValidOrder.selector\n            : bytes4(0xffffffff);\n    }\n}\n"
    },
    "contracts/token/ERC20/NEND.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"../../bridge/NENDBridge.sol\";\nimport \"./NENDCrossChainSupply.sol\";\nimport \"../../inflation/Inflation.sol\";\nimport \"../../access/SimpleRoleAccess.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\";\n\ncontract NEND is\n    NENDBridge,\n    NENDCrossChainSupply,\n    SimpleRoleAccess,\n    ERC20BurnableUpgradeable,\n    UUPSUpgradeable\n{\n    bool public isMintChain;\n\n    function mint(\n        address _receiver,\n        uint256 _amount\n    ) external virtual onlyRole(\"minter\") {\n        _mint(_receiver, _amount);\n    }\n\n    function initialize(\n        bool _isMainChain,\n        uint256[] memory _chains\n    ) public virtual initializer {\n        isMintChain = _isMainChain;\n        if (isMintChain) {\n            _mint(address(this), 70000000 ether);\n        }\n\n        __ERC20_init(\"NEND\", \"NEND\");\n        __Bridge_init(_chains);\n        __MWOwnable_init();\n        __Testing_init();\n    }\n\n    function distribute(\n        address _to,\n        uint256 _amount\n    ) external virtual onlyOwner {\n        _transfer(address(this), _to, _amount);\n    }\n\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\n}\n"
    },
    "contracts/token/ERC20/NENDCrossChainSupply.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../../inflation/Inflation.sol\";\n\nabstract contract NENDCrossChainSupply is Inflation {\n    uint256 public crossChainSupply;\n    uint256 public crossChainInflationAmount;\n\n    function update(\n        uint256 _crossChainSupply,\n        uint256 _crossChainInflationAmount\n    ) external virtual onlyOwner {\n        crossChainSupply = _crossChainSupply;\n        crossChainInflationAmount = _crossChainInflationAmount;\n    }\n\n    function timeSlicedCrossChainSupply()\n        external\n        view\n        virtual\n        returns (uint256)\n    {\n        if (lastInflation == 0) {\n            return crossChainSupply;\n        }\n\n        uint256 timeElapsed = block.timestamp - lastInflation;\n        uint256 elapsedPct = (timeElapsed * 10000) /\n            (testing ? 10 minutes : 1 weeks);\n        if (elapsedPct > 10000) {\n            elapsedPct = 10000;\n        }\n\n        return\n            crossChainSupply + (crossChainInflationAmount * elapsedPct) / 10000;\n    }\n}\n"
    },
    "contracts/token/ERC20/NENDV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"./NEND.sol\";\n\ncontract NENDV2 is NEND {\n  uint8 public version = 2;\n\n  function getVersion() external view returns (uint8) {\n    return version;\n  }\n}"
    },
    "contracts/token/ERC721/ERC721Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"./PeriFiNFT.sol\";\n\ncontract ERC721Factory is ReentrancyGuard, Context {\n    using Address for address;\n    using Counters for Counters.Counter;\n\n    address[] private _contracts;\n\n    event ERC721Deployed(\n        address indexed from,\n        address indexed contractAddr,\n        string name,\n        string symbol\n    );\n\n    function totalOf() public view returns (uint256) {\n        return _contracts.length;\n    }\n\n    function addressOf(uint256 index)\n        public\n        view\n        returns (address contractAddr)\n    {\n        // if the given index is invalid, return empty address\n        if (_contracts.length == 0 || _contracts.length + 1 < index) {\n            return address(0);\n        }\n        return _contracts[index];\n    }\n\n    // deploy a newly purchased contract\n    function deploy(string memory name, string memory symbol)\n        public\n        nonReentrant\n        returns (address newContractAddr)\n    {\n        // create new contract\n        PeriFiNFT contractToDeploy = new PeriFiNFT(name, symbol);\n        contractToDeploy.transferOwnership(_msgSender());\n        address cAddr = address(contractToDeploy);\n        _contracts.push(cAddr);\n\n        // emit contract deploy event\n        emit ERC721Deployed(_msgSender(), cAddr, name, symbol);\n        return cAddr;\n    }\n}\n"
    },
    "contracts/token/ERC721/PeriFiNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract PeriFiNFT is ERC721, ERC721URIStorage, Ownable {\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIdCounter;\n\n    constructor(string memory _name, string memory _symbol)\n        ERC721(_name, _symbol)\n    {}\n\n    function safeMint(address to, string memory uri) public onlyOwner {\n        _tokenIdCounter.increment();\n        uint256 tokenId = _tokenIdCounter.current();\n        _safeMint(to, tokenId);\n        _setTokenURI(tokenId, uri);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC721, ERC721URIStorage)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    // The following functions are overrides required by Solidity.\n\n    function _burn(uint256 tokenId)\n        internal\n        override(ERC721, ERC721URIStorage)\n    {\n        super._burn(tokenId);\n    }\n\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        override(ERC721, ERC721URIStorage)\n        returns (string memory)\n    {\n        return ERC721URIStorage.tokenURI(tokenId);\n    }\n}\n"
    },
    "contracts/vault/BalanceNames.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract BalanceNames {\n    string internal interestForPoolBalanceName = \"ifp\";\n    string internal interestForLenderBalanceName = \"ifl\";\n    string internal tradeCommissionBalanceName = \"tc\";\n    string internal bondingCommissionBalanceName = \"bc\";\n}\n"
    },
    "contracts/vault/LendingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7;\n\nimport \"./Vault.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nerror NotSufficientBalanceInPool(\n    uint256 loanId,\n    uint256 balance,\n    uint256 requested\n);\nerror IllegalLeverageAccess(address sender, uint256 loanId, uint256 requested);\nerror AlreadyLeveragedLoan(uint256 loanId);\n\ncontract LendingPool is Vault, ReentrancyGuardUpgradeable {\n    address public loanAddress;\n\n    mapping(uint256 => bool) public leveragedLoan;\n\n    mapping(uint256 => uint256) public loanToLeverage;\n\n    mapping(uint256 => uint256) public loanToPoolUsageInBasisPoint;\n\n    function initialize(\n        string memory name\n    ) public virtual override initializer {\n        __Vault_init(name);\n        __MWOwnable_init();\n        __ReentrancyGuard_init();\n    }\n\n    function leverageLoan(\n        uint256 loanId,\n        address paymentToken,\n        uint256 leveragedAmount,\n        address borrower\n    ) external virtual nonReentrant onlyRole(\"spender\") {\n        if (leveragedLoan[loanId]) {\n            revert AlreadyLeveragedLoan(loanId);\n        }\n\n        if (leveragedAmount == 0) {\n            leveragedLoan[loanId] = true;\n            return;\n        }\n\n        IERC20 erc20 = IERC20(paymentToken);\n        uint256 balance = erc20.balanceOf(address(this));\n\n        if (balance < leveragedAmount) {\n            revert NotSufficientBalanceInPool(loanId, balance, leveragedAmount);\n        }\n\n        erc20.transfer(borrower, leveragedAmount);\n        uint256 poolUsageInBasisPoint = (leveragedAmount * 10000) / balance;\n        loanToLeverage[loanId] = leveragedAmount;\n        loanToPoolUsageInBasisPoint[loanId] = poolUsageInBasisPoint;\n        leveragedLoan[loanId] = true;\n    }\n}\n"
    },
    "contracts/vault/Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"../helpers/SignatureHelper.sol\";\nimport \"../access/SimpleRoleAccess.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\ncontract Vault is SimpleRoleAccess, UUPSUpgradeable {\n    using SignatureHelper for bytes32;\n\n    event Claimed(bytes _hash);\n\n    bytes4 private ERC1155_INTERFACE_ID;\n    string public name;\n\n    mapping(bytes => bool) public claimed;\n    // Balance name => token => amount\n    mapping(string => mapping(address => uint256)) public namedBalances;\n\n    function initialize(string memory _name) public virtual initializer {\n        __Vault_init(_name);\n        __MWOwnable_init();\n    }\n\n    function __Vault_init(\n        string memory _name\n    ) internal virtual onlyInitializing {\n        name = _name;\n        ERC1155_INTERFACE_ID = 0xd9b67a26;\n    }\n\n    function approveERC20Transfer(\n        address _tokenAddress,\n        address _spender,\n        uint256 _amount\n    ) external virtual onlyRole(\"spender\") returns (bool) {\n        IERC20 erc20 = IERC20(_tokenAddress);\n        return erc20.approve(_spender, _amount);\n    }\n\n    function transferERC20(\n        address _tokenAddress,\n        address _to,\n        uint256 _amount\n    ) external virtual onlyRole(\"spender\") returns (bool) {\n        IERC20 erc20 = IERC20(_tokenAddress);\n        return erc20.transfer(_to, _amount);\n    }\n\n    function setERC721ApprovalForAll(\n        address _tokenAddress,\n        address _operator,\n        bool _approved\n    ) external virtual onlyRole(\"spender\") {\n        IERC721 erc721 = IERC721(_tokenAddress);\n        erc721.setApprovalForAll(_operator, _approved);\n    }\n\n    function transferERC721(\n        address _tokenAddress,\n        address _to,\n        uint256 _tokenId\n    ) external virtual onlyRole(\"spender\") {\n        IERC721 erc721 = IERC721(_tokenAddress);\n        erc721.transferFrom(address(this), _to, _tokenId);\n    }\n\n    function transferERC1155(\n        address _tokenAddress,\n        address _to,\n        uint256 _id,\n        uint256 _value,\n        bytes calldata _data\n    ) external virtual onlyRole(\"spender\") {\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\n        require(\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\n            \"given token address doesn't support ERC1155\"\n        );\n        erc1155.safeTransferFrom(address(this), _to, _id, _value, _data);\n    }\n\n    function transferERC1155Batch(\n        address _tokenAddress,\n        address _to,\n        uint256[] calldata _ids,\n        uint256[] calldata _values,\n        bytes calldata _data\n    ) external virtual onlyRole(\"spender\") {\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\n        require(\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\n            \"given token address doesn't support ERC1155\"\n        );\n        erc1155.safeBatchTransferFrom(address(this), _to, _ids, _values, _data);\n    }\n\n    function setERC1155ApprovalForAll(\n        address _tokenAddress,\n        address _operator,\n        bool _approved\n    ) external virtual onlyRole(\"spender\") {\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\n        require(\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\n            \"given token address doesn't support ERC1155\"\n        );\n        erc1155.setApprovalForAll(_operator, _approved);\n    }\n\n    function getNativeBalance() external view virtual returns (uint256) {\n        return address(this).balance;\n    }\n\n    function transferNative(\n        address payable _to,\n        uint256 _amount\n    ) public payable virtual onlyRole(\"spender\") {\n        (bool sent, ) = _to.call{ value: _amount }(\"\");\n        require(sent, \"Failed to send Ether\");\n    }\n\n    function burn(\n        address _token,\n        uint256 _amount\n    ) public virtual onlyRole(\"spender\") {\n        ERC20Burnable(_token).burn(_amount);\n    }\n\n    function namedBalanceReceive(\n        string memory _name,\n        address _token,\n        uint256 _amount\n    ) external virtual onlyRole(\"spender\") {\n        namedBalances[_name][_token] += _amount;\n    }\n\n    function namedBalanceSpend(\n        string memory _name,\n        address _token,\n        uint256 _amount\n    ) external virtual onlyRole(\"spender\") {\n        require(\n            namedBalances[_name][_token] >= _amount,\n            \"Insufficient balance\"\n        );\n        namedBalances[_name][_token] -= _amount;\n    }\n\n    function getNamedBalance(\n        string memory _name,\n        address _token\n    ) external view virtual returns (uint256) {\n        uint256 balance = namedBalances[_name][_token];\n        uint256 actualBalance = _token == address(0)\n            ? payable(this).balance\n            : IERC20(_token).balanceOf(address(this));\n\n        return balance <= actualBalance ? balance : actualBalance;\n    }\n\n    function claim(\n        bytes[] memory _hashes,\n        bytes[] memory _signatures\n    ) external virtual {\n        require(\n            _hashes.length == _signatures.length,\n            \"Not matching hash and signature count\"\n        );\n\n        for (uint256 i = 0; i < _hashes.length; i++) {\n            if (claimed[_hashes[i]]) {\n                continue;\n            }\n\n            (\n                address _recipientAddress,\n                address _tokenAddress,\n                uint256 _amount,\n                uint48 _timestamp\n            ) = abi.decode(_hashes[i], (address, address, uint256, uint48));\n\n            bytes32 _messageHash = keccak256(\n                abi.encodePacked(\n                    _recipientAddress,\n                    _tokenAddress,\n                    _amount,\n                    _timestamp\n                )\n            );\n\n            require(\n                _messageHash.recoverSigner(_signatures[i]) == owner(),\n                \"Invalid signature\"\n            );\n\n            require(_recipientAddress == msg.sender, \"Not recipient\");\n            require(block.timestamp >= _timestamp, \"Invalid timestamp\");\n            require(\n                IERC20(_tokenAddress).balanceOf(address(this)) >= _amount,\n                \"Insufficient pool balance\"\n            );\n\n            claimed[_hashes[i]] = true;\n            IERC20(_tokenAddress).transfer(msg.sender, _amount);\n            emit Claimed(_hashes[i]);\n        }\n    }\n\n    receive() external payable {}\n\n    fallback() external payable {}\n\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\n}\n"
    },
    "contracts/voting/DummyS2.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"./interfaces/INextScenario.sol\";\n\ncontract DummyS2 is INextScenario {\n    function publicMint(address _tokenOwner) external override {\n        // Intentionally do nothing\n    }\n}\n"
    },
    "contracts/voting/DummyTicket.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../access/MWOwnable.sol\";\n\ncontract DummyTicket is ERC20, MWOwnable {\n    constructor() ERC20(\"VPC Ticket\", \"VPCT\") {}\n\n    function mint(address _account, uint256 _amount) external onlyOwner {\n        _mint(_account, _amount);\n    }\n}\n"
    },
    "contracts/voting/Gamification.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\nimport \"../access/MWOwnable.sol\";\n\ncontract Gamification is VRFConsumerBaseV2, MWOwnable {\n    event WinningOptionsSettled(bytes32[] curationHashes, uint8[] winningOptions);\n\n    VRFCoordinatorV2Interface COORDINATOR;\n\n    uint64 public subscriptionId;\n\n    address public vrfCoordinator;\n\n    bytes32 public keyHash;\n\n    uint32 public callbackGasLimitPerWord = 200000;\n\n    uint16 public requestConfirmations = 1;\n\n    // 0 = Not settled\n    // 1-5 = Settled (1-indexed, subtract 1 to get actuall off chain winning option)\n    mapping(bytes32 => uint8) public hashToWinningOption;\n\n    mapping(uint256 => bytes32[]) internal requestIdToHashes;\n\n    constructor(uint64 _subscriptionId, address _vrfCoordinator, bytes32 _keyHash) VRFConsumerBaseV2(vrfCoordinator) {\n        COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\n        subscriptionId = _subscriptionId;\n        vrfCoordinator = _vrfCoordinator;\n        keyHash = _keyHash;\n    }\n\n    function setCoordinator(address _vrfCoordinator) external onlyOwner {\n        vrfCoordinator = _vrfCoordinator;\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\n    }\n\n    function setKeyHash(bytes32 _keyHash) external onlyOwner {\n        keyHash = _keyHash;\n    }\n\n    function setCallbackGasLimitPerWord(uint32 _gasLimit) external onlyOwner {\n        callbackGasLimitPerWord = _gasLimit;\n    }\n\n    function setRequestConfirmations(uint16 _confirmationCount)\n        external\n        onlyOwner\n    {\n        requestConfirmations = _confirmationCount;\n    }\n\n    // Assumes the subscription is funded sufficiently.\n    function requestCurationWinningOption(bytes32[] memory hashes)\n        external\n        onlyOwner\n    {\n        uint32 numHashes = uint32(hashes.length);\n\n        require(\n            numHashes > 0 && numHashes <= 500,\n            \"Invalid number of random words requested\"\n        );\n\n        for (uint256 i = 0; i < hashes.length; i++) {\n            require(\n                hashToWinningOption[hashes[i]] == 0,\n                \"Curation winning option already settled\"\n            );\n        }\n\n        // Will revert if subscription is not set and funded.\n        uint256 requestId = COORDINATOR.requestRandomWords(\n            keyHash,\n            subscriptionId,\n            requestConfirmations,\n            callbackGasLimitPerWord * numHashes,\n            numHashes\n        );\n\n        requestIdToHashes[requestId] = hashes;\n    }\n\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\n        internal\n        override\n    {\n        bytes32[] memory hashes = requestIdToHashes[requestId];\n        uint8[] memory options = new uint8[](hashes.length);\n\n        require(\n            hashes.length == randomWords.length,\n            \"Hashes and random words length not matching\"\n        );\n\n        for (uint256 i = 0; i < hashes.length; i++) {\n            // Settled by another request\n            if (hashToWinningOption[hashes[i]] != 0) {\n                options[i] = hashToWinningOption[hashes[i]];\n                continue;\n            }\n\n            uint8 winningOption = uint8(randomWords[i] % 5) + 1;\n\n            hashToWinningOption[hashes[i]] = winningOption;\n            options[i] = winningOption;\n        }\n\n        emit WinningOptionsSettled(hashes, options);\n    }\n}\n"
    },
    "contracts/voting/interfaces/ICuration.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface ICuration {\n    event VoteCasted(\n        bool accept,\n        bool bet,\n        bool leverageLending,\n        uint8 loanAmount,\n        uint8 duration,\n        uint8 apr,\n        uint8 cardLevel,\n        uint256 cardId,\n        uint48 voteTime,\n        bytes32 curationHash,\n        address voter\n    );\n\n    event CurationEnded(\n        bytes32 curationHash,\n        address[] votersRedeemableCard,\n        address[] votersRewarded,\n        uint256[] rewards\n    );\n\n    event VPCRedeemed(bytes32 curationHash, address voter);\n    event RewardClaimed(bytes32 curationHash, address voter);\n\n    struct Vote {\n        bool accept;\n        bool bet;\n        bool leverageLending;\n        bool vpcRedeemable;\n        bool rewardsClaimed;\n        uint8 loanAmount;\n        uint8 duration;\n        uint8 apr;\n        uint8 cardLevel;\n        uint256 cardId;\n        uint48 voteTime;\n        address voter;\n        uint256 reward;\n    }\n\n    struct EndCurationArgs {\n        bytes32 curationHash;\n        bool rejected;\n        uint8 winningOption;\n        uint256 totalRewards;\n        uint256 winningPower;\n    }\n\n    function castVote(\n        bool _accept,\n        bool _bet,\n        bool _leverageLending,\n        uint8 _loanAmount,\n        uint8 _duration,\n        uint8 _apr,\n        uint8 _cardLevel,\n        uint256 _cardId,\n        uint48 _curationEnd,\n        bytes32 _curationHash,\n        bytes memory _signature\n    ) external;\n\n    function redeemVpc(bytes32 _curationHash) external;\n\n    function endCuration(EndCurationArgs memory _args) external;\n\n    function getVoteCount(bytes32 _curationHash)\n        external\n        view\n        returns (uint256);\n}\n"
    },
    "contracts/voting/interfaces/INextScenario.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n\ninterface INextScenario {\n    function publicMint(address _tokenOwner) external;\n}"
    },
    "contracts/voting/interfaces/ITicket.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Inheritance\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ITicket is IERC20 {\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns(bool);\n}"
    },
    "contracts/voting/interfaces/IVPCBridge.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nabstract contract IVPCBridge {\n    event EnterBridge(\n        uint256 targetChainId,\n        address sender,\n        address recipient,\n        uint8 cardLevel,\n        uint256 tokenId,\n        bool revealed,\n        string tokenHash,\n        uint256 nonce,\n        uint48 enteredAt\n    );\n\n    event LeaveBridge(\n        uint256 nonce,\n        uint256 sourceChainId,\n        uint48 leftAt\n    );\n\n    function enterBridge(\n        uint256 _targetChainId,\n        address _recipient,\n        uint8 _cardLevel,\n        uint256 _tokenId\n    ) external virtual;\n\n    function leaveBridge(\n        uint256 _sourceChainId,\n        address _recipient,\n        uint8 _cardLevel,\n        uint256 _tokenId,\n        bool _revealed,\n        string memory _tokenHash,\n        uint256 _nonce,\n        bytes memory _signature\n    ) external virtual;\n}\n"
    },
    "contracts/voting/interfaces/WETH.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Inheritance\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n\ninterface WETH is IERC20 {\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns(bool);\n}"
    },
    "contracts/voting/PeriFiCuration.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"../helpers/SignatureHelper.sol\";\nimport \"../vault/Vault.sol\";\nimport \"./ScenarioOneV2.sol\";\nimport \"../access/MWOwnable.sol\";\nimport \"../token/ERC20/NEND.sol\";\nimport \"./ScenarioOneV2.sol\";\nimport \"./interfaces/ICuration.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\ncontract PeriFiCuration is ICuration, MWOwnable, UUPSUpgradeable {\n    using SignatureHelper for bytes32;\n\n    // Curation hash => votes\n    mapping(bytes32 => Vote[]) public votes;\n    mapping(bytes32 => uint48) public curationHashToEndTime;\n    mapping(bytes32 => bool) public curationHashToEnded;\n    address[4] public vpcAddresses;\n    Vault public rewardPool;\n\n    NEND public nend;\n\n    function initialize(\n        Vault _rewardPool,\n        NEND _rewardToken,\n        address[4] memory _vpcAddresses\n    ) public virtual initializer {\n        require(_vpcAddresses.length == 4, \"Invalid number of vpc addresses\");\n        rewardPool = _rewardPool;\n        nend = _rewardToken;\n        vpcAddresses = _vpcAddresses;\n\n        __MWOwnable_init();\n    }\n\n    function setRewardPool(Vault _rewardPool) external virtual onlyOwner {\n        rewardPool = _rewardPool;\n    }\n\n    function setNend(NEND _nend) external virtual onlyOwner {\n        nend = _nend;\n    }\n\n    function setVPCAddress(\n        uint8 _level,\n        address _address\n    ) external virtual onlyOwner {\n        vpcAddresses[_level - 1] = _address;\n    }\n\n    function setVPCAddresses(\n        address[4] memory _addresses\n    ) external virtual onlyOwner {\n        vpcAddresses = _addresses;\n    }\n\n    function castVote(\n        bool _accept,\n        bool _bet,\n        bool _leverageLending,\n        uint8 _loanAmount,\n        uint8 _duration,\n        uint8 _apr,\n        uint8 _cardLevel,\n        uint256 _cardId,\n        uint48 _curationEnd,\n        bytes32 _curationHash,\n        bytes memory _signature\n    ) external virtual override {\n        bytes32 messageHash = keccak256(\n            abi.encodePacked(_curationEnd, msg.sender, _curationHash)\n        );\n\n        require(block.timestamp <= _curationEnd, \"Curation ended\");\n\n        require(\n            messageHash.recoverSigner(_signature) == owner(),\n            \"Invalid signature\"\n        );\n\n        require(_cardLevel >= 1 && _cardLevel < 5, \"Invalid card level\");\n\n        require(\n            PERIv2(vpcAddresses[_cardLevel - 1]).revealChecked(_cardId),\n            \"Card not releaved\"\n        );\n\n        if (curationHashToEndTime[_curationHash] != 0) {\n            require(\n                curationHashToEndTime[_curationHash] == _curationEnd,\n                \"Curation end mismatch\"\n            );\n        } else {\n            curationHashToEndTime[_curationHash] = _curationEnd;\n        }\n\n        for (uint256 i = 0; i < votes[_curationHash].length; i++) {\n            if (votes[_curationHash][i].voter == msg.sender) {\n                revert(\"Already voted\");\n            }\n        }\n\n        require(\n            vpcAddresses[_cardLevel - 1] != address(0),\n            \"VPC address not set\"\n        );\n\n        IERC721(vpcAddresses[_cardLevel - 1]).transferFrom(\n            msg.sender,\n            address(rewardPool),\n            _cardId\n        );\n\n        uint48 voteTime = uint48(block.timestamp);\n\n        votes[_curationHash].push(\n            Vote(\n                _accept,\n                _bet,\n                _leverageLending,\n                false,\n                false,\n                _loanAmount,\n                _duration,\n                _apr,\n                _cardLevel,\n                _cardId,\n                voteTime,\n                msg.sender,\n                0\n            )\n        );\n\n        emit VoteCasted(\n            _accept,\n            _bet,\n            _leverageLending,\n            _loanAmount,\n            _duration,\n            _apr,\n            _cardLevel,\n            _cardId,\n            voteTime,\n            _curationHash,\n            msg.sender\n        );\n    }\n\n    function redeemVpc(bytes32 _curationHash) external virtual override {\n        Vote[] storage _votes = votes[_curationHash];\n\n        for (uint256 i = 0; i < _votes.length; i++) {\n            Vote storage _vote = _votes[i];\n            if (_vote.voter == msg.sender && _vote.vpcRedeemable) {\n                _vote.vpcRedeemable = false;\n                rewardPool.transferERC721(\n                    vpcAddresses[_vote.cardLevel - 1],\n                    _vote.voter,\n                    _vote.cardId\n                );\n\n                emit VPCRedeemed(_curationHash, msg.sender);\n                return;\n            }\n        }\n\n        revert(\"No vote valid for vpc redeem\");\n    }\n\n    function endCuration(\n        EndCurationArgs memory args\n    ) external virtual override onlyOwner {\n        require(!curationHashToEnded[args.curationHash], \"Curation ended\");\n\n        require(\n            curationHashToEndTime[args.curationHash] == 0 ||\n                block.timestamp >= curationHashToEndTime[args.curationHash],\n            \"Curation end time not reached\"\n        );\n\n        curationHashToEnded[args.curationHash] = true;\n\n        // No vote for the curation was casted on this chain\n        if (curationHashToEndTime[args.curationHash] == 0) {\n            return;\n        }\n\n        Vote[] storage _votes = votes[args.curationHash];\n\n        uint256[] memory values = new uint256[](5); // numCardsRedeemed, numVotersRewarded, redeemIdx, rewardIdx, burnAmount\n\n        for (uint256 i = 0; i < _votes.length; i++) {\n            Vote memory _vote = _votes[i];\n\n            if (\n                args.rejected ||\n                !_vote.bet ||\n                _vote.loanAmount == args.winningOption\n            ) {\n                values[0]++;\n            }\n\n            if (\n                !args.rejected &&\n                _vote.bet &&\n                _vote.loanAmount == args.winningOption\n            ) {\n                values[1]++;\n            }\n        }\n\n        address[] memory votersCardRedeemable = new address[](values[0]);\n        address[] memory votersRewarded = new address[](values[1]);\n        uint256[] memory rewards = new uint256[](values[1]);\n\n        for (uint256 i = 0; i < _votes.length; i++) {\n            Vote storage _vote = _votes[i];\n\n            if (\n                args.rejected ||\n                !_vote.bet ||\n                _vote.loanAmount == args.winningOption\n            ) {\n                _vote.vpcRedeemable = true;\n                votersCardRedeemable[values[2]++] = _vote.voter;\n            }\n\n            if (!args.rejected && _vote.bet) {\n                // Reward winning votes with NEND\n                if (_vote.loanAmount == args.winningOption) {\n                    _vote.reward = rewards[values[3]] =\n                        (_vote.cardLevel * args.totalRewards) /\n                        args.winningPower;\n                    votersRewarded[values[3]++] = _vote.voter;\n                }\n                // Burn NEND from losing votes\n                else {\n                    values[4] += PERIv2(vpcAddresses[_vote.cardLevel - 1])\n                        .MINT_PRICE();\n                }\n                // End result on all chains: Total Burned == Total rewarded => Change in supply = 0\n            }\n        }\n\n        if (values[4] > 0) {\n            uint256 poolBalance = IERC20Upgradeable(nend).balanceOf(\n                address(rewardPool)\n            );\n            rewardPool.burn(\n                address(nend),\n                values[4] > poolBalance ? poolBalance : values[4]\n            );\n        }\n\n        emit CurationEnded(\n            args.curationHash,\n            votersCardRedeemable,\n            votersRewarded,\n            rewards\n        );\n    }\n\n    function claimReward(\n        bytes32 _curationHash,\n        bytes memory _signature\n    ) external virtual {\n        bytes32 messageHash = keccak256(\n            abi.encodePacked(msg.sender, _curationHash)\n        );\n\n        require(\n            messageHash.recoverSigner(_signature) == owner(),\n            \"Invalid signature\"\n        );\n\n        Vote[] storage _votes = votes[_curationHash];\n\n        for (uint256 i = 0; i < _votes.length; i++) {\n            if (_votes[i].voter != msg.sender) {\n                continue;\n            }\n\n            Vote storage _vote = _votes[i];\n\n            require(!_vote.rewardsClaimed, \"Already claimed\");\n            require(_vote.reward > 0, \"No reward\");\n            _vote.rewardsClaimed = true;\n\n            nend.mint(msg.sender, _vote.reward);\n            emit RewardClaimed(_curationHash, msg.sender);\n            return;\n        }\n\n        revert(\"Not voted\");\n    }\n\n    function getVoteCount(\n        bytes32 _curationHash\n    ) external view virtual override returns (uint256) {\n        return votes[_curationHash].length;\n    }\n\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n}\n"
    },
    "contracts/voting/PowerCard.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../access/MWOwnable.sol\";\n\ncontract PowerCard is ERC721, MWOwnable {\n    uint8 public immutable level;\n    uint256 public price;\n    address public paymentToken;\n    address public curationRewardPool;\n    uint256 public boxCounter;\n    mapping(uint256 => uint256) public boxToTokenId;\n\n    uint256 internal tokenCounter;\n    mapping(uint256 => address) internal boxOwner;\n\n    event BoxesPurchased(address indexed buyer, uint256[] boxIds);\n    event Unboxed(uint256 boxId, uint256 tokenId);\n\n    constructor(\n        uint8 _level,\n        uint256 _price,\n        address _paymentToken,\n        address _curationRewardPool\n    ) ERC721(\"Voting Power Card\", \"VPC\") {\n        require(_level > 0 && _level < 5, \"Invalid level\");\n        level = _level;\n        price = _price;\n        paymentToken = _paymentToken;\n        curationRewardPool = _curationRewardPool;\n    }\n\n    function setPrice(uint256 _price) external onlyOwner {\n        price = _price;\n    }\n\n    function setPaymentToken(address _paymentToken) external onlyOwner {\n        paymentToken = _paymentToken;\n    }\n\n    function setCurationRewardPool(address _curationRewardPool)\n        external\n        onlyOwner\n    {\n        curationRewardPool = _curationRewardPool;\n    }\n\n    function buyBoxes(uint256 _amount) external {\n        require(_amount > 0, \"Invalid amount\");\n        require(boxCounter + _amount <= 10000, \"No more boxes\");\n        uint256 totalPrice = price * _amount;\n\n        IERC20(paymentToken).transferFrom(\n            msg.sender,\n            curationRewardPool,\n            totalPrice\n        );\n\n        uint256[] memory boxIds = new uint256[](_amount);\n\n        for (uint256 i = 0; i < _amount; i++) {\n            boxOwner[++boxCounter] = msg.sender;\n            boxIds[i] = boxCounter;\n        }\n\n        emit BoxesPurchased(msg.sender, boxIds);\n    }\n\n    function unbox(uint256 _boxId) external {\n        require(boxOwner[_boxId] == msg.sender, \"Not box owner\");\n        delete boxOwner[_boxId];\n\n        _mint(msg.sender, ++tokenCounter);\n        boxToTokenId[_boxId] = tokenCounter;\n        emit Unboxed(_boxId, tokenCounter);\n    }\n}\n"
    },
    "contracts/voting/ScenarioOne.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Inheritance\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\";\n\n// Internal references\nimport \"./interfaces/WETH.sol\";\nimport \"./interfaces/INextScenario.sol\";\nimport \"./interfaces/ITicket.sol\";\n\n// @author The Peri Finanace team\n// @title A Peri NFT Contract\ncontract NendNFTs1 is ERC721Upgradeable, ERC721URIStorageUpgradeable, ERC721EnumerableUpgradeable, OwnableUpgradeable {\n    /* ========== STATE VARIABLES ========== */\n\n    //Index of tokens to sell\n    uint256 public mintIndexForSale;\n    \n    //Number of blocks to start selling\n    uint256 public mintStartBlockNumber; \n\n    //Selling price\n    uint256 public MINT_PRICE; \n\n    //Notify token reveal start\n    bool public isRevealed;\n\n    //Notify token public mint start\n    bool public isEnabledPublicMint;\n    \n    //Notify token ticket mint start\n    bool public isEnabledTicketMint;\n\n    //Notify token whitelist mint start\n    bool public isEnabledWhitelistMint;  \n\n    //Is it connected to the next scenario contract\n    bool public isEnabledNextScenario; \n\n    //Merkle root for verifying whitelist\n    bytes32 public merkleRoot;\n\n    //The maximum quantity sold\n    uint256 public MAX_SALE_AMOUNT; \n\n    //Default URL of revealed tokens\n    string private baseURI;\n\n    //Default URL of unreveal tokens\n    string private notRevealedURI;\n\n    //Mapping owner address to last block number\n    mapping (address => uint256) private _lastCallBlockNumber;\n\n    //Mapping from owner address to token URI\n    mapping(uint256 => string) private _tokenURIs;\n\n    //Mapping from token ID to reveal checked (true & false)\n    mapping(uint256 => bool) public revealChecked;\n\n    //Number of mints per address\n    mapping(address => uint256) public whitelistMintLimit;\n\n    //Interface for next scenario\n    INextScenario private _nextScenario;\n\n    //Interface for trading with wETH contract\n    WETH private _wETH; \n\n    //interface\n    ITicket private _ticket;\n\n    /* ========== Initializer ========== */\n    function initialize(\n        string calldata name,\n        string calldata symbol,\n        address wETH,\n        address ticket,\n        uint256 mintPrice\n    ) initializer public {\n        __ERC721_init(name, symbol);\n        __ERC721URIStorage_init();\n        __Ownable_init();\n        \n        isRevealed = false;\n        isEnabledTicketMint = false;\n        isEnabledWhitelistMint = false;\n        isEnabledPublicMint = false;\n        isEnabledNextScenario = false;\n        MAX_SALE_AMOUNT = 10000;\n        mintIndexForSale = 1;\n        _wETH = WETH(wETH);\n        _ticket = ITicket(ticket);\n        MINT_PRICE = mintPrice;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @dev Only those who have tickets can mint.\n     * @param requestedCount quantity to mint\n     */\n\n    function ticketMint(uint256 requestedCount) external {\n        require(isEnabledTicketMint, \"The ticket sale is not enabled!\");\n        require(mintIndexForSale + requestedCount <= MAX_SALE_AMOUNT, \"Exceed max amount\");\n\n        _ticket.transferFrom(msg.sender, owner(), requestedCount);\n\n        for(uint256 i = 0; i < requestedCount; i++) {\n            _mint(msg.sender, mintIndexForSale + i);\n            _setTokenURI(mintIndexForSale, notRevealedURI);\n            revealChecked[mintIndexForSale] = false;\n        }\n        mintIndexForSale += requestedCount;\n    }\n\n    /**\n     * @dev Functions that only validated whitelists can mint\n     * @param requestedCount quantity to mint\n     * @param _merkleProof Array of Merkle Trees\n     */\n    function whitelistMint(uint256 requestedCount, bytes32[] calldata _merkleProof) external {\n        require(isEnabledWhitelistMint, \"The whitelist sale is not enabled!\");\n        require(whitelistMintLimit[msg.sender] + requestedCount <= 30, \"Exceed max requested count\");\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\n        require(MerkleProofUpgradeable.verify(_merkleProof, merkleRoot, leaf), 'Invalid proof!');\n        \n        for(uint256 i = 0; i < requestedCount; i++) {\n            _mint(msg.sender, mintIndexForSale + i);\n            _setTokenURI(mintIndexForSale, notRevealedURI);\n            revealChecked[mintIndexForSale] = false;\n        }\n        \n        whitelistMintLimit[msg.sender] = whitelistMintLimit[msg.sender] + requestedCount;\n        mintIndexForSale += requestedCount;\n    }\n\n    /**\n     * @dev A function that anyone can mint. Before reveal, it is minted in the unreveal state\n     * @param requestedCount quantity to mint\n     */\n    function publicMint(uint256 requestedCount) external {\n        require(isEnabledPublicMint, \"The public sale is not enabled!\");\n        require(mintIndexForSale + requestedCount <= MAX_SALE_AMOUNT, \"Exceed max amount\");\n\n        _wETH.transferFrom(msg.sender, owner(), requestedCount * MINT_PRICE);\n\n        for(uint256 i = 0; i < requestedCount; i++) {\n            _mint(msg.sender, mintIndexForSale + i);\n            _setTokenURI(mintIndexForSale, notRevealedURI);\n            revealChecked[mintIndexForSale] = false;\n        }\n        mintIndexForSale += requestedCount;\n        _lastCallBlockNumber[msg.sender] = block.number;\n    }\n\n    /**\n     * @dev A function that can be repaired in the event of an unintended error when revealed. Only the owner can execute it\n     * @param tokenId The ID of the token you want to repair\n     * @param tokenHash The unique hash value of the token\n     */\n    function repairTokenURI(uint256 tokenId, string calldata tokenHash) public onlyOwner {\n        string memory _revealURI = string(abi.encodePacked(baseURI, tokenHash, \".json\"));\n        _tokenURIs[tokenId] = _revealURI;\n    }\n\n    /**\n     * @dev A function that revises tokens that have not yet been revealed. It issues tokens in the next scenario at the same time\n     * @param tokenIds The ID of the tokens you want to reveal\n     * @param tokenHash The unique hash value of the token\n     */\n    function revealTokens(uint256[] calldata tokenIds , string[] calldata tokenHash) public {\n        require(isRevealed == true, \"Not yet started\");\n        require(bytes(baseURI).length > 0, \"Invalid BaseURI\");\n        require(isEnabledNextScenario == true, \"The next scenario is not enabled!\");\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(ownerOf(tokenIds[i]) == msg.sender, \"Token owner is not false\");\n            require(revealChecked[tokenIds[i]] == false, \"Already Revealed token!\");\n            string memory _revealURI = string(abi.encodePacked(baseURI, tokenHash[i], \".json\"));\n            revealChecked[tokenIds[i]] = true;\n            _tokenURIs[tokenIds[i]] = _revealURI;\n            _NextScenarioMint(msg.sender);\n        }\n    }\n\n    /**\n     * @dev Set base URI of reveal tokens. Only the owner can do it\n     * @param _newBaseURI Base URI of revealed tokens\n     */\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\n        baseURI = _newBaseURI;\n    }\n\n    /**\n     * @dev Set base URI of unreveal tokens. Only the owner can do it\n     * @param _newNotRevealedURI Base URI of unreveal tokens\n     */\n    function setNotRevealedURI(string memory _newNotRevealedURI) public onlyOwner {\n        notRevealedURI = _newNotRevealedURI;\n    }\n\n    /**\n     * @dev A function that allows users to start reveal\n     * @param _state True & False, Allow reveal\n     */\n    function setRevealState(bool _state) public onlyOwner {\n        isRevealed = _state;\n    }\n\n    /**\n     * @dev Functions that allow users to initiate ticket minting\n     * @param _state True & False, Allow ticket Minting\n     */\n    function setTicketMintState(bool _state) public onlyOwner {\n        isEnabledTicketMint = _state;\n    }\n\n    /**\n     * @dev Functions that allow users to initiate whitelist minting\n     * @param _state True & False, Allow Whitelist Minting\n     */\n    function setWhitelistMintState(bool _state) public onlyOwner {\n        isEnabledWhitelistMint = _state;\n    }\n\n    /**\n     * @dev A function that allows users to start mint\n     * @param _state True & False, Allow mint\n     */\n    function setPublicMintState(bool _state) public onlyOwner {\n        isEnabledPublicMint = _state;\n    }\n\n    /**\n     * @dev Prevent bot, set timer to start minting, only owner can run\n     * @param mintPrice Setup Mint price\n     */\n    function setupSale(\n        uint256 mintPrice\n    ) external onlyOwner {\n        MINT_PRICE = mintPrice;\n    }\n\n    /**\n     * @dev Functions that associate with the following collection of scenarios\n     * @param nextScenario Address of the next scenario contract\n     */\n    function setNextScenarioConenct(address nextScenario) public onlyOwner {\n        _nextScenario = INextScenario(nextScenario);\n        isEnabledNextScenario = true;\n    }\n\n    /**\n     * @dev Functions that set the required Merklute of whitelist validation\n     * @param _merkleRoot White List's Merkle root\n     */\n    function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {\n        merkleRoot = _merkleRoot;\n    }\n\n    /**\n     * @dev A function that mints the following collection of scenarios\n     * @param tokenOwner The address of the token owner to mint\n     */\n    function _NextScenarioMint(address tokenOwner) private {\n        _nextScenario.publicMint(tokenOwner);\n    }\n\n    /* ========== VIEWS ========== */\n\n    /**\n     * @dev See {IERC165-supportsInterface}\n     */\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721EnumerableUpgradeable, ERC721URIStorageUpgradeable, ERC721Upgradeable) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token\n     */\n    function tokenURI(uint256 tokenId) public view virtual override(ERC721Upgradeable, ERC721URIStorageUpgradeable) returns (string memory) {\n        require(_exists(tokenId),\"ERC721URIStorage: URI query for nonexistent token\");\n        \n        if(revealChecked[tokenId] == false) {\n            return notRevealedURI;\n        }\n        string memory _tokenURI = _tokenURIs[tokenId];\n        return _tokenURI;\n    }\n\n    /**\n     * @dev Returns. About Minting\n     */\n    function mintingInformation() external view returns (uint256[3] memory)  {\n        uint256[3] memory info = [\n            mintIndexForSale,\n            MAX_SALE_AMOUNT,\n            MINT_PRICE\n        ];\n        return info;\n    }\n\n    \n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override(ERC721Upgradeable, ERC721URIStorageUpgradeable) {\n        super._burn(tokenId);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId, /* firstTokenId */\n        uint256 batchSize\n    ) internal override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\n    }\n}\n"
    },
    "contracts/voting/ScenarioOneV2.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Inheritance\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"../access/SimpleRoleAccess.sol\";\n\n// Internal references\nimport \"./interfaces/WETH.sol\";\nimport \"./interfaces/INextScenario.sol\";\nimport \"./interfaces/ITicket.sol\";\n\n// @author The Peri Finanace team\n// @title A Peri NFT Contract\ncontract PERIv2 is\n    ERC721Upgradeable,\n    ERC721URIStorageUpgradeable,\n    ERC721EnumerableUpgradeable,\n    SimpleRoleAccess,\n    UUPSUpgradeable\n{\n    /* ========== STATE VARIABLES ========== */\n\n    //Index of tokens to sell\n    uint256 public mintIndexForSale;\n\n    //Number of blocks to start selling\n    uint256 public mintStartBlockNumber;\n\n    //Selling price\n    uint256 public MINT_PRICE;\n\n    //Notify token reveal start\n    bool public isRevealed;\n\n    //Notify token public mint start\n    bool public isEnabledPublicMint;\n\n    //Notify token ticket mint start\n    bool public isEnabledTicketMint;\n\n    //Notify token whitelist mint start\n    bool public isEnabledWhitelistMint;\n\n    //Is it connected to the next scenario contract\n    bool public isEnabledNextScenario;\n\n    //Merkle root for verifying whitelist\n    bytes32 public merkleRoot;\n\n    //The maximum quantity sold\n    uint256 public MAX_SALE_AMOUNT;\n\n    //Default URL of revealed tokens\n    string private baseURI;\n\n    //Default URL of unreveal tokens\n    string private notRevealedURI;\n\n    //Mapping owner address to last block number\n    mapping(address => uint256) private _lastCallBlockNumber;\n\n    //Mapping from owner address to token URI\n    mapping(uint256 => string) private _tokenURIs;\n\n    //Mapping from token ID to reveal checked (true & false)\n    mapping(uint256 => bool) public revealChecked;\n\n    //Number of mints per address\n    mapping(address => uint256) public whitelistMintLimit;\n\n    //Interface for next scenario\n    INextScenario private _nextScenario;\n\n    //Interface for trading with wETH contract\n    WETH private _wETH;\n\n    //interface\n    ITicket private _ticket;\n\n    /* ========== Initializer ========== */\n    function initialize(\n        string calldata name,\n        string calldata symbol,\n        address wETH,\n        address ticket,\n        uint256 mintPrice\n    ) public initializer {\n        __ERC721_init(name, symbol);\n        __ERC721URIStorage_init();\n        __MWOwnable_init();\n\n        isRevealed = false;\n        isEnabledTicketMint = false;\n        isEnabledWhitelistMint = false;\n        isEnabledPublicMint = false;\n        isEnabledNextScenario = false;\n        MAX_SALE_AMOUNT = 10000;\n        mintIndexForSale = 1;\n        _wETH = WETH(wETH);\n        _ticket = ITicket(ticket);\n        MINT_PRICE = mintPrice;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @dev Only those who have tickets can mint.\n     * @param requestedCount quantity to mint\n     */\n\n    function ticketMint(uint256 requestedCount) external {\n        require(isEnabledTicketMint, \"The ticket sale is not enabled!\");\n        require(\n            mintIndexForSale + requestedCount <= MAX_SALE_AMOUNT,\n            \"Exceed max amount\"\n        );\n\n        _ticket.transferFrom(msg.sender, owner(), requestedCount);\n\n        for (uint256 i = 0; i < requestedCount; i++) {\n            _mint(msg.sender, mintIndexForSale + i);\n            _setTokenURI(mintIndexForSale, notRevealedURI);\n            revealChecked[mintIndexForSale] = false;\n        }\n        mintIndexForSale += requestedCount;\n    }\n\n    /**\n     * @dev Functions that only validated whitelists can mint\n     * @param requestedCount quantity to mint\n     * @param _merkleProof Array of Merkle Trees\n     */\n    function whitelistMint(\n        uint256 requestedCount,\n        bytes32[] calldata _merkleProof\n    ) external {\n        require(isEnabledWhitelistMint, \"The whitelist sale is not enabled!\");\n        require(\n            whitelistMintLimit[msg.sender] + requestedCount <= 30,\n            \"Exceed max requested count\"\n        );\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\n        require(\n            MerkleProofUpgradeable.verify(_merkleProof, merkleRoot, leaf),\n            \"Invalid proof!\"\n        );\n\n        for (uint256 i = 0; i < requestedCount; i++) {\n            _mint(msg.sender, mintIndexForSale + i);\n            _setTokenURI(mintIndexForSale, notRevealedURI);\n            revealChecked[mintIndexForSale] = false;\n        }\n\n        whitelistMintLimit[msg.sender] =\n            whitelistMintLimit[msg.sender] +\n            requestedCount;\n        mintIndexForSale += requestedCount;\n    }\n\n    /**\n     * @dev A function that anyone can mint. Before reveal, it is minted in the unreveal state\n     * @param requestedCount quantity to mint\n     */\n    function publicMint(uint256 requestedCount) external {\n        require(isEnabledPublicMint, \"The public sale is not enabled!\");\n        require(\n            mintIndexForSale + requestedCount <= MAX_SALE_AMOUNT,\n            \"Exceed max amount\"\n        );\n\n        _wETH.transferFrom(msg.sender, owner(), requestedCount * MINT_PRICE);\n\n        for (uint256 i = 0; i < requestedCount; i++) {\n            _mint(msg.sender, mintIndexForSale + i);\n            _setTokenURI(mintIndexForSale, notRevealedURI);\n            revealChecked[mintIndexForSale] = false;\n        }\n        mintIndexForSale += requestedCount;\n        _lastCallBlockNumber[msg.sender] = block.number;\n    }\n\n    /**\n     * @dev A function that can be repaired in the event of an unintended error when revealed. Only the owner can execute it\n     * @param tokenId The ID of the token you want to repair\n     * @param tokenHash The unique hash value of the token\n     */\n    function repairTokenURI(\n        uint256 tokenId,\n        string calldata tokenHash\n    ) public onlyOwner {\n        string memory _revealURI = string(\n            abi.encodePacked(baseURI, tokenHash, \".json\")\n        );\n        _tokenURIs[tokenId] = _revealURI;\n    }\n\n    /**\n     * @dev A function that revises tokens that have not yet been revealed. It issues tokens in the next scenario at the same time\n     * @param tokenIds The ID of the tokens you want to reveal\n     * @param tokenHash The unique hash value of the token\n     */\n    function revealTokens(\n        uint256[] calldata tokenIds,\n        string[] calldata tokenHash\n    ) public {\n        require(isRevealed == true, \"Not yet started\");\n        require(bytes(baseURI).length > 0, \"Invalid BaseURI\");\n        require(\n            isEnabledNextScenario == true,\n            \"The next scenario is not enabled!\"\n        );\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(\n                ownerOf(tokenIds[i]) == msg.sender,\n                \"Token owner is not false\"\n            );\n            require(\n                revealChecked[tokenIds[i]] == false,\n                \"Already Revealed token!\"\n            );\n            string memory _revealURI = string(\n                abi.encodePacked(baseURI, tokenHash[i], \".json\")\n            );\n            revealChecked[tokenIds[i]] = true;\n            _tokenURIs[tokenIds[i]] = _revealURI;\n            _NextScenarioMint(msg.sender);\n        }\n    }\n\n    /**\n     * @dev Set base URI of reveal tokens. Only the owner can do it\n     * @param _newBaseURI Base URI of revealed tokens\n     */\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\n        baseURI = _newBaseURI;\n    }\n\n    /**\n     * @dev Set base URI of unreveal tokens. Only the owner can do it\n     * @param _newNotRevealedURI Base URI of unreveal tokens\n     */\n    function setNotRevealedURI(\n        string memory _newNotRevealedURI\n    ) public onlyOwner {\n        notRevealedURI = _newNotRevealedURI;\n    }\n\n    /**\n     * @dev A function that allows users to start reveal\n     * @param _state True & False, Allow reveal\n     */\n    function setRevealState(bool _state) public onlyRole(\"deployer\") {\n        isRevealed = _state;\n    }\n\n    /**\n     * @dev Functions that allow users to initiate ticket minting\n     * @param _state True & False, Allow ticket Minting\n     */\n    function setTicketMintState(bool _state) public onlyRole(\"deployer\") {\n        isEnabledTicketMint = _state;\n    }\n\n    /**\n     * @dev Functions that allow users to initiate whitelist minting\n     * @param _state True & False, Allow Whitelist Minting\n     */\n    function setWhitelistMintState(bool _state) public onlyRole(\"deployer\") {\n        isEnabledWhitelistMint = _state;\n    }\n\n    /**\n     * @dev A function that allows users to start mint\n     * @param _state True & False, Allow mint\n     */\n    function setPublicMintState(bool _state) public onlyRole(\"deployer\") {\n        isEnabledPublicMint = _state;\n    }\n\n    /**\n     * @dev Prevent bot, set timer to start minting, only owner can run\n     * @param mintPrice Setup Mint price\n     */\n    function setupSale(uint256 mintPrice) external onlyRole(\"deployer\") {\n        MINT_PRICE = mintPrice;\n    }\n\n    /**\n     * @dev Functions that associate with the following collection of scenarios\n     * @param nextScenario Address of the next scenario contract\n     */\n    function setNextScenarioConenct(\n        address nextScenario\n    ) public onlyRole(\"deployer\") {\n        _nextScenario = INextScenario(nextScenario);\n        isEnabledNextScenario = true;\n    }\n\n    /**\n     * @dev Functions that set the required Merklute of whitelist validation\n     * @param _merkleRoot White List's Merkle root\n     */\n    function setMerkleRoot(bytes32 _merkleRoot) public onlyRole(\"deployer\") {\n        merkleRoot = _merkleRoot;\n    }\n\n    /**\n     * @dev A function that mints the following collection of scenarios\n     * @param tokenOwner The address of the token owner to mint\n     */\n    function _NextScenarioMint(address tokenOwner) private {\n        _nextScenario.publicMint(tokenOwner);\n    }\n\n    /* ========== VIEWS ========== */\n\n    /**\n     * @dev See {IERC165-supportsInterface}\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    )\n        public\n        view\n        override(ERC721EnumerableUpgradeable, ERC721URIStorageUpgradeable, ERC721Upgradeable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token\n     */\n    function tokenURI(\n        uint256 tokenId\n    )\n        public\n        view\n        virtual\n        override(ERC721Upgradeable, ERC721URIStorageUpgradeable)\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721URIStorage: URI query for nonexistent token\"\n        );\n\n        if (revealChecked[tokenId] == false) {\n            return notRevealedURI;\n        }\n        string memory _tokenURI = _tokenURIs[tokenId];\n        return _tokenURI;\n    }\n\n    /**\n     * @dev Returns. About Minting\n     */\n    function mintingInformation() external view returns (uint256[3] memory) {\n        uint256[3] memory info = [\n            mintIndexForSale,\n            MAX_SALE_AMOUNT,\n            MINT_PRICE\n        ];\n        return info;\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(\n        uint256 tokenId\n    )\n        internal\n        virtual\n        override(ERC721Upgradeable, ERC721URIStorageUpgradeable)\n    {\n        super._burn(tokenId);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId /* firstTokenId */,\n        uint256 batchSize\n    ) internal override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\n    }\n\n    function _authorizeUpgrade(\n        address\n    ) internal override onlyRole(\"deployer\") {}\n}\n"
    },
    "contracts/voting/ScenarioTwo.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Inheritance\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\n\n// Internal references\nimport \"./interfaces/WETH.sol\";\nimport \"./interfaces/INextScenario.sol\";\n\n// @author The Peri Finanace team\n// @title A Peri NFT Contract\ncontract NendNFTs2 is\n    ERC721Upgradeable,\n    ERC721URIStorageUpgradeable,\n    ERC721EnumerableUpgradeable,\n    OwnableUpgradeable\n{\n    /* ========== STATE VARIABLES ========== */\n\n    //Index of tokens to sell\n    uint256 public mintIndexForSale;\n\n    //The maximum quantity sold\n    uint256 public MAX_SALE_AMOUNT;\n\n    //Notify token reveal start\n    bool public isRevealed;\n\n    //Is it connected to the next scenario contract\n    bool public isEnabledNextScenario;\n\n    //Address of previous scenario contract\n    address public ORIGIN_CONTRACT;\n\n    //Default URL of revealed tokens\n    string private baseURI;\n\n    //Default URL of unreveal tokens\n    string private notRevealedURI;\n\n    //Mapping owner address to last block number\n    mapping(address => uint256) private _lastCallBlockNumber;\n\n    //Mapping from owner address to token URI\n    mapping(uint256 => string) private _tokenURIs;\n\n    //Mapping from token ID to reveal checked (true & false)\n    mapping(uint256 => bool) public revealChecked;\n\n    //Interface for next scenario\n    INextScenario private _nextScenario;\n\n    //Interface for trading with wETH contract\n    WETH private _wETH;\n\n    function initialize(\n        string calldata name,\n        string calldata symbol,\n        address wETH,\n        address originContract\n    ) public initializer {\n        __ERC721_init(name, symbol);\n        __ERC721URIStorage_init();\n        __Ownable_init();\n\n        isRevealed = false;\n        isEnabledNextScenario = false;\n        MAX_SALE_AMOUNT = 10000;\n        mintIndexForSale = 1;\n        ORIGIN_CONTRACT = originContract;\n        _wETH = WETH(wETH);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @dev A function that anyone can mint. Before reveal, it is minted in the unreveal state\n     * @param tokenOwner The owner of the minting token\n     */\n    function publicMint(address tokenOwner) external {\n        require(msg.sender == ORIGIN_CONTRACT, \"caller is not origin!\");\n        require(mintIndexForSale <= MAX_SALE_AMOUNT, \"Exceed max amount\");\n\n        _mint(tokenOwner, mintIndexForSale);\n        _setTokenURI(mintIndexForSale, notRevealedURI);\n        revealChecked[mintIndexForSale] = false;\n        mintIndexForSale += 1;\n        _lastCallBlockNumber[msg.sender] = block.number;\n    }\n\n    /**\n     * @dev A function that can be repaired in the event of an unintended error when revealed. Only the owner can execute it\n     * @param tokenId The ID of the token you want to repair\n     * @param tokenHash The unique hash value of the token\n     */\n    function repairTokenURI(\n        uint256 tokenId,\n        string calldata tokenHash\n    ) public onlyOwner {\n        string memory _revealURI = string(\n            abi.encodePacked(baseURI, tokenHash, \".json\")\n        );\n        _tokenURIs[tokenId] = _revealURI;\n    }\n\n    /**\n     * @dev A function that revises tokens that have not yet been revealed. It issues tokens in the next scenario at the same time\n     * @param tokenIds The ID of the token you want to reveal\n     * @param tokenHash The unique hash value of the token\n     */\n    function revealTokens(\n        uint256[] calldata tokenIds,\n        string[] calldata tokenHash\n    ) public {\n        require(isRevealed == true, \"Not yet started\");\n        require(bytes(baseURI).length > 0, \"Invalid BaseURI\");\n        require(\n            isEnabledNextScenario == true,\n            \"The next scenario is not enabled!\"\n        );\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(\n                ownerOf(tokenIds[i]) == msg.sender,\n                \"Token owner is not false\"\n            );\n            require(\n                revealChecked[tokenIds[i]] == false,\n                \"Already Revealed token!\"\n            );\n            string memory _revealURI = string(\n                abi.encodePacked(baseURI, tokenHash[i], \".json\")\n            );\n            revealChecked[tokenIds[i]] = true;\n            _tokenURIs[tokenIds[i]] = _revealURI;\n            _NextScenarioMint(msg.sender);\n        }\n    }\n\n    /**\n     * @dev Set base URI of reveal tokens. Only the owner can do it\n     * @param _newBaseURI Base URI of revealed tokens\n     */\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\n        baseURI = _newBaseURI;\n    }\n\n    /**\n     * @dev Set base URI of unreveal tokens. Only the owner can do it\n     * @param _newNotRevealedURI Base URI of unreveal tokens\n     */\n    function setNotRevealedURI(\n        string memory _newNotRevealedURI\n    ) public onlyOwner {\n        notRevealedURI = _newNotRevealedURI;\n    }\n\n    /**\n     * @dev A function that allows users to start reveal\n     * @param _state True & False, Allow reveal\n     */\n    function setRevealState(bool _state) public onlyOwner {\n        isRevealed = _state;\n    }\n\n    /**\n     * @dev Functions that associate with the following collection of scenarios\n     * @param nextScenario Address of the next scenario contract\n     */\n    function setNextScenarioConenct(address nextScenario) public onlyOwner {\n        _nextScenario = INextScenario(nextScenario);\n        isEnabledNextScenario = true;\n    }\n\n    /**\n     * @dev A function that mints the following collection of scenarios\n     * @param tokenOwner The address of the token owner to mint\n     */\n    function _NextScenarioMint(address tokenOwner) private {\n        _nextScenario.publicMint(tokenOwner);\n    }\n\n    /* ========== VIEWS ========== */\n\n    /**\n     * @dev See {IERC165-supportsInterface}\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    )\n        public\n        view\n        override(ERC721EnumerableUpgradeable, ERC721URIStorageUpgradeable, ERC721Upgradeable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns. About Minting\n     */\n    function mintingInformation()\n        external\n        view\n        onlyOwner\n        returns (uint256[2] memory)\n    {\n        uint256[2] memory info = [mintIndexForSale, MAX_SALE_AMOUNT];\n        return info;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token\n     */\n    function tokenURI(\n        uint256 tokenId\n    )\n        public\n        view\n        virtual\n        override(ERC721Upgradeable, ERC721URIStorageUpgradeable)\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721URIStorage: URI query for nonexistent token\"\n        );\n\n        if (revealChecked[tokenId] == false) {\n            return notRevealedURI;\n        }\n        string memory _tokenURI = _tokenURIs[tokenId];\n        return _tokenURI;\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId /* firstTokenId */,\n        uint256 batchSize\n    ) internal override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(\n        uint256 tokenId\n    )\n        internal\n        virtual\n        override(ERC721Upgradeable, ERC721URIStorageUpgradeable)\n    {\n        super._burn(tokenId);\n    }\n}\n"
    },
    "contracts/voting/Ticket.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract PeriWhiteListTicket is ERC20Upgradeable, OwnableUpgradeable {\n    function initialize(\n        string calldata name,\n        string calldata symbol\n    ) public initializer {\n        __ERC20_init(name, symbol);\n        __Ownable_init();\n    }\n\n    function mint(address to, uint amount) public onlyOwner {\n        require(totalSupply() + amount <= 10000, \"Exceed max amount\");\n        _mint(to, amount);\n    }\n\n    function decimals()\n        public\n        view\n        virtual\n        override(ERC20Upgradeable)\n        returns (uint8)\n    {\n        return 0;\n    }\n}\n"
    },
    "contracts/voting/VPCBridge.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"./ScenarioOneV2.sol\";\nimport \"./interfaces/IVPCBridge.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../vault/Vault.sol\";\nimport \"../token/ERC20/NEND.sol\";\nimport \"../helpers/SignatureHelper.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\ncontract VPCBridge is IVPCBridge, MWOwnable, UUPSUpgradeable {\n    using SignatureHelper for bytes32;\n\n    PERIv2[] public vpcs;\n    Vault internal curationRewardPool;\n    NEND internal nend;\n\n    modifier validDestinationChain(uint256 chainId) virtual {\n        require(\n            _isChainSupported(chainId) && block.chainid != chainId,\n            \"Invalid destination chain\"\n        );\n        _;\n    }\n\n    modifier validCardLevel(uint8 cardLevel) virtual {\n        require(cardLevel >= 1 && cardLevel <= 4, \"Invalid card level\");\n        _;\n    }\n\n    mapping(uint256 => mapping(uint256 => bool))\n        private chainNonceToExecutedMapping;\n    uint256 private nonce;\n\n    uint256[] public supportedChainIds;\n\n    function initialize(\n        PERIv2[] memory _vpcs,\n        IERC20[] memory _tickets,\n        uint256[] memory _supportedChainIds,\n        Vault _curationRewardPool,\n        NEND _nend\n    ) public virtual initializer {\n        require(_vpcs.length == 4, \"Invalid vpc levels\");\n        for (uint8 i = 0; i < 4; i++) {\n            _tickets[i].approve(address(_vpcs[i]), 10000);\n        }\n        vpcs = _vpcs;\n        require(\n            _supportedChainIds.length > 1,\n            \"Must have at least two destination chains\"\n        );\n        supportedChainIds = _supportedChainIds;\n        require(\n            _isChainSupported(block.chainid),\n            \"The hosted chain must be one of the supported chains\"\n        );\n        curationRewardPool = _curationRewardPool;\n        nend = _nend;\n\n        __MWOwnable_init();\n    }\n\n    function enterBridge(\n        uint256 _targetChainId,\n        address _recipient,\n        uint8 _cardLevel,\n        uint256 _tokenId\n    ) external virtual override validCardLevel(_cardLevel) {\n        PERIv2 vpc = vpcs[_cardLevel - 1];\n        require(vpc.ownerOf(_tokenId) == msg.sender, \"Not card owner\");\n\n        curationRewardPool.burn(address(nend), vpc.MINT_PRICE());\n        vpc.transferFrom(msg.sender, address(this), _tokenId);\n        bool _revealed = vpc.revealChecked(_tokenId);\n        string memory uri = vpc.tokenURI(_tokenId);\n\n        emit EnterBridge(\n            _targetChainId,\n            msg.sender,\n            _recipient,\n            _cardLevel,\n            _tokenId,\n            _revealed,\n            _revealed ? _substring(uri, 67, bytes(uri).length - 5) : \"\",\n            nonce++,\n            uint48(block.timestamp)\n        );\n    }\n\n    function leaveBridge(\n        uint256 _sourceChainId,\n        address _recipient,\n        uint8 _cardLevel,\n        uint256 _tokenId,\n        bool _revealed,\n        string memory _tokenHash,\n        uint256 _nonce,\n        bytes memory _signature\n    ) external virtual override validCardLevel(_cardLevel) {\n        bytes32 messageHash = keccak256(\n            abi.encodePacked(\n                _sourceChainId,\n                _recipient,\n                _cardLevel,\n                _tokenId,\n                _revealed,\n                _tokenHash,\n                _nonce\n            )\n        );\n\n        require(\n            messageHash.recoverSigner(_signature) == owner(),\n            \"Invalid signature\"\n        );\n\n        // Duplicate request, already left bridge\n        if (chainNonceToExecutedMapping[_sourceChainId][_nonce]) {\n            return;\n        }\n\n        chainNonceToExecutedMapping[_sourceChainId][_nonce] = true;\n        PERIv2 vpc = vpcs[_cardLevel - 1];\n        require(\n            _tokenId >= vpc.mintIndexForSale() ||\n                vpc.ownerOf(_tokenId) == address(this),\n            \"VPC not owned by bridge\"\n        );\n\n        // Ensure VPC is minted\n        if (_tokenId >= vpc.mintIndexForSale()) {\n            vpc.ticketMint(_tokenId - vpc.mintIndexForSale() + 1);\n        }\n\n        if (_revealed && !vpc.revealChecked(_tokenId)) {\n            uint256[] memory _tokenIds = new uint256[](1);\n            _tokenIds[0] = _tokenId;\n            string[] memory _tokenHashes = new string[](1);\n            _tokenHashes[0] = _tokenHash;\n\n            vpc.revealTokens(_tokenIds, _tokenHashes);\n        }\n\n        vpc.transferFrom(address(this), _recipient, _tokenId);\n        nend.mint(address(curationRewardPool), vpc.MINT_PRICE());\n\n        emit LeaveBridge(_nonce, _sourceChainId, uint48(block.timestamp));\n    }\n\n    function _substring(\n        string memory str,\n        uint256 startIndex,\n        uint256 endIndex\n    ) internal pure virtual returns (string memory) {\n        bytes memory strBytes = bytes(str);\n        bytes memory result = new bytes(endIndex - startIndex);\n        for (uint256 i = startIndex; i < endIndex; i++) {\n            result[i - startIndex] = strBytes[i];\n        }\n        return string(result);\n    }\n\n    function _isChainSupported(\n        uint256 chainId\n    ) internal view virtual returns (bool) {\n        for (uint256 i = 0; i < supportedChainIds.length; i++) {\n            if (supportedChainIds[i] == chainId) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 500
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}