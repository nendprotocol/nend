{
  "address": "0x7C03C0e909f01f975167E961D03277d910f9e706",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "curationHashes",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "winningOptions",
          "type": "uint8[]"
        }
      ],
      "name": "WinningOptionsSettled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "callbackGasLimitPerWord",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "hashToWinningOption",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "hashes",
          "type": "bytes32[]"
        }
      ],
      "name": "requestCurationWinningOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_gasLimit",
          "type": "uint32"
        }
      ],
      "name": "setCallbackGasLimitPerWord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        }
      ],
      "name": "setCoordinator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "name": "setKeyHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_confirmationCount",
          "type": "uint16"
        }
      ],
      "name": "setRequestConfirmations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vrfCoordinator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x47f083dc12245d9e44c807a97cf0042e8a57578f5eb3d0f82080ce35cafecfb6",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x7E8aE5C72eCA86946b695dCc211863D9721A0961",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "879215",
    "logsBloom": "0x00000000000000000000000000000000000000000000000400800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000020000000000000001000001000000000000800000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa2a12bd3f7cc21b725be9ec7311a7e6d996542c3e3aa26297e814e72676850f6",
    "transactionHash": "0x47f083dc12245d9e44c807a97cf0042e8a57578f5eb3d0f82080ce35cafecfb6",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 22279878,
        "transactionHash": "0x47f083dc12245d9e44c807a97cf0042e8a57578f5eb3d0f82080ce35cafecfb6",
        "address": "0x7C03C0e909f01f975167E961D03277d910f9e706",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007e8ae5c72eca86946b695dcc211863d9721a0961"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0xa2a12bd3f7cc21b725be9ec7311a7e6d996542c3e3aa26297e814e72676850f6"
      }
    ],
    "blockNumber": 22279878,
    "cumulativeGasUsed": "1369684",
    "status": 1,
    "byzantium": true
  },
  "args": [
    91,
    "0xd5D517aBE5cF79B7e95eC98dB0f0277788aFF634",
    "0x83250c5584ffa93feb6ee082981c5ebe484c865196750b39835ad4f13780435d"
  ],
  "numDeployments": 1,
  "solcInputHash": "0ae4e343e63da4670584dc1ef4b5d6c7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"curationHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"winningOptions\",\"type\":\"uint8[]\"}],\"name\":\"WinningOptionsSettled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"callbackGasLimitPerWord\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hashToWinningOption\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"hashes\",\"type\":\"bytes32[]\"}],\"name\":\"requestCurationWinningOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_gasLimit\",\"type\":\"uint32\"}],\"name\":\"setCallbackGasLimitPerWord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"}],\"name\":\"setCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"name\":\"setKeyHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_confirmationCount\",\"type\":\"uint16\"}],\"name\":\"setRequestConfirmations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfCoordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/voting/Gamification.sol\":\"Gamification\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/access/MWOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract MWOwnable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(0x7E8aE5C72eCA86946b695dCc211863D9721A0961);  // Nend Mainnet Main Wallet\\r\\n        // _transferOwnership(0x4a580D71c0F73202C51C58147aA7c7E09245b10A);  // Nend Turbo Main Wallet\\r\\n        // _transferOwnership(0x2F358B80eD2d296C09560d2b9F70a7f81d57e352); // Kong Wallet\\r\\n        // _transferOwnership(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier \\r\\n    onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x71026b1c2671af0f1d6e4c17a3f1d1a291b17725b21e27937369a8be395260c7\",\"license\":\"MIT\"},\"contracts/voting/Gamification.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\ncontract Gamification is VRFConsumerBaseV2, MWOwnable {\\r\\n    event WinningOptionsSettled(bytes32[] curationHashes, uint8[] winningOptions);\\r\\n\\r\\n    VRFCoordinatorV2Interface COORDINATOR;\\r\\n\\r\\n    uint64 public subscriptionId;\\r\\n\\r\\n    address public vrfCoordinator;\\r\\n\\r\\n    bytes32 public keyHash;\\r\\n\\r\\n    uint32 public callbackGasLimitPerWord = 200000;\\r\\n\\r\\n    uint16 public requestConfirmations = 1;\\r\\n\\r\\n    // 0 = Not settled\\r\\n    // 1-5 = Settled (1-indexed, subtract 1 to get actuall off chain winning option)\\r\\n    mapping(bytes32 => uint8) public hashToWinningOption;\\r\\n\\r\\n    mapping(uint256 => bytes32[]) internal requestIdToHashes;\\r\\n\\r\\n    constructor(uint64 _subscriptionId, address _vrfCoordinator, bytes32 _keyHash) VRFConsumerBaseV2(vrfCoordinator) {\\r\\n        COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\\r\\n        subscriptionId = _subscriptionId;\\r\\n        vrfCoordinator = _vrfCoordinator;\\r\\n        keyHash = _keyHash;\\r\\n    }\\r\\n\\r\\n    function setCoordinator(address _vrfCoordinator) external onlyOwner {\\r\\n        vrfCoordinator = _vrfCoordinator;\\r\\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\\r\\n    }\\r\\n\\r\\n    function setKeyHash(bytes32 _keyHash) external onlyOwner {\\r\\n        keyHash = _keyHash;\\r\\n    }\\r\\n\\r\\n    function setCallbackGasLimitPerWord(uint32 _gasLimit) external onlyOwner {\\r\\n        callbackGasLimitPerWord = _gasLimit;\\r\\n    }\\r\\n\\r\\n    function setRequestConfirmations(uint16 _confirmationCount)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        requestConfirmations = _confirmationCount;\\r\\n    }\\r\\n\\r\\n    // Assumes the subscription is funded sufficiently.\\r\\n    function requestCurationWinningOption(bytes32[] memory hashes)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        uint32 numHashes = uint32(hashes.length);\\r\\n\\r\\n        require(\\r\\n            numHashes > 0 && numHashes <= 500,\\r\\n            \\\"Invalid number of random words requested\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < hashes.length; i++) {\\r\\n            require(\\r\\n                hashToWinningOption[hashes[i]] == 0,\\r\\n                \\\"Curation winning option already settled\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Will revert if subscription is not set and funded.\\r\\n        uint256 requestId = COORDINATOR.requestRandomWords(\\r\\n            keyHash,\\r\\n            subscriptionId,\\r\\n            requestConfirmations,\\r\\n            callbackGasLimitPerWord * numHashes,\\r\\n            numHashes\\r\\n        );\\r\\n\\r\\n        requestIdToHashes[requestId] = hashes;\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        bytes32[] memory hashes = requestIdToHashes[requestId];\\r\\n        uint8[] memory options = new uint8[](hashes.length);\\r\\n\\r\\n        require(\\r\\n            hashes.length == randomWords.length,\\r\\n            \\\"Hashes and random words length not matching\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < hashes.length; i++) {\\r\\n            // Settled by another request\\r\\n            if (hashToWinningOption[hashes[i]] != 0) {\\r\\n                options[i] = hashToWinningOption[hashes[i]];\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            uint8 winningOption = uint8(randomWords[i] % 5) + 1;\\r\\n\\r\\n            hashToWinningOption[hashes[i]] = winningOption;\\r\\n            options[i] = winningOption;\\r\\n        }\\r\\n\\r\\n        emit WinningOptionsSettled(hashes, options);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x813157cdfc1d6164e2251746774edec5d4fa926f4d1c1bfd44813c9e04a0775b\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a034610085576001600160401b03601f610e1438819003918201601f19168401918383118584101761008a5780859260609460405283398101031261008557815190811681036100855760208201516001600160a01b038116810361008557604061006d930151916100a0565b604051610cc9908161014b8239608051816106150152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b9060025460018060a01b0380821660805260005492737e8ae5c72eca86946b695dcc211863d9721a09618260018060a01b0319958287821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3640100030d4065ffffffffffff19600454161760045516928360015491600160a01b600160e01b039060a01b169163ffffffff60e01b161717600155161760025560035556fe60806040526004361015610013575b600080fd5b60003560e01c8063040550ce1461013f57806309c1ba2e146101365780631fe543e31461012d57806361728f3914610124578063715018a61461011b57806379a2c3b9146101125780638824f5a7146101095780638cae5eb3146101005780638da5cb5b146100f75780638ea98117146100ee57806398544710146100e5578063a3e56fa8146100dc578063b0fb162f146100d3578063e222be0d146100ca5763f2fde38b146100c257600080fd5b61000e61054b565b5061000e61050b565b5061000e6104e6565b5061000e6104be565b5061000e61049c565b5061000e61045a565b5061000e610410565b5061000e610388565b5061000e61033c565b5061000e610317565b5061000e6102b6565b5061000e610297565b5061000e610208565b5061000e61016f565b503461000e57602036600319011261000e576004356000526005602052602060ff60406000205416604051908152f35b503461000e57600036600319011261000e57602067ffffffffffffffff60015460a01c16604051908152f35b50634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176101d457604052565b6101dc61019b565b604052565b60209067ffffffffffffffff81116101fb575b60051b0190565b61020361019b565b6101f4565b503461000e57604036600319011261000e5760243567ffffffffffffffff811161000e573660238201121561000e57806004013590610246826101e1565b9061025460405192836101b2565b82825260209260248484019160051b8301019136831161000e57602401905b8282106102885761028684600435610608565b005b81358152908401908401610273565b503461000e57600036600319011261000e576020600354604051908152f35b503461000e57600080600319360112610314576102d161077f565b80546001600160a01b031981168255816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e57602063ffffffff60045416604051908152f35b503461000e57602036600319011261000e5760043561ffff8116810361000e5761036461077f565b65ffff000000006004549160201b169065ffff000000001916176004556000604051f35b503461000e5760208060031936011261000e5760043567ffffffffffffffff811161000e573660238201121561000e578060040135906103c7826101e1565b916103d560405193846101b2565b80835260248484019160051b8301019136831161000e57602401905b82821061040157610286846107d7565b813581529084019084016103f1565b503461000e57600036600319011261000e5760206001600160a01b0360005416604051908152f35b602090600319011261000e576004356001600160a01b038116810361000e5790565b503461000e576001600160a01b0361047136610438565b61047961077f565b166001600160a01b03198181600254161760025560015416176001556000604051f35b503461000e57602036600319011261000e576104b661077f565b600435600355005b503461000e57600036600319011261000e5760206001600160a01b0360025416604051908152f35b503461000e57600036600319011261000e57602060045461ffff60405191831c168152f35b503461000e57602036600319011261000e5760043563ffffffff811680910361000e5761053661077f565b63ffffffff1960045416176004556000604051f35b503461000e5761055a36610438565b61056261077f565b6001600160a01b038091169081156105b457600091825491816001600160a01b0319841617845560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b9190916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168033036107615750610654610659916000526006602052604060002090565b610b2b565b6106638151610b7a565b906106718151855114610bac565b60005b815181101561072857806106b26106ac6106a561069461071095876109cc565b516000526005602052604060002090565b5460ff1690565b60ff1690565b6107155761070b6106d96106d46106ac6106cc858b6109cc565b516005900690565b610c0c565b6106f9816106ea61069486896109cc565b9060ff1660ff19825416179055565b61070383876109cc565b9060ff169052565b6109b0565b610674565b61070b6106f96106a561069484876109cc565b507f4f285d82b5a9bc69229b646fca51fc092373640d42423bb68fa3c33d54a0ed5192935061075c60405192839283610c1e565b0390a1565b6044906040519063073e64fd60e21b82523360048301526024820152fd5b6001600160a01b0360005416330361079357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6107df61077f565b805163ffffffff919082166107fd811515828161092f575b5061093c565b60005b825181101561082e578061070b6108236106ac6106a561069461082996896109cc565b156109f6565b610800565b506108ed9060206108f29460015461ffff60006001600160a01b03600354946108c761085f89600454938416610a52565b98604051998a98899788956305d3b1d360e41b87528c1c169067ffffffffffffffff8a60a01c169060048701939160809367ffffffffffffffff61ffff929897939860a0880199885216602087015216604085015263ffffffff809216606085015216910152565b0393165af1908115610922575b6000916108f4575b506000526006602052604060002090565b610a98565b565b610915915060203d811161091b575b61090d81836101b2565b810190610a7c565b386108dc565b503d610903565b61092a610a8b565b6108d4565b6101f491501115386107f7565b1561094357565b60405162461bcd60e51b815260206004820152602860248201527f496e76616c6964206e756d626572206f662072616e646f6d20776f7264732072604482015267195c5d595cdd195960c21b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b60019060001981146109c0570190565b6109c8610999565b0190565b80518210156109e05760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b156109fd57565b60405162461bcd60e51b815260206004820152602760248201527f4375726174696f6e2077696e6e696e67206f7074696f6e20616c7265616479206044820152661cd95d1d1b195960ca1b6064820152608490fd5b63ffffffff9182809216918291169204821181151516610a70570290565b610a78610999565b0290565b9081602091031261000e575190565b506040513d6000823e3d90fd5b815191680100000000000000008311610b1e575b8154838355808410610af5575b50610ace602080920192600052602060002090565b6000925b848410610ae0575050505050565b60018382829351855501920193019290610ad2565b6000838152846020822092830192015b828110610b13575050610ab9565b818155600101610b05565b610b2661019b565b610aac565b9060405191828154918282526020928383019160005283600020936000905b828210610b60575050506108f2925003836101b2565b855484526001958601958895509381019390910190610b4a565b90610b84826101e1565b610b9160405191826101b2565b8281528092610ba2601f19916101e1565b0190602036910137565b15610bb357565b60405162461bcd60e51b815260206004820152602b60248201527f48617368657320616e642072616e646f6d20776f726473206c656e677468206e60448201526a6f74206d61746368696e6760a81b6064820152608490fd5b60ff6001911660fe81116109c0570190565b6040810190604081528251809252606081019160208094019060005b818110610c7f575050508281830391015281808451928381520193019160005b828110610c68575050505090565b835160ff1685529381019392810192600101610c5a565b825185529385019391850191600101610c3a56fea26469706673582212203f6e9782a8a96e3e502a436afc8999cbb595779a1178fd43acc42a2a009c1a8c64736f6c634300080e0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c8063040550ce1461013f57806309c1ba2e146101365780631fe543e31461012d57806361728f3914610124578063715018a61461011b57806379a2c3b9146101125780638824f5a7146101095780638cae5eb3146101005780638da5cb5b146100f75780638ea98117146100ee57806398544710146100e5578063a3e56fa8146100dc578063b0fb162f146100d3578063e222be0d146100ca5763f2fde38b146100c257600080fd5b61000e61054b565b5061000e61050b565b5061000e6104e6565b5061000e6104be565b5061000e61049c565b5061000e61045a565b5061000e610410565b5061000e610388565b5061000e61033c565b5061000e610317565b5061000e6102b6565b5061000e610297565b5061000e610208565b5061000e61016f565b503461000e57602036600319011261000e576004356000526005602052602060ff60406000205416604051908152f35b503461000e57600036600319011261000e57602067ffffffffffffffff60015460a01c16604051908152f35b50634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176101d457604052565b6101dc61019b565b604052565b60209067ffffffffffffffff81116101fb575b60051b0190565b61020361019b565b6101f4565b503461000e57604036600319011261000e5760243567ffffffffffffffff811161000e573660238201121561000e57806004013590610246826101e1565b9061025460405192836101b2565b82825260209260248484019160051b8301019136831161000e57602401905b8282106102885761028684600435610608565b005b81358152908401908401610273565b503461000e57600036600319011261000e576020600354604051908152f35b503461000e57600080600319360112610314576102d161077f565b80546001600160a01b031981168255816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e57602063ffffffff60045416604051908152f35b503461000e57602036600319011261000e5760043561ffff8116810361000e5761036461077f565b65ffff000000006004549160201b169065ffff000000001916176004556000604051f35b503461000e5760208060031936011261000e5760043567ffffffffffffffff811161000e573660238201121561000e578060040135906103c7826101e1565b916103d560405193846101b2565b80835260248484019160051b8301019136831161000e57602401905b82821061040157610286846107d7565b813581529084019084016103f1565b503461000e57600036600319011261000e5760206001600160a01b0360005416604051908152f35b602090600319011261000e576004356001600160a01b038116810361000e5790565b503461000e576001600160a01b0361047136610438565b61047961077f565b166001600160a01b03198181600254161760025560015416176001556000604051f35b503461000e57602036600319011261000e576104b661077f565b600435600355005b503461000e57600036600319011261000e5760206001600160a01b0360025416604051908152f35b503461000e57600036600319011261000e57602060045461ffff60405191831c168152f35b503461000e57602036600319011261000e5760043563ffffffff811680910361000e5761053661077f565b63ffffffff1960045416176004556000604051f35b503461000e5761055a36610438565b61056261077f565b6001600160a01b038091169081156105b457600091825491816001600160a01b0319841617845560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b9190916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168033036107615750610654610659916000526006602052604060002090565b610b2b565b6106638151610b7a565b906106718151855114610bac565b60005b815181101561072857806106b26106ac6106a561069461071095876109cc565b516000526005602052604060002090565b5460ff1690565b60ff1690565b6107155761070b6106d96106d46106ac6106cc858b6109cc565b516005900690565b610c0c565b6106f9816106ea61069486896109cc565b9060ff1660ff19825416179055565b61070383876109cc565b9060ff169052565b6109b0565b610674565b61070b6106f96106a561069484876109cc565b507f4f285d82b5a9bc69229b646fca51fc092373640d42423bb68fa3c33d54a0ed5192935061075c60405192839283610c1e565b0390a1565b6044906040519063073e64fd60e21b82523360048301526024820152fd5b6001600160a01b0360005416330361079357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6107df61077f565b805163ffffffff919082166107fd811515828161092f575b5061093c565b60005b825181101561082e578061070b6108236106ac6106a561069461082996896109cc565b156109f6565b610800565b506108ed9060206108f29460015461ffff60006001600160a01b03600354946108c761085f89600454938416610a52565b98604051998a98899788956305d3b1d360e41b87528c1c169067ffffffffffffffff8a60a01c169060048701939160809367ffffffffffffffff61ffff929897939860a0880199885216602087015216604085015263ffffffff809216606085015216910152565b0393165af1908115610922575b6000916108f4575b506000526006602052604060002090565b610a98565b565b610915915060203d811161091b575b61090d81836101b2565b810190610a7c565b386108dc565b503d610903565b61092a610a8b565b6108d4565b6101f491501115386107f7565b1561094357565b60405162461bcd60e51b815260206004820152602860248201527f496e76616c6964206e756d626572206f662072616e646f6d20776f7264732072604482015267195c5d595cdd195960c21b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b60019060001981146109c0570190565b6109c8610999565b0190565b80518210156109e05760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b156109fd57565b60405162461bcd60e51b815260206004820152602760248201527f4375726174696f6e2077696e6e696e67206f7074696f6e20616c7265616479206044820152661cd95d1d1b195960ca1b6064820152608490fd5b63ffffffff9182809216918291169204821181151516610a70570290565b610a78610999565b0290565b9081602091031261000e575190565b506040513d6000823e3d90fd5b815191680100000000000000008311610b1e575b8154838355808410610af5575b50610ace602080920192600052602060002090565b6000925b848410610ae0575050505050565b60018382829351855501920193019290610ad2565b6000838152846020822092830192015b828110610b13575050610ab9565b818155600101610b05565b610b2661019b565b610aac565b9060405191828154918282526020928383019160005283600020936000905b828210610b60575050506108f2925003836101b2565b855484526001958601958895509381019390910190610b4a565b90610b84826101e1565b610b9160405191826101b2565b8281528092610ba2601f19916101e1565b0190602036910137565b15610bb357565b60405162461bcd60e51b815260206004820152602b60248201527f48617368657320616e642072616e646f6d20776f726473206c656e677468206e60448201526a6f74206d61746368696e6760a81b6064820152608490fd5b60ff6001911660fe81116109c0570190565b6040810190604081528251809252606081019160208094019060005b818110610c7f575050508281830391015281808451928381520193019160005b828110610c68575050505090565b835160ff1685529381019392810192600101610c5a565b825185529385019391850191600101610c3a56fea26469706673582212203f6e9782a8a96e3e502a436afc8999cbb595779a1178fd43acc42a2a009c1a8c64736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8424,
        "contract": "contracts/voting/Gamification.sol:Gamification",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 28277,
        "contract": "contracts/voting/Gamification.sol:Gamification",
        "label": "COORDINATOR",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(VRFCoordinatorV2Interface)146"
      },
      {
        "astId": 28279,
        "contract": "contracts/voting/Gamification.sol:Gamification",
        "label": "subscriptionId",
        "offset": 20,
        "slot": "1",
        "type": "t_uint64"
      },
      {
        "astId": 28281,
        "contract": "contracts/voting/Gamification.sol:Gamification",
        "label": "vrfCoordinator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 28283,
        "contract": "contracts/voting/Gamification.sol:Gamification",
        "label": "keyHash",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 28286,
        "contract": "contracts/voting/Gamification.sol:Gamification",
        "label": "callbackGasLimitPerWord",
        "offset": 0,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 28289,
        "contract": "contracts/voting/Gamification.sol:Gamification",
        "label": "requestConfirmations",
        "offset": 4,
        "slot": "4",
        "type": "t_uint16"
      },
      {
        "astId": 28293,
        "contract": "contracts/voting/Gamification.sol:Gamification",
        "label": "hashToWinningOption",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_uint8)"
      },
      {
        "astId": 28298,
        "contract": "contracts/voting/Gamification.sol:Gamification",
        "label": "requestIdToHashes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(VRFCoordinatorV2Interface)146": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint8)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}