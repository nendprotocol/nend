{
  "address": "0x27437595a65f1fB907754C0347bA741f1Cb5dAFc",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "__MWOwnable_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "authorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periFiAdminAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periFiLoanAddr",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adminAddr",
          "type": "address"
        }
      ],
      "name": "setAdminAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "loanAddr",
          "type": "address"
        }
      ],
      "name": "setLoanAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9bc4e1f1c22681ba84f0ee4e4e2ba583a520b1dfd855def3ad6210ac1e3b9cfe",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x7E8aE5C72eCA86946b695dCc211863D9721A0961",
    "contractAddress": null,
    "transactionIndex": 152,
    "gasUsed": "2637615",
    "logsBloom": "0x
    "blockHash": "0xacce1d727864e297a443b0b46a460876063db09b325b9e04ad5716b10f147555",
    "transactionHash": "0x9bc4e1f1c22681ba84f0ee4e4e2ba583a520b1dfd855def3ad6210ac1e3b9cfe",
    "logs": [
      {
        "transactionIndex": 152,
        "blockNumber": 24042703,
        "transactionHash": "0x9bc4e1f1c22681ba84f0ee4e4e2ba583a520b1dfd855def3ad6210ac1e3b9cfe",
        "address": "0x27437595a65f1fB907754C0347bA741f1Cb5dAFc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007e8ae5c72eca86946b695dcc211863d9721a0961"
        ],
        "data": "0x",
        "logIndex": 349,
        "blockHash": "0xacce1d727864e297a443b0b46a460876063db09b325b9e04ad5716b10f147555"
      },
      {
        "transactionIndex": 152,
        "blockNumber": 24042703,
        "transactionHash": "0x9bc4e1f1c22681ba84f0ee4e4e2ba583a520b1dfd855def3ad6210ac1e3b9cfe",
        "address": "0x27437595a65f1fB907754C0347bA741f1Cb5dAFc",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 350,
        "blockHash": "0xacce1d727864e297a443b0b46a460876063db09b325b9e04ad5716b10f147555"
      }
    ],
    "blockNumber": 24042703,
    "cumulativeGasUsed": "21389485",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5f4e724599e3a7403e26c4f96c760b8c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__MWOwnable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periFiAdminAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periFiLoanAddr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddr\",\"type\":\"address\"}],\"name\":\"setAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"loanAddr\",\"type\":\"address\"}],\"name\":\"setLoanAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/loan/TrustDeed.sol\":\"TrustDeed\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x2a6a0b9fd2d316dcb4141159a9d13be92654066d6c0ae92757ed908ecdfecff0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\\n    function __ERC721Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x03006ed332e7aab87b6aacc771da96e3854bfe1624e1741ede27392dd3df41cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, ERC721Upgradeable {\\n    function __ERC721URIStorage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xbd5c6f8268a1d477f6a746ebedaf7fbcf412186f0c1c54ee104547cfb5e18edd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x84ac2d2f343df1e683da7a12bbcf70db542a7a7a0cea90a5d70fcb5e5d035481\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/PeriFiAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\nimport \\\"./access/MWOwnable.sol\\\";\\r\\n\\r\\ncontract PeriFiAdmin is MWOwnable {\\r\\n    uint256 public maximumLoanDuration = 53 weeks;\\r\\n    uint256 public maximumNumberOfActiveLoans = 100;\\r\\n\\r\\n    uint256 public poolCommissionIFPUpTo20 = 4000;\\r\\n    uint256 public poolCommissionIFPUpTo30 = 4500;\\r\\n    uint256 public poolCommissionIFPUpTo40 = 5000;\\r\\n    uint256 public poolCommissionIFPUpTo50 = 5000;\\r\\n    uint256 public poolCommissionIFPUpTo60 = 5500;\\r\\n    uint256 public poolCommissionIFPUpTo70 = 6000;\\r\\n    uint256 public poolCommissionIFPUpTo80 = 7000;\\r\\n    uint256 public poolCommissionIFPUpTo90 = 8000;\\r\\n    uint256 public poolCommissionIFPUpTo100 = 9000;\\r\\n\\r\\n    uint256 public ivCommissionForIFP = 500; // 5%\\r\\n    uint256 public commissionForIFL = 500;\\r\\n    \\r\\n    // uint256 public loanCommissionInBasisPoints = 500; // 5%\\r\\n    uint256 public preLiquidationDuration = 24 hours;\\r\\n    uint256 public claimCollateralDuration = 24 hours;\\r\\n    uint256 public liquidateProtectionDuration = 48 hours;\\r\\n    \\r\\n    uint256 public liquidationThresholdInBasisPoints = 8000; // 80%\\r\\n    \\r\\n    function updateMaximumLoanDuration(uint256 _newMaximumLoanDuration) external onlyOwner {\\r\\n        require(_newMaximumLoanDuration <= uint256(~uint32(0)), 'loan duration cannot exceed space alotted in struct');\\r\\n        maximumLoanDuration = _newMaximumLoanDuration;\\r\\n    }\\r\\n\\r\\n    function updateMaximumNumberOfActiveLoans(uint256 _newMaximumNumberOfActiveLoans) external onlyOwner {\\r\\n        maximumNumberOfActiveLoans = _newMaximumNumberOfActiveLoans;\\r\\n    }\\r\\n    function updatePoolCommission(uint256 leveragePercent, uint256 poolCommissionInBasisPoint) external onlyOwner {\\r\\n        require(leveragePercent % 10 == 0, \\\"leveragePercent must be multiples of 10\\\");\\r\\n        require(leveragePercent >= 20, \\\"leveragePercent must be bigger than or equal to 20\\\");\\r\\n        require(leveragePercent <= 100, \\\"leveragePercent must be smaller than or equal to 100\\\");\\r\\n\\r\\n        if (leveragePercent == 20){\\r\\n            poolCommissionIFPUpTo20 = poolCommissionInBasisPoint;\\r\\n        } else if (leveragePercent == 30){\\r\\n            poolCommissionIFPUpTo30 = poolCommissionInBasisPoint;\\r\\n        } else if (leveragePercent == 40){\\r\\n            poolCommissionIFPUpTo40 = poolCommissionInBasisPoint;\\r\\n        } else if (leveragePercent == 50){\\r\\n            poolCommissionIFPUpTo50 = poolCommissionInBasisPoint;\\r\\n        } else if (leveragePercent == 60){\\r\\n            poolCommissionIFPUpTo60 = poolCommissionInBasisPoint;\\r\\n        } else if (leveragePercent == 70){\\r\\n            poolCommissionIFPUpTo70 = poolCommissionInBasisPoint;\\r\\n        } else if (leveragePercent == 80){\\r\\n            poolCommissionIFPUpTo80 = poolCommissionInBasisPoint;\\r\\n        } else if (leveragePercent == 90){\\r\\n            poolCommissionIFPUpTo90 = poolCommissionInBasisPoint;\\r\\n        } else if (leveragePercent == 100){\\r\\n            poolCommissionIFPUpTo100 = poolCommissionInBasisPoint;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function updateIVCommissionForIFP(uint256 _newIVCommissionForIFP) external onlyOwner {\\r\\n        require(_newIVCommissionForIFP <= 10000, 'By definition, basis points cannot exceed 10000');\\r\\n        ivCommissionForIFP = _newIVCommissionForIFP;\\r\\n        // emit InterestForIVUpdated(_newInterestForIVInBasisPoints);\\r\\n    }\\r\\n\\r\\n    function updateCommissionForIFL(uint256 _newCommissionForIFL) external onlyOwner {\\r\\n        require(_newCommissionForIFL <= 10000, 'By definition, basis points cannot exceed 10000');\\r\\n        commissionForIFL = _newCommissionForIFL;\\r\\n        // emit InterestForIVUpdated(_newInterestForIVInBasisPoints);\\r\\n    }\\r\\n    \\r\\n\\r\\n    function updateLiquidateProtectionDuration(uint256 _newLiquidateProtectionDuration) external onlyOwner {\\r\\n        liquidateProtectionDuration = _newLiquidateProtectionDuration;\\r\\n    }\\r\\n\\r\\n    function updatePreLiquidationDuration(uint256 _newPreLiquidationDuration) external onlyOwner {\\r\\n        preLiquidationDuration = _newPreLiquidationDuration;\\r\\n    }\\r\\n    function updateClaimCollateralDuration(uint256 _newClaimCollateralDuration) external onlyOwner {\\r\\n        claimCollateralDuration = _newClaimCollateralDuration;\\r\\n    }\\r\\n\\r\\n    function updateLiquidationThreshold(uint256 _newLiquidationThresholdInBasisPoints) external onlyOwner {\\r\\n        require(_newLiquidationThresholdInBasisPoints <= 10000, 'By definition, basis points cannot exceed 10000');\\r\\n        liquidationThresholdInBasisPoints = _newLiquidationThresholdInBasisPoints;\\r\\n        // emit InterestForIVUpdated(_newLiquidationThresholdInBasisPoints);\\r\\n    }\\r\\n\\r\\n    // function updateloanCommissionInBasisPoints(uint256 _newLoanCommissionInBasisPoints) external onlyOwner {\\r\\n    //     require(_newLoanCommissionInBasisPoints <= 10000, 'By definition, basis points cannot exceed 10000');\\r\\n    //     loanCommissionInBasisPoints = _newLoanCommissionInBasisPoints;\\r\\n    //     // emit LoanCommissionUpdated(_newLoanCommissionInBasisPoints);\\r\\n    // }\\r\\n}\\r\\n    // event InterestForIVUpdated(\\r\\n    //     uint256 basisPointValue\\r\\n    // );\\r\\n\\r\\n    // event LoanCommissionUpdated(\\r\\n    //     uint256 basisPointValue\\r\\n    // );\\r\\n\\r\\n    // event LiquidationThresholdUpdated(\\r\\n    //     uint256 basisPointValue\\r\\n    // );\\r\\n\\r\\n    // event ProtectionDurationUpdated(\\r\\n    //     uint256 durationInSeconds\\r\\n    // );\\r\\n\\r\\n    // event LiquidateDurationUpdated(\\r\\n    //     uint256 durationInSeconds\\r\\n    // );\\r\\n\\r\\n    // event ERC20WhiteListConfigured(\\r\\n    //     address erc20,\\r\\n    //     bool isWhitelisted\\r\\n    // );\\r\\n\\r\\n    // event CollectionLeverageConfigured(\\r\\n    //     address collection,\\r\\n    //     bool isAllowed\\r\\n    // );\\r\\n\\r\\n    // event CollectionHealthFactorConfigured(\\r\\n    //     address collection,\\r\\n    //     bool isTrakcked\\r\\n    // );\\r\\n\\r\\n    // @notice A mapping from from an ERC20 currency address to whether that\\r\\n    //         currency is whitelisted to be used by this contract.\\r\\n    // mapping (address => bool) public erc20CurrencyIsWhitelisted;\\r\\n\\r\\n    // mapping (address => bool) public leverageAvailableCollections;\\r\\n\\r\\n    // mapping (address => bool) public healthFactorEnabledCollection;\\r\\n    // @notice The percentage of interest earned by lenders on this platform\\r\\n    //         that is taken by the contract admin's as a fee, measured in\\r\\n    //         basis points (hundreths of a percent).\\r\\n    \\r\\n    // function whitelistERC20Currency(address _erc20Currency, bool _setAsWhitelisted) external onlyOwner {\\r\\n    //     erc20CurrencyIsWhitelisted[_erc20Currency] = _setAsWhitelisted;\\r\\n    //     emit ERC20WhiteListConfigured(_erc20Currency, _setAsWhitelisted);\\r\\n    // }\\r\\n\\r\\n    // function setLeverageOnCollection(address collection, bool allowed) external onlyOwner {\\r\\n    //     leverageAvailableCollections[collection] = allowed;\\r\\n    //     emit CollectionLeverageConfigured(collection, allowed);\\r\\n    // }\\r\\n\\r\\n    // function setHealthFactorOnCollection(address collection, bool tracked) external onlyOwner {\\r\\n    //     healthFactorEnabledCollection[collection] = tracked;\\r\\n    //     emit CollectionHealthFactorConfigured(collection, tracked);\\r\\n    // }\\r\\n\",\"keccak256\":\"0x2b1ad4777cc1fdc7307fd9b562e28ef2f8f32e8efc4d4c09ce2c9130b06e152c\",\"license\":\"MIT\"},\"contracts/access/MWOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract MWOwnable is Initializable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() initializer {\\r\\n        _transferOwnership(0x7E8aE5C72eCA86946b695dCc211863D9721A0961);\\r\\n    }\\r\\n\\r\\n    function __MWOwnable_init() public virtual onlyInitializing {\\r\\n        _transferOwnership(0x7E8aE5C72eCA86946b695dCc211863D9721A0961);  // Nend Mainnet Main Wallet\\r\\n        // _transferOwnership(0x4a580D71c0F73202C51C58147aA7c7E09245b10A); // Nend Testnet/Turbo Main Wallet\\r\\n        // _transferOwnership(0x2F358B80eD2d296C09560d2b9F70a7f81d57e352); // Kong Wallet\\r\\n        // _transferOwnership(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4); // Remix test wallet\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x7ef8a1586453a8f1fa99a90c7a97d141e3d1e584fe11b625244c19a22dfc179f\",\"license\":\"MIT\"},\"contracts/access/SimpleRoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract SimpleRoleAccess is MWOwnable {\\r\\n    mapping(address => mapping(string => bool)) public hasRole;\\r\\n\\r\\n    function authorize(\\r\\n        address operator,\\r\\n        string memory role,\\r\\n        bool authorized\\r\\n    ) public onlyOwner {\\r\\n        hasRole[operator][role] = authorized;\\r\\n    }\\r\\n\\r\\n    modifier onlyRole(string memory _role) virtual {\\r\\n        require(\\r\\n            msg.sender == owner() || hasRole[msg.sender][_role],\\r\\n            \\\"Not authorized\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasAllRoles(string[] memory _roles) virtual {\\r\\n        for (uint256 i = 0; i < _roles.length; i++) {\\r\\n            require(hasRole[msg.sender][_roles[i]], \\\"Not authorized\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasSomeRoles(string[] memory _roles) virtual {\\r\\n        bool _hasRole;\\r\\n        for (uint256 i = 0; i < _roles.length; i++) {\\r\\n            if (hasRole[msg.sender][_roles[i]]) {\\r\\n                _hasRole = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(_hasRole, \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcda400188b817a7c5311ef3c5de33e0d404621eea1f3e2b446c0c666981a8f86\",\"license\":\"UNLICENSED\"},\"contracts/helpers/SignatureHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SignatureHelper {\\r\\n    function recoverSigner(bytes32 messageHash, bytes memory signature)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address)\\r\\n    {\\r\\n        (bytes32 r, bytes32 s, uint8 v) = splitSig(signature);\\r\\n\\r\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\r\\n        bytes32 prefixedHashMessage = keccak256(\\r\\n            abi.encodePacked(prefix, messageHash)\\r\\n        );\\r\\n\\r\\n        return ecrecover(prefixedHashMessage, v, r, s);\\r\\n    }\\r\\n\\r\\n    function splitSig(bytes memory signature)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            bytes32 r,\\r\\n            bytes32 s,\\r\\n            uint8 v\\r\\n        )\\r\\n    {\\r\\n        assembly {\\r\\n            r := mload(add(signature, 32))\\r\\n            s := mload(add(signature, 64))\\r\\n            v := and(mload(add(signature, 65)), 255)\\r\\n        }\\r\\n        if (v < 27) v += 27;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2aad6f30ae6e31239a36a51948c87c8d2e08a4f437d5f6c1a1e0029fee947cd8\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/AmountDerivationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\n/**\\r\\n * @title AmountDerivationErrors\\r\\n * @author 0age\\r\\n * @notice AmountDerivationErrors contains errors related to amount derivation.\\r\\n */\\r\\ninterface AmountDerivationErrors {\\r\\n    /**\\r\\n     * @dev Revert with an error when attempting to apply a fraction as part of\\r\\n     *      a partial fill that does not divide the target amount cleanly.\\r\\n     */\\r\\n    error InexactFraction();\\r\\n}\\r\\n\",\"keccak256\":\"0x9ee3f62d72d01d6a2857c175c37f2bdef9392ff60cac73ae7b3d675091c4e50a\",\"license\":\"MIT\"},\"contracts/interfaces/INonStandardERC721Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\ninterface INonStandardERC721Transfer {\\r\\n    function transfer(address _to, uint256 _tokenId) external;\\r\\n}\",\"keccak256\":\"0xf0275ae7744cfd88d635c05f092bf329b8e5a7e26070a7087266058ff282d7a8\",\"license\":\"MIT\"},\"contracts/lib/AmountDeriver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.13;\\r\\n\\r\\n// prettier-ignore\\r\\nimport {\\r\\n    AmountDerivationErrors\\r\\n} from \\\"../interfaces/AmountDerivationErrors.sol\\\";\\r\\n\\r\\nimport \\\"./ConsiderationConstants.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title AmountDeriver\\r\\n * @author 0age\\r\\n * @notice AmountDeriver contains view and pure functions related to deriving\\r\\n *         item amounts based on partial fill quantity and on linear\\r\\n *         interpolation based on current time when the start amount and end\\r\\n *         amount differ.\\r\\n */\\r\\ncontract AmountDeriver is AmountDerivationErrors {\\r\\n\\r\\n    /**\\r\\n     * @dev Internal view function to derive the current amount of a given item\\r\\n     *      based on the current price, the starting price, and the ending\\r\\n     *      price. If the start and end prices differ, the current price will be\\r\\n     *      interpolated on a linear basis. Note that this function expects that\\r\\n     *      the startTime parameter of orderParameters is not greater than the\\r\\n     *      current block timestamp and that the endTime parameter is greater\\r\\n     *      than the current block timestamp. If this condition is not upheld,\\r\\n     *      duration / elapsed / remaining variables will underflow.\\r\\n     *\\r\\n     * @param startAmount The starting amount of the item.\\r\\n     * @param endAmount   The ending amount of the item.\\r\\n     * @param startTime   The starting time of the order.\\r\\n     * @param endTime     The end time of the order.\\r\\n     * @param roundUp     A boolean indicating whether the resultant amount\\r\\n     *                    should be rounded up or down.\\r\\n     *\\r\\n     * @return amount The current amount.\\r\\n     */\\r\\n    function _locateCurrentAmount(\\r\\n        uint256 startAmount,\\r\\n        uint256 endAmount,\\r\\n        uint256 startTime,\\r\\n        uint256 endTime,\\r\\n        bool roundUp\\r\\n    ) internal view returns (uint256 amount) {\\r\\n        // Only modify end amount if it doesn't already equal start amount.\\r\\n        if (startAmount != endAmount) {\\r\\n            // Declare variables to derive in the subsequent unchecked scope.\\r\\n            uint256 duration;\\r\\n            uint256 elapsed;\\r\\n            uint256 remaining;\\r\\n\\r\\n            // Skip underflow checks as startTime <= block.timestamp < endTime.\\r\\n            unchecked {\\r\\n                // Derive the duration for the order and place it on the stack.\\r\\n                duration = endTime - startTime;\\r\\n\\r\\n                // Derive time elapsed since the order started & place on stack.\\r\\n                elapsed = block.timestamp - startTime;\\r\\n\\r\\n                // Derive time remaining until order expires and place on stack.\\r\\n                remaining = duration - elapsed;\\r\\n            }\\r\\n\\r\\n            // Aggregate new amounts weighted by time with rounding factor.\\r\\n            uint256 totalBeforeDivision = ((startAmount * remaining) +\\r\\n                (endAmount * elapsed));\\r\\n\\r\\n            // Use assembly to combine operations and skip divide-by-zero check.\\r\\n            assembly {\\r\\n                // Multiply by iszero(iszero(totalBeforeDivision)) to ensure\\r\\n                // amount is set to zero if totalBeforeDivision is zero,\\r\\n                // as intermediate overflow can occur if it is zero.\\r\\n                amount := mul(\\r\\n                    iszero(iszero(totalBeforeDivision)),\\r\\n                    // Subtract 1 from the numerator and add 1 to the result if\\r\\n                    // roundUp is true to get the proper rounding direction.\\r\\n                    // Division is performed with no zero check as duration\\r\\n                    // cannot be zero as long as startTime < endTime.\\r\\n                    add(\\r\\n                        div(sub(totalBeforeDivision, roundUp), duration),\\r\\n                        roundUp\\r\\n                    )\\r\\n                )\\r\\n            }\\r\\n\\r\\n            // Return the current amount.\\r\\n            return amount;\\r\\n        }\\r\\n\\r\\n        // Return the original amount as startAmount == endAmount.\\r\\n        return endAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal pure function to return a fraction of a given value and to\\r\\n     *      ensure the resultant value does not have any fractional component.\\r\\n     *      Note that this function assumes that zero will never be supplied as\\r\\n     *      the denominator parameter; invalid / undefined behavior will result\\r\\n     *      should a denominator of zero be provided.\\r\\n     *\\r\\n     * @param numerator   A value indicating the portion of the order that\\r\\n     *                    should be filled.\\r\\n     * @param denominator A value indicating the total size of the order. Note\\r\\n     *                    that this value cannot be equal to zero.\\r\\n     * @param value       The value for which to compute the fraction.\\r\\n     *\\r\\n     * @return newValue The value after applying the fraction.\\r\\n     */\\r\\n    function _getFraction(\\r\\n        uint256 numerator,\\r\\n        uint256 denominator,\\r\\n        uint256 value\\r\\n    ) internal pure returns (uint256 newValue) {\\r\\n        // Return value early in cases where the fraction resolves to 1.\\r\\n        if (numerator == denominator) {\\r\\n            return value;\\r\\n        }\\r\\n\\r\\n        // Ensure fraction can be applied to the value with no remainder. Note\\r\\n        // that the denominator cannot be zero.\\r\\n        assembly {\\r\\n            // Ensure new value contains no remainder via mulmod operator.\\r\\n            // Credit to @hrkrshnn + @axic for proposing this optimal solution.\\r\\n            if mulmod(value, numerator, denominator) {\\r\\n                mstore(0, InexactFraction_error_signature)\\r\\n                revert(0, InexactFraction_error_len)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Multiply the numerator by the value and ensure no overflow occurs.\\r\\n        uint256 valueTimesNumerator = value * numerator;\\r\\n\\r\\n        // Divide and check for remainder. Note that denominator cannot be zero.\\r\\n        assembly {\\r\\n            // Perform division without zero check.\\r\\n            newValue := div(valueTimesNumerator, denominator)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal view function to apply a fraction to a consideration\\r\\n     * or offer item.\\r\\n     *\\r\\n     * @param startAmount     The starting amount of the item.\\r\\n     * @param endAmount       The ending amount of the item.\\r\\n     * @param numerator       A value indicating the portion of the order that\\r\\n     *                        should be filled.\\r\\n     * @param denominator     A value indicating the total size of the order.\\r\\n     * @param startTime       The starting time of the order.\\r\\n     * @param endTime         The end time of the order.\\r\\n     * @param roundUp         A boolean indicating whether the resultant\\r\\n     *                        amount should be rounded up or down.\\r\\n     *\\r\\n     * @return amount The received item to transfer with the final amount.\\r\\n     */\\r\\n    function _applyFraction(\\r\\n        uint256 startAmount,\\r\\n        uint256 endAmount,\\r\\n        uint256 numerator,\\r\\n        uint256 denominator,\\r\\n        uint256 startTime,\\r\\n        uint256 endTime,\\r\\n        bool roundUp\\r\\n    ) internal view returns (uint256 amount) {\\r\\n        // If start amount equals end amount, apply fraction to end amount.\\r\\n        if (startAmount == endAmount) {\\r\\n            // Apply fraction to end amount.\\r\\n            amount = _getFraction(numerator, denominator, endAmount);\\r\\n        } else {\\r\\n            // Otherwise, apply fraction to both and interpolated final amount.\\r\\n            amount = _locateCurrentAmount(\\r\\n                _getFraction(numerator, denominator, startAmount),\\r\\n                _getFraction(numerator, denominator, endAmount),\\r\\n                startTime,\\r\\n                endTime,\\r\\n                roundUp\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x37ab0810e3d319960e52fab4812d2985a22c11450824e29647b29522071a1377\",\"license\":\"MIT\"},\"contracts/lib/ConsiderationConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\n/*\\r\\n * -------------------------- Disambiguation & Other Notes ---------------------\\r\\n *    - The term \\\"head\\\" is used as it is in the documentation for ABI encoding,\\r\\n *      but only in reference to dynamic types, i.e. it always refers to the\\r\\n *      offset or pointer to the body of a dynamic type. In calldata, the head\\r\\n *      is always an offset (relative to the parent object), while in memory,\\r\\n *      the head is always the pointer to the body. More information found here:\\r\\n *      https://docs.soliditylang.org/en/v0.8.14/abi-spec.html#argument-encoding\\r\\n *        - Note that the length of an array is separate from and precedes the\\r\\n *          head of the array.\\r\\n *\\r\\n *    - The term \\\"body\\\" is used in place of the term \\\"head\\\" used in the ABI\\r\\n *      documentation. It refers to the start of the data for a dynamic type,\\r\\n *      e.g. the first word of a struct or the first word of the first element\\r\\n *      in an array.\\r\\n *\\r\\n *    - The term \\\"pointer\\\" is used to describe the absolute position of a value\\r\\n *      and never an offset relative to another value.\\r\\n *        - The suffix \\\"_ptr\\\" refers to a memory pointer.\\r\\n *        - The suffix \\\"_cdPtr\\\" refers to a calldata pointer.\\r\\n *\\r\\n *    - The term \\\"offset\\\" is used to describe the position of a value relative\\r\\n *      to some parent value. For example, OrderParameters_conduit_offset is the\\r\\n *      offset to the \\\"conduit\\\" value in the OrderParameters struct relative to\\r\\n *      the start of the body.\\r\\n *        - Note: Offsets are used to derive pointers.\\r\\n *\\r\\n *    - Some structs have pointers defined for all of their fields in this file.\\r\\n *      Lines which are commented out are fields that are not used in the\\r\\n *      codebase but have been left in for readability.\\r\\n */\\r\\n\\r\\n// Declare constants for name, version, and reentrancy sentinel values.\\r\\n\\r\\n// Name is right padded, so it touches the length which is left padded. This\\r\\n// enables writing both values at once. Length goes at byte 95 in memory, and\\r\\n// name fills bytes 96-109, so both values can be written left-padded to 77.\\r\\nuint256 constant NameLengthPtr = 77;\\r\\nuint256 constant NameWithLength = 0x0d436F6E73696465726174696F6E;\\r\\n\\r\\nuint256 constant Version = 0x312e31;\\r\\nuint256 constant Version_length = 3;\\r\\nuint256 constant Version_shift = 0xe8;\\r\\n\\r\\nuint256 constant _NOT_ENTERED = 1;\\r\\nuint256 constant _ENTERED = 2;\\r\\n\\r\\n// Common Offsets\\r\\n// Offsets for identically positioned fields shared by:\\r\\n// OfferItem, ConsiderationItem, SpentItem, ReceivedItem\\r\\n\\r\\nuint256 constant Common_token_offset = 0x20;\\r\\nuint256 constant Common_identifier_offset = 0x40;\\r\\nuint256 constant Common_amount_offset = 0x60;\\r\\n\\r\\nuint256 constant ReceivedItem_size = 0xa0;\\r\\nuint256 constant ReceivedItem_amount_offset = 0x60;\\r\\nuint256 constant ReceivedItem_recipient_offset = 0x80;\\r\\n\\r\\nuint256 constant ReceivedItem_CommonParams_size = 0x60;\\r\\n\\r\\nuint256 constant ConsiderationItem_recipient_offset = 0xa0;\\r\\n// Store the same constant in an abbreviated format for a line length fix.\\r\\nuint256 constant ConsiderItem_recipient_offset = 0xa0;\\r\\n\\r\\nuint256 constant Execution_offerer_offset = 0x20;\\r\\nuint256 constant Execution_conduit_offset = 0x40;\\r\\n\\r\\nuint256 constant InvalidFulfillmentComponentData_error_signature = (\\r\\n    0x7fda727900000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant InvalidFulfillmentComponentData_error_len = 0x04;\\r\\n\\r\\nuint256 constant Panic_error_signature = (\\r\\n    0x4e487b7100000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant Panic_error_offset = 0x04;\\r\\nuint256 constant Panic_error_length = 0x24;\\r\\nuint256 constant Panic_arithmetic = 0x11;\\r\\n\\r\\nuint256 constant MissingItemAmount_error_signature = (\\r\\n    0x91b3e51400000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant MissingItemAmount_error_len = 0x04;\\r\\n\\r\\nuint256 constant OrderParameters_offer_head_offset = 0x40;\\r\\nuint256 constant OrderParameters_consideration_head_offset = 0x60;\\r\\nuint256 constant OrderParameters_conduit_offset = 0x120;\\r\\nuint256 constant OrderParameters_counter_offset = 0x140;\\r\\n\\r\\nuint256 constant Fulfillment_itemIndex_offset = 0x20;\\r\\n\\r\\nuint256 constant AdvancedOrder_numerator_offset = 0x20;\\r\\n\\r\\nuint256 constant AlmostOneWord = 0x1f;\\r\\nuint256 constant OneWord = 0x20;\\r\\nuint256 constant TwoWords = 0x40;\\r\\nuint256 constant ThreeWords = 0x60;\\r\\nuint256 constant FourWords = 0x80;\\r\\nuint256 constant FiveWords = 0xa0;\\r\\n\\r\\nuint256 constant FreeMemoryPointerSlot = 0x40;\\r\\nuint256 constant ZeroSlot = 0x60;\\r\\nuint256 constant DefaultFreeMemoryPointer = 0x80;\\r\\n\\r\\nuint256 constant Slot0x80 = 0x80;\\r\\nuint256 constant Slot0xA0 = 0xa0;\\r\\n\\r\\nuint256 constant BasicOrder_endAmount_cdPtr = 0x104;\\r\\nuint256 constant BasicOrder_common_params_size = 0xa0;\\r\\nuint256 constant BasicOrder_considerationHashesArray_ptr = 0x160;\\r\\n\\r\\nuint256 constant EIP712_Order_size = 0x180;\\r\\nuint256 constant EIP712_OfferItem_size = 0xc0;\\r\\nuint256 constant EIP712_ConsiderationItem_size = 0xe0;\\r\\nuint256 constant AdditionalRecipients_size = 0x40;\\r\\n\\r\\nuint256 constant EIP712_DomainSeparator_offset = 0x02;\\r\\nuint256 constant EIP712_OrderHash_offset = 0x22;\\r\\nuint256 constant EIP712_DigestPayload_size = 0x42;\\r\\n\\r\\nuint256 constant receivedItemsHash_ptr = 0x60;\\r\\n\\r\\n/*\\r\\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\\r\\n *  data for OrderFulfilled\\r\\n *\\r\\n *   event OrderFulfilled(\\r\\n *     bytes32 orderHash,\\r\\n *     address indexed offerer,\\r\\n *     address indexed zone,\\r\\n *     address fulfiller,\\r\\n *     SpentItem[] offer,\\r\\n *       > (itemType, token, id, amount)\\r\\n *     ReceivedItem[] consideration\\r\\n *       > (itemType, token, id, amount, recipient)\\r\\n *   )\\r\\n *\\r\\n *  - 0x00: orderHash\\r\\n *  - 0x20: fulfiller\\r\\n *  - 0x40: offer offset (0x80)\\r\\n *  - 0x60: consideration offset (0x120)\\r\\n *  - 0x80: offer.length (1)\\r\\n *  - 0xa0: offerItemType\\r\\n *  - 0xc0: offerToken\\r\\n *  - 0xe0: offerIdentifier\\r\\n *  - 0x100: offerAmount\\r\\n *  - 0x120: consideration.length (1 + additionalRecipients.length)\\r\\n *  - 0x140: considerationItemType\\r\\n *  - 0x160: considerationToken\\r\\n *  - 0x180: considerationIdentifier\\r\\n *  - 0x1a0: considerationAmount\\r\\n *  - 0x1c0: considerationRecipient\\r\\n *  - ...\\r\\n */\\r\\n\\r\\n// Minimum length of the OrderFulfilled event data.\\r\\n// Must be added to the size of the ReceivedItem array for additionalRecipients\\r\\n// (0xa0 * additionalRecipients.length) to calculate full size of the buffer.\\r\\nuint256 constant OrderFulfilled_baseSize = 0x1e0;\\r\\nuint256 constant OrderFulfilled_selector = (\\r\\n    0x9d9af8e38d66c62e2c12f0225249fd9d721c54b83f48d9352c97c6cacdcb6f31\\r\\n);\\r\\n\\r\\n// Minimum offset in memory to OrderFulfilled event data.\\r\\n// Must be added to the size of the EIP712 hash array for additionalRecipients\\r\\n// (32 * additionalRecipients.length) to calculate the pointer to event data.\\r\\nuint256 constant OrderFulfilled_baseOffset = 0x180;\\r\\nuint256 constant OrderFulfilled_consideration_length_baseOffset = 0x2a0;\\r\\nuint256 constant OrderFulfilled_offer_length_baseOffset = 0x200;\\r\\n\\r\\n// uint256 constant OrderFulfilled_orderHash_offset = 0x00;\\r\\nuint256 constant OrderFulfilled_fulfiller_offset = 0x20;\\r\\nuint256 constant OrderFulfilled_offer_head_offset = 0x40;\\r\\nuint256 constant OrderFulfilled_offer_body_offset = 0x80;\\r\\nuint256 constant OrderFulfilled_consideration_head_offset = 0x60;\\r\\nuint256 constant OrderFulfilled_consideration_body_offset = 0x120;\\r\\n\\r\\n// BasicOrderParameters\\r\\nuint256 constant BasicOrder_parameters_cdPtr = 0x04;\\r\\nuint256 constant BasicOrder_considerationToken_cdPtr = 0x24;\\r\\n// uint256 constant BasicOrder_considerationIdentifier_cdPtr = 0x44;\\r\\nuint256 constant BasicOrder_considerationAmount_cdPtr = 0x64;\\r\\nuint256 constant BasicOrder_offerer_cdPtr = 0x84;\\r\\nuint256 constant BasicOrder_zone_cdPtr = 0xa4;\\r\\nuint256 constant BasicOrder_offerToken_cdPtr = 0xc4;\\r\\n// uint256 constant BasicOrder_offerIdentifier_cdPtr = 0xe4;\\r\\nuint256 constant BasicOrder_offerAmount_cdPtr = 0x104;\\r\\nuint256 constant BasicOrder_basicOrderType_cdPtr = 0x124;\\r\\nuint256 constant BasicOrder_startTime_cdPtr = 0x144;\\r\\n// uint256 constant BasicOrder_endTime_cdPtr = 0x164;\\r\\n// uint256 constant BasicOrder_zoneHash_cdPtr = 0x184;\\r\\n// uint256 constant BasicOrder_salt_cdPtr = 0x1a4;\\r\\nuint256 constant BasicOrder_offererConduit_cdPtr = 0x1c4;\\r\\nuint256 constant BasicOrder_fulfillerConduit_cdPtr = 0x1e4;\\r\\nuint256 constant BasicOrder_totalOriginalAdditionalRecipients_cdPtr = 0x204;\\r\\nuint256 constant BasicOrder_additionalRecipients_head_cdPtr = 0x224;\\r\\nuint256 constant BasicOrder_signature_cdPtr = 0x244;\\r\\nuint256 constant BasicOrder_additionalRecipients_length_cdPtr = 0x264;\\r\\nuint256 constant BasicOrder_additionalRecipients_data_cdPtr = 0x284;\\r\\n\\r\\nuint256 constant BasicOrder_parameters_ptr = 0x20;\\r\\n\\r\\nuint256 constant BasicOrder_basicOrderType_range = 0x18; // 24 values\\r\\n\\r\\n/*\\r\\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\\r\\n *  EIP712 data for ConsiderationItem\\r\\n *   - 0x80: ConsiderationItem EIP-712 typehash (constant)\\r\\n *   - 0xa0: itemType\\r\\n *   - 0xc0: token\\r\\n *   - 0xe0: identifier\\r\\n *   - 0x100: startAmount\\r\\n *   - 0x120: endAmount\\r\\n *   - 0x140: recipient\\r\\n */\\r\\nuint256 constant BasicOrder_considerationItem_typeHash_ptr = 0x80; // memoryPtr\\r\\nuint256 constant BasicOrder_considerationItem_itemType_ptr = 0xa0;\\r\\nuint256 constant BasicOrder_considerationItem_token_ptr = 0xc0;\\r\\nuint256 constant BasicOrder_considerationItem_identifier_ptr = 0xe0;\\r\\nuint256 constant BasicOrder_considerationItem_startAmount_ptr = 0x100;\\r\\nuint256 constant BasicOrder_considerationItem_endAmount_ptr = 0x120;\\r\\n// uint256 constant BasicOrder_considerationItem_recipient_ptr = 0x140;\\r\\n\\r\\n/*\\r\\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\\r\\n *  EIP712 data for OfferItem\\r\\n *   - 0x80:  OfferItem EIP-712 typehash (constant)\\r\\n *   - 0xa0:  itemType\\r\\n *   - 0xc0:  token\\r\\n *   - 0xe0:  identifier (reused for offeredItemsHash)\\r\\n *   - 0x100: startAmount\\r\\n *   - 0x120: endAmount\\r\\n */\\r\\nuint256 constant BasicOrder_offerItem_typeHash_ptr = DefaultFreeMemoryPointer;\\r\\nuint256 constant BasicOrder_offerItem_itemType_ptr = 0xa0;\\r\\nuint256 constant BasicOrder_offerItem_token_ptr = 0xc0;\\r\\n// uint256 constant BasicOrder_offerItem_identifier_ptr = 0xe0;\\r\\n// uint256 constant BasicOrder_offerItem_startAmount_ptr = 0x100;\\r\\nuint256 constant BasicOrder_offerItem_endAmount_ptr = 0x120;\\r\\n\\r\\n/*\\r\\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\\r\\n *  EIP712 data for Order\\r\\n *   - 0x80:   Order EIP-712 typehash (constant)\\r\\n *   - 0xa0:   orderParameters.offerer\\r\\n *   - 0xc0:   orderParameters.zone\\r\\n *   - 0xe0:   keccak256(abi.encodePacked(offerHashes))\\r\\n *   - 0x100:  keccak256(abi.encodePacked(considerationHashes))\\r\\n *   - 0x120:  orderType\\r\\n *   - 0x140:  startTime\\r\\n *   - 0x160:  endTime\\r\\n *   - 0x180:  zoneHash\\r\\n *   - 0x1a0:  salt\\r\\n *   - 0x1c0:  conduit\\r\\n *   - 0x1e0:  _counters[orderParameters.offerer] (from storage)\\r\\n */\\r\\nuint256 constant BasicOrder_order_typeHash_ptr = 0x80;\\r\\nuint256 constant BasicOrder_order_offerer_ptr = 0xa0;\\r\\n// uint256 constant BasicOrder_order_zone_ptr = 0xc0;\\r\\nuint256 constant BasicOrder_order_offerHashes_ptr = 0xe0;\\r\\nuint256 constant BasicOrder_order_considerationHashes_ptr = 0x100;\\r\\nuint256 constant BasicOrder_order_orderType_ptr = 0x120;\\r\\nuint256 constant BasicOrder_order_startTime_ptr = 0x140;\\r\\n// uint256 constant BasicOrder_order_endTime_ptr = 0x160;\\r\\n// uint256 constant BasicOrder_order_zoneHash_ptr = 0x180;\\r\\n// uint256 constant BasicOrder_order_salt_ptr = 0x1a0;\\r\\n// uint256 constant BasicOrder_order_conduitKey_ptr = 0x1c0;\\r\\nuint256 constant BasicOrder_order_counter_ptr = 0x1e0;\\r\\nuint256 constant BasicOrder_additionalRecipients_head_ptr = 0x240;\\r\\nuint256 constant BasicOrder_signature_ptr = 0x260;\\r\\n\\r\\n// Signature-related\\r\\nbytes32 constant EIP2098_allButHighestBitMask = (\\r\\n    0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\r\\n);\\r\\nbytes32 constant ECDSA_twentySeventhAndTwentyEighthBytesSet = (\\r\\n    0x0000000000000000000000000000000000000000000000000000000101000000\\r\\n);\\r\\nuint256 constant ECDSA_MaxLength = 65;\\r\\nuint256 constant ECDSA_signature_s_offset = 0x40;\\r\\nuint256 constant ECDSA_signature_v_offset = 0x60;\\r\\n\\r\\nbytes32 constant EIP1271_isValidSignature_selector = (\\r\\n    0x1626ba7e00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant EIP1271_isValidSignature_signatureHead_negativeOffset = 0x20;\\r\\nuint256 constant EIP1271_isValidSignature_digest_negativeOffset = 0x40;\\r\\nuint256 constant EIP1271_isValidSignature_selector_negativeOffset = 0x44;\\r\\nuint256 constant EIP1271_isValidSignature_calldata_baseLength = 0x64;\\r\\n\\r\\nuint256 constant EIP1271_isValidSignature_signature_head_offset = 0x40;\\r\\n\\r\\n// abi.encodeWithSignature(\\\"NoContract(address)\\\")\\r\\nuint256 constant NoContract_error_signature = (\\r\\n    0x5f15d67200000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant NoContract_error_sig_ptr = 0x0;\\r\\nuint256 constant NoContract_error_token_ptr = 0x4;\\r\\nuint256 constant NoContract_error_length = 0x24; // 4 + 32 == 36\\r\\n\\r\\nuint256 constant EIP_712_PREFIX = (\\r\\n    0x1901000000000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\n\\r\\nuint256 constant ExtraGasBuffer = 0x20;\\r\\nuint256 constant CostPerWord = 3;\\r\\nuint256 constant MemoryExpansionCoefficient = 0x200; // 512\\r\\n\\r\\nuint256 constant Create2AddressDerivation_ptr = 0x0b;\\r\\nuint256 constant Create2AddressDerivation_length = 0x55;\\r\\n\\r\\nuint256 constant MaskOverByteTwelve = (\\r\\n    0x0000000000000000000000ff0000000000000000000000000000000000000000\\r\\n);\\r\\n\\r\\nuint256 constant MaskOverLastTwentyBytes = (\\r\\n    0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff\\r\\n);\\r\\n\\r\\nuint256 constant MaskOverFirstFourBytes = (\\r\\n    0xffffffff00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\n\\r\\nuint256 constant Conduit_execute_signature = (\\r\\n    0x4ce34aa200000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\n\\r\\nuint256 constant MaxUint8 = 0xff;\\r\\nuint256 constant MaxUint120 = 0xffffffffffffffffffffffffffffff;\\r\\n\\r\\nuint256 constant Conduit_execute_ConduitTransfer_ptr = 0x20;\\r\\nuint256 constant Conduit_execute_ConduitTransfer_length = 0x01;\\r\\n\\r\\nuint256 constant Conduit_execute_ConduitTransfer_offset_ptr = 0x04;\\r\\nuint256 constant Conduit_execute_ConduitTransfer_length_ptr = 0x24;\\r\\nuint256 constant Conduit_execute_transferItemType_ptr = 0x44;\\r\\nuint256 constant Conduit_execute_transferToken_ptr = 0x64;\\r\\nuint256 constant Conduit_execute_transferFrom_ptr = 0x84;\\r\\nuint256 constant Conduit_execute_transferTo_ptr = 0xa4;\\r\\nuint256 constant Conduit_execute_transferIdentifier_ptr = 0xc4;\\r\\nuint256 constant Conduit_execute_transferAmount_ptr = 0xe4;\\r\\n\\r\\nuint256 constant OneConduitExecute_size = 0x104;\\r\\n\\r\\n// Sentinel value to indicate that the conduit accumulator is not armed.\\r\\nuint256 constant AccumulatorDisarmed = 0x20;\\r\\nuint256 constant AccumulatorArmed = 0x40;\\r\\nuint256 constant Accumulator_conduitKey_ptr = 0x20;\\r\\nuint256 constant Accumulator_selector_ptr = 0x40;\\r\\nuint256 constant Accumulator_array_offset_ptr = 0x44;\\r\\nuint256 constant Accumulator_array_length_ptr = 0x64;\\r\\n\\r\\nuint256 constant Accumulator_itemSizeOffsetDifference = 0x3c;\\r\\n\\r\\nuint256 constant Accumulator_array_offset = 0x20;\\r\\nuint256 constant Conduit_transferItem_size = 0xc0;\\r\\nuint256 constant Conduit_transferItem_token_ptr = 0x20;\\r\\nuint256 constant Conduit_transferItem_from_ptr = 0x40;\\r\\nuint256 constant Conduit_transferItem_to_ptr = 0x60;\\r\\nuint256 constant Conduit_transferItem_identifier_ptr = 0x80;\\r\\nuint256 constant Conduit_transferItem_amount_ptr = 0xa0;\\r\\n\\r\\n// Declare constant for errors related to amount derivation.\\r\\n// error InexactFraction() @ AmountDerivationErrors.sol\\r\\nuint256 constant InexactFraction_error_signature = (\\r\\n    0xc63cf08900000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant InexactFraction_error_len = 0x04;\\r\\n\\r\\n// Declare constant for errors related to signature verification.\\r\\nuint256 constant Ecrecover_precompile = 1;\\r\\nuint256 constant Ecrecover_args_size = 0x80;\\r\\nuint256 constant Signature_lower_v = 27;\\r\\n\\r\\n// error BadSignatureV(uint8) @ SignatureVerificationErrors.sol\\r\\nuint256 constant BadSignatureV_error_signature = (\\r\\n    0x1f003d0a00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant BadSignatureV_error_offset = 0x04;\\r\\nuint256 constant BadSignatureV_error_length = 0x24;\\r\\n\\r\\n// error InvalidSigner() @ SignatureVerificationErrors.sol\\r\\nuint256 constant InvalidSigner_error_signature = (\\r\\n    0x815e1d6400000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant InvalidSigner_error_length = 0x04;\\r\\n\\r\\n// error InvalidSignature() @ SignatureVerificationErrors.sol\\r\\nuint256 constant InvalidSignature_error_signature = (\\r\\n    0x8baa579f00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant InvalidSignature_error_length = 0x04;\\r\\n\\r\\n// error BadContractSignature() @ SignatureVerificationErrors.sol\\r\\nuint256 constant BadContractSignature_error_signature = (\\r\\n    0x4f7fb80d00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant BadContractSignature_error_length = 0x04;\\r\\n\\r\\nuint256 constant NumBitsAfterSelector = 0xe0;\\r\\n\\r\\n// 69 is the lowest modulus for which the remainder\\r\\n// of every selector other than the two match functions\\r\\n// is greater than those of the match functions.\\r\\nuint256 constant NonMatchSelector_MagicModulus = 69;\\r\\n// Of the two match function selectors, the highest\\r\\n// remainder modulo 69 is 29.\\r\\nuint256 constant NonMatchSelector_MagicRemainder = 0x1d;\\r\\n\",\"keccak256\":\"0x1b14d9576e020dd9ebff527c527dffef06a9bb5fe42b9e9ffc6bf8bcde3201e4\",\"license\":\"MIT\"},\"contracts/loan/LoanAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport { AmountDeriver } from \\\"../lib/AmountDeriver.sol\\\";\\r\\nimport \\\"../PeriFiAdmin.sol\\\";\\r\\nimport \\\"./LoanAuctionEnums.sol\\\";\\r\\nimport \\\"./LoanAuctionEventsAndErrors.sol\\\";\\r\\nimport \\\"./LoanAuctionStructs.sol\\\";\\r\\nimport \\\"./LoanRepaymentCalculator.sol\\\";\\r\\nimport \\\"../vault/Vault.sol\\\";\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\n\\r\\ncontract LoanAuction is\\r\\n    ReentrancyGuard,\\r\\n    AmountDeriver,\\r\\n    LoanAuctionEventsAndErrors,\\r\\n    UUPSUpgradeable,\\r\\n    MWOwnable\\r\\n{\\r\\n    uint256 public auctionCount;\\r\\n    mapping(uint256 => Auction) public auctions;\\r\\n    mapping(uint256 => AuctionStatus) public status;\\r\\n    mapping(uint256 => uint256) public bidAmounts;\\r\\n    mapping(uint256 => address) public bidders;\\r\\n    address public periFiAdminAddr;\\r\\n    address public loanRepaymentAddr;\\r\\n    uint256 public decrementInterval;\\r\\n\\r\\n    function initialize(\\r\\n        address _periFiAdminAddr,\\r\\n        address _loanRepaymentAddr\\r\\n    ) public virtual initializer {\\r\\n        periFiAdminAddr = _periFiAdminAddr;\\r\\n        loanRepaymentAddr = _loanRepaymentAddr;\\r\\n        decrementInterval = 1 days;\\r\\n        \\r\\n        __MWOwnable_init();\\r\\n    }\\r\\n\\r\\n    // display current price\\r\\n\\r\\n    // display price for borrower\\r\\n\\r\\n    function beginAuction(\\r\\n        AuctionParameters calldata params\\r\\n    ) external virtual onlyOwner nonReentrant {\\r\\n        Auction memory auction = Auction({\\r\\n            id: auctionCount,\\r\\n            protectedUntil: 0,\\r\\n            parameters: params\\r\\n        });\\r\\n\\r\\n        address owner = IERC721(params.tokenAddress).ownerOf(params.tokenId);\\r\\n\\r\\n        // We will assume auction contract will hold the defaulted collateral for ease of use.\\r\\n        if (owner != address(this)) {\\r\\n            revert CollateralOwnershipNotTransferred();\\r\\n        }\\r\\n\\r\\n        if (params.startAmount <= params.endAmount) {\\r\\n            revert InvalidPriceRange(params.startAmount, params.endAmount);\\r\\n        }\\r\\n\\r\\n        if (params.startTime >= params.endTime) {\\r\\n            revert InvalidTimeRange(params.startTime, params.endTime);\\r\\n        }\\r\\n\\r\\n        if (block.timestamp >= params.endTime) {\\r\\n            revert InvalidTimeRange(params.startTime, params.endTime);\\r\\n        }\\r\\n\\r\\n        if (params.stepDownConfig.length != 0) {\\r\\n            validateStepDownConfig(\\r\\n                params.startTime,\\r\\n                params.endTime,\\r\\n                params.stepDownConfig\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // set liquidation protection expiration\\r\\n        if (params.isProtected) {\\r\\n            uint256 protection = PeriFiAdmin(periFiAdminAddr)\\r\\n                .liquidateProtectionDuration();\\r\\n            auction.protectedUntil = params.startTime + protection;\\r\\n        }\\r\\n\\r\\n        auctions[auctionCount] = auction;\\r\\n        status[auctionCount] = AuctionStatus.Registered;\\r\\n        auctionCount += 1;\\r\\n        emit LoanAuctionBegun(\\r\\n            auction.id,\\r\\n            params.loanId,\\r\\n            params.tokenAddress,\\r\\n            params.paymentToken,\\r\\n            params.loanBorrower,\\r\\n            params.tokenId,\\r\\n            params.startAmount,\\r\\n            params.endAmount,\\r\\n            params.startTime,\\r\\n            params.endTime,\\r\\n            auction.protectedUntil,\\r\\n            params.loanRepaymentAmount,\\r\\n            params.stepDownConfig\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function makeBid(\\r\\n        uint256 auctionId\\r\\n    ) external virtual nonReentrant returns (bool completed) {\\r\\n        if (status[auctionId] != AuctionStatus.Registered) {\\r\\n            revert AuctionInvalidStatus(auctionId, status[auctionId]);\\r\\n        }\\r\\n\\r\\n        uint256 currentPrice = currentBidPrice(auctionId);\\r\\n\\r\\n        Auction memory item = auctions[auctionId];\\r\\n        AuctionParameters memory params = item.parameters;\\r\\n\\r\\n        if (item.protectedUntil > block.timestamp) {\\r\\n            // hold the asset until the protection period is over\\r\\n            IERC20(params.paymentToken).transferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                currentPrice\\r\\n            );\\r\\n            bidders[auctionId] = msg.sender;\\r\\n            status[auctionId] = AuctionStatus.Protected;\\r\\n            bidAmounts[auctionId] = currentPrice;\\r\\n            emit LoanAuctionSoldAndProtected(\\r\\n                auctionId,\\r\\n                msg.sender,\\r\\n                params.loanBorrower,\\r\\n                currentPrice\\r\\n            );\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        IERC721(params.tokenAddress).transferFrom(\\r\\n            address(this),\\r\\n            msg.sender,\\r\\n            params.tokenId\\r\\n        );\\r\\n\\r\\n        // transfer erc20 from this contract to all the recipients\\r\\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(\\r\\n            loanRepaymentAddr\\r\\n        );\\r\\n        Repayment[] memory repayments = calculator.getDestinations(\\r\\n            params.loanId,\\r\\n            params.loanRepaymentAmount,\\r\\n            params.loanAmount,\\r\\n            params.lender\\r\\n        );\\r\\n        address insuranceVaultAddr = calculator.insuranceVaultAddress();\\r\\n        IERC20 erc20 = IERC20(params.paymentToken);\\r\\n        uint256 bidAmountLeft = currentPrice;\\r\\n        uint256 insuranceLeft = erc20.balanceOf(insuranceVaultAddr);\\r\\n        uint repaymentLength = repayments.length;\\r\\n        for (uint idx = 0; idx < repaymentLength; idx++) {\\r\\n            Repayment memory repaymentItem = repayments[idx];\\r\\n            uint256 paymentLeft = repaymentItem.value;\\r\\n\\r\\n            // cover the repayment from deposit amount from bid\\r\\n            if (bidAmountLeft > 0) {\\r\\n                if (bidAmountLeft >= paymentLeft) {\\r\\n                    console.log(\\r\\n                        \\\"sending from %s to %s, %s\\\",\\r\\n                        msg.sender,\\r\\n                        repaymentItem.targetAddress,\\r\\n                        paymentLeft\\r\\n                    );\\r\\n                    erc20.transferFrom(\\r\\n                        msg.sender,\\r\\n                        repaymentItem.targetAddress,\\r\\n                        paymentLeft\\r\\n                    );\\r\\n                    bidAmountLeft -= paymentLeft;\\r\\n                    continue;\\r\\n                }\\r\\n                console.log(\\r\\n                    \\\"sending partial from %s to %s, %s\\\",\\r\\n                    msg.sender,\\r\\n                    repaymentItem.targetAddress,\\r\\n                    bidAmountLeft\\r\\n                );\\r\\n                erc20.transferFrom(\\r\\n                    msg.sender,\\r\\n                    repaymentItem.targetAddress,\\r\\n                    bidAmountLeft\\r\\n                );\\r\\n                paymentLeft -= bidAmountLeft;\\r\\n                bidAmountLeft = 0;\\r\\n            }\\r\\n            if (insuranceVaultAddr == repaymentItem.targetAddress) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            // if not guaranteed, next\\r\\n            if (!repaymentItem.guaranteed) {\\r\\n                continue;\\r\\n            }\\r\\n            // if guaranteed, pay with insurance\\r\\n            if (insuranceLeft >= paymentLeft) {\\r\\n                console.log(\\r\\n                    \\\"sending from IV to %s, %s\\\",\\r\\n                    repaymentItem.targetAddress,\\r\\n                    paymentLeft\\r\\n                );\\r\\n\\r\\n                Vault(payable(insuranceVaultAddr)).transferERC20(\\r\\n                    params.paymentToken,\\r\\n                    repaymentItem.targetAddress,\\r\\n                    paymentLeft\\r\\n                );\\r\\n                insuranceLeft -= paymentLeft;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            // if insurance can't cover the current payment, pay what it has, and stop\\r\\n            if (insuranceLeft > 0) {\\r\\n                console.log(\\r\\n                    \\\"sending partial from IV to %s, %s\\\",\\r\\n                    repaymentItem.targetAddress,\\r\\n                    insuranceLeft\\r\\n                );\\r\\n                Vault(payable(insuranceVaultAddr)).transferERC20(\\r\\n                    params.paymentToken,\\r\\n                    repaymentItem.targetAddress,\\r\\n                    insuranceLeft\\r\\n                );\\r\\n            }\\r\\n            break;\\r\\n        }\\r\\n        if (bidAmountLeft > 0) {\\r\\n            console.log(\\r\\n                \\\"sending from %s to %s, %s\\\",\\r\\n                msg.sender,\\r\\n                params.loanBorrower,\\r\\n                bidAmountLeft\\r\\n            );\\r\\n            erc20.transferFrom(msg.sender, params.loanBorrower, bidAmountLeft);\\r\\n        }\\r\\n        emit LoanAuctionSoldToBidder(auctionId, msg.sender, currentPrice);\\r\\n        status[auctionId] = AuctionStatus.SoldToBidder;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function claim(uint256 auctionId) external virtual nonReentrant {\\r\\n        if (status[auctionId] != AuctionStatus.Protected) {\\r\\n            revert AuctionInvalidStatus(auctionId, status[auctionId]);\\r\\n        }\\r\\n\\r\\n        Auction memory item = auctions[auctionId];\\r\\n\\r\\n        AuctionParameters memory params = item.parameters;\\r\\n\\r\\n        if (block.timestamp < item.protectedUntil) {\\r\\n            revert ProtectionNotOver();\\r\\n        }\\r\\n\\r\\n        IERC721(params.tokenAddress).transferFrom(\\r\\n            address(this),\\r\\n            msg.sender,\\r\\n            params.tokenId\\r\\n        );\\r\\n        status[auctionId] = AuctionStatus.SoldToBidder;\\r\\n        uint256 bidAmount = bidAmounts[auctionId];\\r\\n        address bidder = bidders[auctionId];\\r\\n\\r\\n        // transfer erc20 from this contract to all the recipients\\r\\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(\\r\\n            loanRepaymentAddr\\r\\n        );\\r\\n        Repayment[] memory repayments = calculator.getDestinations(\\r\\n            params.loanId,\\r\\n            params.loanRepaymentAmount,\\r\\n            params.loanAmount,\\r\\n            params.lender\\r\\n        );\\r\\n\\r\\n        address insuranceVaultAddr = calculator.insuranceVaultAddress();\\r\\n        IERC20 erc20 = IERC20(params.paymentToken);\\r\\n        uint256 bidAmountLeft = bidAmount;\\r\\n        uint256 insuranceLeft = erc20.balanceOf(insuranceVaultAddr);\\r\\n        uint repaymentLength = repayments.length;\\r\\n        for (uint idx = 0; idx < repaymentLength; idx++) {\\r\\n            Repayment memory repaymentItem = repayments[idx];\\r\\n            uint256 paymentLeft = repaymentItem.value;\\r\\n\\r\\n            // cover the repayment from deposit amount from bid\\r\\n            if (bidAmountLeft > 0) {\\r\\n                if (bidAmountLeft >= paymentLeft) {\\r\\n                    console.log(\\r\\n                        \\\"sending from %s to %s, %s\\\",\\r\\n                        address(this),\\r\\n                        repaymentItem.targetAddress,\\r\\n                        paymentLeft\\r\\n                    );\\r\\n                    erc20.transfer(repaymentItem.targetAddress, paymentLeft);\\r\\n                    bidAmountLeft -= paymentLeft;\\r\\n                    continue;\\r\\n                }\\r\\n                console.log(\\r\\n                    \\\"sending partial from %s to %s, %s\\\",\\r\\n                    address(this),\\r\\n                    repaymentItem.targetAddress,\\r\\n                    bidAmountLeft\\r\\n                );\\r\\n                erc20.transfer(repaymentItem.targetAddress, bidAmountLeft);\\r\\n                paymentLeft -= bidAmountLeft;\\r\\n                bidAmountLeft = 0;\\r\\n            }\\r\\n            if (insuranceVaultAddr == repaymentItem.targetAddress) {\\r\\n                continue;\\r\\n            }\\r\\n            // if not guaranteed, next\\r\\n            if (!repaymentItem.guaranteed) {\\r\\n                continue;\\r\\n            }\\r\\n            // if guaranteed, pay with insurance\\r\\n            if (insuranceLeft >= paymentLeft) {\\r\\n                console.log(\\r\\n                    \\\"sending from IV to %s, %s\\\",\\r\\n                    repaymentItem.targetAddress,\\r\\n                    paymentLeft\\r\\n                );\\r\\n                Vault(payable(insuranceVaultAddr)).transferERC20(\\r\\n                    params.paymentToken,\\r\\n                    repaymentItem.targetAddress,\\r\\n                    paymentLeft\\r\\n                );\\r\\n                insuranceLeft -= paymentLeft;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            // if insurance can't cover the current payment, pay what it has, and stop\\r\\n            if (insuranceLeft > 0) {\\r\\n                console.log(\\r\\n                    \\\"sending partial from IV to %s, %s\\\",\\r\\n                    repaymentItem.targetAddress,\\r\\n                    insuranceLeft\\r\\n                );\\r\\n                Vault(payable(insuranceVaultAddr)).transferERC20(\\r\\n                    params.paymentToken,\\r\\n                    repaymentItem.targetAddress,\\r\\n                    insuranceLeft\\r\\n                );\\r\\n            }\\r\\n            break;\\r\\n        }\\r\\n        if (bidAmountLeft > 0) {\\r\\n            console.log(\\r\\n                \\\"sending from %s to %s, %s\\\",\\r\\n                address(this),\\r\\n                params.loanBorrower,\\r\\n                bidAmountLeft\\r\\n            );\\r\\n            erc20.transfer(params.loanBorrower, bidAmountLeft);\\r\\n        }\\r\\n        emit LoanAuctionSoldToBidder(auctionId, bidder, bidAmount);\\r\\n    }\\r\\n\\r\\n    function payout(uint256 auctionId) external virtual nonReentrant {\\r\\n        AuctionStatus currentStatus = status[auctionId];\\r\\n\\r\\n        if (\\r\\n            currentStatus != AuctionStatus.Registered &&\\r\\n            currentStatus != AuctionStatus.Protected\\r\\n        ) {\\r\\n            revert AuctionInvalidStatus(auctionId, currentStatus);\\r\\n        }\\r\\n\\r\\n        Auction memory item = auctions[auctionId];\\r\\n        AuctionParameters memory params = item.parameters;\\r\\n\\r\\n        if (msg.sender != params.loanBorrower) {\\r\\n            revert NotAuthorized();\\r\\n        }\\r\\n\\r\\n        // check auction's protection period has been expired\\r\\n        if (block.timestamp > item.protectedUntil) {\\r\\n            revert ProtectionOver();\\r\\n        }\\r\\n\\r\\n        uint256 repayment = params.loanRepaymentAmount;\\r\\n        uint256 penalty = 0;\\r\\n        if (currentStatus == AuctionStatus.Protected) {\\r\\n            uint bidAmount = bidAmounts[auctionId];\\r\\n            penalty = (bidAmount * 5) / 100;\\r\\n            IERC20(params.paymentToken).transferFrom(\\r\\n                msg.sender,\\r\\n                bidders[auctionId],\\r\\n                penalty\\r\\n            );\\r\\n            IERC20(params.paymentToken).transfer(bidders[auctionId], bidAmount);\\r\\n            bidAmounts[auctionId] = 0;\\r\\n        }\\r\\n        uint256 fullRepayment = repayment + penalty;\\r\\n        IERC721(params.tokenAddress).transferFrom(\\r\\n            address(this),\\r\\n            msg.sender,\\r\\n            params.tokenId\\r\\n        );\\r\\n\\r\\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(\\r\\n            loanRepaymentAddr\\r\\n        );\\r\\n        Repayment[] memory repayments = calculator.getDestinations(\\r\\n            params.loanId,\\r\\n            params.loanRepaymentAmount,\\r\\n            params.loanAmount,\\r\\n            params.lender\\r\\n        );\\r\\n        IERC20 erc20 = IERC20(params.paymentToken);\\r\\n        uint repaymentLength = repayments.length;\\r\\n        for (uint idx = 0; idx < repaymentLength; idx++) {\\r\\n            Repayment memory repaymentItem = repayments[idx];\\r\\n            erc20.transferFrom(\\r\\n                msg.sender,\\r\\n                repaymentItem.targetAddress,\\r\\n                repaymentItem.value\\r\\n            );\\r\\n        }\\r\\n        status[auctionId] = AuctionStatus.SoldToBorrower;\\r\\n        emit LoanAuctionCancelledByPayout(auctionId, msg.sender, fullRepayment);\\r\\n    }\\r\\n\\r\\n    function currentDebt(uint256 auctionId) public virtual view returns (uint256 debt) {\\r\\n        AuctionStatus currentStatus = status[auctionId];\\r\\n\\r\\n        if (\\r\\n            currentStatus != AuctionStatus.Registered &&\\r\\n            currentStatus != AuctionStatus.Protected\\r\\n        ) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        Auction memory item = auctions[auctionId];\\r\\n        AuctionParameters memory params = item.parameters;\\r\\n\\r\\n        if (msg.sender != params.loanBorrower) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 repayment = params.loanRepaymentAmount;\\r\\n        uint256 penalty = 0;\\r\\n        if (currentStatus == AuctionStatus.Protected) {\\r\\n            uint bidAmount = bidAmounts[auctionId];\\r\\n            penalty = (bidAmount * 5) / 100;\\r\\n        }\\r\\n        return repayment + penalty;\\r\\n    }\\r\\n\\r\\n    function currentBidPrice(\\r\\n        uint256 auctionId\\r\\n    ) public view returns (uint256 amount) {\\r\\n        if (status[auctionId] != AuctionStatus.Registered) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        Auction memory item = auctions[auctionId];\\r\\n        AuctionParameters memory params = item.parameters;\\r\\n        if (params.stepDownConfig.length == 0) {\\r\\n            // no stepDown\\r\\n            return\\r\\n                _locateCurrentAmount(\\r\\n                    params.startAmount,\\r\\n                    params.endAmount,\\r\\n                    params.startTime,\\r\\n                    params.endTime,\\r\\n                    true\\r\\n                );\\r\\n        }\\r\\n\\r\\n        // stepDown\\r\\n        return\\r\\n            _locateCurrentStepDownAmount(\\r\\n                params.startAmount,\\r\\n                params.endAmount,\\r\\n                params.startTime,\\r\\n                params.stepDownConfig,\\r\\n                true\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function validateStepDownConfig(\\r\\n        uint256 startTime,\\r\\n        uint256 endTime,\\r\\n        bytes memory config\\r\\n    ) internal virtual view {\\r\\n        if (config.length <= 0) {\\r\\n            revert InvalidStepDownConfig();\\r\\n        }\\r\\n\\r\\n        uint accDecrement;\\r\\n        uint8 actualLength;\\r\\n        uint length = config.length;\\r\\n        for (uint idx = 0; idx < length; idx++) {\\r\\n            uint8 decrement = uint8(config[idx]);\\r\\n            if (decrement == 255) {\\r\\n                break;\\r\\n            }\\r\\n            accDecrement += decrement;\\r\\n            actualLength++;\\r\\n        }\\r\\n\\r\\n        uint256 duration = endTime - startTime;\\r\\n        uint256 minDuration = uint256(actualLength * decrementInterval);\\r\\n        uint256 maxDuration = uint256((actualLength + 2) * decrementInterval);\\r\\n        if (duration <= minDuration) {\\r\\n            revert StepDownConfigAndAuctionTimeMismatch();\\r\\n        }\\r\\n        if (duration >= maxDuration) {\\r\\n            revert StepDownConfigAndAuctionTimeMismatch();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateDecrementInterval(uint256 intervalInSec) public {\\r\\n        require(intervalInSec != 0, \\\"interval must be non-zero value\\\");\\r\\n        decrementInterval = intervalInSec;\\r\\n    }\\r\\n\\r\\n    function _locateCurrentStepDownAmount(\\r\\n        uint256 startAmount,\\r\\n        uint256 endAmount,\\r\\n        uint256 startTime,\\r\\n        bytes memory stepDownConfig,\\r\\n        bool roundUp\\r\\n    ) internal virtual view returns (uint256 amount) {\\r\\n        // Only modify end amount if it doesn't already equal start amount.\\r\\n        if (startAmount != endAmount) {\\r\\n            // Declare variables to derive in the subsequent unchecked scope.\\r\\n            uint256 duration;\\r\\n            uint256 elapsed;\\r\\n            uint256 remaining;\\r\\n\\r\\n            uint256 elapsedTs;\\r\\n            uint accDecrement;\\r\\n            uint totalDecrement;\\r\\n            // Skip underflow checks as startTime <= block.timestamp < endTime.\\r\\n            unchecked {\\r\\n                // Derive the duration for the order and place it on the stack.\\r\\n                // duration = endTime - startTime;\\r\\n\\r\\n                // Derive time elapsed since the order started & place on stack.\\r\\n                elapsedTs = block.timestamp - startTime;\\r\\n\\r\\n                // Derive time remaining until order expires and place on stack.\\r\\n                // remaining = duration - elapsed;\\r\\n            }\\r\\n            uint256 daysPassed = elapsedTs / decrementInterval;\\r\\n            uint length = stepDownConfig.length;\\r\\n            for (uint idx = 0; idx < length; idx++) {\\r\\n                uint8 decrement = uint8(stepDownConfig[idx]);\\r\\n                if (decrement == 255) {\\r\\n                    break;\\r\\n                }\\r\\n                if (idx < daysPassed) {\\r\\n                    accDecrement += decrement;\\r\\n                }\\r\\n                totalDecrement += decrement;\\r\\n            }\\r\\n            duration = totalDecrement;\\r\\n            elapsed = accDecrement;\\r\\n            remaining = duration - elapsed;\\r\\n            // Aggregate new amounts weighted by time with rounding factor.\\r\\n            uint256 totalBeforeDivision = ((startAmount * remaining) +\\r\\n                (endAmount * elapsed));\\r\\n\\r\\n            // Use assembly to combine operations and skip divide-by-zero check.\\r\\n            assembly {\\r\\n                // Multiply by iszero(iszero(totalBeforeDivision)) to ensure\\r\\n                // amount is set to zero if totalBeforeDivision is zero,\\r\\n                // as intermediate overflow can occur if it is zero.\\r\\n                amount := mul(\\r\\n                    iszero(iszero(totalBeforeDivision)),\\r\\n                    // Subtract 1 from the numerator and add 1 to the result if\\r\\n                    // roundUp is true to get the proper rounding direction.\\r\\n                    // Division is performed with no zero check as duration\\r\\n                    // cannot be zero as long as startTime < endTime.\\r\\n                    add(\\r\\n                        div(sub(totalBeforeDivision, roundUp), duration),\\r\\n                        roundUp\\r\\n                    )\\r\\n                )\\r\\n            }\\r\\n\\r\\n            // Return the current amount.\\r\\n            return amount;\\r\\n        }\\r\\n\\r\\n        // Return the original amount as startAmount == endAmount.\\r\\n        return endAmount;\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\\r\\n}\\r\\n\",\"keccak256\":\"0x733cd56fa05547aa43db1ce0b1cdda6a8f8296d1c7881f5afb5e00a1f21a43cb\",\"license\":\"MIT\"},\"contracts/loan/LoanAuctionEnums.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\nenum AuctionStatus {\\r\\n    NotRegistered,\\r\\n    Registered,\\r\\n    Protected,\\r\\n    SoldToBidder,\\r\\n    SoldToBorrower\\r\\n}\\r\\n\\r\\nenum RecipientType {\\r\\n    LendingPool,\\r\\n    Lender,\\r\\n    Commission,\\r\\n    Borrower\\r\\n}\",\"keccak256\":\"0xba2ef7a8ce89271cf196f313419eab308a84850879002622c664e672d912f3a4\",\"license\":\"MIT\"},\"contracts/loan/LoanAuctionEventsAndErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\nimport \\\"./LoanAuctionEnums.sol\\\";\\r\\n\\r\\ninterface LoanAuctionEventsAndErrors{\\r\\n    error InvalidStepDownConfig();\\r\\n    error StepDownConfigOverflow();\\r\\n    error IncompleteStepDownConfig();\\r\\n    error StepDownConfigAndAuctionTimeMismatch();\\r\\n    \\r\\n    error CollateralOwnershipNotTransferred();\\r\\n    error AuctionInvalidStatus(uint256 auctionId, AuctionStatus status);\\r\\n    error AuctionNotRegistered();\\r\\n    error ProtectionNotOver();\\r\\n    error ProtectionOver();\\r\\n    error InvalidPriceRange(uint256 startAmount, uint256 endAmount);\\r\\n    error InvalidTimeRange(uint256 startTime, uint256 endTime);\\r\\n    error NotAuthorized();\\r\\n\\r\\n    event LoanAuctionBegun(uint256 indexed auctionId, uint256 loanId, \\r\\n        address tokenAddr, address paymentToken, \\r\\n        address loanBorrower, uint256 tokenId, uint256 startAmount, uint256 endAmount,\\r\\n        uint256 startTime, uint256 endTime, uint256 protectedUntil, uint256 loanRepaymentAmount,\\r\\n        bytes stepDownConfig);\\r\\n    event LoanAuctionSoldAndProtected(uint256 indexed auctionId, address bidder, address borrower, uint256 bidAmount);\\r\\n    event LoanAuctionSoldToBidder(uint256 indexed auctionId, address bidder, uint256 bidAmount);\\r\\n    event LoanAuctionCancelledByPayout(uint256 indexed auctionId, address borrower, uint256 payout);\\r\\n}\",\"keccak256\":\"0x8c5757fb16cd612b72114303bd0ae5401d524d5f77d01a77718f126ac0c3815d\",\"license\":\"MIT\"},\"contracts/loan/LoanAuctionStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\nimport \\\"./LoanAuctionEnums.sol\\\";\\r\\n\\r\\nstruct AuctionParameters {\\r\\n    uint256 loanId;\\r\\n    address tokenAddress;\\r\\n    address paymentToken;\\r\\n    uint256 tokenId;\\r\\n    uint256 startAmount;\\r\\n    uint256 endAmount;\\r\\n    uint256 startTime;\\r\\n    uint256 endTime;\\r\\n    bytes stepDownConfig;\\r\\n    address loanBorrower;\\r\\n    uint256 loanAmount;\\r\\n    uint256 loanRepaymentAmount;\\r\\n    address lender;\\r\\n    bool isProtected;\\r\\n}\\r\\n\\r\\n\\r\\nstruct PaymentRecipients {\\r\\n    address recipient;\\r\\n    uint256 amount;\\r\\n    RecipientType recipientType;\\r\\n}\\r\\n\\r\\nstruct Auction {\\r\\n    uint256 id;\\r\\n    uint256 protectedUntil;\\r\\n    AuctionParameters parameters;\\r\\n}\",\"keccak256\":\"0x0593c2a7a4f3cd6ccfb9f508f9b64b88c1b7bcac30df95e70c31aeb20ea1cd31\",\"license\":\"MIT\"},\"contracts/loan/LoanRepaymentCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\nimport \\\"../PeriFiAdmin.sol\\\";\\r\\nimport \\\"../vault/LendingPool.sol\\\";\\r\\n\\r\\nenum DestinationType {\\r\\n    Pool,\\r\\n    Lender,\\r\\n    InsuranceVault,\\r\\n    Commission,\\r\\n    CurationRewardPool\\r\\n}\\r\\n\\r\\nstruct Repayment {\\r\\n    address targetAddress;\\r\\n    uint256 value;\\r\\n    bool guaranteed;\\r\\n}\\r\\n\\r\\n\\r\\ncontract LoanRepaymentCalculator {\\r\\n    address public insuranceVaultAddress;\\r\\n    address public lendingPoolAddress;\\r\\n    address public masterWalletAddress;\\r\\n    address public periFiAdminAddress;\\r\\n    address public curationRewardPoolAddress;\\r\\n\\r\\n    constructor(\\r\\n        address _insuranceVaultAddress,\\r\\n        address _lendingPoolAddress,\\r\\n        address _masterWalletAddress,\\r\\n        address _periFiAdminAddress,\\r\\n        address _curationRewardPoolAddress) {\\r\\n        insuranceVaultAddress = _insuranceVaultAddress;\\r\\n        lendingPoolAddress = _lendingPoolAddress;\\r\\n        masterWalletAddress = _masterWalletAddress;\\r\\n        periFiAdminAddress = _periFiAdminAddress;\\r\\n        curationRewardPoolAddress = _curationRewardPoolAddress;\\r\\n    }\\r\\n\\r\\n    function getDestinations(\\r\\n        uint256 loanId,\\r\\n        uint256 repaymentAmount, \\r\\n        uint256 loanAmount,\\r\\n        address lender\\r\\n    ) external view returns (Repayment[] memory results) {\\r\\n        uint256 interestDue = repaymentAmount - loanAmount;\\r\\n\\r\\n        LendingPool lendingPool = LendingPool(payable(lendingPoolAddress));\\r\\n        uint256 leverageAmount = lendingPool.loanToLeverage(loanId);\\r\\n\\r\\n        // if there is no interest\\r\\n        if (interestDue == 0) {\\r\\n            if (leverageAmount == 0){\\r\\n                results = new Repayment[](1);\\r\\n                results[0] = Repayment(lender, loanAmount, false);\\r\\n            } else {\\r\\n                results = new Repayment[](2);\\r\\n                results[0] = Repayment(lendingPoolAddress, leverageAmount, true);\\r\\n                results[1] = Repayment(lender, loanAmount - leverageAmount, false);\\r\\n            }\\r\\n            return results;\\r\\n        }\\r\\n\\r\\n        uint256 interestForPool = interestDue * leverageAmount / loanAmount;\\r\\n        uint256 interestForLender = interestDue - interestForPool;\\r\\n        uint256 loanAmountByLender = loanAmount - leverageAmount;\\r\\n\\r\\n        uint256 lenderForIFL;\\r\\n        uint256 commissionForIFL;\\r\\n        uint256 curationRewardForIFL;\\r\\n\\r\\n        (\\r\\n            lenderForIFL, \\r\\n            commissionForIFL, \\r\\n            curationRewardForIFL\\r\\n        ) = distributeIFL(interestForLender);\\r\\n\\r\\n        if (leverageAmount == 0) {\\r\\n            // no leverage Used, only need to get InterestForLender (IFL)\\r\\n            results = new Repayment[](3);\\r\\n            results[0] = Repayment(lender, loanAmountByLender + lenderForIFL, false);\\r\\n            results[1] = Repayment(masterWalletAddress, commissionForIFL, false);\\r\\n            results[2] = Repayment(curationRewardPoolAddress, curationRewardForIFL, true);\\r\\n        } else {\\r\\n            PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddress);\\r\\n\\r\\n            uint256 poolUsageInBasisPoints = lendingPool.loanToPoolUsageInBasisPoint(loanId);\\r\\n            uint256 ivCommissionForIFP = periFiAdmin.ivCommissionForIFP();\\r\\n\\r\\n            uint256 commissionBasisPoint = poolCommissionInBasisPointByPoolUsage(poolUsageInBasisPoints);\\r\\n            \\r\\n            uint256 poolForIFP = interestForPool * commissionBasisPoint / 10000;\\r\\n            uint256 insuranceVaultForIFP = interestForPool * ivCommissionForIFP / 10000;\\r\\n            uint256 lenderForIFP = interestForPool - (poolForIFP + insuranceVaultForIFP);\\r\\n\\r\\n            results = new Repayment[](7);\\r\\n            results[0] = Repayment(lendingPoolAddress, leverageAmount, true);\\r\\n            results[1] = Repayment(lender, loanAmountByLender, false);\\r\\n            results[2] = Repayment(lendingPoolAddress, poolForIFP, false);\\r\\n            results[3] = Repayment(lender, lenderForIFP + lenderForIFL, false);\\r\\n            results[4] = Repayment(curationRewardPoolAddress, curationRewardForIFL, true);\\r\\n            results[5] = Repayment(insuranceVaultAddress, insuranceVaultForIFP, false);\\r\\n            results[6] = Repayment(masterWalletAddress, commissionForIFL, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function distributeIFL(\\r\\n        uint256 interestForLender) internal view returns (\\r\\n            uint256 lenderForIFL,\\r\\n            uint256 commissionForIFL,\\r\\n            uint256 curationRewardForIFL\\r\\n        ) {\\r\\n            PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddress);\\r\\n            uint256 commissionInBasisPoints = periFiAdmin.commissionForIFL();\\r\\n            if (commissionInBasisPoints < 100) {\\r\\n                commissionInBasisPoints = 100; // to ensure curation reward commission\\r\\n            }\\r\\n            // no leverage Used, only need to get InterestForLender (IFL)\\r\\n            uint256 totalCommission = interestForLender * commissionInBasisPoints / 10000;\\r\\n            curationRewardForIFL = interestForLender / 100; // take 1%\\r\\n            commissionForIFL = totalCommission - curationRewardForIFL;\\r\\n            lenderForIFL = interestForLender - totalCommission;\\r\\n        }\\r\\n\\r\\n    function poolCommissionInBasisPointByPoolUsage(uint256 poolUsageInBasisPoints) internal view returns (uint256 basisPoint) {\\r\\n            PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddress);\\r\\n            if (poolUsageInBasisPoints <= 2000) {\\r\\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo20();\\r\\n            }\\r\\n            else if (poolUsageInBasisPoints <= 3000) {\\r\\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo30();\\r\\n            }\\r\\n            else if (poolUsageInBasisPoints <= 4000) {\\r\\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo40();\\r\\n            }\\r\\n            else if (poolUsageInBasisPoints <= 5000) {\\r\\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo50();\\r\\n            }\\r\\n            else if (poolUsageInBasisPoints <= 6000) {\\r\\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo60();\\r\\n            }\\r\\n            else if (poolUsageInBasisPoints <= 7000) {\\r\\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo70();\\r\\n            }\\r\\n            else if (poolUsageInBasisPoints <= 8000) {\\r\\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo80();\\r\\n            }\\r\\n            else if (poolUsageInBasisPoints <= 9000) {\\r\\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo90();\\r\\n            }\\r\\n            else {\\r\\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo100();\\r\\n            }\\r\\n            return basisPoint;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xeb2182c99a31800a820c1fb530c5aa807c7e17704c9a920802facd2ac80ef799\",\"license\":\"MIT\"},\"contracts/loan/PeriFiLoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\n// import \\\"./PeriFiLoanAdmin.sol\\\";\\r\\nimport \\\"../PeriFiAdmin.sol\\\";\\r\\nimport \\\"./TrustDeed.sol\\\";\\r\\nimport \\\"../PeriFiAdmin.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\r\\nimport \\\"../interfaces/INonStandardERC721Transfer.sol\\\";\\r\\nimport \\\"./LoanAuction.sol\\\";\\r\\nimport \\\"./LoanRepaymentCalculator.sol\\\";\\r\\nimport \\\"../vault/LendingPool.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\n\\r\\nenum LiquidationTrigger {\\r\\n    OverDue,\\r\\n    LowHealthFactor\\r\\n}\\r\\n\\r\\nenum LiquidationMethod {\\r\\n    Auction,\\r\\n    TransferredToLender\\r\\n}\\r\\n\\r\\n// contract PeriFiLoan is PeriFiLoanAdmin, ERC721, ERC721URIStorage {\\r\\ncontract PeriFiLoan is\\r\\n    ERC721URIStorageUpgradeable,\\r\\n    ReentrancyGuard,\\r\\n    UUPSUpgradeable,\\r\\n    PausableUpgradeable,\\r\\n    MWOwnable\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    struct Loan {\\r\\n        // A unique identifier for this particular loan, sourced from the\\r\\n        // continuously increasing parameter totalNumLoans.\\r\\n        uint256 index;\\r\\n        // The original sum of money transferred from lender to borrower at the\\r\\n        // beginning of the loan, measured in paymentToken's smallest\\r\\n        // units.\\r\\n        uint256 loanAmount;\\r\\n        // The original sum of money transferred from leverage pool to borrower\\r\\n        // at the beginnig of the loan, measured in paymentToken's\\r\\n        // smallest units.\\r\\n        uint256 loanLeveragedAmount;\\r\\n        // The maximum amount of money that the borrower would be required to\\r\\n        // repay retrieve their collateral, measured in paymentToken's\\r\\n        // smallest units. If interestIsProRated is set to false, then the\\r\\n        // borrower will always have to pay this amount to retrieve their\\r\\n        // collateral, regardless of whether they repay early.\\r\\n        uint256 repaymentAmount;\\r\\n        // The ID within the tokenAddress for the NFT being used as\\r\\n        // collateral for this loan. The NFT is stored within this contract\\r\\n        // during the duration of the loan.\\r\\n        uint256 tokenId;\\r\\n        // The block.timestamp when the loan first began (measured in seconds).\\r\\n        uint64 loanStartTime;\\r\\n        // The amount of time (measured in seconds) that can elapse before the\\r\\n        // lender can liquidate the loan and seize the underlying collateral.\\r\\n        uint32 loanDuration;\\r\\n        uint32 commissionBasisPoints;\\r\\n        // The ERC721 contract of the NFT collateral\\r\\n        address tokenAddress;\\r\\n        // The ERC20 contract of the currency being used as principal/interest\\r\\n        // for this loan.\\r\\n        address paymentToken;\\r\\n        // The address of the borrower.\\r\\n        address borrower;\\r\\n        bool liquidateViaAuction;\\r\\n    }\\r\\n\\r\\n    event LoanStarted(\\r\\n        uint256 loanIndex,\\r\\n        address borrower,\\r\\n        address lender,\\r\\n        uint256 loanAmount,\\r\\n        uint256 loanLeveragedAmount,\\r\\n        uint256 repaymentAmount,\\r\\n        uint256 tokenId,\\r\\n        uint256 loanStartTime,\\r\\n        uint256 loanDuration,\\r\\n        address tokenAddress,\\r\\n        address paymentToken,\\r\\n        bool liquidateViaAuction\\r\\n    );\\r\\n\\r\\n    event LoanTrustDeedIssued(uint256 loanIndex);\\r\\n\\r\\n    event LoanRepaid(\\r\\n        uint256 loanIndex,\\r\\n        address borrower,\\r\\n        address lender,\\r\\n        uint256 loanAmount,\\r\\n        uint256 tokenId,\\r\\n        uint256 amountPaidToLender,\\r\\n        uint256 interestForIV,\\r\\n        address tokenAddress,\\r\\n        address paymentToken\\r\\n    );\\r\\n\\r\\n    event LoanLiquidated(\\r\\n        uint256 loanIndex,\\r\\n        address borrower,\\r\\n        address lender,\\r\\n        uint256 loanAmount,\\r\\n        uint256 tokenId,\\r\\n        uint256 loanMaturityDate,\\r\\n        uint256 loanLiquidationDate,\\r\\n        address tokenAddress,\\r\\n        LiquidationTrigger trigger,\\r\\n        LiquidationMethod method\\r\\n    );\\r\\n\\r\\n    address public periFiAdminAddr;\\r\\n\\r\\n    address public loanRepaymentAddr;\\r\\n\\r\\n    address public trustDeedAddr;\\r\\n\\r\\n    address public auctionAddr;\\r\\n\\r\\n    uint256 public totalNumLoans;\\r\\n\\r\\n    uint256 public totalActiveLoans;\\r\\n\\r\\n    mapping(uint256 => Loan) public indexToLoan;\\r\\n\\r\\n    mapping(uint256 => uint256) public indexToMaturityDate;\\r\\n\\r\\n    mapping(uint256 => bool) public loanRepaidOrLiquidated;\\r\\n\\r\\n    mapping(address => mapping(uint256 => bool))\\r\\n        private _nonceHasBeenUsedForUser;\\r\\n\\r\\n    function initialize(\\r\\n        address _periFiAdminAddr,\\r\\n        address _loanRepaymentAddr,\\r\\n        address _auctionAddr,\\r\\n        address _trustDeedAddr\\r\\n    ) public virtual initializer {\\r\\n        periFiAdminAddr = _periFiAdminAddr;\\r\\n        auctionAddr = _auctionAddr;\\r\\n        trustDeedAddr = _trustDeedAddr;\\r\\n        loanRepaymentAddr = _loanRepaymentAddr;\\r\\n\\r\\n        __ERC721_init(\\\"PeriFi Loan Promissory Note\\\", \\\"PPN\\\");\\r\\n        __Pausable_init();\\r\\n        __MWOwnable_init();\\r\\n    }\\r\\n\\r\\n    function _burn(\\r\\n        uint256 tokenId\\r\\n    ) internal virtual override(ERC721URIStorageUpgradeable) {\\r\\n        super._burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function setTokenURI(uint256 tokenId, string memory uri) external virtual {\\r\\n        super._setTokenURI(tokenId, uri);\\r\\n    }\\r\\n\\r\\n    function tokenURI(\\r\\n        uint256 tokenId\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC721URIStorageUpgradeable)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n\\r\\n    function beginLoan(\\r\\n        uint256 _loanAmount,\\r\\n        uint256 _loanLeveragedAmount,\\r\\n        uint256 _repaymentAmount,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _loanDuration,\\r\\n        uint256 _commissionBasisPoints,\\r\\n        uint256[2] memory _borrowerAndLenderNonces,\\r\\n        address _tokenAddress,\\r\\n        address _paymentToken,\\r\\n        address _lender,\\r\\n        bytes memory _borrowerSignature,\\r\\n        bytes memory _lenderSignature,\\r\\n        bool _liquidateViaAuction\\r\\n    ) public virtual whenNotPaused nonReentrant {\\r\\n        // Save loan details to a struct in memory first, to save on gas if any\\r\\n        // of the below checks fail, and to avoid the \\\"Stack Too Deep\\\" error by\\r\\n        // clumping the parameters together into one struct held in memory.\\r\\n        Loan memory loan = Loan({\\r\\n            index: totalNumLoans, //currentloanIndex,\\r\\n            loanAmount: _loanAmount,\\r\\n            loanLeveragedAmount: _loanLeveragedAmount,\\r\\n            repaymentAmount: _repaymentAmount,\\r\\n            tokenId: _tokenId,\\r\\n            loanStartTime: uint64(block.timestamp), //_loanStartTime\\r\\n            loanDuration: uint32(_loanDuration),\\r\\n            // loanInterestRateForDurationInBasisPoints: uint32(_loanInterestRateForDurationInBasisPoints),\\r\\n            commissionBasisPoints: uint32(_commissionBasisPoints),\\r\\n            tokenAddress: _tokenAddress,\\r\\n            paymentToken: _paymentToken,\\r\\n            borrower: msg.sender, //borrower\\r\\n            // interestIsProRated: (_loanInterestRateForDurationInBasisPoints != ~(uint32(0))),\\r\\n            liquidateViaAuction: _liquidateViaAuction\\r\\n        });\\r\\n\\r\\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\\r\\n        // Sanity check loan values.\\r\\n        require(\\r\\n            loan.repaymentAmount >= loan.loanAmount,\\r\\n            \\\"Negative interest rate loans are not allowed.\\\"\\r\\n        );\\r\\n        require(\\r\\n            uint256(loan.loanDuration) <= periFiAdmin.maximumLoanDuration(),\\r\\n            \\\"Loan duration exceeds maximum loan duration\\\"\\r\\n        );\\r\\n        require(\\r\\n            uint256(loan.loanDuration) != 0,\\r\\n            \\\"Loan duration cannot be zero\\\"\\r\\n        );\\r\\n        // require(uint256(loan.commissionBasisPoints) == periFiAdmin.commissionForIFL(), 'The admin fee has changed since this order was signed.');\\r\\n\\r\\n        require(\\r\\n            loan.loanAmount > loan.loanLeveragedAmount,\\r\\n            \\\"Leveraged value exceeds total loan amount\\\"\\r\\n        );\\r\\n        // Check that both the collateral and the principal come from supported\\r\\n        // contracts.\\r\\n\\r\\n        // require(periFiAdmin.erc20CurrencyIsWhitelisted(loan.paymentToken), 'Currency denomination is not whitelisted to be used by this contract');\\r\\n        // require(PeriFiAdmin(perifiAdmin).nftContractIsWhitelisted(loan.tokenAddress), 'NFT collateral contract is not whitelisted to be used by this contract');\\r\\n\\r\\n        // Check loan nonces. These are different from Ethereum account nonces.\\r\\n        // Here, these are uint256 numbers that should uniquely identify\\r\\n        // each signature for each user (i.e. each user should only create one\\r\\n        // off-chain signature for each nonce, with a nonce being any arbitrary\\r\\n        // uint256 value that they have not used yet for an off-chain\\r\\n        // signature).\\r\\n        require(\\r\\n            !_nonceHasBeenUsedForUser[msg.sender][_borrowerAndLenderNonces[0]],\\r\\n            \\\"Borrower nonce invalid, borrower has either cancelled/begun this loan, or reused this nonce when signing\\\"\\r\\n        );\\r\\n        _nonceHasBeenUsedForUser[msg.sender][\\r\\n            _borrowerAndLenderNonces[0]\\r\\n        ] = true;\\r\\n        require(\\r\\n            !_nonceHasBeenUsedForUser[_lender][_borrowerAndLenderNonces[1]],\\r\\n            \\\"Lender nonce invalid, lender has either cancelled/begun this loan, or reused this nonce when signing\\\"\\r\\n        );\\r\\n        _nonceHasBeenUsedForUser[_lender][_borrowerAndLenderNonces[1]] = true;\\r\\n\\r\\n        // Check that both signatures are valid.\\r\\n        require(\\r\\n            isValidBorrowerSignature(\\r\\n                loan.tokenId,\\r\\n                _borrowerAndLenderNonces[0], //_borrowerNonce,\\r\\n                loan.tokenAddress,\\r\\n                msg.sender, //borrower,\\r\\n                _borrowerSignature\\r\\n            ),\\r\\n            \\\"Borrower signature is invalid\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            isValidLenderSignature(\\r\\n                loan.loanAmount,\\r\\n                loan.loanLeveragedAmount,\\r\\n                loan.repaymentAmount,\\r\\n                loan.tokenId,\\r\\n                loan.loanDuration,\\r\\n                // loan.loanInterestRateForDurationInBasisPoints,\\r\\n                loan.commissionBasisPoints,\\r\\n                _borrowerAndLenderNonces[1], //_lenderNonce,\\r\\n                loan.tokenAddress,\\r\\n                loan.paymentToken,\\r\\n                _lender,\\r\\n                loan.liquidateViaAuction,\\r\\n                // loan.interestIsProRated,\\r\\n                _lenderSignature\\r\\n            ),\\r\\n            \\\"Lender signature is invalid\\\"\\r\\n        );\\r\\n\\r\\n        // Add the loan to storage before moving collateral/principal to follow\\r\\n        // the Checks-Effects-Interactions pattern.\\r\\n        indexToLoan[totalNumLoans] = loan;\\r\\n\\r\\n        uint256 loanMaturityDate = (uint256(loan.loanStartTime)).add(\\r\\n            uint256(loan.loanDuration)\\r\\n        );\\r\\n        indexToMaturityDate[totalNumLoans] = loanMaturityDate;\\r\\n\\r\\n        totalNumLoans = totalNumLoans.add(1);\\r\\n\\r\\n        // Update number of active loans.\\r\\n        totalActiveLoans = totalActiveLoans.add(1);\\r\\n        require(\\r\\n            totalActiveLoans <= periFiAdmin.maximumNumberOfActiveLoans(),\\r\\n            \\\"Contract has reached the maximum number of active loans allowed by admins\\\"\\r\\n        );\\r\\n\\r\\n        // Transfer collateral from borrower to this contract to be held until\\r\\n        // loan completion.liquidateOverdueLoan\\r\\n        IERC721(loan.tokenAddress).transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            loan.tokenId\\r\\n        );\\r\\n\\r\\n        uint256 lenderAllowance = IERC20(loan.paymentToken).allowance(\\r\\n            _lender,\\r\\n            address(this)\\r\\n        );\\r\\n        if (loan.loanLeveragedAmount > 0) {\\r\\n            uint256 loanFromLender = loan.loanAmount - loan.loanLeveragedAmount;\\r\\n            // Transfer principal from lender to borrower.\\r\\n            // uint256 poolAllowance = IERC20(loan.paymentToken).allowance(lendingPoolAddr, address(this));\\r\\n            require(\\r\\n                lenderAllowance >= loanFromLender,\\r\\n                \\\"ERC20 allowance is not set by lender or not enough balance\\\"\\r\\n            );\\r\\n            // require(poolAllowance >= loan.loanLeveragedAmount, 'ERC20 allowance is not set by lender or not enough balance');\\r\\n            IERC20(loan.paymentToken).transferFrom(\\r\\n                _lender,\\r\\n                msg.sender,\\r\\n                loanFromLender\\r\\n            );\\r\\n            LoanRepaymentCalculator calculator = LoanRepaymentCalculator(\\r\\n                loanRepaymentAddr\\r\\n            );\\r\\n            address lendingPoolAddr = calculator.lendingPoolAddress();\\r\\n            LendingPool(payable(lendingPoolAddr)).leverageLoan(\\r\\n                loan.index,\\r\\n                loan.paymentToken,\\r\\n                loan.loanLeveragedAmount,\\r\\n                msg.sender\\r\\n            );\\r\\n            // IERC20(loan.paymentToken).transferFrom(lendingPoolAddr, msg.sender, loan.loanLeveragedAmount);\\r\\n        } else {\\r\\n            require(\\r\\n                lenderAllowance >= loan.loanAmount,\\r\\n                \\\"ERC20 allowance is not set by lender or not enough balance\\\"\\r\\n            );\\r\\n            IERC20(loan.paymentToken).transferFrom(\\r\\n                _lender,\\r\\n                msg.sender,\\r\\n                loan.loanAmount\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Issue an ERC721 promissory note to the lender that gives them the\\r\\n        // right to either the principal-plus-interest or the collateral.\\r\\n        _mint(_lender, loan.index);\\r\\n\\r\\n        // Emit an event with all relevant details from this transaction.\\r\\n        emit LoanStarted(\\r\\n            loan.index,\\r\\n            msg.sender, //borrower,\\r\\n            _lender,\\r\\n            loan.loanAmount,\\r\\n            loan.loanLeveragedAmount,\\r\\n            loan.repaymentAmount,\\r\\n            loan.tokenId,\\r\\n            block.timestamp, //_loanStartTime\\r\\n            loan.loanDuration,\\r\\n            // loan.loanInterestRateForDurationInBasisPoints,\\r\\n            loan.tokenAddress,\\r\\n            loan.paymentToken,\\r\\n            loan.liquidateViaAuction\\r\\n            // loan.interestIsProRated\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function issueTrustDeed(uint256 _loanIndex) external virtual nonReentrant {\\r\\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have\\r\\n        // never been called on this loanIndex. Depending on how the rest of the\\r\\n        // code turns out, this check may be unnecessary.\\r\\n        require(\\r\\n            !loanRepaidOrLiquidated[_loanIndex],\\r\\n            \\\"Loan has already been repaid or liquidated\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            trustDeedAddr != address(0),\\r\\n            \\\"Trust Deed contract hasn't bee set up\\\"\\r\\n        );\\r\\n\\r\\n        // Fetch loan details from storage, but store them in memory for the\\r\\n        // sake of saving gas.\\r\\n        Loan memory loan = indexToLoan[_loanIndex];\\r\\n\\r\\n        // Check that the borrower is the caller, only the borrower is entitled\\r\\n        // to the collateral.\\r\\n        require(\\r\\n            msg.sender == loan.borrower,\\r\\n            \\\"Only the borrower can pay back a loan and reclaim the underlying NFT\\\"\\r\\n        );\\r\\n\\r\\n        TrustDeed trustDeedContract = TrustDeed(trustDeedAddr);\\r\\n        trustDeedContract.safeMint(msg.sender, _loanIndex);\\r\\n        emit LoanTrustDeedIssued(_loanIndex);\\r\\n    }\\r\\n\\r\\n    function payBackLoan(uint256 _loanIndex) external virtual nonReentrant {\\r\\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have\\r\\n        // never been called on this loanIndex. Depending on how the rest of the\\r\\n        // code turns out, this check may be unnecessary.\\r\\n        require(\\r\\n            !loanRepaidOrLiquidated[_loanIndex],\\r\\n            \\\"Loan has already been repaid or liquidated\\\"\\r\\n        );\\r\\n\\r\\n        // Fetch loan details from storage, but store them in memory for the\\r\\n        // sake of saving gas.\\r\\n        Loan memory loan = indexToLoan[_loanIndex];\\r\\n\\r\\n        // Check that the borrower is the caller, only the borrower is entitled\\r\\n        // to the collateral.\\r\\n        address currentBorrower = borrower(_loanIndex);\\r\\n        require(\\r\\n            msg.sender == currentBorrower,\\r\\n            \\\"Only the borrower can pay back a loan and reclaim the underlying NFT\\\"\\r\\n        );\\r\\n\\r\\n        // Fetch current owner of loan promissory note.\\r\\n        address lender = ownerOf(_loanIndex);\\r\\n\\r\\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(\\r\\n            loanRepaymentAddr\\r\\n        );\\r\\n        Repayment[] memory repayments = calculator.getDestinations(\\r\\n            _loanIndex,\\r\\n            loan.repaymentAmount,\\r\\n            loan.loanAmount,\\r\\n            lender\\r\\n        );\\r\\n        IERC20 erc20 = IERC20(loan.paymentToken);\\r\\n        uint repaymentLength = repayments.length;\\r\\n        for (uint idx = 0; idx < repaymentLength; idx++) {\\r\\n            Repayment memory repayment = repayments[idx];\\r\\n            erc20.transferFrom(\\r\\n                currentBorrower,\\r\\n                repayment.targetAddress,\\r\\n                repayment.value\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Record the ifp amount in lending pool\\r\\n        Vault(payable(calculator.lendingPoolAddress())).namedBalanceReceive(\\r\\n            \\\"ifp\\\",\\r\\n            loan.paymentToken,\\r\\n            repayments[1].value\\r\\n        );\\r\\n\\r\\n        // // Calculate amounts to send to lender and admins\\r\\n        // uint256 interestDue = (loan.repaymentAmount).sub(loan.loanAmount);\\r\\n        // if(loan.interestIsProRated == true){\\r\\n        //     interestDue = _computeInterestDue(\\r\\n        //         loan.loanAmount,\\r\\n        //         loan.repaymentAmount,\\r\\n        //         block.timestamp.sub(uint256(loan.loanStartTime)),\\r\\n        //         uint256(loan.loanDuration),\\r\\n        //         uint256(loan.loanInterestRateForDurationInBasisPoints)\\r\\n        //     );\\r\\n        // }\\r\\n        // uint256 iv = _computeInterestForIV(interestDue, uint256(loan.interestForIVInBasisPoints));\\r\\n        // uint256 interestForLender = computeInterestDistributionForLender(loan.loanAmount, loan.loanLeveragedAmount, interestDue);\\r\\n\\r\\n        // uint256 payoffAmount = (loan.loanAmount.sub(loan.loanLeveragedAmount)).add(interestForLender);\\r\\n        // uint256 poolPayoffAmount = (loan.loanLeveragedAmount).add(interestDue.sub(iv).sub(interestForLender));\\r\\n        // uint256 payoffAmount = ((loan.loanAmount).add(interestDue)).sub(iv);\\r\\n\\r\\n        // Mark loan as repaid before doing any external transfers to follow\\r\\n        // the Checks-Effects-Interactions design pattern.\\r\\n        loanRepaidOrLiquidated[_loanIndex] = true;\\r\\n\\r\\n        // Update number of active loans.\\r\\n        totalActiveLoans = totalActiveLoans.sub(1);\\r\\n\\r\\n        // use suggested calculation for leverage\\r\\n        // Transfer principal-plus-interest from borrower to lender\\r\\n        // IERC20(loan.paymentToken).transferFrom(currentBorrower, lender, payoffAmount);\\r\\n\\r\\n        // Transfer principal-plus-interest from borrower to leverage pool\\r\\n\\r\\n        // IERC20(loan.paymentToken).transferFrom(currentBorrower, lendingPoolAddr, poolPayoffAmount);\\r\\n\\r\\n        // Transfer fees from borrower to insurance vault\\r\\n        // IERC20(loan.paymentToken).transferFrom(currentBorrower, insuranceVaultAddr, iv);\\r\\n\\r\\n        // Transfer collateral from this contract to borrower.\\r\\n        require(\\r\\n            _transferNftToAddress(\\r\\n                loan.tokenAddress,\\r\\n                loan.tokenId,\\r\\n                currentBorrower\\r\\n            ),\\r\\n            \\\"NFT was not successfully transferred\\\"\\r\\n        );\\r\\n\\r\\n        // Destroy the lender's promissory note.\\r\\n        _burn(_loanIndex);\\r\\n        _burnTrustDeed(_loanIndex);\\r\\n        // Emit an event with all relevant details from this transaction.\\r\\n        emit LoanRepaid(\\r\\n            _loanIndex,\\r\\n            currentBorrower,\\r\\n            lender,\\r\\n            loan.loanAmount,\\r\\n            loan.tokenId,\\r\\n            loan.repaymentAmount,\\r\\n            loan.commissionBasisPoints,\\r\\n            loan.tokenAddress,\\r\\n            loan.paymentToken\\r\\n        );\\r\\n\\r\\n        // Delete the loan from storage in order to achieve a substantial gas\\r\\n        // savings and to lessen the burden of storage on Ethereum nodes, since\\r\\n        // we will never access this loan's details again, and the details are\\r\\n        // still available through event data.\\r\\n        delete indexToLoan[_loanIndex];\\r\\n    }\\r\\n\\r\\n    function liquidateLowHealthFactorLoanViaAuction(\\r\\n        uint256 _loanIndex\\r\\n    ) external virtual onlyOwner nonReentrant {\\r\\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have\\r\\n        // never been called on this loanIndex. Depending on how the rest of the\\r\\n        // code turns out, this check may be unnecessary.\\r\\n        require(\\r\\n            !loanRepaidOrLiquidated[_loanIndex],\\r\\n            \\\"Loan has already been repaid or liquidated\\\"\\r\\n        );\\r\\n\\r\\n        require(!isOverdue(_loanIndex, 0), \\\"Loan is overdue\\\");\\r\\n        // Fetch loan details from storage, but store them in memory for the\\r\\n        // sake of saving gas.\\r\\n        Loan memory loan = indexToLoan[_loanIndex];\\r\\n\\r\\n        // uint256 loanMaturityDate = (uint256(loan.loanStartTime))\\r\\n        //         .add(uint256(loan.loanDuration));\\r\\n\\r\\n        // require(block.timestamp < loanMaturityDate, 'Loan is overdue');\\r\\n\\r\\n        address lender = ownerOf(_loanIndex);\\r\\n\\r\\n        // Mark loan as liquidated before doing any external transfers to\\r\\n        // follow the Checks-Effects-Interactions design pattern.\\r\\n        loanRepaidOrLiquidated[_loanIndex] = true;\\r\\n\\r\\n        // Update number of active loans.\\r\\n        totalActiveLoans = totalActiveLoans.sub(1);\\r\\n\\r\\n        require(\\r\\n            _transferNftToAddress(loan.tokenAddress, loan.tokenId, auctionAddr),\\r\\n            \\\"NFT was not successfully transferred\\\"\\r\\n        );\\r\\n\\r\\n        address currentBorrower = borrower(_loanIndex);\\r\\n        _burn(_loanIndex);\\r\\n        _burnTrustDeed(_loanIndex);\\r\\n        // Emit an event with all relevant details from this transaction.\\r\\n        emit LoanLiquidated(\\r\\n            _loanIndex,\\r\\n            currentBorrower,\\r\\n            lender,\\r\\n            loan.loanAmount,\\r\\n            loan.tokenId,\\r\\n            indexToMaturityDate[_loanIndex],\\r\\n            // loanMaturityDate,\\r\\n            block.timestamp,\\r\\n            loan.tokenAddress,\\r\\n            LiquidationTrigger.LowHealthFactor,\\r\\n            LiquidationMethod.Auction\\r\\n        );\\r\\n\\r\\n        // Delete the loan from storage in order to achieve a substantial gas\\r\\n        // savings and to lessen the burden of storage on Ethereum nodes, since\\r\\n        // we will never access this loan's details again, and the details are\\r\\n        // still available through event data.\\r\\n        delete indexToLoan[_loanIndex];\\r\\n    }\\r\\n\\r\\n    function liquidateOverdueLoanViaAuction(\\r\\n        uint256 _loanIndex\\r\\n    ) external virtual nonReentrant {\\r\\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have\\r\\n        // never been called on this loanIndex. Depending on how the rest of the\\r\\n        // code turns out, this check may be unnecessary.\\r\\n        require(\\r\\n            !loanRepaidOrLiquidated[_loanIndex],\\r\\n            \\\"Loan has already been repaid or liquidated\\\"\\r\\n        );\\r\\n\\r\\n        // Fetch loan details from storage, but store them in memory for the\\r\\n        // sake of saving gas.\\r\\n        Loan memory loan = indexToLoan[_loanIndex];\\r\\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\\r\\n\\r\\n        uint256 extraDuration = periFiAdmin.preLiquidationDuration();\\r\\n        if (!loan.liquidateViaAuction) {\\r\\n            extraDuration += periFiAdmin.claimCollateralDuration();\\r\\n        }\\r\\n\\r\\n        require(\\r\\n            isOverdue(_loanIndex, extraDuration),\\r\\n            \\\"Loan is not overdue yet\\\"\\r\\n        );\\r\\n\\r\\n        // uint256 loanMaturityDate;\\r\\n        // if (loan.liquidateViaAuction){\\r\\n        //     loanMaturityDate = (uint256(loan.loanStartTime))\\r\\n        //         .add(uint256(loan.loanDuration))\\r\\n        //         .add(periFiAdmin.preLiquidationDuration());\\r\\n        // } else {\\r\\n        //     // check extra 24 hours for the lender to claim\\r\\n        //     loanMaturityDate = (uint256(loan.loanStartTime))\\r\\n        //         .add(uint256(loan.loanDuration))\\r\\n        //         .add(periFiAdmin.preLiquidationDuration())\\r\\n        //         .add(periFiAdmin.claimCollateralDuration());\\r\\n        // }\\r\\n        // require(block.timestamp > loanMaturityDate, 'Loan is not overdue yet');\\r\\n\\r\\n        address lender = ownerOf(_loanIndex);\\r\\n\\r\\n        // Mark loan as liquidated before doing any external transfers to\\r\\n        // follow the Checks-Effects-Interactions design pattern.\\r\\n        loanRepaidOrLiquidated[_loanIndex] = true;\\r\\n\\r\\n        // Update number of active loans.\\r\\n        totalActiveLoans = totalActiveLoans.sub(1);\\r\\n\\r\\n        require(\\r\\n            _transferNftToAddress(loan.tokenAddress, loan.tokenId, auctionAddr),\\r\\n            \\\"NFT was not successfully transferred\\\"\\r\\n        );\\r\\n\\r\\n        address currentBorrower = borrower(_loanIndex);\\r\\n        _burn(_loanIndex);\\r\\n        _burnTrustDeed(_loanIndex);\\r\\n        // Emit an event with all relevant details from this transaction.\\r\\n        emit LoanLiquidated(\\r\\n            _loanIndex,\\r\\n            currentBorrower,\\r\\n            lender,\\r\\n            loan.loanAmount,\\r\\n            loan.tokenId,\\r\\n            indexToMaturityDate[_loanIndex],\\r\\n            // loanMaturityDate,\\r\\n            block.timestamp,\\r\\n            loan.tokenAddress,\\r\\n            LiquidationTrigger.OverDue,\\r\\n            LiquidationMethod.Auction\\r\\n        );\\r\\n\\r\\n        // Delete the loan from storage in order to achieve a substantial gas\\r\\n        // savings and to lessen the burden of storage on Ethereum nodes, since\\r\\n        // we will never access this loan's details again, and the details are\\r\\n        // still available through event data.\\r\\n        delete indexToLoan[_loanIndex];\\r\\n    }\\r\\n\\r\\n    function liquidateOverdueLoan(\\r\\n        uint256 _loanIndex\\r\\n    ) external virtual nonReentrant {\\r\\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have\\r\\n        // never been called on this loanIndex. Depending on how the rest of the\\r\\n        // code turns out, this check may be unnecessary.\\r\\n        require(\\r\\n            !loanRepaidOrLiquidated[_loanIndex],\\r\\n            \\\"Loan has already been repaid or liquidated\\\"\\r\\n        );\\r\\n\\r\\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\\r\\n        require(\\r\\n            isOverdue(_loanIndex, periFiAdmin.preLiquidationDuration()),\\r\\n            \\\"Loan is not overdue yet\\\"\\r\\n        );\\r\\n        // Fetch loan details from storage, but store them in memory for the\\r\\n        // sake of saving gas.\\r\\n        Loan memory loan = indexToLoan[_loanIndex];\\r\\n\\r\\n        require(\\r\\n            !loan.liquidateViaAuction,\\r\\n            \\\"Loan is configured to be liquidated only via auction\\\"\\r\\n        );\\r\\n        // Ensure that the loan is indeed overdue, since we can only liquidate\\r\\n        // overdue loans.\\r\\n\\r\\n        // uint256 loanMaturityDate = (uint256(loan.loanStartTime))\\r\\n        //     .add(uint256(loan.loanDuration))\\r\\n        //     .add(periFiAdmin.preLiquidationDuration());\\r\\n        // require(block.timestamp > loanMaturityDate, 'Loan is not overdue yet');\\r\\n\\r\\n        // Fetch the current lender of the promissory note corresponding to\\r\\n        // this overdue loan.\\r\\n\\r\\n        address lender = ownerOf(_loanIndex);\\r\\n        // If the loan is leveraged, the lender must pay for the leverage and its interest.\\r\\n        // if (loan.loanLeveragedAmount > 0)\\r\\n        // {\\r\\n        //     require(msg.sender == lender, 'Only the lender can pay for the leverage and liquidate the underlying NFT');\\r\\n        //     LoanRepaymentCalculator calculator = LoanRepaymentCalculator(loanRepaymentAddr);\\r\\n        //     Repayment[] memory repayments = calculator.getDestinations(\\r\\n        //         _loanIndex,\\r\\n        //         loan.repaymentAmount,\\r\\n        //         loan.loanAmount,\\r\\n        //         lender);\\r\\n        //     IERC20 erc20 = IERC20(loan.paymentToken);\\r\\n        //     uint repaymentLength = repayments.length;\\r\\n        //     for (uint idx = 0; idx < repaymentLength; idx++) {\\r\\n        //         Repayment memory repayment = repayments[idx];\\r\\n        //         if (msg.sender == repayment.targetAddress) {\\r\\n        //             continue;\\r\\n        //         }\\r\\n        //         erc20.transferFrom(msg.sender, repayment.targetAddress, repayment.value);\\r\\n        //     }\\r\\n\\r\\n        //     // uint256 interestDue = (loan.repaymentAmount).sub(loan.loanAmount);\\r\\n        //     // uint256 iv = _computeInterestForIV(interestDue, uint256(loan.interestForIVInBasisPoints));\\r\\n        //     // uint256 lenderToPay = _computePriceOfLenderToPay(\\r\\n        //     //     loan.loanAmount,\\r\\n        //     //     loan.loanLeveragedAmount,\\r\\n        //     //     loan.repaymentAmount);\\r\\n        //     // uint256 poolAmount = lenderToPay.sub(iv);\\r\\n\\r\\n        //     // IERC20(loan.paymentToken).transferFrom(lender, lendingPoolAddr, poolAmount);\\r\\n        //     // IERC20(loan.paymentToken).transferFrom(lender, insuranceVaultAddr, iv);\\r\\n        // }\\r\\n\\r\\n        require(\\r\\n            msg.sender == lender,\\r\\n            \\\"Only the lender can pay for the leverage and liquidate the underlying NFT\\\"\\r\\n        );\\r\\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(\\r\\n            loanRepaymentAddr\\r\\n        );\\r\\n        Repayment[] memory repayments = calculator.getDestinations(\\r\\n            _loanIndex,\\r\\n            loan.repaymentAmount,\\r\\n            loan.loanAmount,\\r\\n            lender\\r\\n        );\\r\\n        IERC20 erc20 = IERC20(loan.paymentToken);\\r\\n        uint repaymentLength = repayments.length;\\r\\n        for (uint idx = 0; idx < repaymentLength; idx++) {\\r\\n            Repayment memory repayment = repayments[idx];\\r\\n            if (msg.sender == repayment.targetAddress) {\\r\\n                continue;\\r\\n            }\\r\\n            erc20.transferFrom(\\r\\n                msg.sender,\\r\\n                repayment.targetAddress,\\r\\n                repayment.value\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Mark loan as liquidated before doing any external transfers to\\r\\n        // follow the Checks-Effects-Interactions design pattern.\\r\\n        loanRepaidOrLiquidated[_loanIndex] = true;\\r\\n\\r\\n        // Update number of active loans.\\r\\n        totalActiveLoans = totalActiveLoans.sub(1);\\r\\n\\r\\n        // Transfer collateral from this contract to the lender, since the\\r\\n        // lender is seizing collateral for an overdue loan.\\r\\n        require(\\r\\n            _transferNftToAddress(loan.tokenAddress, loan.tokenId, lender),\\r\\n            \\\"NFT was not successfully transferred\\\"\\r\\n        );\\r\\n\\r\\n        address currentBorrower = borrower(_loanIndex);\\r\\n        // Destroy the lender's promissory note for this loan, since by seizing\\r\\n        // the collateral, the lender has forfeit the rights to the loan\\r\\n        // principal-plus-interest.\\r\\n        _burn(_loanIndex);\\r\\n        _burnTrustDeed(_loanIndex);\\r\\n        // Emit an event with all relevant details from this transaction.\\r\\n        emit LoanLiquidated(\\r\\n            _loanIndex,\\r\\n            currentBorrower,\\r\\n            lender,\\r\\n            loan.loanAmount,\\r\\n            loan.tokenId,\\r\\n            indexToMaturityDate[_loanIndex],\\r\\n            // loanMaturityDate,\\r\\n            block.timestamp,\\r\\n            loan.tokenAddress,\\r\\n            LiquidationTrigger.OverDue,\\r\\n            LiquidationMethod.TransferredToLender\\r\\n        );\\r\\n\\r\\n        // Delete the loan from storage in order to achieve a substantial gas\\r\\n        // savings and to lessen the burden of storage on Ethereum nodes, since\\r\\n        // we will never access this loan's details again, and the details are\\r\\n        // still available through event data.\\r\\n        delete indexToLoan[_loanIndex];\\r\\n    }\\r\\n\\r\\n    function cancelLoanCommitmentBeforeLoanHasBegun(\\r\\n        uint256 _nonce\\r\\n    ) external virtual {\\r\\n        require(\\r\\n            !_nonceHasBeenUsedForUser[msg.sender][_nonce],\\r\\n            \\\"Nonce invalid, user has either cancelled/begun this loan, or reused a nonce when signing\\\"\\r\\n        );\\r\\n        _nonceHasBeenUsedForUser[msg.sender][_nonce] = true;\\r\\n    }\\r\\n\\r\\n    /* ******************* */\\r\\n    /* READ-ONLY FUNCTIONS */\\r\\n    /* ******************* */\\r\\n\\r\\n    function getPayoffAmount(\\r\\n        uint256 _loanIndex\\r\\n    ) public view virtual returns (uint256) {\\r\\n        Loan storage loan = indexToLoan[_loanIndex];\\r\\n        // if(loan.interestIsProRated == false){\\r\\n        //     return loan.repaymentAmount;\\r\\n        // } else {\\r\\n        //     uint256 loanDurationSoFarInSeconds = block.timestamp.sub(uint256(loan.loanStartTime));\\r\\n        //     uint256 interestDue = _computeInterestDue(loan.loanAmount, loan.repaymentAmount, loanDurationSoFarInSeconds, uint256(loan.loanDuration), uint256(loan.loanInterestRateForDurationInBasisPoints));\\r\\n        //     return (loan.loanAmount).add(interestDue);\\r\\n        // }\\r\\n\\r\\n        return loan.repaymentAmount;\\r\\n    }\\r\\n\\r\\n    function getInterestForLender(\\r\\n        uint256 _loanIndex\\r\\n    ) public view virtual returns (uint256) {\\r\\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have\\r\\n        // never been called on this loanIndex. Depending on how the rest of the\\r\\n        // code turns out, this check may be unnecessary.\\r\\n        require(\\r\\n            !loanRepaidOrLiquidated[_loanIndex],\\r\\n            \\\"Loan has already been repaid or liquidated\\\"\\r\\n        );\\r\\n\\r\\n        // Fetch loan details from storage, but store them in memory for the\\r\\n        // sake of saving gas.\\r\\n        Loan memory loan = indexToLoan[_loanIndex];\\r\\n\\r\\n        // Fetch current owner of loan promissory note.\\r\\n        address lender = ownerOf(_loanIndex);\\r\\n\\r\\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(\\r\\n            loanRepaymentAddr\\r\\n        );\\r\\n        Repayment[] memory repayments = calculator.getDestinations(\\r\\n            _loanIndex,\\r\\n            loan.repaymentAmount,\\r\\n            loan.loanAmount,\\r\\n            lender\\r\\n        );\\r\\n\\r\\n        uint repaymentLength = repayments.length;\\r\\n        uint256 lenderPayment;\\r\\n\\r\\n        for (uint idx = 0; idx < repaymentLength; idx++) {\\r\\n            Repayment memory repayment = repayments[idx];\\r\\n            if (repayment.targetAddress == lender) {\\r\\n                lenderPayment += repayment.value;\\r\\n            }\\r\\n        }\\r\\n        return lenderPayment - (loan.loanAmount - loan.loanLeveragedAmount);\\r\\n    }\\r\\n\\r\\n    function getWhetherNonceHasBeenUsedForUser(\\r\\n        address _user,\\r\\n        uint256 _nonce\\r\\n    ) public view virtual returns (bool) {\\r\\n        return _nonceHasBeenUsedForUser[_user][_nonce];\\r\\n    }\\r\\n\\r\\n    function isOverdue(\\r\\n        uint256 _loanIndex,\\r\\n        uint256 extraTime\\r\\n    ) public view virtual returns (bool) {\\r\\n        uint256 loanMaturityDate = indexToMaturityDate[_loanIndex] + extraTime;\\r\\n        return block.timestamp > loanMaturityDate;\\r\\n    }\\r\\n\\r\\n    function isPreliquidationOverdue(\\r\\n        uint256 _loanIndex\\r\\n    ) external view virtual returns (bool) {\\r\\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\\r\\n\\r\\n        uint256 extraDuration = periFiAdmin.preLiquidationDuration();\\r\\n        return\\r\\n            block.timestamp > indexToMaturityDate[_loanIndex] + extraDuration;\\r\\n    }\\r\\n\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\\r\\n        uint256 extraDuration = periFiAdmin.preLiquidationDuration();\\r\\n\\r\\n        require(!isOverdue(tokenId, extraDuration), \\\"Loan is overdue\\\");\\r\\n        super.approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\\r\\n        uint256 extraDuration = periFiAdmin.preLiquidationDuration();\\r\\n\\r\\n        require(!isOverdue(tokenId, extraDuration), \\\"Loan is overdue\\\");\\r\\n        super.transferFrom(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\\r\\n        uint256 extraDuration = periFiAdmin.preLiquidationDuration();\\r\\n\\r\\n        require(!isOverdue(tokenId, extraDuration), \\\"Loan is overdue\\\");\\r\\n        super.safeTransferFrom(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\\r\\n        uint256 extraDuration = periFiAdmin.preLiquidationDuration();\\r\\n\\r\\n        require(!isOverdue(tokenId, extraDuration), \\\"Loan is overdue\\\");\\r\\n        super.safeTransferFrom(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    // function _computeInterestDue(uint256 _loanAmount, uint256 _repaymentAmount, uint256 _loanDurationSoFarInSeconds, uint256 _loanTotalDurationAgreedTo, uint256 _loanInterestRateForDurationInBasisPoints) internal pure returns (uint256) {\\r\\n    //     uint256 interestDueAfterEntireDuration = (_loanAmount.mul(_loanInterestRateForDurationInBasisPoints)).div(uint256(10000));\\r\\n    //     uint256 interestDueAfterElapsedDuration = (interestDueAfterEntireDuration.mul(_loanDurationSoFarInSeconds)).div(_loanTotalDurationAgreedTo);\\r\\n    //     if(_loanAmount.add(interestDueAfterElapsedDuration) > _repaymentAmount){\\r\\n    //         return _repaymentAmount.sub(_loanAmount);\\r\\n    //     } else {\\r\\n    //         return interestDueAfterElapsedDuration;\\r\\n    //     }\\r\\n    // }\\r\\n    // function _computeInterestForIV(uint256 _interestDue, uint256 _interestForIVInBasisPoints) internal pure returns (uint256) {\\r\\n    // \\treturn (_interestDue.mul(_interestForIVInBasisPoints)).div(10000);\\r\\n    // }\\r\\n\\r\\n    function _transferNftToAddress(\\r\\n        address _nftContract,\\r\\n        uint256 _nftId,\\r\\n        address _recipient\\r\\n    ) internal virtual returns (bool) {\\r\\n        // Try to call transferFrom()\\r\\n        bool transferFromSucceeded = _attemptTransferFrom(\\r\\n            _nftContract,\\r\\n            _nftId,\\r\\n            _recipient\\r\\n        );\\r\\n        if (transferFromSucceeded) {\\r\\n            return true;\\r\\n        } else {\\r\\n            // Try to call transfer()\\r\\n            bool transferSucceeded = _attemptTransfer(\\r\\n                _nftContract,\\r\\n                _nftId,\\r\\n                _recipient\\r\\n            );\\r\\n            return transferSucceeded;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _attemptTransferFrom(\\r\\n        address _nftContract,\\r\\n        uint256 _nftId,\\r\\n        address _recipient\\r\\n    ) internal virtual returns (bool) {\\r\\n        // @notice Some NFT contracts will not allow you to approve an NFT that\\r\\n        //         you own, so we cannot simply call approve() here, we have to\\r\\n        //         try to call it in a manner that allows the call to fail.\\r\\n        (bool success, ) = _nftContract.call(\\r\\n            abi.encodeWithSelector(\\r\\n                IERC721(_nftContract).approve.selector,\\r\\n                address(this),\\r\\n                _nftId\\r\\n            )\\r\\n        );\\r\\n\\r\\n        // @notice Some NFT contracts will not allow you to call transferFrom()\\r\\n        //         for an NFT that you own but that is not approved, so we\\r\\n        //         cannot simply call transferFrom() here, we have to try to\\r\\n        //         call it in a manner that allows the call to fail.\\r\\n        (success, ) = _nftContract.call(\\r\\n            abi.encodeWithSelector(\\r\\n                IERC721(_nftContract).transferFrom.selector,\\r\\n                address(this),\\r\\n                _recipient,\\r\\n                _nftId\\r\\n            )\\r\\n        );\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    function _attemptTransfer(\\r\\n        address _nftContract,\\r\\n        uint256 _nftId,\\r\\n        address _recipient\\r\\n    ) internal virtual returns (bool) {\\r\\n        // @notice Some NFT contracts do not implement transfer(), since it is\\r\\n        //         not a part of the official ERC721 standard, but many\\r\\n        //         prominent NFT projects do implement it (such as\\r\\n        //         Cryptokitties), so we cannot simply call transfer() here, we\\r\\n        //         have to try to call it in a manner that allows the call to\\r\\n        //         fail.\\r\\n        (bool success, ) = _nftContract.call(\\r\\n            abi.encodeWithSelector(\\r\\n                INonStandardERC721Transfer(_nftContract).transfer.selector,\\r\\n                _recipient,\\r\\n                _nftId\\r\\n            )\\r\\n        );\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    /* ***************** */\\r\\n    /* FALLBACK FUNCTION */\\r\\n    /* ***************** */\\r\\n\\r\\n    // @notice By calling 'revert' in the fallback function, we prevent anyone\\r\\n    //         from accidentally sending funds directly to this contract.\\r\\n    fallback() external payable virtual {\\r\\n        revert();\\r\\n    }\\r\\n\\r\\n    receive() external payable virtual {\\r\\n        revert();\\r\\n    }\\r\\n\\r\\n    // @notice This function gets the current chain ID.\\r\\n    function getChainID() public view virtual returns (uint256) {\\r\\n        uint256 id;\\r\\n        assembly {\\r\\n            id := chainid()\\r\\n        }\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    function isValidBorrowerSignature(\\r\\n        uint256 _tokenId,\\r\\n        uint256 _borrowerNonce,\\r\\n        address _tokenAddress,\\r\\n        address _borrower,\\r\\n        bytes memory _borrowerSignature\\r\\n    ) public view virtual returns (bool) {\\r\\n        if (_borrower == address(0)) {\\r\\n            return false;\\r\\n        } else {\\r\\n            uint256 chainId;\\r\\n            chainId = getChainID();\\r\\n            bytes32 message = keccak256(\\r\\n                abi.encodePacked(\\r\\n                    _tokenId,\\r\\n                    _borrowerNonce,\\r\\n                    _tokenAddress,\\r\\n                    _borrower,\\r\\n                    chainId\\r\\n                )\\r\\n            );\\r\\n\\r\\n            bytes32 messageWithEthSignPrefix = message.toEthSignedMessageHash();\\r\\n\\r\\n            return (messageWithEthSignPrefix.recover(_borrowerSignature) ==\\r\\n                _borrower);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isValidLenderSignature(\\r\\n        uint256 _loanAmount,\\r\\n        uint256 _loanLeveragedAmount,\\r\\n        uint256 _repaymentAmount,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _loanDuration,\\r\\n        // uint256 _loanInterestRateForDurationInBasisPoints,\\r\\n        uint256 _commissionBasisPoints,\\r\\n        uint256 _lenderNonce,\\r\\n        address _tokenAddress,\\r\\n        address _paymentToken,\\r\\n        address _lender,\\r\\n        bool _liquidateViaAuction,\\r\\n        // bool _interestIsProRated,\\r\\n        bytes memory _lenderSignature\\r\\n    ) public view virtual returns (bool) {\\r\\n        if (_lender == address(0)) {\\r\\n            return false;\\r\\n        } else {\\r\\n            uint256 chainId;\\r\\n            chainId = getChainID();\\r\\n            bytes32 message = keccak256(\\r\\n                abi.encodePacked(\\r\\n                    _loanAmount,\\r\\n                    _loanLeveragedAmount,\\r\\n                    _repaymentAmount,\\r\\n                    _tokenId,\\r\\n                    _loanDuration,\\r\\n                    _commissionBasisPoints,\\r\\n                    _lenderNonce,\\r\\n                    _tokenAddress,\\r\\n                    _paymentToken,\\r\\n                    _lender,\\r\\n                    _liquidateViaAuction,\\r\\n                    chainId\\r\\n                )\\r\\n            );\\r\\n\\r\\n            bytes32 messageWithEthSignPrefix = message.toEthSignedMessageHash();\\r\\n\\r\\n            return (messageWithEthSignPrefix.recover(_lenderSignature) ==\\r\\n                _lender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // function computeInterestDistributionForLender(\\r\\n    //     uint256 _loanAmount,\\r\\n    //     uint256 _loanLeveragedAmount,\\r\\n    //     uint256 _interestDue\\r\\n    //     ) public pure virtual returns(uint256) {\\r\\n    //         uint256 rate = 55;\\r\\n    //         if (_loanLeveragedAmount != 0) {\\r\\n    //             uint256 leveraged = (_loanAmount).div(_loanLeveragedAmount);\\r\\n    //             if (leveraged <= 30) {\\r\\n    //                 rate = 50;\\r\\n    //             }\\r\\n    //             else if (leveraged <= 50) {\\r\\n    //                 rate = 45;\\r\\n    //             }\\r\\n    //             else if (leveraged <= 60) {\\r\\n    //                 rate = 40;\\r\\n    //             }\\r\\n    //             else if (leveraged <= 70) {\\r\\n    //                 rate = 35;\\r\\n    //             }\\r\\n    //             else if (leveraged <= 80) {\\r\\n    //                 rate = 25;\\r\\n    //             }\\r\\n    //             else if (leveraged <= 90) {\\r\\n    //                 rate = 15;\\r\\n    //             }\\r\\n    //             else {\\r\\n    //                 rate = 5;\\r\\n    //             }\\r\\n    //         }\\r\\n    //         return (_interestDue).mul(rate).div(10000);\\r\\n    // }\\r\\n\\r\\n    // function _computePriceOfLenderToPay(uint256 loanAmount, uint256 leveragedAmount, uint256 repaymentAmount) internal pure virtual returns(uint256) {\\r\\n    //     uint256 interestDue = (repaymentAmount).sub(loanAmount);\\r\\n    //         uint256 interestForLender = computeInterestDistributionForLender(\\r\\n    //             loanAmount,\\r\\n    //             leveragedAmount,\\r\\n    //             interestDue\\r\\n    //         );\\r\\n    //         return leveragedAmount.add(interestDue).sub(interestForLender);\\r\\n    // }\\r\\n\\r\\n    function computePriceOfLenderToPay(\\r\\n        uint256 _loanIndex\\r\\n    ) external view virtual returns (uint256) {\\r\\n        require(\\r\\n            !loanRepaidOrLiquidated[_loanIndex],\\r\\n            \\\"Loan has already been repaid or liquidated\\\"\\r\\n        );\\r\\n        Loan memory loan = indexToLoan[_loanIndex];\\r\\n\\r\\n        address lender = ownerOf(_loanIndex);\\r\\n\\r\\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(\\r\\n            loanRepaymentAddr\\r\\n        );\\r\\n        Repayment[] memory repayments = calculator.getDestinations(\\r\\n            _loanIndex,\\r\\n            loan.repaymentAmount,\\r\\n            loan.loanAmount,\\r\\n            lender\\r\\n        );\\r\\n        // IERC20 erc20 = IERC20(loan.paymentToken);\\r\\n        uint repaymentLength = repayments.length;\\r\\n        uint256 lenderToPay = 0;\\r\\n        for (uint idx = 0; idx < repaymentLength; idx++) {\\r\\n            Repayment memory repayment = repayments[idx];\\r\\n            if (msg.sender == repayment.targetAddress) {\\r\\n                continue;\\r\\n            }\\r\\n            lenderToPay += repayment.value;\\r\\n        }\\r\\n        return lenderToPay;\\r\\n        // // Fetch loan details from storage, but store them in memory for the\\r\\n        // // sake of saving gas.\\r\\n        // return _computePriceOfLenderToPay(loan.loanAmount, loan.loanLeveragedAmount, loan.repaymentAmount);\\r\\n    }\\r\\n\\r\\n    function _burnTrustDeed(uint256 loanIndex) internal virtual {\\r\\n        // check trust deed contract address is set\\r\\n        if (trustDeedAddr == address(0)) {\\r\\n            return;\\r\\n        }\\r\\n        TrustDeed trustDeedContract = TrustDeed(trustDeedAddr);\\r\\n        trustDeedContract.safeBurn(loanIndex);\\r\\n    }\\r\\n\\r\\n    function borrower(uint256 loanIndex) public view virtual returns (address) {\\r\\n        if (loanRepaidOrLiquidated[loanIndex]) {\\r\\n            return address(0);\\r\\n        }\\r\\n\\r\\n        // check trust deed contract address is set\\r\\n        if (trustDeedAddr != address(0)) {\\r\\n            TrustDeed trustDeedContract = TrustDeed(trustDeedAddr);\\r\\n            // check whether the trust deed has been issued\\r\\n            try trustDeedContract.ownerOf(loanIndex) returns (\\r\\n                address potentionBorrower\\r\\n            ) {\\r\\n                if (potentionBorrower != address(0)) {\\r\\n                    return potentionBorrower;\\r\\n                }\\r\\n            } catch {}\\r\\n        }\\r\\n\\r\\n        // if no trust deed has been issued, return original borrower\\r\\n        Loan memory loan = indexToLoan[loanIndex];\\r\\n\\r\\n        return loan.borrower;\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\\r\\n}\\r\\n\",\"keccak256\":\"0x33f1c083ef89f1d276ce320e251c7b4ec3b7f311c72a16e71b0fd8cfac2e2bbf\",\"license\":\"MIT\"},\"contracts/loan/TrustDeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\r\\nimport \\\"./PeriFiLoan.sol\\\";\\r\\nimport \\\"../PeriFiAdmin.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract TrustDeed is\\r\\n    ERC721URIStorageUpgradeable,\\r\\n    ERC721BurnableUpgradeable,\\r\\n    SimpleRoleAccess,\\r\\n    UUPSUpgradeable\\r\\n{\\r\\n    address payable public periFiLoanAddr;\\r\\n    address public periFiAdminAddr;\\r\\n\\r\\n    function initialize() public virtual initializer {\\r\\n        __ERC721_init(\\\"PeriFi Loan Trust Deed\\\", \\\"PTD\\\");\\r\\n        __MWOwnable_init();\\r\\n    }\\r\\n\\r\\n    function setLoanAddress(\\r\\n        address payable loanAddr\\r\\n    ) external virtual onlyOwner {\\r\\n        console.log(\\\"owner: %s sender: %s\\\", owner(), msg.sender);\\r\\n        periFiLoanAddr = loanAddr;\\r\\n    }\\r\\n\\r\\n    function setAdminAddress(address adminAddr) external virtual onlyOwner {\\r\\n        periFiAdminAddr = adminAddr;\\r\\n    }\\r\\n\\r\\n    function safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual onlyRole(\\\"minter\\\") {\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeBurn(uint256 tokenId) external virtual onlyRole(\\\"minter\\\") {\\r\\n        if (_exists(tokenId)) {\\r\\n            _burn(tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setTokenURI(uint256 tokenId, string memory uri) external virtual {\\r\\n        super._setTokenURI(tokenId, uri);\\r\\n    }\\r\\n\\r\\n    function tokenURI(\\r\\n        uint256 tokenId\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC721Upgradeable, ERC721URIStorageUpgradeable)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n\\r\\n    function _burn(\\r\\n        uint256 tokenId\\r\\n    )\\r\\n        internal\\r\\n        virtual\\r\\n        override(ERC721Upgradeable, ERC721URIStorageUpgradeable)\\r\\n    {\\r\\n        super._burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\\r\\n        PeriFiLoan periFiLoan = PeriFiLoan(periFiLoanAddr);\\r\\n        uint256 extraDuration = periFiAdmin.preLiquidationDuration();\\r\\n\\r\\n        require(\\r\\n            !periFiLoan.isOverdue(tokenId, extraDuration),\\r\\n            \\\"Loan is overdue\\\"\\r\\n        );\\r\\n        super.approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\\r\\n        PeriFiLoan periFiLoan = PeriFiLoan(periFiLoanAddr);\\r\\n        uint256 extraDuration = periFiAdmin.preLiquidationDuration();\\r\\n\\r\\n        require(\\r\\n            !periFiLoan.isOverdue(tokenId, extraDuration),\\r\\n            \\\"Loan is overdue\\\"\\r\\n        );\\r\\n        super.transferFrom(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\\r\\n        PeriFiLoan periFiLoan = PeriFiLoan(periFiLoanAddr);\\r\\n        uint256 extraDuration = periFiAdmin.preLiquidationDuration();\\r\\n\\r\\n        require(\\r\\n            !periFiLoan.isOverdue(tokenId, extraDuration),\\r\\n            \\\"Loan is overdue\\\"\\r\\n        );\\r\\n        super.safeTransferFrom(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\\r\\n        PeriFiLoan periFiLoan = PeriFiLoan(periFiLoanAddr);\\r\\n        uint256 extraDuration = periFiAdmin.preLiquidationDuration();\\r\\n\\r\\n        require(\\r\\n            !periFiLoan.isOverdue(tokenId, extraDuration),\\r\\n            \\\"Loan is overdue\\\"\\r\\n        );\\r\\n        super.safeTransferFrom(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\\r\\n}\\r\\n\",\"keccak256\":\"0x38fe8fb1f584be003551356c0fe0575b6d673ade64b98dce46cefc3df1395d7f\",\"license\":\"MIT\"},\"contracts/vault/LendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\nimport \\\"./Vault.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nerror NotSufficientBalanceInPool(\\r\\n    uint256 loanId,\\r\\n    uint256 balance,\\r\\n    uint256 requested\\r\\n);\\r\\nerror IllegalLeverageAccess(address sender, uint256 loanId, uint256 requested);\\r\\nerror AlreadyLeveragedLoan(uint256 loanId);\\r\\n\\r\\ncontract LendingPool is Vault, ReentrancyGuardUpgradeable {\\r\\n    address public loanAddress;\\r\\n\\r\\n    mapping(uint256 => bool) public leveragedLoan;\\r\\n\\r\\n    mapping(uint256 => uint256) public loanToLeverage;\\r\\n\\r\\n    mapping(uint256 => uint256) public loanToPoolUsageInBasisPoint;\\r\\n\\r\\n    function initialize(\\r\\n        string memory name\\r\\n    ) public virtual override initializer {\\r\\n        __Vault_init(name);\\r\\n        __MWOwnable_init();\\r\\n        __ReentrancyGuard_init();\\r\\n    }\\r\\n\\r\\n    function leverageLoan(\\r\\n        uint256 loanId,\\r\\n        address paymentToken,\\r\\n        uint256 leveragedAmount,\\r\\n        address borrower\\r\\n    ) external virtual nonReentrant onlyRole(\\\"spender\\\") {\\r\\n        if (leveragedLoan[loanId]) {\\r\\n            revert AlreadyLeveragedLoan(loanId);\\r\\n        }\\r\\n\\r\\n        if (leveragedAmount == 0) {\\r\\n            leveragedLoan[loanId] = true;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IERC20 erc20 = IERC20(paymentToken);\\r\\n        uint256 balance = erc20.balanceOf(address(this));\\r\\n\\r\\n        if (balance < leveragedAmount) {\\r\\n            revert NotSufficientBalanceInPool(loanId, balance, leveragedAmount);\\r\\n        }\\r\\n\\r\\n        erc20.transfer(borrower, leveragedAmount);\\r\\n        uint256 poolUsageInBasisPoint = (leveragedAmount * 10000) / balance;\\r\\n        loanToLeverage[loanId] = leveragedAmount;\\r\\n        loanToPoolUsageInBasisPoint[loanId] = poolUsageInBasisPoint;\\r\\n        leveragedLoan[loanId] = true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7951097d1c95a2f6e30e755d76ce4e835ebdb88dc04ed9a63de0920d03c0daae\",\"license\":\"MIT\"},\"contracts/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"../helpers/SignatureHelper.sol\\\";\\r\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\n\\r\\ncontract Vault is SimpleRoleAccess, UUPSUpgradeable {\\r\\n    using SignatureHelper for bytes32;\\r\\n\\r\\n    event Claimed(bytes _hash);\\r\\n\\r\\n    bytes4 private ERC1155_INTERFACE_ID;\\r\\n    string public name;\\r\\n\\r\\n    mapping(bytes => bool) public claimed;\\r\\n    // Balance name => token => amount\\r\\n    mapping(string => mapping(address => uint256)) public namedBalances;\\r\\n\\r\\n    function initialize(string memory _name) public virtual initializer {\\r\\n        __Vault_init(_name);\\r\\n        __MWOwnable_init();\\r\\n    }\\r\\n\\r\\n    function __Vault_init(\\r\\n        string memory _name\\r\\n    ) internal virtual onlyInitializing {\\r\\n        name = _name;\\r\\n        ERC1155_INTERFACE_ID = 0xd9b67a26;\\r\\n    }\\r\\n\\r\\n    function approveERC20Transfer(\\r\\n        address _tokenAddress,\\r\\n        address _spender,\\r\\n        uint256 _amount\\r\\n    ) external virtual onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.approve(_spender, _amount);\\r\\n    }\\r\\n\\r\\n    function transferERC20(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external virtual onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.transfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function setERC721ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function transferERC721(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.transferFrom(address(this), _to, _tokenId);\\r\\n    }\\r\\n\\r\\n    function transferERC1155(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeTransferFrom(address(this), _to, _id, _value, _data);\\r\\n    }\\r\\n\\r\\n    function transferERC1155Batch(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeBatchTransferFrom(address(this), _to, _ids, _values, _data);\\r\\n    }\\r\\n\\r\\n    function setERC1155ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function getNativeBalance() external view virtual returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function transferNative(\\r\\n        address payable _to,\\r\\n        uint256 _amount\\r\\n    ) public payable virtual onlyRole(\\\"spender\\\") {\\r\\n        (bool sent, ) = _to.call{ value: _amount }(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n\\r\\n    function burn(\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) public virtual onlyRole(\\\"spender\\\") {\\r\\n        ERC20Burnable(_token).burn(_amount);\\r\\n    }\\r\\n\\r\\n    function namedBalanceReceive(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        namedBalances[_name][_token] += _amount;\\r\\n    }\\r\\n\\r\\n    function namedBalanceSpend(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        require(\\r\\n            namedBalances[_name][_token] >= _amount,\\r\\n            \\\"Insufficient balance\\\"\\r\\n        );\\r\\n        namedBalances[_name][_token] -= _amount;\\r\\n    }\\r\\n\\r\\n    function getNamedBalance(\\r\\n        string memory _name,\\r\\n        address _token\\r\\n    ) external view virtual returns (uint256) {\\r\\n        uint256 balance = namedBalances[_name][_token];\\r\\n        uint256 actualBalance = _token == address(0)\\r\\n            ? payable(this).balance\\r\\n            : IERC20(_token).balanceOf(address(this));\\r\\n\\r\\n        return balance <= actualBalance ? balance : actualBalance;\\r\\n    }\\r\\n\\r\\n    function claim(\\r\\n        bytes[] memory _hashes,\\r\\n        bytes[] memory _signatures\\r\\n    ) external virtual {\\r\\n        require(\\r\\n            _hashes.length == _signatures.length,\\r\\n            \\\"Not matching hash and signature count\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < _hashes.length; i++) {\\r\\n            if (claimed[_hashes[i]]) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            (\\r\\n                address _recipientAddress,\\r\\n                address _tokenAddress,\\r\\n                uint256 _amount,\\r\\n                uint48 _timestamp\\r\\n            ) = abi.decode(_hashes[i], (address, address, uint256, uint48));\\r\\n\\r\\n            bytes32 _messageHash = keccak256(\\r\\n                abi.encodePacked(\\r\\n                    _recipientAddress,\\r\\n                    _tokenAddress,\\r\\n                    _amount,\\r\\n                    _timestamp\\r\\n                )\\r\\n            );\\r\\n\\r\\n            require(\\r\\n                _messageHash.recoverSigner(_signatures[i]) == owner(),\\r\\n                \\\"Invalid signature\\\"\\r\\n            );\\r\\n\\r\\n            require(_recipientAddress == msg.sender, \\\"Not recipient\\\");\\r\\n            require(block.timestamp >= _timestamp, \\\"Invalid timestamp\\\");\\r\\n            require(\\r\\n                IERC20(_tokenAddress).balanceOf(address(this)) >= _amount,\\r\\n                \\\"Insufficient pool balance\\\"\\r\\n            );\\r\\n\\r\\n            claimed[_hashes[i]] = true;\\r\\n            IERC20(_tokenAddress).transfer(msg.sender, _amount);\\r\\n            emit Claimed(_hashes[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n\\r\\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\\r\\n}\\r\\n\",\"keccak256\":\"0x08f1faf21b97709c47f65ae9f075a5658dfd07a2fdfed06f3197369389cff958\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523462000118576000546200003260ff8260081c16158092819362000109575b8115620000e6575b506200011d565b8062000046600160ff196000541617600055565b620000cb575b6200005662000181565b62000087575b30608052604051612db39081620001e28239608051818181610aed01528181610e9301526110030152f35b6200009861ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a16200005c565b620000e061010061ff00196000541617600055565b6200004c565b303b15915081620000fa575b50386200002b565b6001915060ff161438620000f2565b600160ff821610915062000023565b600080fd5b156200012557565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b60fb8054737e8ae5c72eca86946b695dcc211863d9721a09616001600160a01b0319821681179092556040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a356fe60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a71461027f57806306fdde0314610276578063081812fc1461026d578063095ea7b314610264578063162094c41461025b578063217fe6c61461025257806323b872dd146102495780632c1e816d146102405780632dcf2e69146102375780633659cfe61461022e57806339d2525f1461022557806342842e0e1461021c57806342966c68146102135780634f1ef2861461020a57806352d1902d146102015780636352211e146101f857806365b014b7146101ef57806370a08231146101e6578063715018a6146101dd5780638129fc1c146101d45780638da5cb5b146101cb57806395d89b41146101c25780639e45576e146101b9578063a1448194146101b0578063a22cb465146101a7578063b88d4fde1461019e578063c18c277514610195578063c87b56dd1461018c578063dbf5132514610183578063e985e9c51461017a5763f2fde38b1461017257600080fd5b61000e61195d565b5061000e6118f2565b5061000e611819565b5061000e6117e5565b5061000e6117bc565b5061000e611764565b5061000e611672565b5061000e6114a4565b5061000e6113c1565b5061000e611319565b5061000e6112f1565b5061000e61120f565b5061000e6111af565b5061000e611109565b5061000e6110de565b5061000e6110bf565b5061000e610fe7565b5061000e610e4d565b5061000e610d30565b5061000e610cff565b5061000e610c60565b5061000e610ac3565b5061000e610a9a565b5061000e610a51565b5061000e61097c565b5061000e6108c0565b5061000e6106fd565b5061000e610495565b5061000e610454565b5061000e610377565b5061000e61029a565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e5760206004356102ba81610288565b63ffffffff60e01b166380ac58cd60e01b81149081156102f8575b81156102e7575b506040519015158152f35b6301ffc9a760e01b149050386102dc565b635b5e139f60e01b811491506102d5565b918091926000905b828210610329575011610322575050565b6000910152565b91508060209183015181860152018291610311565b9060209161035781518092818552858086019101610309565b601f01601f1916010190565b90602061037492818152019061033e565b90565b503461000e5760008060031936011261045157604051908060655461039b81611e24565b8085529160019180831690811561043057506001146103d5575b6103d1856103c581870382610669565b60405191829182610363565b0390f35b9250606583527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c75b8284106104185750505081016020016103c5826103d16103b5565b805460208587018101919091529093019281016103fd565b60ff1916602087015250506040840192506103c591508390506103d16103b5565b80fd5b503461000e57602036600319011261000e576020610473600435611e5e565b6001600160a01b0360405191168152f35b6001600160a01b0381160361000e57565b503461000e57604036600319011261000e5761057b6004356104b681610484565b602435906105766104df6104d3610193546001600160a01b031690565b6001600160a01b031690565b6104f56104d3610192546001600160a01b031690565b90604051631464454560e21b8152610559602093828581600482966001600160a01b038099165afa9081156105e4575b6000916105b7575b50604051633a82233360e11b8152600481018a9052602481019190915293849283919082906044820190565b0392165afa9182156105aa575b60009261057d575b505015612987565b612a45565b005b61059c9250803d106105a3575b6105948183610669565b810190612972565b388061056e565b503d61058a565b6105b2611b0f565b610566565b6105d79150843d86116105dd575b6105cf8183610669565b810190611b00565b3861052d565b503d6105c5565b6105ec611b0f565b610525565b50634e487b7160e01b600052604160045260246000fd5b6020810190811067ffffffffffffffff82111761062457604052565b61062c6105f1565b604052565b6040810190811067ffffffffffffffff82111761062457604052565b6060810190811067ffffffffffffffff82111761062457604052565b90601f8019910116810190811067ffffffffffffffff82111761062457604052565b60209067ffffffffffffffff81116106a9575b601f01601f19160190565b6106b16105f1565b61069e565b81601f8201121561000e578035906106cd8261068b565b926106db6040519485610669565b8284526020838301011161000e57816000926020809301838601378301015290565b503461000e57604036600319011261000e5767ffffffffffffffff60043560243582811161000e576107339036906004016106b6565b916107548260005260676020526001600160a01b0360406000205416151590565b1561083e5760009182526020906097825260408320918451918211610831575b610788826107828554611e24565b856123a6565b80601f83116001146107c457508394829394926107b9575b50508160011b916000199060031b1c1916179055604051f35b0151905038806107a0565b90601f198316956107da85600052602060002090565b9286905b88821061081957505083600195969710610800575b505050811b019055604051f35b015160001960f88460031b161c191690553880806107f3565b806001859682949686015181550195019301906107de565b6108396105f1565b610774565b60405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201527f6578697374656e7420746f6b656e0000000000000000000000000000000000006064820152608490fd5b906108bc60209282815194859201610309565b0190565b503461000e57604036600319011261000e576004356108de81610484565b60243567ffffffffffffffff811161000e5761093360206103d1936001600160a01b0361091160ff9536906004016106b6565b911660005261012d825260406000208260405194838680955193849201610309565b820190815203019020546040519116151581529081906020820190565b606090600319011261000e5760043561096881610484565b9060243561097581610484565b9060443590565b503461000e5761057b61098e36610950565b91610a226109a86104d3610193546001600160a01b031690565b6109be6104d3610192546001600160a01b031690565b90604051631464454560e21b8152610559602093828581600482966001600160a01b038099165afa908115610a44575b600091610a27575b50604051633a82233360e11b8152600481018b9052602481019190915293849283919082906044820190565b612b78565b610a3e9150843d86116105dd576105cf8183610669565b386109f6565b610a4c611b0f565b6109ee565b503461000e57602036600319011261000e57600435610a6f81610484565b610a7761203e565b6001600160a01b0361019391166001600160a01b03198254161790556000604051f35b503461000e57600036600319011261000e5760206001600160a01b036101925416604051908152f35b503461000e57602036600319011261000e57600435610ae181610484565b6001600160a01b0390817f00000000000000000000000000000000000000000000000000000000000000001691610b1a83301415611a2b565b610b497f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc938285541614611a8c565b610b5161203e565b60405190610b5e82610608565b600082527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b9857505061057b9150611b7a565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181610c36575b50610c235760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b0390fd5b61057b93610c319114611b1c565b611c18565b610c4f91925060203d81116105dd576105cf8183610669565b9038610bbe565b8015150361000e57565b503461000e57606036600319011261000e57600435610c7e81610484565b6024359067ffffffffffffffff821161000e57610ce56020610ca761057b9436906004016106b6565b6001600160a01b0360443594610cbc86610c56565b610cc461203e565b1660005261012d825260406000208260405194838680955193849201610309565b8201908152030190209060ff801983541691151516179055565b503461000e5761057b610d1136610950565b91610d2b6109a86104d3610193546001600160a01b031690565b612d1e565b503461000e57602036600319011261000e57600435610d57610d528233611f02565b611ea0565b610d6081611e02565b508060006001600160a01b03610d7583611e02565b610d89846000526069602052604060002090565b82198154169055610dad816001600160a01b03166000526068602052604060002090565b83198154019055610de8610dcb856000526067602052604060002090565b805473ffffffffffffffffffffffffffffffffffffffff19169055565b167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef82604051a4610e2b610e26826000526097602052604060002090565b61291c565b610e3157005b610e4861057b916000526097602052604060002090565b612926565b50604036600319011261000e57600435610e6681610484565b60243567ffffffffffffffff811161000e57610e869036906004016106b6565b906001600160a01b0391827f00000000000000000000000000000000000000000000000000000000000000001692610ec084301415611a2b565b610eef7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc948286541614611a8c565b610ef761203e565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610f2d57505061057b9150611b7a565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181610fc7575b50610fb45760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b61057b93610fc29114611b1c565b611d30565b610fe091925060203d81116105dd576105cf8183610669565b9038610f53565b503461000e57600036600319011261000e576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611054576040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152602090f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b503461000e57602036600319011261000e576020610473600435611e02565b503461000e57600036600319011261000e5761110160ff60005460081c16611fc3565b61057b612096565b503461000e57602036600319011261000e576001600160a01b0360043561112f81610484565b1680156111585760005260686020526103d1604060002054604051918291829190602083019252565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b503461000e57600080600319360112610451576111ca61203e565b60fb546001600160a01b0319811660fb55816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e57600036600319011261000e5760005461124560ff8260081c1615809281936112e3575b81156112c3575b506120ea565b80611258600160ff196000541617600055565b6112aa575b61126561215c565b61126b57005b61127b61ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b6112be61010061ff00196000541617600055565b61125d565b303b159150816112d5575b503861123f565b6001915060ff1614386112ce565b600160ff8216109150611238565b503461000e57600036600319011261000e5760206001600160a01b0360fb5416604051908152f35b503461000e5760008060031936011261045157604051908060665461133d81611e24565b808552916001918083169081156104305750600114611366576103d1856103c581870382610669565b9250606683527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e943545b8284106113a95750505081016020016103c5826103d16103b5565b8054602085870181019190915290930192810161138e565b503461000e57602036600319011261000e5761057b6004356113e281610484565b6113ea61203e565b6000806001600160a01b0360fb54166040519061140682610631565b601482527f6f776e65723a2025732073656e6465723a2025730000000000000000000000006020830152611475604051809261145b60208301956307e763af60e51b875260606024850152608484019061033e565b90604483015233606483015203601f198101835282610669565b51906a636f6e736f6c652e6c6f675afa506001600160a01b0361019291166001600160a01b0319825416179055565b503461000e5760408060031936011261000e57600435906114c482610484565b6024356114cf6124d8565b926114f16001600160a01b03948560fb54163314908115611638575b506124fa565b8251936114fd85610608565b60008552811680156115f55793826115ed928160009761154561154061153c6115f29960005260676020526001600160a01b0360406000205416151590565b1590565b6125ad565b61156b61154061153c8460005260676020526001600160a01b0360406000205416151590565b611588836001600160a01b03166000526068602052604060002090565b600181540190556115c2836115a7846000526067602052604060002090565b906001600160a01b03166001600160a01b0319825416179055565b887fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef818a51a4612669565b612546565b51f35b6064845162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b60ff91506020611661913360005261012d82528760002082895194838680955193849201610309565b8201908152030190205416386114eb565b503461000e57604036600319011261000e5760043561169081610484565b60243561169c81610c56565b6001600160a01b0382169182331461171f57816116dc6116ed9233600052606a6020526040600020906001600160a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b503461000e57608036600319011261000e5760043561178281610484565b60243561178e81610484565b6064359167ffffffffffffffff831161000e576117b261057b9336906004016106b6565b9160443591612d36565b503461000e57600036600319011261000e5760206001600160a01b036101935416604051908152f35b503461000e57602036600319011261000e576103d16118056004356127b5565b60405191829160208352602083019061033e565b503461000e57602036600319011261000e576004356118366124d8565b6118566001600160a01b03918260fb541633149081156118c757506124fa565b6118768260005260676020526001600160a01b0360406000205416151590565b61187c57005b6000829161188983611e02565b5061189383611e02565b6118aa610dcb856000526069602052604060002090565b610dad816001600160a01b03166000526068602052604060002090565b60ff91506020611661913360005261012d825260406000208260405194838680955193849201610309565b503461000e57604036600319011261000e57602060ff61195160043561191781610484565b6001600160a01b036024359161192c83610484565b16600052606a84526040600020906001600160a01b0316600052602052604060002090565b54166040519015158152f35b503461000e57602036600319011261000e5760043561197b81610484565b61198361203e565b6001600160a01b038091169081156119d75760009160fb5491816001600160a01b031984161760fb5560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b15611a3257565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15611a9357565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b60405190611afa82610608565b60008252565b9081602091031261000e575190565b506040513d6000823e3d90fd5b15611b2357565b60405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b803b15611bbd576001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91166001600160a01b0319825416179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b611c2181611b7a565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a2825115801590611d28575b611c6757505050565b813b15611cd7575060008281926020611cd495519201905af4611c88611d86565b60405191611c958361064d565b602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020840152660819985a5b195960ca1b6040840152611f83565b50565b62461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b506000611c5e565b611d3981611b7a565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a2825115801590611d7e57611c6757505050565b506001611c5e565b3d15611db1573d90611d978261068b565b91611da56040519384610669565b82523d6000602084013e565b606090565b15611dbd57565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b60005260676020526001600160a01b0360406000205416610374811515611db6565b90600182811c92168015611e54575b6020831014611e3e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611e33565b611e86611e818260005260676020526001600160a01b0360406000205416151590565b611db6565b60005260696020526001600160a01b036040600020541690565b15611ea757565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b6001600160a01b0380611f1484611e02565b169281831692848414948515611f4a575b50508315611f34575b50505090565b611f4091929350611e5e565b1614388080611f2e565b60ff92955090611f7991600052606a6020526040600020906001600160a01b0316600052602052604060002090565b5416923880611f25565b90919015611f8f575090565b815115611f9f5750805190602001fd5b60405162461bcd60e51b815260206004820152908190610c1f90602483019061033e565b15611fca57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61203460ff60005460081c16611fc3565b61203c612096565b565b6001600160a01b0360fb5416330361205257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60fb546001600160a01b03737e8ae5c72eca86946b695dcc211863d9721a09619182821982161760fb55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b156120f157565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608490fd5b60405161216881610631565b6016815260207f506572694669204c6f616e20547275737420446565640000000000000000000081830152604051906121a082610631565b600382526214151160ea1b818301526121c960ff60005460081c166121c481611fc3565b611fc3565b82519067ffffffffffffffff82116122cb575b6121f0826121eb606554611e24565b6122ef565b80601f8311600114612238575081906122259460009261222d575b50508160011b916000199060031b1c1916176065556123e0565b61203c612023565b01519050388061220b565b919293601f19841661226c60656000527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c790565b936000905b8282106122b35750509160019391856122259796941061229a575b505050811b016065556123e0565b015160001960f88460031b161c1916905538808061228c565b80600186978294978701518155019601940190612271565b6122d36105f1565b6121dc565b8181106122e3575050565b600081556001016122d8565b90601f82116122fc575050565b61203c9160656000527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c7906020601f840160051c83019310612346575b601f0160051c01906122d8565b9091508190612339565b90601f821161235d575050565b61203c9160666000527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e94354906020601f840160051c8301931061234657601f0160051c01906122d8565b9190601f81116123b557505050565b61203c926000526020600020906020601f840160051c8301931061234657601f0160051c01906122d8565b90815167ffffffffffffffff81116124cb575b61240781612402606654611e24565b612350565b602080601f83116001146124435750819293600092612438575b50508160011b916000199060031b1c191617606655565b015190503880612421565b90601f1983169461247660666000527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e9435490565b926000905b8782106124b357505083600195961061249a575b505050811b01606655565b015160001960f88460031b161c1916905538808061248f565b8060018596829496860151815501950193019061247b565b6124d36105f1565b6123f3565b604051906124e582610631565b600682526536b4b73a32b960d11b6020830152565b1561250157565b60405162461bcd60e51b815260206004820152600e60248201527f4e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606490fd5b1561254d57565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b156125b457565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b9081602091031261000e575161037481610288565b61037493926001600160a01b03608093168252600060208301526040820152816060820152019061033e565b909261037494936080936001600160a01b0380921684521660208301526040820152816060820152019061033e565b909190803b15612769576126a36020916001600160a01b03936000604051958680958194630a85bd0160e11b9a8b8452336004850161260e565b0393165af160009181612739575b5061272b576126be611d86565b805190816127265760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b602001fd5b6001600160e01b0319161490565b61275b91925060203d8111612762575b6127538183610669565b8101906125f9565b90386126b1565b503d612749565b505050600190565b92909190823b156127ac576126a39260209260006001600160a01b03604051809781968295630a85bd0160e11b9b8c8552336004860161263a565b50505050600190565b6127d8611e818260005260676020526001600160a01b0360406000205416151590565b60009080825260206097815260408320604051848195908354906127fb82611e24565b808552946001928084169081156128b7575060011461287b575b50505061282492500384610669565b61282c611aed565b9283511561287457805161284657505061037491506128d7565b6103749250612866906128606040519586948501906108a9565b906108a9565b03601f198101835282610669565b9250505090565b869350819291528282205b85831061289f5750506128249350820101388080612815565b8054838a018501528894508693909201918101612886565b965050505050505060ff1916818401526128248360408101388080612815565b611e816128fa9160005260676020526001600160a01b0360406000205416151590565b600060405161290881610608565b5260405161291581610608565b6000815290565b6103749054611e24565b6129308154611e24565b908161293a575050565b81601f6000931160011461294c575055565b8183526020832061296891601f0160051c8101906001016122d8565b8160208120915555565b9081602091031261000e575161037481610c56565b1561298e57565b60405162461bcd60e51b815260206004820152600f60248201527f4c6f616e206973206f76657264756500000000000000000000000000000000006044820152606490fd5b156129da57565b60405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608490fd5b906001600160a01b039182612a5983611e02565b168093821614612ab6578261203c9333148015612a80575b612a7b91506129d3565b612b05565b50600052606a602052612a7b60ff612aaf336040600020906001600160a01b0316600052602052604060002090565b5416612a71565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b6000828152606960205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556001600160a01b0380612b4b84611e02565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b9061203c9291612b8b610d528433611f02565b612bea565b15612b9757565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b612c0e90612bf784611e02565b6001600160a01b0382811693909182168414612b90565b8316928315612ccd57612c64612ca492612c3485612c2e6104d38a611e02565b14612b90565b612c4b610dcb886000526069602052604060002090565b6001600160a01b03166000526068602052604060002090565b6000198154019055612c89816001600160a01b03166000526068602052604060002090565b600181540190556115a7856000526067602052604060002090565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b909161203c9260405192612d3184610608565b600084525b9061203c939291612d566109a86104d3610193546001600160a01b031690565b9161203c93916115ed93612d6d610d528433611f02565b612d78838383612bea565b61277156fea264697066735822122011f653c002de36d1f7f3647bf9ce0c195d9233986b44272a56a847e50ece1e2864736f6c634300080e0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a71461027f57806306fdde0314610276578063081812fc1461026d578063095ea7b314610264578063162094c41461025b578063217fe6c61461025257806323b872dd146102495780632c1e816d146102405780632dcf2e69146102375780633659cfe61461022e57806339d2525f1461022557806342842e0e1461021c57806342966c68146102135780634f1ef2861461020a57806352d1902d146102015780636352211e146101f857806365b014b7146101ef57806370a08231146101e6578063715018a6146101dd5780638129fc1c146101d45780638da5cb5b146101cb57806395d89b41146101c25780639e45576e146101b9578063a1448194146101b0578063a22cb465146101a7578063b88d4fde1461019e578063c18c277514610195578063c87b56dd1461018c578063dbf5132514610183578063e985e9c51461017a5763f2fde38b1461017257600080fd5b61000e61195d565b5061000e6118f2565b5061000e611819565b5061000e6117e5565b5061000e6117bc565b5061000e611764565b5061000e611672565b5061000e6114a4565b5061000e6113c1565b5061000e611319565b5061000e6112f1565b5061000e61120f565b5061000e6111af565b5061000e611109565b5061000e6110de565b5061000e6110bf565b5061000e610fe7565b5061000e610e4d565b5061000e610d30565b5061000e610cff565b5061000e610c60565b5061000e610ac3565b5061000e610a9a565b5061000e610a51565b5061000e61097c565b5061000e6108c0565b5061000e6106fd565b5061000e610495565b5061000e610454565b5061000e610377565b5061000e61029a565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e5760206004356102ba81610288565b63ffffffff60e01b166380ac58cd60e01b81149081156102f8575b81156102e7575b506040519015158152f35b6301ffc9a760e01b149050386102dc565b635b5e139f60e01b811491506102d5565b918091926000905b828210610329575011610322575050565b6000910152565b91508060209183015181860152018291610311565b9060209161035781518092818552858086019101610309565b601f01601f1916010190565b90602061037492818152019061033e565b90565b503461000e5760008060031936011261045157604051908060655461039b81611e24565b8085529160019180831690811561043057506001146103d5575b6103d1856103c581870382610669565b60405191829182610363565b0390f35b9250606583527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c75b8284106104185750505081016020016103c5826103d16103b5565b805460208587018101919091529093019281016103fd565b60ff1916602087015250506040840192506103c591508390506103d16103b5565b80fd5b503461000e57602036600319011261000e576020610473600435611e5e565b6001600160a01b0360405191168152f35b6001600160a01b0381160361000e57565b503461000e57604036600319011261000e5761057b6004356104b681610484565b602435906105766104df6104d3610193546001600160a01b031690565b6001600160a01b031690565b6104f56104d3610192546001600160a01b031690565b90604051631464454560e21b8152610559602093828581600482966001600160a01b038099165afa9081156105e4575b6000916105b7575b50604051633a82233360e11b8152600481018a9052602481019190915293849283919082906044820190565b0392165afa9182156105aa575b60009261057d575b505015612987565b612a45565b005b61059c9250803d106105a3575b6105948183610669565b810190612972565b388061056e565b503d61058a565b6105b2611b0f565b610566565b6105d79150843d86116105dd575b6105cf8183610669565b810190611b00565b3861052d565b503d6105c5565b6105ec611b0f565b610525565b50634e487b7160e01b600052604160045260246000fd5b6020810190811067ffffffffffffffff82111761062457604052565b61062c6105f1565b604052565b6040810190811067ffffffffffffffff82111761062457604052565b6060810190811067ffffffffffffffff82111761062457604052565b90601f8019910116810190811067ffffffffffffffff82111761062457604052565b60209067ffffffffffffffff81116106a9575b601f01601f19160190565b6106b16105f1565b61069e565b81601f8201121561000e578035906106cd8261068b565b926106db6040519485610669565b8284526020838301011161000e57816000926020809301838601378301015290565b503461000e57604036600319011261000e5767ffffffffffffffff60043560243582811161000e576107339036906004016106b6565b916107548260005260676020526001600160a01b0360406000205416151590565b1561083e5760009182526020906097825260408320918451918211610831575b610788826107828554611e24565b856123a6565b80601f83116001146107c457508394829394926107b9575b50508160011b916000199060031b1c1916179055604051f35b0151905038806107a0565b90601f198316956107da85600052602060002090565b9286905b88821061081957505083600195969710610800575b505050811b019055604051f35b015160001960f88460031b161c191690553880806107f3565b806001859682949686015181550195019301906107de565b6108396105f1565b610774565b60405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201527f6578697374656e7420746f6b656e0000000000000000000000000000000000006064820152608490fd5b906108bc60209282815194859201610309565b0190565b503461000e57604036600319011261000e576004356108de81610484565b60243567ffffffffffffffff811161000e5761093360206103d1936001600160a01b0361091160ff9536906004016106b6565b911660005261012d825260406000208260405194838680955193849201610309565b820190815203019020546040519116151581529081906020820190565b606090600319011261000e5760043561096881610484565b9060243561097581610484565b9060443590565b503461000e5761057b61098e36610950565b91610a226109a86104d3610193546001600160a01b031690565b6109be6104d3610192546001600160a01b031690565b90604051631464454560e21b8152610559602093828581600482966001600160a01b038099165afa908115610a44575b600091610a27575b50604051633a82233360e11b8152600481018b9052602481019190915293849283919082906044820190565b612b78565b610a3e9150843d86116105dd576105cf8183610669565b386109f6565b610a4c611b0f565b6109ee565b503461000e57602036600319011261000e57600435610a6f81610484565b610a7761203e565b6001600160a01b0361019391166001600160a01b03198254161790556000604051f35b503461000e57600036600319011261000e5760206001600160a01b036101925416604051908152f35b503461000e57602036600319011261000e57600435610ae181610484565b6001600160a01b0390817f00000000000000000000000000000000000000000000000000000000000000001691610b1a83301415611a2b565b610b497f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc938285541614611a8c565b610b5161203e565b60405190610b5e82610608565b600082527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b9857505061057b9150611b7a565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181610c36575b50610c235760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b0390fd5b61057b93610c319114611b1c565b611c18565b610c4f91925060203d81116105dd576105cf8183610669565b9038610bbe565b8015150361000e57565b503461000e57606036600319011261000e57600435610c7e81610484565b6024359067ffffffffffffffff821161000e57610ce56020610ca761057b9436906004016106b6565b6001600160a01b0360443594610cbc86610c56565b610cc461203e565b1660005261012d825260406000208260405194838680955193849201610309565b8201908152030190209060ff801983541691151516179055565b503461000e5761057b610d1136610950565b91610d2b6109a86104d3610193546001600160a01b031690565b612d1e565b503461000e57602036600319011261000e57600435610d57610d528233611f02565b611ea0565b610d6081611e02565b508060006001600160a01b03610d7583611e02565b610d89846000526069602052604060002090565b82198154169055610dad816001600160a01b03166000526068602052604060002090565b83198154019055610de8610dcb856000526067602052604060002090565b805473ffffffffffffffffffffffffffffffffffffffff19169055565b167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef82604051a4610e2b610e26826000526097602052604060002090565b61291c565b610e3157005b610e4861057b916000526097602052604060002090565b612926565b50604036600319011261000e57600435610e6681610484565b60243567ffffffffffffffff811161000e57610e869036906004016106b6565b906001600160a01b0391827f00000000000000000000000000000000000000000000000000000000000000001692610ec084301415611a2b565b610eef7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc948286541614611a8c565b610ef761203e565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610f2d57505061057b9150611b7a565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181610fc7575b50610fb45760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b61057b93610fc29114611b1c565b611d30565b610fe091925060203d81116105dd576105cf8183610669565b9038610f53565b503461000e57600036600319011261000e576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611054576040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152602090f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b503461000e57602036600319011261000e576020610473600435611e02565b503461000e57600036600319011261000e5761110160ff60005460081c16611fc3565b61057b612096565b503461000e57602036600319011261000e576001600160a01b0360043561112f81610484565b1680156111585760005260686020526103d1604060002054604051918291829190602083019252565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b503461000e57600080600319360112610451576111ca61203e565b60fb546001600160a01b0319811660fb55816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e57600036600319011261000e5760005461124560ff8260081c1615809281936112e3575b81156112c3575b506120ea565b80611258600160ff196000541617600055565b6112aa575b61126561215c565b61126b57005b61127b61ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b6112be61010061ff00196000541617600055565b61125d565b303b159150816112d5575b503861123f565b6001915060ff1614386112ce565b600160ff8216109150611238565b503461000e57600036600319011261000e5760206001600160a01b0360fb5416604051908152f35b503461000e5760008060031936011261045157604051908060665461133d81611e24565b808552916001918083169081156104305750600114611366576103d1856103c581870382610669565b9250606683527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e943545b8284106113a95750505081016020016103c5826103d16103b5565b8054602085870181019190915290930192810161138e565b503461000e57602036600319011261000e5761057b6004356113e281610484565b6113ea61203e565b6000806001600160a01b0360fb54166040519061140682610631565b601482527f6f776e65723a2025732073656e6465723a2025730000000000000000000000006020830152611475604051809261145b60208301956307e763af60e51b875260606024850152608484019061033e565b90604483015233606483015203601f198101835282610669565b51906a636f6e736f6c652e6c6f675afa506001600160a01b0361019291166001600160a01b0319825416179055565b503461000e5760408060031936011261000e57600435906114c482610484565b6024356114cf6124d8565b926114f16001600160a01b03948560fb54163314908115611638575b506124fa565b8251936114fd85610608565b60008552811680156115f55793826115ed928160009761154561154061153c6115f29960005260676020526001600160a01b0360406000205416151590565b1590565b6125ad565b61156b61154061153c8460005260676020526001600160a01b0360406000205416151590565b611588836001600160a01b03166000526068602052604060002090565b600181540190556115c2836115a7846000526067602052604060002090565b906001600160a01b03166001600160a01b0319825416179055565b887fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef818a51a4612669565b612546565b51f35b6064845162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b60ff91506020611661913360005261012d82528760002082895194838680955193849201610309565b8201908152030190205416386114eb565b503461000e57604036600319011261000e5760043561169081610484565b60243561169c81610c56565b6001600160a01b0382169182331461171f57816116dc6116ed9233600052606a6020526040600020906001600160a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b503461000e57608036600319011261000e5760043561178281610484565b60243561178e81610484565b6064359167ffffffffffffffff831161000e576117b261057b9336906004016106b6565b9160443591612d36565b503461000e57600036600319011261000e5760206001600160a01b036101935416604051908152f35b503461000e57602036600319011261000e576103d16118056004356127b5565b60405191829160208352602083019061033e565b503461000e57602036600319011261000e576004356118366124d8565b6118566001600160a01b03918260fb541633149081156118c757506124fa565b6118768260005260676020526001600160a01b0360406000205416151590565b61187c57005b6000829161188983611e02565b5061189383611e02565b6118aa610dcb856000526069602052604060002090565b610dad816001600160a01b03166000526068602052604060002090565b60ff91506020611661913360005261012d825260406000208260405194838680955193849201610309565b503461000e57604036600319011261000e57602060ff61195160043561191781610484565b6001600160a01b036024359161192c83610484565b16600052606a84526040600020906001600160a01b0316600052602052604060002090565b54166040519015158152f35b503461000e57602036600319011261000e5760043561197b81610484565b61198361203e565b6001600160a01b038091169081156119d75760009160fb5491816001600160a01b031984161760fb5560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b15611a3257565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15611a9357565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b60405190611afa82610608565b60008252565b9081602091031261000e575190565b506040513d6000823e3d90fd5b15611b2357565b60405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b803b15611bbd576001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91166001600160a01b0319825416179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b611c2181611b7a565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a2825115801590611d28575b611c6757505050565b813b15611cd7575060008281926020611cd495519201905af4611c88611d86565b60405191611c958361064d565b602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020840152660819985a5b195960ca1b6040840152611f83565b50565b62461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b506000611c5e565b611d3981611b7a565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a2825115801590611d7e57611c6757505050565b506001611c5e565b3d15611db1573d90611d978261068b565b91611da56040519384610669565b82523d6000602084013e565b606090565b15611dbd57565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b60005260676020526001600160a01b0360406000205416610374811515611db6565b90600182811c92168015611e54575b6020831014611e3e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611e33565b611e86611e818260005260676020526001600160a01b0360406000205416151590565b611db6565b60005260696020526001600160a01b036040600020541690565b15611ea757565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b6001600160a01b0380611f1484611e02565b169281831692848414948515611f4a575b50508315611f34575b50505090565b611f4091929350611e5e565b1614388080611f2e565b60ff92955090611f7991600052606a6020526040600020906001600160a01b0316600052602052604060002090565b5416923880611f25565b90919015611f8f575090565b815115611f9f5750805190602001fd5b60405162461bcd60e51b815260206004820152908190610c1f90602483019061033e565b15611fca57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61203460ff60005460081c16611fc3565b61203c612096565b565b6001600160a01b0360fb5416330361205257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60fb546001600160a01b03737e8ae5c72eca86946b695dcc211863d9721a09619182821982161760fb55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b156120f157565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608490fd5b60405161216881610631565b6016815260207f506572694669204c6f616e20547275737420446565640000000000000000000081830152604051906121a082610631565b600382526214151160ea1b818301526121c960ff60005460081c166121c481611fc3565b611fc3565b82519067ffffffffffffffff82116122cb575b6121f0826121eb606554611e24565b6122ef565b80601f8311600114612238575081906122259460009261222d575b50508160011b916000199060031b1c1916176065556123e0565b61203c612023565b01519050388061220b565b919293601f19841661226c60656000527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c790565b936000905b8282106122b35750509160019391856122259796941061229a575b505050811b016065556123e0565b015160001960f88460031b161c1916905538808061228c565b80600186978294978701518155019601940190612271565b6122d36105f1565b6121dc565b8181106122e3575050565b600081556001016122d8565b90601f82116122fc575050565b61203c9160656000527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c7906020601f840160051c83019310612346575b601f0160051c01906122d8565b9091508190612339565b90601f821161235d575050565b61203c9160666000527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e94354906020601f840160051c8301931061234657601f0160051c01906122d8565b9190601f81116123b557505050565b61203c926000526020600020906020601f840160051c8301931061234657601f0160051c01906122d8565b90815167ffffffffffffffff81116124cb575b61240781612402606654611e24565b612350565b602080601f83116001146124435750819293600092612438575b50508160011b916000199060031b1c191617606655565b015190503880612421565b90601f1983169461247660666000527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e9435490565b926000905b8782106124b357505083600195961061249a575b505050811b01606655565b015160001960f88460031b161c1916905538808061248f565b8060018596829496860151815501950193019061247b565b6124d36105f1565b6123f3565b604051906124e582610631565b600682526536b4b73a32b960d11b6020830152565b1561250157565b60405162461bcd60e51b815260206004820152600e60248201527f4e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606490fd5b1561254d57565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b156125b457565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b9081602091031261000e575161037481610288565b61037493926001600160a01b03608093168252600060208301526040820152816060820152019061033e565b909261037494936080936001600160a01b0380921684521660208301526040820152816060820152019061033e565b909190803b15612769576126a36020916001600160a01b03936000604051958680958194630a85bd0160e11b9a8b8452336004850161260e565b0393165af160009181612739575b5061272b576126be611d86565b805190816127265760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b602001fd5b6001600160e01b0319161490565b61275b91925060203d8111612762575b6127538183610669565b8101906125f9565b90386126b1565b503d612749565b505050600190565b92909190823b156127ac576126a39260209260006001600160a01b03604051809781968295630a85bd0160e11b9b8c8552336004860161263a565b50505050600190565b6127d8611e818260005260676020526001600160a01b0360406000205416151590565b60009080825260206097815260408320604051848195908354906127fb82611e24565b808552946001928084169081156128b7575060011461287b575b50505061282492500384610669565b61282c611aed565b9283511561287457805161284657505061037491506128d7565b6103749250612866906128606040519586948501906108a9565b906108a9565b03601f198101835282610669565b9250505090565b869350819291528282205b85831061289f5750506128249350820101388080612815565b8054838a018501528894508693909201918101612886565b965050505050505060ff1916818401526128248360408101388080612815565b611e816128fa9160005260676020526001600160a01b0360406000205416151590565b600060405161290881610608565b5260405161291581610608565b6000815290565b6103749054611e24565b6129308154611e24565b908161293a575050565b81601f6000931160011461294c575055565b8183526020832061296891601f0160051c8101906001016122d8565b8160208120915555565b9081602091031261000e575161037481610c56565b1561298e57565b60405162461bcd60e51b815260206004820152600f60248201527f4c6f616e206973206f76657264756500000000000000000000000000000000006044820152606490fd5b156129da57565b60405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608490fd5b906001600160a01b039182612a5983611e02565b168093821614612ab6578261203c9333148015612a80575b612a7b91506129d3565b612b05565b50600052606a602052612a7b60ff612aaf336040600020906001600160a01b0316600052602052604060002090565b5416612a71565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b6000828152606960205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556001600160a01b0380612b4b84611e02565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b9061203c9291612b8b610d528433611f02565b612bea565b15612b9757565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b612c0e90612bf784611e02565b6001600160a01b0382811693909182168414612b90565b8316928315612ccd57612c64612ca492612c3485612c2e6104d38a611e02565b14612b90565b612c4b610dcb886000526069602052604060002090565b6001600160a01b03166000526068602052604060002090565b6000198154019055612c89816001600160a01b03166000526068602052604060002090565b600181540190556115a7856000526067602052604060002090565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b909161203c9260405192612d3184610608565b600084525b9061203c939291612d566109a86104d3610193546001600160a01b031690565b9161203c93916115ed93612d6d610d528433611f02565b612d78838383612bea565b61277156fea264697066735822122011f653c002de36d1f7f3647bf9ce0c195d9233986b44272a56a847e50ece1e2864736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 674,
        "contract": "contracts/loan/TrustDeed.sol:TrustDeed",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 677,
        "contract": "contracts/loan/TrustDeed.sol:TrustDeed",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4007,
        "contract": "contracts/loan/TrustDeed.sol:TrustDeed",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4788,
        "contract": "contracts/loan/TrustDeed.sol:TrustDeed",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1980,
        "contract": "contracts/loan/TrustDeed.sol:TrustDeed",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1982,
        "contract": "contracts/loan/TrustDeed.sol:TrustDeed",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1986,
        "contract": "contracts/loan/TrustDeed.sol:TrustDeed",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1990,
        "contract": "contracts/loan/TrustDeed.sol:TrustDeed",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1994,
        "contract": "contracts/loan/TrustDeed.sol:TrustDeed",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2000,
        "contract": "contracts/loan/TrustDeed.sol:TrustDeed",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2920,
        "contract": "contracts/loan/TrustDeed.sol:TrustDeed",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 3507,
        "contract": "contracts/loan/TrustDeed.sol:TrustDeed",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3623,
        "contract": "contracts/loan/TrustDeed.sol:TrustDeed",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3104,
        "contract": "contracts/loan/TrustDeed.sol:TrustDeed",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9827,
        "contract": "contracts/loan/TrustDeed.sol:TrustDeed",
        "label": "_owner",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 9947,
        "contract": "contracts/loan/TrustDeed.sol:TrustDeed",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9959,
        "contract": "contracts/loan/TrustDeed.sol:TrustDeed",
        "label": "hasRole",
        "offset": 0,
        "slot": "301",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))"
      },
      {
        "astId": 656,
        "contract": "contracts/loan/TrustDeed.sol:TrustDeed",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 971,
        "contract": "contracts/loan/TrustDeed.sol:TrustDeed",
        "label": "__gap",
        "offset": 0,
        "slot": "352",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 25112,
        "contract": "contracts/loan/TrustDeed.sol:TrustDeed",
        "label": "periFiLoanAddr",
        "offset": 0,
        "slot": "402",
        "type": "t_address_payable"
      },
      {
        "astId": 25114,
        "contract": "contracts/loan/TrustDeed.sol:TrustDeed",
        "label": "periFiAdminAddr",
        "offset": 0,
        "slot": "403",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}