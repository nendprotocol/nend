{
  "language": "Solidity",
  "sources": {
    "contracts/PeriFiAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract PeriFiAdmin is Ownable {\r\n    event InterestForIVUpdated(\r\n        uint256 basisPointValue\r\n    );\r\n\r\n    event LiquidationThresholdUpdated(\r\n        uint256 basisPointValue\r\n    );\r\n\r\n    event ProtectionDurationUpdated(\r\n        uint256 durationInSeconds\r\n    );\r\n\r\n    event LiquidateDurationUpdated(\r\n        uint256 durationInSeconds\r\n    );\r\n\r\n    event ERC20WhiteListConfigured(\r\n        address erc20,\r\n        bool isWhitelisted\r\n    );\r\n\r\n    event CollectionLeverageConfigured(\r\n        address collection,\r\n        bool isAllowed\r\n    );\r\n\r\n    event CollectionHealthFactorConfigured(\r\n        address collection,\r\n        bool isTrakcked\r\n    );\r\n\r\n    // @notice A mapping from from an ERC20 currency address to whether that\r\n    //         currency is whitelisted to be used by this contract.\r\n    mapping (address => bool) public erc20CurrencyIsWhitelisted;\r\n\r\n    mapping (address => bool) public leverageAvailableCollections;\r\n\r\n    mapping (address => bool) public healthFactorEnabledCollection;\r\n    // @notice The percentage of interest earned by lenders on this platform\r\n    //         that is taken by the contract admin's as a fee, measured in\r\n    //         basis points (hundreths of a percent).\r\n    uint256 public interestForIVInBasisPoints = 500; // 5%\r\n    uint256 public liquidationThresholdInBasisPoints = 8000; // 80%\r\n    uint256 public preLiquidationDuration = 24 hours;\r\n    uint256 public liquidateProtectionDuration = 48 hours;\r\n    \r\n\r\n    function whitelistERC20Currency(address _erc20Currency, bool _setAsWhitelisted) external onlyOwner {\r\n        erc20CurrencyIsWhitelisted[_erc20Currency] = _setAsWhitelisted;\r\n        emit ERC20WhiteListConfigured(_erc20Currency, _setAsWhitelisted);\r\n    }\r\n\r\n    function setLeverageOnCollection(address collection, bool allowed) external onlyOwner {\r\n        leverageAvailableCollections[collection] = allowed;\r\n        emit CollectionLeverageConfigured(collection, allowed);\r\n    }\r\n\r\n    function setHealthFactorOnCollection(address collection, bool tracked) external onlyOwner {\r\n        healthFactorEnabledCollection[collection] = tracked;\r\n        emit CollectionHealthFactorConfigured(collection, tracked);\r\n    }\r\n\r\n\r\n    function updateLiquidateProtectionDuration(uint256 _newLiquidateProtectionDuration) external onlyOwner {\r\n        liquidateProtectionDuration = _newLiquidateProtectionDuration;\r\n        emit ProtectionDurationUpdated(liquidateProtectionDuration);\r\n    }\r\n\r\n    function updatePreLiquidationDuration(uint256 _newPreLiquidationDuration) external onlyOwner {\r\n        preLiquidationDuration = _newPreLiquidationDuration;\r\n        emit LiquidateDurationUpdated(preLiquidationDuration);\r\n    }\r\n\r\n    function updateInterestForIV(uint256 _newInterestForIVInBasisPoints) external onlyOwner {\r\n        require(_newInterestForIVInBasisPoints <= 10000, 'By definition, basis points cannot exceed 10000');\r\n        interestForIVInBasisPoints = _newInterestForIVInBasisPoints;\r\n        emit InterestForIVUpdated(_newInterestForIVInBasisPoints);\r\n    }\r\n\r\n    function updateLiquidationThreshold(uint256 _newLiquidationThresholdInBasisPoints) external onlyOwner {\r\n        require(_newLiquidationThresholdInBasisPoints <= 10000, 'By definition, basis points cannot exceed 10000');\r\n        liquidationThresholdInBasisPoints = _newLiquidationThresholdInBasisPoints;\r\n        emit InterestForIVUpdated(_newLiquidationThresholdInBasisPoints);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "debug": {
      "debugInfo": []
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}