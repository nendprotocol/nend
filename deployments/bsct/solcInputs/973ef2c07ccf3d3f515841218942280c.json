{
  "language": "Solidity",
  "sources": {
    "contracts/loan/LoanRepaymentCalculator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport \"../PeriFiAdmin.sol\";\r\nimport \"../vault/LendingPool.sol\";\r\n\r\nenum DestinationType {\r\n    Pool,\r\n    Lender,\r\n    InsuranceVault,\r\n    Commission,\r\n    CurationRewardPool\r\n}\r\n\r\nstruct Repayment {\r\n    address targetAddress;\r\n    uint256 value;\r\n}\r\n\r\n\r\ncontract LoanRepaymentCalculator {\r\n    address public insuranceVaultAddress;\r\n    address public lendingPoolAddress;\r\n    address public masterWalletAddress;\r\n    address public periFiAdminAddress;\r\n    address public curationRewardPoolAddress;\r\n\r\n    constructor(\r\n        address _insuranceVaultAddress,\r\n        address _lendingPoolAddress,\r\n        address _masterWalletAddress,\r\n        address _periFiAdminAddress,\r\n        address _curationRewardPoolAddress) {\r\n        insuranceVaultAddress = _insuranceVaultAddress;\r\n        lendingPoolAddress = _lendingPoolAddress;\r\n        masterWalletAddress = _masterWalletAddress;\r\n        periFiAdminAddress = _periFiAdminAddress;\r\n        curationRewardPoolAddress = _curationRewardPoolAddress;\r\n    }\r\n\r\n    function getDestinations(\r\n        uint256 loanId,\r\n        uint256 repaymentAmount, \r\n        uint256 loanAmount,\r\n        address lender\r\n    ) external view returns (Repayment[] memory results) {\r\n        uint256 interestDue = repaymentAmount - loanAmount;\r\n\r\n        LendingPool lendingPool = LendingPool(payable(lendingPoolAddress));\r\n        uint256 leverageAmount = lendingPool.loanToLeverage(loanId);\r\n\r\n        // if there is no interest\r\n        if (interestDue == 0) {\r\n            if (leverageAmount == 0){\r\n                results = new Repayment[](1);\r\n                results[0] = Repayment(lender, loanAmount);\r\n            } else {\r\n                results = new Repayment[](2);\r\n                results[0] = Repayment(lendingPoolAddress, leverageAmount);\r\n                results[1] = Repayment(lender, loanAmount - leverageAmount);\r\n            }\r\n            return results;\r\n        }\r\n\r\n        uint256 interestForPool = interestDue * leverageAmount / loanAmount;\r\n        uint256 interestForLender = interestDue - interestForPool;\r\n        uint256 loanAmountByLender = loanAmount - leverageAmount;\r\n\r\n        uint256 lenderForIFL;\r\n        uint256 commissionForIFL;\r\n        uint256 curationRewardForIFL;\r\n\r\n        (\r\n            lenderForIFL, \r\n            commissionForIFL, \r\n            curationRewardForIFL\r\n        ) = distributeIFL(interestForLender);\r\n\r\n        if (leverageAmount == 0) {\r\n            // no leverage Used, only need to get InterestForLender (IFL)\r\n            results = new Repayment[](3);\r\n            results[0] = Repayment(lender, loanAmountByLender + lenderForIFL);\r\n            results[1] = Repayment(masterWalletAddress, commissionForIFL);\r\n            results[2] = Repayment(curationRewardPoolAddress, curationRewardForIFL);\r\n        } else {\r\n            PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddress);\r\n\r\n            uint256 poolUsageInBasisPoints = lendingPool.loanToPoolUsageInBasisPoint(loanId);\r\n            uint256 interestForIVInBasisPoints = periFiAdmin.interestForIVInBasisPoints();\r\n\r\n            uint256 interestBasisPointForLender = lenderInterestInBasisPointByPoolUsage(poolUsageInBasisPoints);\r\n            \r\n            uint256 lenderForIFP = interestForPool * interestBasisPointForLender / 10000;\r\n            uint256 insuranceVaultForIFP = interestForPool * interestForIVInBasisPoints / 10000;\r\n            uint256 poolForIFP = interestForPool - (lenderForIFP + insuranceVaultForIFP);\r\n\r\n            results = new Repayment[](3);\r\n            results[0] = Repayment(lendingPoolAddress, leverageAmount + poolForIFP);\r\n            results[1] = Repayment(lender, loanAmountByLender + lenderForIFP + lenderForIFL);\r\n            results[2] = Repayment(insuranceVaultAddress, insuranceVaultForIFP);\r\n            results[3] = Repayment(masterWalletAddress, commissionForIFL);\r\n            results[4] = Repayment(curationRewardPoolAddress, curationRewardForIFL);\r\n\r\n        }\r\n    }\r\n\r\n    function distributeIFL(\r\n        uint256 interestForLender) internal view returns (\r\n            uint256 lenderForIFL,\r\n            uint256 commissionForIFL,\r\n            uint256 curationRewardForIFL\r\n        ) {\r\n            PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddress);\r\n            uint256 commissionInBasisPoints = periFiAdmin.loanCommissionInBasisPoints();\r\n\r\n            // no leverage Used, only need to get InterestForLender (IFL)\r\n            commissionForIFL = interestForLender * commissionInBasisPoints / 10000;\r\n            curationRewardForIFL = interestForLender / 100; // take 1%\r\n            lenderForIFL = interestForLender - (commissionForIFL + curationRewardForIFL);\r\n        }\r\n\r\n    function lenderInterestInBasisPointByPoolUsage(uint256 poolUsageInBasisPoints) internal pure returns (uint256 basisPoint) {\r\n            if (poolUsageInBasisPoints <= 2000) {\r\n                basisPoint = 5500;\r\n            }\r\n            else if (poolUsageInBasisPoints <= 3000) {\r\n                basisPoint = 5000;\r\n            }\r\n            else if (poolUsageInBasisPoints <= 5000) {\r\n                basisPoint = 4500;\r\n            }\r\n            else if (poolUsageInBasisPoints <= 6000) {\r\n                basisPoint = 4000;\r\n            }\r\n            else if (poolUsageInBasisPoints <= 7000) {\r\n                basisPoint = 3500;\r\n            }\r\n            else if (poolUsageInBasisPoints <= 8000) {\r\n                basisPoint = 2500;\r\n            }\r\n            else if (poolUsageInBasisPoints <= 9000) {\r\n                basisPoint = 1500;\r\n            }\r\n            else {\r\n                basisPoint = 500;\r\n            }\r\n            return basisPoint;\r\n    }\r\n\r\n}"
    },
    "contracts/PeriFiAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport \"./access/MWOwnable.sol\";\r\n\r\ncontract PeriFiAdmin is MWOwnable {\r\n    event InterestForIVUpdated(\r\n        uint256 basisPointValue\r\n    );\r\n\r\n    event LoanCommissionUpdated(\r\n        uint256 basisPointValue\r\n    );\r\n\r\n    event LiquidationThresholdUpdated(\r\n        uint256 basisPointValue\r\n    );\r\n\r\n    event ProtectionDurationUpdated(\r\n        uint256 durationInSeconds\r\n    );\r\n\r\n    event LiquidateDurationUpdated(\r\n        uint256 durationInSeconds\r\n    );\r\n\r\n    event ERC20WhiteListConfigured(\r\n        address erc20,\r\n        bool isWhitelisted\r\n    );\r\n\r\n    event CollectionLeverageConfigured(\r\n        address collection,\r\n        bool isAllowed\r\n    );\r\n\r\n    event CollectionHealthFactorConfigured(\r\n        address collection,\r\n        bool isTrakcked\r\n    );\r\n\r\n    // @notice A mapping from from an ERC20 currency address to whether that\r\n    //         currency is whitelisted to be used by this contract.\r\n    mapping (address => bool) public erc20CurrencyIsWhitelisted;\r\n\r\n    mapping (address => bool) public leverageAvailableCollections;\r\n\r\n    mapping (address => bool) public healthFactorEnabledCollection;\r\n    // @notice The percentage of interest earned by lenders on this platform\r\n    //         that is taken by the contract admin's as a fee, measured in\r\n    //         basis points (hundreths of a percent).\r\n    uint256 public interestForIVInBasisPoints = 500; // 5%\r\n    uint256 public liquidationThresholdInBasisPoints = 8000; // 80%\r\n    uint256 public loanCommissionInBasisPoints = 500; // 5%\r\n    uint256 public preLiquidationDuration = 24 hours;\r\n    uint256 public liquidateProtectionDuration = 48 hours;\r\n    \r\n\r\n    function whitelistERC20Currency(address _erc20Currency, bool _setAsWhitelisted) external onlyOwner {\r\n        erc20CurrencyIsWhitelisted[_erc20Currency] = _setAsWhitelisted;\r\n        emit ERC20WhiteListConfigured(_erc20Currency, _setAsWhitelisted);\r\n    }\r\n\r\n    function setLeverageOnCollection(address collection, bool allowed) external onlyOwner {\r\n        leverageAvailableCollections[collection] = allowed;\r\n        emit CollectionLeverageConfigured(collection, allowed);\r\n    }\r\n\r\n    function setHealthFactorOnCollection(address collection, bool tracked) external onlyOwner {\r\n        healthFactorEnabledCollection[collection] = tracked;\r\n        emit CollectionHealthFactorConfigured(collection, tracked);\r\n    }\r\n\r\n\r\n    function updateLiquidateProtectionDuration(uint256 _newLiquidateProtectionDuration) external onlyOwner {\r\n        liquidateProtectionDuration = _newLiquidateProtectionDuration;\r\n        emit ProtectionDurationUpdated(liquidateProtectionDuration);\r\n    }\r\n\r\n    function updatePreLiquidationDuration(uint256 _newPreLiquidationDuration) external onlyOwner {\r\n        preLiquidationDuration = _newPreLiquidationDuration;\r\n        emit LiquidateDurationUpdated(preLiquidationDuration);\r\n    }\r\n\r\n    function updateInterestForIV(uint256 _newInterestForIVInBasisPoints) external onlyOwner {\r\n        require(_newInterestForIVInBasisPoints <= 10000, 'By definition, basis points cannot exceed 10000');\r\n        interestForIVInBasisPoints = _newInterestForIVInBasisPoints;\r\n        emit InterestForIVUpdated(_newInterestForIVInBasisPoints);\r\n    }\r\n\r\n    function updateloanCommissionInBasisPoints(uint256 _newLoanCommissionInBasisPoints) external onlyOwner {\r\n        require(_newLoanCommissionInBasisPoints <= 10000, 'By definition, basis points cannot exceed 10000');\r\n        loanCommissionInBasisPoints = _newLoanCommissionInBasisPoints;\r\n        emit LoanCommissionUpdated(_newLoanCommissionInBasisPoints);\r\n    }\r\n\r\n    function updateLiquidationThreshold(uint256 _newLiquidationThresholdInBasisPoints) external onlyOwner {\r\n        require(_newLiquidationThresholdInBasisPoints <= 10000, 'By definition, basis points cannot exceed 10000');\r\n        liquidationThresholdInBasisPoints = _newLiquidationThresholdInBasisPoints;\r\n        emit InterestForIVUpdated(_newLiquidationThresholdInBasisPoints);\r\n    }\r\n}"
    },
    "contracts/vault/LendingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport \"./Vault.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nerror NotSufficientBalanceInPool(uint256 loanId, uint256 balance, uint256 requested);\r\nerror IllegalLeverageAccess(address sender, uint256 loanId, uint256 requested);\r\nerror AlreadyLeveragedLoan(uint256 loanId);\r\ncontract LendingPool is Vault, ReentrancyGuard {\r\n\r\n    constructor(string memory name) Vault(name) {\r\n    }\r\n\r\n    address public loanAddress;\r\n\r\n    mapping (uint256 => bool) public leveragedLoan;\r\n\r\n    mapping (uint256 => uint256) public loanToLeverage;\r\n\r\n    mapping (uint256 => uint256) public loanToPoolUsageInBasisPoint;\r\n\r\n    function leverageLoan(\r\n        uint256 loanId, \r\n        address paymentToken, \r\n        uint256 leveragedAmount, \r\n        address borrower) external nonReentrant onlyRole(\"spender\") {\r\n        if (leveragedLoan[loanId]) {\r\n            revert AlreadyLeveragedLoan(loanId);\r\n        }\r\n\r\n        if (leveragedAmount == 0) {\r\n            leveragedLoan[loanId] = true;\r\n            return;\r\n        }\r\n\r\n        IERC20 erc20 = IERC20(paymentToken);\r\n        uint256 balance = erc20.balanceOf(address(this));\r\n\r\n        if (balance < leveragedAmount) {\r\n            revert NotSufficientBalanceInPool(loanId, balance, leveragedAmount);\r\n        }\r\n\r\n        erc20.transfer(borrower, leveragedAmount);\r\n        uint256 poolUsageInBasisPoint = (leveragedAmount * 10000) / balance;\r\n        loanToLeverage[loanId] = leveragedAmount;\r\n        loanToPoolUsageInBasisPoint[loanId] = poolUsageInBasisPoint;\r\n        leveragedLoan[loanId] = true;\r\n    }\r\n}"
    },
    "contracts/access/MWOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract MWOwnable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(0x2F358B80eD2d296C09560d2b9F70a7f81d57e352);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"
    },
    "contracts/vault/Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"../access/SimpleRoleAcess.sol\";\r\n\r\ncontract Vault is SimpleRoleAcess {\r\n    bytes4 private ERC1155_INTERFACE_ID = 0xd9b67a26;\r\n    string public name;\r\n\r\n    mapping(address => bool) public authorizedOperators;\r\n    mapping(address => bool) public authorizedSpenders;\r\n    // Balance name => token => amount\r\n    mapping(string => mapping(address => uint256)) public namedBalances;\r\n\r\n    constructor(string memory _name) {\r\n        name = _name;\r\n    }\r\n\r\n    function approveERC20Transfer(\r\n        address _tokenAddress,\r\n        address _spender,\r\n        uint256 _amount\r\n    ) external onlyRole(\"spender\") returns (bool) {\r\n        IERC20 erc20 = IERC20(_tokenAddress);\r\n        return erc20.approve(_spender, _amount);\r\n    }\r\n\r\n    function transferERC20(\r\n        address _tokenAddress,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external onlyRole(\"spender\") returns (bool) {\r\n        IERC20 erc20 = IERC20(_tokenAddress);\r\n        return erc20.transfer(_to, _amount);\r\n    }\r\n\r\n    function setERC721ApprovalForAll(\r\n        address _tokenAddress,\r\n        address _operator,\r\n        bool _approved\r\n    ) external onlyRole(\"spender\") {\r\n        IERC721 erc721 = IERC721(_tokenAddress);\r\n        erc721.setApprovalForAll(_operator, _approved);\r\n    }\r\n\r\n    function transferERC721(\r\n        address _tokenAddress,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) external onlyRole(\"spender\") {\r\n        IERC721 erc721 = IERC721(_tokenAddress);\r\n        erc721.transferFrom(address(this), _to, _tokenId);\r\n    }\r\n\r\n    function transferERC1155(\r\n        address _tokenAddress,\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _value,\r\n        bytes calldata _data\r\n    ) external onlyRole(\"spender\") {\r\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\r\n        require(\r\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\r\n            \"given token address doesn't support ERC1155\"\r\n        );\r\n        erc1155.safeTransferFrom(address(this), _to, _id, _value, _data);\r\n    }\r\n\r\n    function transferERC1155Batch(\r\n        address _tokenAddress,\r\n        address _to,\r\n        uint256[] calldata _ids,\r\n        uint256[] calldata _values,\r\n        bytes calldata _data\r\n    ) external onlyRole(\"spender\") {\r\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\r\n        require(\r\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\r\n            \"given token address doesn't support ERC1155\"\r\n        );\r\n        erc1155.safeBatchTransferFrom(address(this), _to, _ids, _values, _data);\r\n    }\r\n\r\n    function setERC1155ApprovalForAll(\r\n        address _tokenAddress,\r\n        address _operator,\r\n        bool _approved\r\n    ) external onlyRole(\"spender\") {\r\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\r\n        require(\r\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\r\n            \"given token address doesn't support ERC1155\"\r\n        );\r\n        erc1155.setApprovalForAll(_operator, _approved);\r\n    }\r\n\r\n    function getNativeBalance() external view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function transferNative(address payable _to, uint256 _amount)\r\n        public\r\n        payable\r\n        onlyRole(\"spender\")\r\n    {\r\n        (bool sent, ) = _to.call{ value: _amount }(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n\r\n    function namedBalanceReceive(\r\n        string memory _name,\r\n        address _token,\r\n        uint256 _amount\r\n    ) external onlyRole(\"spender\") {\r\n        namedBalances[_name][_token] += _amount;\r\n    }\r\n\r\n    function namedBalanceSpend(\r\n        string memory _name,\r\n        address _token,\r\n        uint256 _amount\r\n    ) external onlyRole(\"spender\") {\r\n        require(\r\n            namedBalances[_name][_token] >= _amount,\r\n            \"Insufficient balance\"\r\n        );\r\n        namedBalances[_name][_token] -= _amount;\r\n    }\r\n\r\n    function getNamedBalance(string memory _name, address _token)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return namedBalances[_name][_token];\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n}\r\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/access/SimpleRoleAcess.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../access/MWOwnable.sol\";\r\n\r\nabstract contract SimpleRoleAcess is MWOwnable {\r\n    mapping(address => mapping(string => bool)) public hasRole;\r\n\r\n    function authorize(\r\n        address operator,\r\n        string memory role,\r\n        bool authorized // onlyOwner\r\n    ) public {\r\n        hasRole[operator][role] = authorized;\r\n    }\r\n\r\n    modifier onlyRole(string memory _role) {\r\n        // require(\r\n        //     msg.sender == owner() || hasRole[msg.sender][_role],\r\n        //     \"Not authorized\"\r\n        // );\r\n        _;\r\n    }\r\n\r\n    modifier hasAllRoles(string[] memory _roles) {\r\n        // for (uint256 i = 0; i < _roles.length; i++) {\r\n        //     require(hasRole[msg.sender][_roles[i]], \"Not authorized\");\r\n        // }\r\n        _;\r\n    }\r\n\r\n    modifier hasSomeRoles(string[] memory _roles) {\r\n        // bool _hasRole;\r\n        // for (uint256 i = 0; i < _roles.length; i++) {\r\n        //     if (hasRole[msg.sender][_roles[i]]) {\r\n        //         _hasRole = true;\r\n        //         break;\r\n        //     }\r\n        // }\r\n        // require(_hasRole, \"Not authorized\");\r\n        _;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "debug": {
      "debugInfo": []
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}