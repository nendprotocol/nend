{
  "address": "0x8138C62fc1e6fB8E1b90f79eB25EcCF8e82648b4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nend",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_insurancePool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ecosystemPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CloseMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "conclusion",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "capacityInQuote",
          "type": "bool"
        }
      ],
      "name": "CreateMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "marketId",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "noteId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payoutPerVesting",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "created",
          "type": "uint48"
        }
      ],
      "name": "NoteCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "vestingCount",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "totalVested",
          "type": "uint256[]"
        }
      ],
      "name": "NotesRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adjustments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "change",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "lastAdjustment",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "timeToAdjusted",
          "type": "uint48"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "authorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commissionRate",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_capacity",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_capacityInQuote",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_initialPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "_conclusion",
          "type": "uint48"
        },
        {
          "internalType": "uint32",
          "name": "_depositInterval",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_tuneInterval",
          "type": "uint32"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ecosystemPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getMarketData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insurancePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "capacityInQuote",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketsForQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "lastTune",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "lastDecay",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "length",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "depositInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "tuneInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint8",
          "name": "quoteDecimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nend",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "notes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payoutPerVesting",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "created",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "marketID",
          "type": "uint48"
        },
        {
          "internalType": "uint8",
          "name": "vestingCount",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "redeemAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_testing",
          "type": "bool"
        }
      ],
      "name": "setTesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "controlVariable",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "conclusion",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "maxDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testVestingInverval",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVestingCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_commissionRate",
          "type": "uint16"
        }
      ],
      "name": "updateCommissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ecosystemPool",
          "type": "address"
        }
      ],
      "name": "updateEcosystemPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_insurancePool",
          "type": "address"
        }
      ],
      "name": "updateInsurancePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nend",
          "type": "address"
        }
      ],
      "name": "updateNend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingInverval",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2967e4422b63f897593bcf68929f9d84c320b5091b786a7009fe26afb26093a7",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x7E8aE5C72eCA86946b695dCc211863D9721A0961",
    "contractAddress": null,
    "transactionIndex": 22,
    "gasUsed": "2870463",
    "logsBloom": "0x
    "blockHash": "0x103493b185f7a71a508084fb06f7da409ce629db931a9157873ca8243b0b2a20",
    "transactionHash": "0x2967e4422b63f897593bcf68929f9d84c320b5091b786a7009fe26afb26093a7",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 35513227,
        "transactionHash": "0x2967e4422b63f897593bcf68929f9d84c320b5091b786a7009fe26afb26093a7",
        "address": "0x8138C62fc1e6fB8E1b90f79eB25EcCF8e82648b4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007e8ae5c72eca86946b695dcc211863d9721a0961"
        ],
        "data": "0x",
        "logIndex": 118,
        "blockHash": "0x103493b185f7a71a508084fb06f7da409ce629db931a9157873ca8243b0b2a20"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 35513227,
        "transactionHash": "0x2967e4422b63f897593bcf68929f9d84c320b5091b786a7009fe26afb26093a7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007e8ae5c72eca86946b695dcc211863d9721a0961",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x000000000000000000000000000000000000000000000000022cd8c075bc100800000000000000000000000000000000000000000000000179291a559d68e372000000000000000000000000000000000000000000006566c370903c9601757700000000000000000000000000000000000000000000000176fc419527acd36a000000000000000000000000000000000000000000006566c59d68fd0bbd857f",
        "logIndex": 119,
        "blockHash": "0x103493b185f7a71a508084fb06f7da409ce629db931a9157873ca8243b0b2a20"
      }
    ],
    "blockNumber": 35513227,
    "cumulativeGasUsed": "7697203",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x91b2a4d34C953Dc036a94dA066b1cFd8b948b38E",
    "0x5379A0b3f8c391E211354EC20e4c66D8Ac521392",
    "0x76fD12932eA61Fc85d0186445FD16667cbD04E89"
  ],
  "numDeployments": 1,
  "solcInputHash": "9f9b24330e64b4aed8e24e00b5f5786e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nend\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_insurancePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ecosystemPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CloseMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"conclusion\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"capacityInQuote\",\"type\":\"bool\"}],\"name\":\"CreateMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"marketId\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noteId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutPerVesting\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"created\",\"type\":\"uint48\"}],\"name\":\"NoteCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"vestingCount\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"totalVested\",\"type\":\"uint256[]\"}],\"name\":\"NotesRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adjustments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"change\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"lastAdjustment\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"timeToAdjusted\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_capacity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_capacityInQuote\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"_conclusion\",\"type\":\"uint48\"},{\"internalType\":\"uint32\",\"name\":\"_depositInterval\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_tuneInterval\",\"type\":\"uint32\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystemPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMarketData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurancePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"capacityInQuote\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsForQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"lastTune\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lastDecay\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"length\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"depositInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"tuneInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"quoteDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutPerVesting\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"created\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"marketID\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"vestingCount\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"redeemAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_testing\",\"type\":\"bool\"}],\"name\":\"setTesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"conclusion\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testVestingInverval\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVestingCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_commissionRate\",\"type\":\"uint16\"}],\"name\":\"updateCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ecosystemPool\",\"type\":\"address\"}],\"name\":\"updateEcosystemPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_insurancePool\",\"type\":\"address\"}],\"name\":\"updateInsurancePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nend\",\"type\":\"address\"}],\"name\":\"updateNend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingInverval\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"close(uint256)\":{\"params\":{\"_id\":\"ID of market to close\"}},\"deposit(uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"the amount of quote token to spend\",\"_id\":\"the ID of the market\",\"_maxPrice\":\"the maxeimum price at which to buy\"},\"returns\":{\"index_\":\"     the user index of the Note (usd to redeem or query information)\",\"payout_\":\"    the amount of NEND due\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeem(uint256[])\":{\"params\":{\"_indexes\":\"the note indexes to redeem\"},\"returns\":{\"payout_\":\"    sum of payout sent, in NEND\"}},\"redeemAll(uint256)\":{\"details\":\"if possible, query indexesFor() off-chain and input in redeem() to save gas\",\"returns\":{\"_0\":\"sum of payout sent, in NEND\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"close(uint256)\":{\"notice\":\"disable existing market\"},\"deposit(uint256,uint256,uint256)\":{\"notice\":\"deposit quote tokens in exchange for a bond from a specified market\"},\"redeem(uint256[])\":{\"notice\":\"redeem notes for user\"},\"redeemAll(uint256)\":{\"notice\":\"redeem all redeemable markets for user\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bonding/BondDepository.sol\":\"BondDepository\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/access/MWOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract MWOwnable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(0x7E8aE5C72eCA86946b695dCc211863D9721A0961);  // Nend Mainnet Main Wallet\\r\\n        // _transferOwnership(0x4a580D71c0F73202C51C58147aA7c7E09245b10A);  // Nend Turbo Main Wallet\\r\\n        // _transferOwnership(0x2F358B80eD2d296C09560d2b9F70a7f81d57e352); // Kong Wallet\\r\\n        // _transferOwnership(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier \\r\\n    onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x71026b1c2671af0f1d6e4c17a3f1d1a291b17725b21e27937369a8be395260c7\",\"license\":\"MIT\"},\"contracts/access/SimpleRoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract SimpleRoleAccess is MWOwnable {\\r\\n    mapping(address => mapping(string => bool)) public hasRole;\\r\\n\\r\\n    function authorize(\\r\\n        address operator,\\r\\n        string memory role,\\r\\n        bool authorized \\r\\n    ) public onlyOwner {\\r\\n        hasRole[operator][role] = authorized;\\r\\n    }\\r\\n\\r\\n    modifier onlyRole(string memory _role) {\\r\\n        require(\\r\\n            msg.sender == owner() || hasRole[msg.sender][_role],\\r\\n            \\\"Not authorized\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasAllRoles(string[] memory _roles) {\\r\\n        for (uint256 i = 0; i < _roles.length; i++) {\\r\\n            require(hasRole[msg.sender][_roles[i]], \\\"Not authorized\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasSomeRoles(string[] memory _roles) {\\r\\n        bool _hasRole;\\r\\n        for (uint256 i = 0; i < _roles.length; i++) {\\r\\n            if (hasRole[msg.sender][_roles[i]]) {\\r\\n                _hasRole = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(_hasRole, \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf30bd718616125e5f0d4ff2dc1a0cf23fdca63476180b656cb7642ed23e86369\",\"license\":\"UNLICENSED\"},\"contracts/bonding/BondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./NoteKeeper.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./IBondDepository.sol\\\";\\r\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\r\\n\\r\\ncontract BondDepository is IBondDepository, NoteKeeper, SimpleRoleAccess {\\r\\n    /* ======== DEPENDENCIES ======== */\\r\\n\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /* ======== STATE VARIABLES ======== */\\r\\n\\r\\n    // Storage\\r\\n    Market[] public markets; // persistent market data\\r\\n    Terms[] public terms; // deposit construction data\\r\\n    Metadata[] public metadata; // extraneous market data\\r\\n    mapping(uint256 => Adjustment) public adjustments; // control variable changes\\r\\n\\r\\n    // Queries\\r\\n    mapping(address => uint256[]) public marketsForQuote; // market IDs for quote token\\r\\n\\r\\n    /* ======== CONSTRUCTOR ======== */\\r\\n\\r\\n    constructor(\\r\\n        address _nend,\\r\\n        address _insurancePool,\\r\\n        address _ecosystemPool\\r\\n    ) NoteKeeper(_nend, _insurancePool, _ecosystemPool) {\\r\\n    }\\r\\n\\r\\n    /* ======== DEPOSIT ======== */\\r\\n\\r\\n    /**\\r\\n     * @notice             deposit quote tokens in exchange for a bond from a specified market\\r\\n     * @param _id          the ID of the market\\r\\n     * @param _amount      the amount of quote token to spend\\r\\n     * @param _maxPrice    the maxeimum price at which to buy\\r\\n     * @return payout_     the amount of NEND due\\r\\n     * @return index_      the user index of the Note (usd to redeem or query information)\\r\\n     */\\r\\n    function deposit(\\r\\n        uint256 _id,\\r\\n        uint256 _amount,\\r\\n        uint256 _maxPrice\\r\\n    ) external override returns (uint256 payout_, uint256 index_) {\\r\\n        Market storage market = markets[_id];\\r\\n        Terms memory term = terms[_id];\\r\\n        uint48 currentTime = uint48(block.timestamp);\\r\\n\\r\\n        // Markets end at a defined timestamp\\r\\n        // |-------------------------------------| t\\r\\n        require(currentTime < term.conclusion, \\\"Depository: market concluded\\\");\\r\\n\\r\\n        // Debt and the control variable decay over time\\r\\n        _decay(_id, currentTime);\\r\\n\\r\\n        // Users input a maximum price, which protects them from price changes after\\r\\n        // entering the mempool. max price is a slippage mitigation measure\\r\\n        uint256 price = _marketPrice(_id);\\r\\n        require(price <= _maxPrice, \\\"Depository: more than max price\\\");\\r\\n\\r\\n        /**\\r\\n         * payout for the deposit = amount / price\\r\\n         *\\r\\n         * where\\r\\n         * payout = NEND out\\r\\n         * amount = quote tokens in\\r\\n         * price = quote tokens : NEND (i.e. 42069 DAI : NENDs)\\r\\n         *\\r\\n         * 1e27 = NEND decimals (18) + price decimals (9)\\r\\n         */\\r\\n        payout_ =\\r\\n            ((_amount * 1e27) / price) /\\r\\n            (10**metadata[_id].quoteDecimals);\\r\\n\\r\\n        // markets have a max payout amount, capping size because deposits\\r\\n        // do not experience slippage. max payout is recalculated upon tuning\\r\\n        require(payout_ <= market.maxPayout, \\\"Depository: max size exceeded\\\");\\r\\n\\r\\n        /*\\r\\n         * each market is initialized with a capacity\\r\\n         *\\r\\n         * this is either the number of NEND that the market can sell\\r\\n         * (if capacity in quote is false),\\r\\n         *\\r\\n         * or the number of quote tokens that the market can buy\\r\\n         * (if capacity in quote is true)\\r\\n         */\\r\\n        market.capacity -= market.capacityInQuote ? _amount : payout_;\\r\\n\\r\\n        /**\\r\\n         * bonds mature with a cliff at a set timestamp\\r\\n         * prior to the expiry timestamp, no payout tokens are accessible to the user\\r\\n         * after the expiry timestamp, the entire payout can be redeemed\\r\\n         *\\r\\n         * there are two types of bonds: fixed-term and fixed-expiration\\r\\n         *\\r\\n         * fixed-term bonds mature in a set amount of time from deposit\\r\\n         * i.e. term = 1 week. when alice deposits on day 1, her bond\\r\\n         * expires on day 8. when bob deposits on day 2, his bond expires day 9.\\r\\n         *\\r\\n         * fixed-expiration bonds mature at a set timestamp\\r\\n         * i.e. expiration = day 10. when alice deposits on day 1, her term\\r\\n         * is 9 days. when bob deposits on day 2, his term is 8 days.\\r\\n         */\\r\\n\\r\\n        // markets keep track of how many quote tokens have been\\r\\n        // purchased, and how much NEND has been sold\\r\\n        market.purchased += _amount;\\r\\n        market.sold += uint64(payout_);\\r\\n\\r\\n        // incrementing total debt raises the price of the next bond\\r\\n        market.totalDebt += uint64(payout_);\\r\\n\\r\\n        /**\\r\\n         * user data is stored as Notes. these are isolated array entries\\r\\n         * storing the amount due, the time created, the time when payout\\r\\n         * is redeemable, the time when payout was redeemed, and the ID\\r\\n         * of the market deposited into\\r\\n         */\\r\\n        index_ = addNote(uint48(_id), _amount, price, msg.sender, payout_);\\r\\n\\r\\n        // transfer payment to treasury\\r\\n        market.quoteToken.safeTransferFrom(msg.sender, ecosystemPool, _amount);\\r\\n\\r\\n        // if max debt is breached, the market is closed\\r\\n        // this a circuit breaker\\r\\n        if (term.maxDebt < market.totalDebt) {\\r\\n            market.capacity = 0;\\r\\n            emit CloseMarket(_id);\\r\\n        } else {\\r\\n            // if market will continue, the control variable is tuned to hit targets on time\\r\\n            _tune(_id, currentTime);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             decay debt, and adjust control variable if there is an active change\\r\\n     * @param _id          ID of market\\r\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\r\\n     */\\r\\n    function _decay(uint256 _id, uint48 _time) internal {\\r\\n        // Debt decay\\r\\n\\r\\n        /*\\r\\n         * Debt is a time-decayed sum of tokens spent in a market\\r\\n         * Debt is added when deposits occur and removed over time\\r\\n         * |\\r\\n         * |    debt falls with\\r\\n         * |   / \\\\  inactivity       / \\\\\\r\\n         * | /     \\\\              /\\\\/    \\\\\\r\\n         * |         \\\\           /         \\\\\\r\\n         * |           \\\\      /\\\\/            \\\\\\r\\n         * |             \\\\  /  and rises       \\\\\\r\\n         * |                with deposits\\r\\n         * |\\r\\n         * |------------------------------------| t\\r\\n         */\\r\\n        markets[_id].totalDebt -= _debtDecay(_id);\\r\\n        metadata[_id].lastDecay = _time;\\r\\n\\r\\n        // Control variable decay\\r\\n\\r\\n        // The bond control variable is continually tuned. When it is lowered (which\\r\\n        // lowers the market price), the change is carried out smoothly over time.\\r\\n        if (adjustments[_id].active) {\\r\\n            Adjustment storage adjustment = adjustments[_id];\\r\\n\\r\\n            (\\r\\n                uint256 adjustBy,\\r\\n                uint48 secondsSince,\\r\\n                bool stillActive\\r\\n            ) = _controlDecay(_id);\\r\\n            terms[_id].controlVariable -= adjustBy;\\r\\n\\r\\n            if (stillActive) {\\r\\n                adjustment.change -= adjustBy;\\r\\n                adjustment.timeToAdjusted -= secondsSince;\\r\\n                adjustment.lastAdjustment = _time;\\r\\n            } else {\\r\\n                adjustment.active = false;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             auto-adjust control variable to hit capacity/spend target\\r\\n     * @param _id          ID of market\\r\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\r\\n     */\\r\\n    function _tune(uint256 _id, uint48 _time) internal {\\r\\n        Metadata memory meta = metadata[_id];\\r\\n\\r\\n        if (_time >= meta.lastTune + meta.tuneInterval) {\\r\\n            Market memory market = markets[_id];\\r\\n\\r\\n            // compute seconds remaining until market will conclude\\r\\n            uint256 timeRemaining = terms[_id].conclusion - _time;\\r\\n            uint256 price = _marketPrice(_id);\\r\\n\\r\\n            // standardize capacity into an base token amount\\r\\n            // NEND decimals (9) + price decimals (9)\\r\\n            uint256 capacity = market.capacityInQuote\\r\\n                ? ((market.capacity * 1e27) / price) / (10**meta.quoteDecimals)\\r\\n                : market.capacity;\\r\\n\\r\\n            /**\\r\\n             * calculate the correct payout to complete on time assuming each bond\\r\\n             * will be max size in the desired deposit interval for the remaining time\\r\\n             *\\r\\n             * i.e. market has 10 days remaining. deposit interval is 1 day. capacity\\r\\n             * is 10,000 NEND. max payout would be 1,000 NEND (10,000 * 1 / 10).\\r\\n             */\\r\\n            markets[_id].maxPayout = uint64(\\r\\n                (capacity * meta.depositInterval) / timeRemaining\\r\\n            );\\r\\n\\r\\n            // calculate the ideal total debt to satisfy capacity in the remaining time\\r\\n            uint256 targetDebt = (capacity * meta.length) / timeRemaining;\\r\\n\\r\\n            // derive a new control variable from the target debt and current supply\\r\\n            uint64 newControlVariable = uint64(\\r\\n                (price * NEND(nend).timeSlicedCrossChainSupply()) / targetDebt\\r\\n            );\\r\\n\\r\\n            if (newControlVariable >= terms[_id].controlVariable) {\\r\\n                terms[_id].controlVariable = newControlVariable;\\r\\n            } else {\\r\\n                // if decrease, control variable change will be carried out over the tune interval\\r\\n                // this is because price will be lowered\\r\\n                uint256 change = terms[_id].controlVariable -\\r\\n                    newControlVariable;\\r\\n                adjustments[_id] = Adjustment(\\r\\n                    change,\\r\\n                    _time,\\r\\n                    meta.tuneInterval,\\r\\n                    true\\r\\n                );\\r\\n            }\\r\\n            metadata[_id].lastTune = _time;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ======== CREATE ======== */\\r\\n\\r\\n    function create(\\r\\n        IERC20 _quoteToken,\\r\\n        uint256 _capacity,\\r\\n        bool _capacityInQuote,\\r\\n        uint256 _initialPrice,\\r\\n        uint48 _conclusion,\\r\\n        uint32 _depositInterval,\\r\\n        uint32 _tuneInterval\\r\\n    ) external override onlyRole(\\\"admin\\\") returns (uint256 id_) {\\r\\n        uint256 secondsToConclusion = _conclusion - block.timestamp;\\r\\n\\r\\n        // the decimal count of the quote token\\r\\n        uint256 decimals = ERC20(address(_quoteToken)).decimals();\\r\\n\\r\\n        /*\\r\\n         * initial target debt is equal to capacity (this is the amount of debt\\r\\n         * that will decay over in the length of the program if price remains the same).\\r\\n         * it is converted into base token terms if passed in in quote token terms.\\r\\n         *\\r\\n         * 1e27 = NEND decimals (18) + initial price decimals (9)\\r\\n         */\\r\\n        uint256 targetDebt = _capacityInQuote\\r\\n            ? ((_capacity * 1e27) / _initialPrice) / 10**decimals\\r\\n            : _capacity;\\r\\n\\r\\n\\r\\n\\r\\n        // depositing into, or getting info for, the created market uses this ID\\r\\n        id_ = markets.length;\\r\\n\\r\\n        markets.push(\\r\\n            Market({\\r\\n                quoteToken: _quoteToken,\\r\\n                capacityInQuote: _capacityInQuote,\\r\\n                capacity: _capacity,\\r\\n                totalDebt: targetDebt,\\r\\n                maxPayout: (targetDebt * _depositInterval) / secondsToConclusion,\\r\\n                purchased: 0,\\r\\n                sold: 0\\r\\n            })\\r\\n        );\\r\\n\\r\\n        terms.push(\\r\\n            Terms({\\r\\n                controlVariable: (_initialPrice * NEND(nend).timeSlicedCrossChainSupply()) / targetDebt,\\r\\n                conclusion: uint48(_conclusion),\\r\\n                maxDebt: targetDebt + ((targetDebt * 1000000) / 1e5)\\r\\n            })\\r\\n        );\\r\\n\\r\\n        metadata.push(\\r\\n            Metadata({\\r\\n                lastTune: uint48(block.timestamp),\\r\\n                lastDecay: uint48(block.timestamp),\\r\\n                length: uint48(secondsToConclusion),\\r\\n                depositInterval: _depositInterval,\\r\\n                tuneInterval: _tuneInterval,\\r\\n                quoteDecimals: uint8(decimals)\\r\\n            })\\r\\n        );\\r\\n\\r\\n        marketsForQuote[address(_quoteToken)].push(id_);\\r\\n\\r\\n        emit CreateMarket(\\r\\n            id_,\\r\\n            address(_quoteToken),\\r\\n            uint48(_conclusion),\\r\\n            _capacity,\\r\\n            _capacityInQuote\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             disable existing market\\r\\n     * @param _id          ID of market to close\\r\\n     */\\r\\n    function close(uint256 _id) external override onlyRole(\\\"admin\\\") {\\r\\n        terms[_id].conclusion = uint48(block.timestamp);\\r\\n        markets[_id].capacity = 0;\\r\\n        emit CloseMarket(_id);\\r\\n    }\\r\\n\\r\\n    /* ======== EXTERNAL VIEW ======== */\\r\\n\\r\\n    function getMarketData(uint256 _id)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 currentPrice = _marketPrice(_id);\\r\\n\\r\\n        return (\\r\\n            currentPrice,\\r\\n            markets[_id].capacity,\\r\\n            (markets[_id].maxPayout *\\r\\n                (10**metadata[_id].quoteDecimals) *\\r\\n                currentPrice) / 1e27\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* ======== INTERNAL VIEW ======== */\\r\\n\\r\\n    function _debtDecay(uint256 _id) internal view returns (uint64) {\\r\\n        Metadata memory meta = metadata[_id];\\r\\n\\r\\n        uint256 secondsSince = block.timestamp - meta.lastDecay;\\r\\n\\r\\n        return uint64((markets[_id].totalDebt * secondsSince) / meta.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                  calculate current market price of quote token in base token\\r\\n     * @dev                     see marketPrice() for explanation of price computation\\r\\n     * @dev                     uses info from storage because data has been updated before call (vs marketPrice())\\r\\n     * @param _id               market ID\\r\\n     * @return                  price for market in NEND decimals\\r\\n     */\\r\\n    function _marketPrice(uint256 _id) internal view returns (uint256) {\\r\\n        return\\r\\n            (terms[_id].controlVariable * _debtRatio(_id)) /\\r\\n            (10**metadata[_id].quoteDecimals);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                  calculate debt factoring in decay\\r\\n     * @dev                     uses info from storage because data has been updated before call (vs debtRatio())\\r\\n     * @param _id               market ID\\r\\n     * @return                  current debt for market in quote decimals\\r\\n     */\\r\\n    function _debtRatio(uint256 _id) internal view returns (uint256) {\\r\\n        return\\r\\n            (markets[_id].totalDebt * (10**metadata[_id].quoteDecimals)) /\\r\\n            NEND(nend).timeSlicedCrossChainSupply();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                  amount to decay control variable by\\r\\n     * @param _id               ID of market\\r\\n     * @return decay_           change in control variable\\r\\n     * @return secondsSince_    seconds since last change in control variable\\r\\n     * @return active_          whether or not change remains active\\r\\n     */\\r\\n    function _controlDecay(uint256 _id)\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            uint256 decay_,\\r\\n            uint48 secondsSince_,\\r\\n            bool active_\\r\\n        )\\r\\n    {\\r\\n        Adjustment memory info = adjustments[_id];\\r\\n        if (!info.active) return (0, 0, false);\\r\\n\\r\\n        secondsSince_ = uint48(block.timestamp) - info.lastAdjustment;\\r\\n\\r\\n        active_ = secondsSince_ < info.timeToAdjusted;\\r\\n        decay_ = active_\\r\\n            ? (info.change * secondsSince_) / info.timeToAdjusted\\r\\n            : info.change;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x75fe2936442011638ca0e08660c9ae953bbde73afb2a4df164e67cfe0e2190da\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/bonding/IBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IBondDepository {\\r\\n    event CreateMarket(\\r\\n        uint256 indexed id,\\r\\n        address indexed quoteToken,\\r\\n        uint48 conclusion,\\r\\n        uint256 capacity,\\r\\n        bool capacityInQuote\\r\\n    );\\r\\n    event CloseMarket(uint256 indexed id);\\r\\n\\r\\n    // Info about each type of market\\r\\n    struct Market {\\r\\n        uint256 capacity; // capacity remaining\\r\\n        IERC20 quoteToken; // token to accept as payment\\r\\n        bool capacityInQuote; // capacity limit is in payment token (true) or in OHM (false, default)\\r\\n        uint256 totalDebt; // total debt from market\\r\\n        uint256 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\\r\\n        uint256 sold; // base tokens out\\r\\n        uint256 purchased; // quote tokens in\\r\\n    }\\r\\n\\r\\n    // Info for creating new markets\\r\\n    struct Terms {\\r\\n        uint256 controlVariable; // scaling variable for price\\r\\n        uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\r\\n        uint256 maxDebt; // 9 decimal debt maximum in OHM\\r\\n    }\\r\\n\\r\\n    // Additional info about market.\\r\\n    struct Metadata {\\r\\n        uint48 lastTune; // last timestamp when control variable was tuned\\r\\n        uint48 lastDecay; // last timestamp when market was created and debt was decayed\\r\\n        uint48 length; // time from creation to conclusion. used as speed to decay debt.\\r\\n        uint48 depositInterval; // target frequency of deposits\\r\\n        uint48 tuneInterval; // frequency of tuning\\r\\n        uint8 quoteDecimals; // decimals of quote token\\r\\n    }\\r\\n\\r\\n    // Control variable adjustment data\\r\\n    struct Adjustment {\\r\\n        uint256 change;\\r\\n        uint48 lastAdjustment;\\r\\n        uint48 timeToAdjusted;\\r\\n        bool active;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice deposit market\\r\\n     * @param _bid uint256\\r\\n     * @param _amount uint256\\r\\n     * @param _maxPrice uint256\\r\\n     * @return payout_ uint256\\r\\n     * @return index_ uint256\\r\\n     */\\r\\n    function deposit(\\r\\n        uint256 _bid,\\r\\n        uint256 _amount,\\r\\n        uint256 _maxPrice\\r\\n    ) external returns (uint256 payout_, uint256 index_);\\r\\n\\r\\n    function create(\\r\\n        IERC20 _quoteToken,\\r\\n        uint256 _capacity,\\r\\n        bool _capacityInQuote,\\r\\n        uint256 _initialPrice,\\r\\n        uint48 _conclusion,\\r\\n        uint32 _depositInterval,\\r\\n        uint32 _tuneInterval\\r\\n    ) external returns (uint256 id_);\\r\\n\\r\\n    function close(uint256 _id) external;\\r\\n\\r\\n    function getMarketData(uint256 _id)\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0xca6f15bd592b5a1d8c799eca8c2957bee20630c5ccee8a11ed03730b60978f94\",\"license\":\"AGPL-3.0\"},\"contracts/bonding/INoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface INoteKeeper {\\r\\n    // Info for market note\\r\\n    struct Note {\\r\\n        uint256 payout; // Total NEND to be paid\\r\\n        uint256 payoutPerVesting; // Amount claimable every vesting\\r\\n        uint48 created; // time note was created\\r\\n        uint48 marketID; // market ID of deposit. uint48 to avoid adding a slot.\\r\\n        uint8 vestingCount; // Number of times vested\\r\\n    }\\r\\n\\r\\n    event NoteCreated(\\r\\n        address ownerAddress,\\r\\n        uint48 marketId,\\r\\n        uint256 noteId,\\r\\n        uint256 amount,\\r\\n        uint256 price,\\r\\n        uint256 payout,\\r\\n        uint256 payoutPerVesting,\\r\\n        uint48 created\\r\\n    );\\r\\n\\r\\n    event NotesRedeemed(\\r\\n        address ownerAddress,\\r\\n        uint256[] indexes,\\r\\n        uint8[] vestingCount,\\r\\n        uint256[] totalVested\\r\\n    );\\r\\n\\r\\n    function redeem(uint256[] memory _indexes) external returns (uint256);\\r\\n\\r\\n    function redeemAll(uint256 _marketId) external returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf336fa8e65c46a9367f77a4b9b8a072a7a96bcbfcea7fe902bc4d5597eb8115f\",\"license\":\"AGPL-3.0-only\"},\"contracts/bonding/NoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./INoteKeeper.sol\\\";\\r\\nimport \\\"../token/ERC20/NEND.sol\\\";\\r\\nimport \\\"../vault/Vault.sol\\\";\\r\\n\\r\\nabstract contract NoteKeeper is INoteKeeper, Testing {\\r\\n    mapping(address => Note[]) public notes; // user deposit data\\r\\n    address public insurancePool;\\r\\n    address public ecosystemPool;\\r\\n    address public nend;\\r\\n    uint8 public immutable totalVestingCount = 5; // 5 times in 5 days\\r\\n    uint16 public commissionRate = 30; // Commission in basis point\\r\\n    uint48 public immutable vestingInverval = 1 days;\\r\\n    uint48 public immutable testVestingInverval = 10 minutes;\\r\\n\\r\\n    constructor(\\r\\n        address _nend,\\r\\n        address _insurancePool,\\r\\n        address _ecosystemPool\\r\\n    ) {\\r\\n        nend = _nend;\\r\\n        insurancePool = _insurancePool;\\r\\n        ecosystemPool = _ecosystemPool;\\r\\n    }\\r\\n\\r\\n    // if treasury address changes on authority, update it\\r\\n    function updateNend(address _nend) external onlyOwner {\\r\\n        nend = _nend;\\r\\n    }\\r\\n\\r\\n    function updateInsurancePool(address _insurancePool) external onlyOwner {\\r\\n        insurancePool = _insurancePool;\\r\\n    }\\r\\n\\r\\n    function updateEcosystemPool(address _ecosystemPool) external onlyOwner {\\r\\n        ecosystemPool = _ecosystemPool;\\r\\n    }\\r\\n\\r\\n    function updateCommissionRate(uint16 _commissionRate) external onlyOwner {\\r\\n        require(\\r\\n            _commissionRate >= 0 && _commissionRate <= 10000,\\r\\n            \\\"Invalid basis point\\\"\\r\\n        );\\r\\n        commissionRate = _commissionRate;\\r\\n    }\\r\\n\\r\\n    /* ========== ADD ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice             adds a new Note for a user, stores the front end & DAO rewards, and mints & stakes payout & rewards\\r\\n     * @param _marketId    id of the market that created the note\\r\\n     * @param _amount      amount of quote token bonded\\r\\n     * @param _price       the bond price\\r\\n     * @param _user        the user that owns the Note\\r\\n     * @param _payout      the amount of NEND due to the user\\r\\n     * @return index_      the index of the Note in the user's array\\r\\n     */\\r\\n    function addNote(\\r\\n        uint48 _marketId,\\r\\n        uint256 _amount,\\r\\n        uint256 _price,\\r\\n        address _user,\\r\\n        uint256 _payout\\r\\n    ) internal returns (uint256 index_) {\\r\\n        require(\\r\\n            IERC20(nend).balanceOf(ecosystemPool) >= _payout,\\r\\n            \\\"Insufficient treasury balance for payout\\\"\\r\\n        );\\r\\n\\r\\n        Vault(payable(ecosystemPool)).transferERC20(\\r\\n            nend,\\r\\n            address(this),\\r\\n            _payout\\r\\n        );\\r\\n\\r\\n        uint256 insuranceFund = (_payout * commissionRate) / 10000;\\r\\n        uint256 userPayout = _payout - insuranceFund;\\r\\n\\r\\n        index_ = notes[_user].length;\\r\\n\\r\\n        // the new note is pushed to the user's array\\r\\n        notes[_user].push(\\r\\n            Note({\\r\\n                payout: userPayout,\\r\\n                payoutPerVesting: userPayout / 5,\\r\\n                created: uint48(block.timestamp),\\r\\n                marketID: _marketId,\\r\\n                vestingCount: 0\\r\\n            })\\r\\n        );\\r\\n\\r\\n        IERC20(nend).transfer(insurancePool, insuranceFund);\\r\\n\\r\\n        emit NoteCreated(\\r\\n            msg.sender,\\r\\n            _marketId,\\r\\n            index_,\\r\\n            _amount,\\r\\n            _price,\\r\\n            userPayout,\\r\\n            userPayout / 5,\\r\\n            uint48(block.timestamp)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* ========== REDEEM ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice             redeem notes for user\\r\\n     * @param _indexes     the note indexes to redeem\\r\\n     * @return payout_     sum of payout sent, in NEND\\r\\n     */\\r\\n    function redeem(uint256[] memory _indexes)\\r\\n        public\\r\\n        override\\r\\n        returns (uint256 payout_)\\r\\n    {\\r\\n        require(_indexes.length > 0, \\\"Nothing to redeem\\\");\\r\\n\\r\\n        uint8[] memory vestingCount = new uint8[](_indexes.length);\\r\\n        uint256[] memory totalVested = new uint256[](_indexes.length);\\r\\n\\r\\n        for (uint256 i = 0; i < _indexes.length; i++) {\\r\\n            Note storage note = notes[msg.sender][_indexes[i]];\\r\\n            uint8 pendingVestingCount = getPendingVestingCount(\\r\\n                msg.sender,\\r\\n                _indexes[i]\\r\\n            );\\r\\n\\r\\n            require(pendingVestingCount > 0, \\\"No pending vesting\\\");\\r\\n\\r\\n            note.vestingCount += pendingVestingCount;\\r\\n            payout_ += note.payoutPerVesting * pendingVestingCount;\\r\\n\\r\\n            vestingCount[i] = note.vestingCount;\\r\\n            totalVested[i] = note.vestingCount * note.payoutPerVesting;\\r\\n        }\\r\\n\\r\\n        IERC20(nend).transfer(msg.sender, payout_);\\r\\n        emit NotesRedeemed(msg.sender, _indexes, vestingCount, totalVested);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             redeem all redeemable markets for user\\r\\n     * @dev                if possible, query indexesFor() off-chain and input in redeem() to save gas\\r\\n     * @return             sum of payout sent, in NEND\\r\\n     */\\r\\n    function redeemAll(uint256 _marketId) external override returns (uint256) {\\r\\n        return redeem(indexesFor(msg.sender, _marketId));\\r\\n    }\\r\\n\\r\\n    /* ========== VIEW ========== */\\r\\n\\r\\n    // Note info\\r\\n\\r\\n    /**\\r\\n     * @notice             all pending notes for user\\r\\n     * @param _user        the user to query notes for\\r\\n     * @param _marketId    the market to query notes for\\r\\n     * @return             the pending notes for the user\\r\\n     */\\r\\n    function indexesFor(address _user, uint256 _marketId)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        Note[] memory info = notes[_user];\\r\\n\\r\\n        uint256 length;\\r\\n        for (uint256 i = 0; i < info.length; i++) {\\r\\n            if (\\r\\n                info[i].marketID == _marketId &&\\r\\n                getPendingVestingCount(_user, i) > 0\\r\\n            ) length++;\\r\\n        }\\r\\n\\r\\n        uint256[] memory indexes = new uint256[](length);\\r\\n        uint256 position;\\r\\n\\r\\n        for (uint256 i = 0; i < info.length; i++) {\\r\\n            if (\\r\\n                info[i].marketID == _marketId &&\\r\\n                getPendingVestingCount(_user, i) > 0\\r\\n            ) {\\r\\n                indexes[position] = i;\\r\\n                position++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return indexes;\\r\\n    }\\r\\n\\r\\n    function getPendingVestingCount(address _owner, uint256 _noteId)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint8)\\r\\n    {\\r\\n        Note memory note = notes[_owner][_noteId];\\r\\n\\r\\n        // Max vesting\\r\\n        if (note.vestingCount == totalVestingCount) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 secondsElapsed = block.timestamp - note.created;\\r\\n        uint256 invervalsElapsed = secondsElapsed /\\r\\n            (testing ? testVestingInverval : vestingInverval);\\r\\n\\r\\n        return\\r\\n            uint8(\\r\\n                invervalsElapsed > totalVestingCount\\r\\n                    ? totalVestingCount\\r\\n                    : invervalsElapsed\\r\\n            ) - note.vestingCount;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0b9acbbdc6bed6e653fa2689fca504a665304f282afc2ec0aa5d2d4379b084ff\",\"license\":\"AGPL-3.0-only\"},\"contracts/bridge/NENDBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\nimport \\\"../helpers/SignatureHelper.sol\\\";\\r\\n\\r\\nabstract contract NENDBridge is ERC20, MWOwnable {\\r\\n    using SignatureHelper for bytes32;\\r\\n\\r\\n    event EnterBridge(\\r\\n        uint48 enteredAt,\\r\\n        uint256 targetChainId,\\r\\n        address sender,\\r\\n        address receiver,\\r\\n        uint256 amount,\\r\\n        uint256 nonce\\r\\n    );\\r\\n\\r\\n    event LeaveBridge(uint256 nonce, uint256 sourceChainId, uint48 leftAt);\\r\\n\\r\\n    modifier validDestinationChain(uint256 chainId) {\\r\\n        require(\\r\\n            _isChainSupported(chainId) && block.chainid != chainId,\\r\\n            \\\"Invalid destination chain\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => mapping(uint256 => bool))\\r\\n        private chainNonceToExecutedMapping;\\r\\n    uint256 private nonce;\\r\\n\\r\\n    uint256[] public supportedChainIds;\\r\\n\\r\\n    constructor(uint256[] memory _supportedChainIds) {\\r\\n        require(\\r\\n            _supportedChainIds.length > 1,\\r\\n            \\\"Must have at least two destination chains\\\"\\r\\n        );\\r\\n        supportedChainIds = _supportedChainIds;\\r\\n        require(\\r\\n            _isChainSupported(block.chainid),\\r\\n            \\\"The hosted chain must be one of the supported chains\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function enterBridge(\\r\\n        uint256 _targetChainId,\\r\\n        address _receiver,\\r\\n        uint256 _amount\\r\\n    ) external validDestinationChain(_targetChainId) {\\r\\n        require(_amount > 0, \\\"Invalid amount\\\");\\r\\n        require(balanceOf(msg.sender) > _amount, \\\"Insufficient balance\\\");\\r\\n\\r\\n        _burn(msg.sender, _amount);\\r\\n\\r\\n        emit EnterBridge(\\r\\n            uint48(block.timestamp),\\r\\n            _targetChainId,\\r\\n            msg.sender,\\r\\n            _receiver,\\r\\n            _amount,\\r\\n            nonce++\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function leaveBridge(\\r\\n        uint256 _sourceChainId,\\r\\n        address _receiver,\\r\\n        uint256 _amount,\\r\\n        uint256 _nonce,\\r\\n        bytes memory _signature\\r\\n    ) external {\\r\\n        bytes32 messageHash = keccak256(\\r\\n            abi.encodePacked(_sourceChainId, _receiver, _amount, _nonce)\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            messageHash.recoverSigner(_signature) == owner(),\\r\\n            \\\"Invalid signature\\\"\\r\\n        );\\r\\n\\r\\n        // Duplicate request, already left bridge\\r\\n        if (chainNonceToExecutedMapping[_sourceChainId][_nonce]) {\\r\\n            return;\\r\\n        }\\r\\n        chainNonceToExecutedMapping[_sourceChainId][_nonce] = true;\\r\\n\\r\\n        _mint(_receiver, _amount);\\r\\n\\r\\n        emit LeaveBridge(_nonce, _sourceChainId, uint48(block.timestamp));\\r\\n    }\\r\\n\\r\\n    function _isChainSupported(uint256 chainId) internal view returns (bool) {\\r\\n        for (uint256 i = 0; i < supportedChainIds.length; i++) {\\r\\n            if (supportedChainIds[i] == chainId) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x24b7b48c26a3dacbdf17b7bee013e0d4c04c2415c4d5e86f2c19441d9e90cc7e\",\"license\":\"UNLICENSED\"},\"contracts/helpers/SignatureHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SignatureHelper {\\r\\n    function recoverSigner(bytes32 messageHash, bytes memory signature)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address)\\r\\n    {\\r\\n        (bytes32 r, bytes32 s, uint8 v) = splitSig(signature);\\r\\n\\r\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\r\\n        bytes32 prefixedHashMessage = keccak256(\\r\\n            abi.encodePacked(prefix, messageHash)\\r\\n        );\\r\\n\\r\\n        return ecrecover(prefixedHashMessage, v, r, s);\\r\\n    }\\r\\n\\r\\n    function splitSig(bytes memory signature)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            bytes32 r,\\r\\n            bytes32 s,\\r\\n            uint8 v\\r\\n        )\\r\\n    {\\r\\n        assembly {\\r\\n            r := mload(add(signature, 32))\\r\\n            s := mload(add(signature, 64))\\r\\n            v := and(mload(add(signature, 65)), 255)\\r\\n        }\\r\\n        if (v < 27) v += 27;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2aad6f30ae6e31239a36a51948c87c8d2e08a4f437d5f6c1a1e0029fee947cd8\",\"license\":\"UNLICENSED\"},\"contracts/inflation/Inflation.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../staking/interfaces/ILendingPoolStaking.sol\\\";\\r\\nimport \\\"../vault/Vault.sol\\\";\\r\\nimport \\\"../test/Testing.sol\\\";\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\nimport \\\"../helpers/SignatureHelper.sol\\\";\\r\\n\\r\\nabstract contract Inflation is ERC20, MWOwnable, Testing {\\r\\n    using SignatureHelper for bytes32;\\r\\n\\r\\n    uint48 public lastInflation;\\r\\n    ILendingPoolStaking public staking;\\r\\n\\r\\n    mapping(uint8 => bool) public isProcessed;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function setStaking(address _staking) external onlyOwner {\\r\\n        staking = ILendingPoolStaking(_staking);\\r\\n    }\\r\\n\\r\\n    function reset() external onlyOwner {\\r\\n        uint8 i = 0;\\r\\n        while (true) {\\r\\n            isProcessed[i] = false;\\r\\n            if (i == 255) {\\r\\n                break;\\r\\n            }\\r\\n            i++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function inflate(\\r\\n        uint8 _count,\\r\\n        uint256 _amount,\\r\\n        bytes memory _signature\\r\\n    ) external onlyOwner {\\r\\n        require(address(staking) != address(0), \\\"Staking not set\\\");\\r\\n        if (isProcessed[_count]) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        isProcessed[_count] = true;\\r\\n\\r\\n        bytes32 messageHash = keccak256(abi.encodePacked(_count, _amount));\\r\\n\\r\\n        require(\\r\\n            messageHash.recoverSigner(_signature) == msg.sender,\\r\\n            \\\"Invalid signature\\\"\\r\\n        );\\r\\n\\r\\n        _mint(address(staking), _amount);\\r\\n\\r\\n        staking.distributeInflationRewards(_amount);\\r\\n\\r\\n        lastInflation = uint48(block.timestamp);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2327ba4b4abf338b499da5b396090a2de0ffaa8efa51d56129d279f55d857dbe\",\"license\":\"UNLICENSED\"},\"contracts/staking/interfaces/ILendingPoolStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILendingPoolStaking {\\r\\n    error InsufficientBalance();\\r\\n    error InvalidArgument(string details);\\r\\n    error InvalidState();\\r\\n    error Unauthorized();\\r\\n\\r\\n    enum StakeStatus {\\r\\n        DEFAULT, // Not staked, only applicable to escrowed reward\\r\\n        STAKED, // Stake ongoing\\r\\n        FULFILLED // Stake ended gracefully\\r\\n    }\\r\\n\\r\\n    enum EscrowStatus {\\r\\n        DEFAULT, // Not issued\\r\\n        ISSUED,\\r\\n        CLAIMED\\r\\n    }\\r\\n\\r\\n    struct Stake {\\r\\n        // Staker address\\r\\n        address staker;\\r\\n        // Stake token address\\r\\n        address token;\\r\\n        // The time of deposit\\r\\n        uint48 start;\\r\\n        // The time of withdrawal\\r\\n        uint48 end;\\r\\n        // The amount staked by each stake duration\\r\\n        uint256[3] amountsPerDuration;\\r\\n        // The amount of stake token that will be rewarded upon finishing the stake duration\\r\\n        uint256 rewardAllocated;\\r\\n        // Stake is escrow\\r\\n        bool isEscrow;\\r\\n        // Status of eab\\r\\n        EscrowStatus escrowStatus;\\r\\n        // Status of stake\\r\\n        StakeStatus stakeStatus;\\r\\n    }\\r\\n\\r\\n    event Staked(\\r\\n        uint256 stakeId,\\r\\n        address staker,\\r\\n        address token,\\r\\n        uint48 start,\\r\\n        uint48 end,\\r\\n        uint256[3] amountsPerDuration,\\r\\n        bool isEscrow\\r\\n    );\\r\\n    event StakeStatusChanged(uint256 stakeId, StakeStatus status);\\r\\n    event EscrowStatusChanged(uint256 stakeId, EscrowStatus status);\\r\\n    event InflationRewardDistributed();\\r\\n    event NonInflationRewardDistributed();\\r\\n\\r\\n    function deposit(\\r\\n        address _stakeToken,\\r\\n        uint256 _amount,\\r\\n        uint8 _durationId\\r\\n    ) external payable;\\r\\n\\r\\n    function stakeEscrowedReward(uint256 _stakeId) external;\\r\\n\\r\\n    function distributeInflationRewards(uint256 _inflationReward) external;\\r\\n\\r\\n    function distributeNonInflationRewards() external;\\r\\n\\r\\n    function hasPendingNonInflationRewards() external view returns (bool);\\r\\n\\r\\n    function unstake(uint256 _stakeId) external;\\r\\n\\r\\n    function addStakeToken(address _stakeToken) external;\\r\\n\\r\\n    function removeStakeToken(address _stakeToken) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x4bec2a92147df12dffb6075f6fbcb47ecf6718bdb662e9f769e4e63fa6025619\",\"license\":\"UNLICENSED\"},\"contracts/test/Testing.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract Testing is MWOwnable {\\r\\n    bool public testing = false;\\r\\n\\r\\n    function setTesting(bool _testing) external onlyOwner {\\r\\n        testing = _testing;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc42166b7defa6b84a92cfc80f626f4900a803d2025057133be94a6f42ac1719a\",\"license\":\"Unlicense\"},\"contracts/token/ERC20/NEND.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../bridge/NENDBridge.sol\\\";\\r\\nimport \\\"./NENDAirdrop.sol\\\";\\r\\nimport \\\"./NENDCrossChainSupply.sol\\\";\\r\\nimport \\\"../../inflation/Inflation.sol\\\";\\r\\nimport \\\"../../access/SimpleRoleAccess.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\n\\r\\ncontract NEND is\\r\\n    NENDAirdrop,\\r\\n    NENDBridge,\\r\\n    NENDCrossChainSupply,\\r\\n    SimpleRoleAccess,\\r\\n    ERC20Burnable\\r\\n{\\r\\n    bool public isMintChain;\\r\\n\\r\\n    function mint(address _receiver, uint256 _amount)\\r\\n        external\\r\\n        onlyRole(\\\"minter\\\")\\r\\n    {\\r\\n        _mint(_receiver, _amount);\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        bool _isMainChain,\\r\\n        uint256[] memory _chains\\r\\n    ) ERC20(\\\"NEND\\\", \\\"NEND\\\") NENDBridge(_chains) {\\r\\n        isMintChain = _isMainChain;\\r\\n        if (isMintChain) {\\r\\n            airdrop  = 10000000 ether;\\r\\n            _mint(\\r\\n                address(this),\\r\\n                    70000000 ether\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function distribute(address _to, uint256 _amount) external onlyOwner {\\r\\n        _transfer(address(this), _to, _amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x764bc1e809a6612bd9668a32f3afc0ea9234dfabce34a759f9b4718b6c820b68\",\"license\":\"UNLICENSED\"},\"contracts/token/ERC20/NENDAirdrop.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract NENDAirdrop is ERC20, MWOwnable {\\r\\n\\r\\n    uint airdrop;\\r\\n\\r\\n    event AirdropCreated(address indexed addresses, uint256 amount);\\r\\n\\r\\n    function createAirdrop(\\r\\n        address _receiver,\\r\\n        uint256 _amount \\r\\n    ) external onlyOwner {\\r\\n        require(airdrop >= _amount, \\\"Not enough airdrop funds\\\");\\r\\n\\r\\n        airdrop -= _amount;\\r\\n\\r\\n        _transfer(address(this), _receiver, _amount);\\r\\n        emit AirdropCreated(_receiver, _amount);\\r\\n    }\\r\\n\\r\\n    function createAirdropBatch(address[] memory _receivers, uint256 _amount)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            airdrop > _receivers.length * _amount,\\r\\n            \\\"Not enough airdrop funds\\\"\\r\\n        );\\r\\n\\r\\n        airdrop -= _receivers.length * _amount;\\r\\n\\r\\n        for (uint256 i = 0; i < _receivers.length; i++) {\\r\\n            _transfer(address(this), _receivers[i], _amount);\\r\\n            emit AirdropCreated(_receivers[i], _amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xefc946a2d7e6ea7c4175f13ba04e3e683837acfd5df4c191a7967e89fc9cb0a8\",\"license\":\"UNLICENSED\"},\"contracts/token/ERC20/NENDCrossChainSupply.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../../inflation/Inflation.sol\\\";\\r\\n\\r\\nabstract contract NENDCrossChainSupply is Inflation {\\r\\n    uint256 public crossChainSupply;\\r\\n    uint256 public crossChainInflationAmount;\\r\\n\\r\\n    function update(\\r\\n        uint256 _crossChainSupply,\\r\\n        uint256 _crossChainInflationAmount\\r\\n    ) external onlyOwner {\\r\\n        crossChainSupply = _crossChainSupply;\\r\\n        crossChainInflationAmount = _crossChainInflationAmount;\\r\\n    }\\r\\n\\r\\n    function timeSlicedCrossChainSupply() external view returns (uint256) {\\r\\n        if (lastInflation == 0) {\\r\\n            return crossChainSupply;\\r\\n        }\\r\\n\\r\\n        uint256 timeElapsed = block.timestamp - lastInflation;\\r\\n        uint256 elapsedPct = (timeElapsed * 10000) / (testing? 10 minutes: 1 weeks);\\r\\n        if (elapsedPct > 10000) {\\r\\n            elapsedPct = 10000;\\r\\n        }\\r\\n\\r\\n        return\\r\\n            crossChainSupply + (crossChainInflationAmount * elapsedPct) / 10000;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x801791caa47a1e31861648a0afdbf6402ad29a03112a6d07b293b3e280ab17d7\",\"license\":\"UNLICENSED\"},\"contracts/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\r\\n\\r\\ncontract Vault is SimpleRoleAccess {\\r\\n    bytes4 private ERC1155_INTERFACE_ID = 0xd9b67a26;\\r\\n    string public name;\\r\\n\\r\\n    mapping(address => bool) public authorizedOperators;\\r\\n    mapping(address => bool) public authorizedSpenders;\\r\\n    // Balance name => token => amount\\r\\n    mapping(string => mapping(address => uint256)) public namedBalances;\\r\\n\\r\\n    constructor(string memory _name) {\\r\\n        name = _name;\\r\\n    }\\r\\n\\r\\n    function approveERC20Transfer(\\r\\n        address _tokenAddress,\\r\\n        address _spender,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.approve(_spender, _amount);\\r\\n    }\\r\\n\\r\\n    function transferERC20(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.transfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function setERC721ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function transferERC721(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.transferFrom(address(this), _to, _tokenId);\\r\\n    }\\r\\n\\r\\n    function transferERC1155(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeTransferFrom(address(this), _to, _id, _value, _data);\\r\\n    }\\r\\n\\r\\n    function transferERC1155Batch(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeBatchTransferFrom(address(this), _to, _ids, _values, _data);\\r\\n    }\\r\\n\\r\\n    function setERC1155ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function getNativeBalance() external view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function transferNative(address payable _to, uint256 _amount)\\r\\n        public\\r\\n        payable\\r\\n        onlyRole(\\\"spender\\\")\\r\\n    {\\r\\n        (bool sent, ) = _to.call{ value: _amount }(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n\\r\\n    function burn(address _token, uint256 _amount) public onlyRole(\\\"spender\\\") {\\r\\n        ERC20Burnable(_token).burn(_amount);\\r\\n    }\\r\\n\\r\\n    function namedBalanceReceive(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        namedBalances[_name][_token] += _amount;\\r\\n    }\\r\\n\\r\\n    function namedBalanceSpend(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        require(\\r\\n            namedBalances[_name][_token] >= _amount,\\r\\n            \\\"Insufficient balance\\\"\\r\\n        );\\r\\n        namedBalances[_name][_token] -= _amount;\\r\\n    }\\r\\n\\r\\n    function getNamedBalance(string memory _name, address _token)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 balance = namedBalances[_name][_token];\\r\\n        uint256 actualBalance = _token == address(0)\\r\\n            ? payable(this).balance\\r\\n            : IERC20(_token).balanceOf(address(this));\\r\\n\\r\\n        return balance <= actualBalance ? balance : actualBalance;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x558d46944255126ec213d7229ddcd6f07490fef3e057bbe05aef5099c942f54d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e034620000b657601f620032c138819003918201601f19168301916001600160401b03831184841017620000bb57808492606094604052833981010312620000b65780620000526200007692620000d1565b906200006f60406200006760208401620000d1565b9201620000d1565b91620000e6565b6040516131289081620001998239608051818181610d59015261300a015260a05181818161099501526130c6015260c051818181610ca301526130750152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620000b657565b909160005491737e8ae5c72eca86946b695dcc211863d9721a096160018060a01b0393818582167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a36001600160a81b031916176000556005608052600480546201518060a05261025860c0526001600160b01b03191691841691909117600f60a11b179055600280546001600160a01b031990811694841694909417905560038054909316911617905556fe60806040526004361015610013575b600080fd5b60003560e01c8062aeef8a1461026a57806308ed8d16146102615780630aebeb4e14610258578063203732b41461024f578063217fe6c614610246578063231259d91461023d57806339d2525f146102345780633eca1cf01461022b57806345fd86ac14610222578063498e324f146102195780635ea1d6f8146102105780636088d109146102075780637136a7a6146101fe578063715018a6146101f55780637cbd26ef146101ec5780637ecb084d146101e357806382952200146101da5780638d03b102146101d15780638da5cb5b146101c857806399d508c0146101bf578063ab2adc00146101b6578063b1283e77146101ad578063bc3b2b12146101a4578063bfacba3d1461019b578063c0680e2014610192578063c0aa0e8a14610189578063e0b117ff14610180578063e3684e3914610177578063f2fde38b1461016e5763f9afb26a1461016657600080fd5b61000e6113c3565b5061000e6112d0565b5061000e611233565b5061000e611198565b5061000e6110e6565b5061000e611018565b5061000e610ee6565b5061000e610e8d565b5061000e610e03565b5061000e610d7d565b5061000e610d3e565b5061000e610d16565b5061000e610cef565b5061000e610cc7565b5061000e610c83565b5061000e610c5b565b5061000e610bfa565b5061000e610abe565b5061000e610a26565b5061000e610a00565b5061000e6109b9565b5061000e610975565b5061000e6108f9565b5061000e610847565b5061000e610800565b5061000e610771565b5061000e610581565b5061000e610499565b5061000e610454565b503461000e57606036600319011261000e5760043560243561028b82610dbc565b509161029681611073565b506102a0906114a6565b9265ffffffffffff9381838642169260208101516102c39065ffffffffffff1690565b65ffffffffffff1684106102d6906114f5565b6102e084836118db565b6102e9826125c0565b6102f7604435821115611541565b80610301896115a4565b9061030b916115fc565b61031484610fad565b505460f01c60ff166103259061161c565b61032e916115fc565b9760038501548911156103409061163b565b80600186019a8a8c546103579060ff9060a01c1690565b600014966103e5956103d1946103c39460409a6104415761037a825b8d54611687565b8c5560058c0161038b83825461169e565b90556103b9600267ffffffffffffffff87169d8e6103ae6004830191825461169e565b9055019c8d5461169e565b8c553393166128a8565b9a546001600160a01b031690565b6003546001600160a01b03169033906116b6565b0151905411156104315750600090557f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe56000604051a25b604080519182526020820192909252f35b0390f35b905061043c91611c89565b61041c565b61037a85610373565b8015150361000e57565b503461000e57602036600319011261000e576004356104728161044a565b61047a61144e565b6000805460ff60a01b191691151560a01b60ff60a01b16919091179055005b503461000e57602036600319011261000e576004356104b6611f34565b906104d86000926001600160a01b038454163314908115610537575b50611f55565b6105016104e482611073565b50600101805465ffffffffffff19164265ffffffffffff16179055565b8161050b82610dbc565b5055604051907f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe58383a2f35b60ff9150602061055f913387526005825260408720826040519483868095519384920161073c565b8201908152030190205416386104d2565b6001600160a01b0381160361000e57565b503461000e57602036600319011261000e576001600160a01b036004356105a781610570565b6105af61144e565b166001600160a01b031960035416176003556000604051f35b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176105fb57604052565b6106036105c8565b604052565b90601f8019910116810190811067ffffffffffffffff8211176105fb57604052565b604051906080820182811067ffffffffffffffff8211176105fb57604052565b6040519060e0820182811067ffffffffffffffff8211176105fb57604052565b604051906060820182811067ffffffffffffffff8211176105fb57604052565b6040519060c0820182811067ffffffffffffffff8211176105fb57604052565b6040519060a0820182811067ffffffffffffffff8211176105fb57604052565b60209067ffffffffffffffff81116106e8575b601f01601f19160190565b6106f06105c8565b6106dd565b81601f8201121561000e5780359061070c826106ca565b9261071a6040519485610608565b8284526020838301011161000e57816000926020809301838601378301015290565b918091926000905b82821061075c575011610755575050565b6000910152565b91508060209183015181860152018291610744565b503461000e57604036600319011261000e5760043561078f81610570565b60243567ffffffffffffffff811161000e576107e3602061042d936001600160a01b036107c260ff9536906004016106f5565b9116600052600582526040600020826040519483868095519384920161073c565b820190815203019020546040519116151581529081906020820190565b503461000e57602036600319011261000e576001600160a01b0360043561082681610570565b61082e61144e565b166001600160a01b031960045416176004556000604051f35b503461000e57606036600319011261000e5760043561086581610570565b60243567ffffffffffffffff811161000e57602061088a6108c79236906004016106f5565b6001600160a01b036044359461089f8661044a565b6108a761144e565b16600052600582526040600020826040519483868095519384920161073c565b8201908152030190209060ff8019835416911515161790556000604051f35b60c4359063ffffffff8216820361000e57565b503461000e5760e036600319011261000e5760043561091781610570565b604435906109248261044a565b6084359165ffffffffffff8316830361000e5760a43563ffffffff8116810361000e5761042d93610965936109576108e6565b936064359160243590611fa1565b6040519081529081906020820190565b503461000e57600036600319011261000e57602060405165ffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e57602036600319011261000e576001600160a01b036004356109df81610570565b6109e761144e565b166001600160a01b031960025416176002556000604051f35b503461000e57600036600319011261000e57602061ffff60045460a01c16604051908152f35b503461000e57602036600319011261000e5760043561ffff811680820361000e5761271090610a5361144e565b11610a79576004805461ffff60a01b191660a09290921b61ffff60a01b16919091179055005b60405162461bcd60e51b815260206004820152601360248201527f496e76616c696420626173697320706f696e74000000000000000000000000006044820152606490fd5b503461000e57602036600319011261000e57600435610af8610af3336001600160a01b03166000526001602052604060002090565b612f60565b6000805b8251811015610b6f578365ffffffffffff610b2a6060610b1c8588612c12565b51015165ffffffffffff1690565b161480610b5a575b610b45575b610b4090612c02565b610afc565b90610b52610b4091612c02565b919050610b37565b5060ff610b678233612fc8565b161515610b32565b50610b7990612bd0565b6000805b8351811015610bee578465ffffffffffff610b9d6060610b1c8589612c12565b161480610bd9575b610bb8575b610bb390612c02565b610b7d565b90610bd18183610bcb610bb39487612c12565b52612c02565b919050610baa565b5060ff610be68233612fc8565b161515610ba5565b61042d61096584612d3c565b503461000e57600080600319360112610c5857610c1561144e565b80546001600160a01b031981168255816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e5760206001600160a01b0360035416604051908152f35b503461000e57600036600319011261000e57602060405165ffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e57600036600319011261000e5760206001600160a01b0360045416604051908152f35b503461000e57600036600319011261000e57602060ff60005460a01c166040519015158152f35b503461000e57600036600319011261000e5760206001600160a01b0360005416604051908152f35b503461000e57600036600319011261000e57602060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e57600036600319011261000e5760206001600160a01b0360025416604051908152f35b50634e487b7160e01b600052603260045260246000fd5b6006908154811015610df6575b81600052027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0190600090565b610dfe610da5565b610dc9565b503461000e57602036600319011261000e5760043560065481101561000e57610e2b90610dbc565b5080546001820154600283015460038401546004850154600590950154604080519586526001600160a01b038516602087015260ff60a095861c16151590860152606085019290925260808401529082019290925260c081019190915260e090f35b503461000e57602036600319011261000e5760043560005260096020526080604060002060ff6001825492015460405192835265ffffffffffff80821660208501528160301c16604084015260601c1615156060820152f35b503461000e57602036600319011261000e57600435610f04816125c0565b61042d6b033b2e3c9fd0803ce8000000610f8283610f7d610f2487610dbc565b505496610f7760ff6003610f3784610dbc565b50015492600854811015610fa0575b60086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3015460f01c1661161c565b906115e9565b6115e9565b04604051938493846040919493926060820195825260208201520152565b610fa8610da5565b610f46565b600854811015610fe5575b60086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30190600090565b610fed610da5565b610fb8565b805482101561100b575b60005260206000200190600090565b611013610da5565b610ffc565b503461000e57604036600319011261000e5760043561103681610570565b6001600160a01b036024359116600052600a6020526040600020805482101561000e5760209161106591610ff2565b90546040519160031b1c8152f35b6003906007548110156110af575b6007600052027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880190600090565b6110b7610da5565b611081565b80548210156110d9575b6000526003602060002091020190600090565b6110e1610da5565b6110c6565b503461000e57602036600319011261000e5760043560075481101561000e576003606091600760005202807fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880154907fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a65ffffffffffff7fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c689830154169101549060405192835260208301526040820152f35b503461000e57604036600319011261000e576004356111b681610570565b6001600160a01b0360243591166000526001602052604060002090815481101561000e576111e3916110bc565b508054600182015460029092015460408051928352602083019390935265ffffffffffff80821693830193909352603081901c9092166060808301919091529190911c60ff16608082015260a090f35b503461000e57602036600319011261000e5760043560085481101561000e5760086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301546040805165ffffffffffff8084168252603084901c81166020830152606084811c821693830193909352609084901c81169282019290925260c083811c909216608082015260f09290921c60ff1660a083015290f35b503461000e57602036600319011261000e576004356112ee81610570565b6112f661144e565b6001600160a01b0380911690811561134857600091825491816001600160a01b0319841617845560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b60209067ffffffffffffffff81116113b6575b60051b0190565b6113be6105c8565b6113af565b503461000e5760208060031936011261000e5760043567ffffffffffffffff811161000e573660238201121561000e578060040135906114028261139c565b916114106040519384610608565b80835260248484019160051b8301019136831161000e57602401905b82821061143f5761042d61096585612d3c565b8135815290840190840161142c565b6001600160a01b0360005416330361146257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b906040516060810181811067ffffffffffffffff8211176114e8575b6040526040600282948054845265ffffffffffff60018201541660208501520154910152565b6114f06105c8565b6114c2565b156114fc57565b60405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c75646564000000006044820152606490fd5b1561154857565b60405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d6178207072696365006044820152606490fd5b50634e487b7160e01b600052601160045260246000fd5b6b033b2e3c9fd0803ce80000009080600019048211811515166115c5570290565b6115cd61158d565b0290565b620f42409080600019048211811515166115c5570290565b80600019048211811515166115c5570290565b8115611606570490565b634e487b7160e01b600052601260045260246000fd5b60ff16604d811161162e575b600a0a90565b61163661158d565b611628565b1561164257565b60405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a652065786365656465640000006044820152606490fd5b818110611692570390565b61169a61158d565b0390565b811981116116aa570190565b6116b261158d565b0190565b6040516323b872dd60e01b60208083019182526001600160a01b0394851660248401529484166044830152606480830196909652948152929391906116fc608485610608565b16906040519261170b846105df565b8484527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656485850152823b1561177e57611757939260009283809351925af161175161183a565b9061186a565b8051908161176457505050565b8261177c936117779383010191016117c3565b6117db565b565b60405162461bcd60e51b815260048101869052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9081602091031261000e57516117d88161044a565b90565b156117e257565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b3d15611865573d9061184b826106ca565b916118596040519384610608565b82523d6000602084013e565b606090565b90919015611876575090565b8151156118865750805190602001fd5b6044604051809262461bcd60e51b8252602060048301526118b6815180928160248601526020868601910161073c565b601f01601f19168101030190fd5b65ffffffffffff9182169116818110611692570390565b90600854821015611ab2575b600860005261196961195c61195c611920857ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301611abf565b65ffffffffffff604061195282602085015116804210611aa5575b60026119468b610dbc565b509142039101546115e9565b92015116906115fc565b67ffffffffffffffff1690565b611981600261197785610dbc565b5001918254611687565b90556119b58161199084610fad565b509065ffffffffffff60301b82549160301b169065ffffffffffff60301b1916179055565b6119d960016119ce846000526009602052604060002090565b015460601c60ff1690565b6119e1575050565b6119f5826000526009602052604060002090565b91611a0b611a02826126c2565b91929093611073565b50611a17838254611687565b905515611a9257611a52600185611a35611a799461177c9854611687565b81550192611a4d845465ffffffffffff9060301c1690565b6118c4565b82546bffffffffffff000000000000191660309190911b65ffffffffffff60301b16178255565b9065ffffffffffff1665ffffffffffff19825416179055565b505050600101805460ff60601b19169055565b611aad61158d565b61193b565b611aba610da5565b6118e7565b9060405160c0810181811067ffffffffffffffff821117611b25575b60405260a060ff82945465ffffffffffff8082168552808260301c166020860152808260601c166040860152808260901c1660608601528160c01c16608085015260f01c16910152565b611b2d6105c8565b611adb565b9065ffffffffffff80809316911680920381116116aa570190565b9060405160e0810181811067ffffffffffffffff821117611bc3575b60405260c06005829480548452611b9e60ff60018301546001600160a01b038116602088015260a01c16604086019015159052565b6002810154606085015260038101546080850152600481015460a08501520154910152565b611bcb6105c8565b611b69565b9081602091031261000e575190565b506040513d6000823e3d90fd5b50634e487b7160e01b600052600060045260246000fd5b60606001611c8592845181550192611c6a65ffffffffffff611c3f81602085015116879065ffffffffffff1665ffffffffffff19825416179055565b604083015186546bffffffffffff0000000000001916911660301b65ffffffffffff60301b16178555565b0151825460ff60601b191690151560601b60ff60601b161790565b9055565b90611c9c611c9683610fad565b50611abf565b805165ffffffffffff1692611cd3611cc86080840195611cc2875165ffffffffffff1690565b90611b32565b65ffffffffffff1690565b65ffffffffffff84161015611ce9575b50505050565b611e6f93611e2661195c85611d6f6004611dd6611e5598611d6f89610f77611cc86040611d41611cc8611d24611d1e87610dbc565b50611b4d565b9b611a4d6001611d3389611073565b50015465ffffffffffff1690565b95611d4b856125c0565b9a8b611d5984830151151590565b15611f2c57611d7490611d6f611d9093516115a4565b6115fc565b611d8a611d8560a085015160ff1690565b61161c565b906115fc565b945b6003611dc6611dc061195c61195c8c611d6f611dba611cc860608b015165ffffffffffff1690565b8d6115e9565b92610dbc565b500155015165ffffffffffff1690565b926020611dfc611df0611df085546001600160a01b031690565b6001600160a01b031690565b604051633fdaeac760e11b815293849182905afa918215611f1f575b600092611eef575b506115e9565b9067ffffffffffffffff611e3984611073565b50549216918210611e785750611e4e82611073565b5055610fad565b509065ffffffffffff1665ffffffffffff19825416179055565b38808080611ce3565b611eca611ea2611e95611eea94611e8e87611073565b5054611687565b925165ffffffffffff1690565b611eaa61062a565b92835265ffffffffffff8716602084015265ffffffffffff166040830152565b60016060820152611ee5836000526009602052604060002090565b611c03565b610fad565b611f1191925060203d8111611f18575b611f098183610608565b810190611bd0565b9038611e20565b503d611eff565b611f27611bdf565b611e18565b505194611d92565b60405190611f41826105df565b600582526430b236b4b760d91b6020830152565b15611f5c57565b60405162461bcd60e51b815260206004820152600e60248201527f4e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606490fd5b9094929394611fae611f34565b92611fcf6001600160a01b0394856000541633149081156122a65750611f55565b611fe14265ffffffffffff8916611687565b916040519663313ce56760e01b88526020886004818989165afa978815612299575b600098612268575b508215612260578861202f61202383611d6f866115a4565b611d8a60ff8c166122e9565b915b6006549b8c9a8761204863ffffffff8d16876115e9565b90612052916115fc565b61205a61064a565b8781526001600160a01b038b166020820152908815156040830152866060830152608082015260a081016000905260c0810160009052612099906122f7565b600454604051633fdaeac760e11b8152928691849081906001600160a01b03165a92600491602094fa90811563ffffffff7f3f414051967f5a5e84f3af856364502239c9052e98e136c6ed4ed90bc5f5b0ba9f6121b065ffffffffffff6122339f6121776121e09e60209e61216d6121db9f60ff9f6121d09e611d6f8c9f612152946121c09f9461213695612253575b60009261223957506115e9565b9361214c612143826115d1565b620186a0900490565b9061169e565b9161215b61066a565b93845265ffffffffffff166020840152565b60408201526123b8565b6121a082421661218561068a565b65ffffffffffff821681529e8f019065ffffffffffff169052565b1665ffffffffffff1660408c0152565b1665ffffffffffff166060890152565b1665ffffffffffff166080860152565b1660ff1660a0830152565b612435565b612208876122038787166001600160a01b0316600052600a602052604060002090565b61257b565b6040519485941697849192604091949365ffffffffffff606085019616845260208401521515910152565b0390a390565b6020611f119293503d602011611f1857611f098183610608565b61225b611bdf565b612129565b888291612031565b61228b91985060203d602011612292575b6122838183610608565b8101906122d0565b963861200b565b503d612279565b6122a1611bdf565b612003565b60ff9150602061055f9133600052600582526040600020826040519483868095519384920161073c565b9081602091031261000e575160ff8116810361000e5790565b604d811161162e57600a0a90565b600560c061231a600654600160401b8110156123ab575b60018101600655610dbc565b93909361239e575b805184556123796001850161235a6001600160a01b0360208501511682906001600160a01b03166001600160a01b0319825416179055565b6040830151815460ff60a01b191690151560a01b60ff60a01b16179055565b606081015160028501556080810151600385015560a081015160048501550151910155565b6123a6611bec565b612322565b6123b36105c8565b61230e565b600260406123db600754600160401b811015612428575b60018101600755611073565b93909361241b575b8051845561241465ffffffffffff602083015116600186019065ffffffffffff1665ffffffffffff19825416179055565b0151910155565b612423611bec565b6123e3565b6124306105c8565b6123cf565b61177c9061254760a061245d600854600160401b81101561256e575b60018101600855610fad565b939093612561575b805184546020830151604084015160608086015191901b71ffffffffffff0000000000000000000000001660309290921b65ffffffffffff60301b1665ffffffffffff9485167fffffffffffffffff00000000000000000000000000000000000000000000000090941693909317929092171760909190911b77ffffffffffff00000000000000000000000000000000000016178555608082015161253f911685547fffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff1660c09190911b65ffffffffffff60c01b16178555565b015160ff1690565b815460ff60f01b191660f09190911b60ff60f01b16179055565b612569611bec565b612465565b6125766105c8565b612451565b805461259991600160401b8210156125b3575b600182018155610ff2565b819291549060031b600019811b9283911b16911916179055565b6125bb6105c8565b61258e565b6117d890611d8a611d8561267d6126776125d985611073565b5054610f77600461263460026125ee8a610dbc565b5001546008548a10156126b5575b60086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee38a0154610f779060f01c60ff1661161c565b602061264d611df0611df085546001600160a01b031690565b604051633fdaeac760e11b815293849182905afa9182156126a8575b600092612688575b506115fc565b93610fad565b505460f01c60ff1690565b6126a191925060203d8111611f1857611f098183610608565b9038612671565b6126b0611bdf565b612669565b6126bd610da5565b6125fc565b6000908152600960205260408120906001604051926080840184811067ffffffffffffffff82111761277f575b6040528054845201549165ffffffffffff9283811680602084015260ff6040840192868160301c16845260601c16158015606085015261277457612735908542166118c4565b93612749611cc8835165ffffffffffff1690565b9085169081109350831561276e57611cc8611e95611d8a9261276b95516115e9565b92565b50505192565b505050809150918190565b6127876105c8565b6126ef565b1561279357565b60405162461bcd60e51b815260206004820152602860248201527f496e73756666696369656e742074726561737572792062616c616e636520666f6044820152671c881c185e5bdd5d60c21b6064820152608490fd5b60ff60806002612811611c8594805490600160401b82101561289b575b6001820181556110bc565b61288e575b855181556020860151600182015560408601519101805465ffffffffffff191665ffffffffffff928316178155949061287490606083015187546bffffffffffff0000000000001916911660301b65ffffffffffff60301b16178655565b0151835460ff60601b1916911660601b60ff60601b161790565b612896611bec565b612816565b6128a36105c8565b612806565b90929194936004936128c185546001600160a01b031690565b916129756128d76003546001600160a01b031690565b9382604051956370a0823160e01b8752896000602098899561293a8683612910888883019190916001600160a01b036020820193169052565b039389816001600160a01b0396818888165afa908115612b77575b8691612b5a575b50101561278c565b6040805163276d76f960e21b81526001600160a01b039092169482019485523060208601528401959095529395869485939091849160600190565b0393165af18015612b4d575b612b30575b50855460a01c61ffff1661ffff1661299e90826115e9565b612710900490816129ae91611687565b6129cb866001600160a01b03166000526001602052604060002090565b54986129eb8a976001600160a01b03166000526001602052604060002090565b938560058404944265ffffffffffff1696612a046106aa565b86815283810188905265ffffffffffff8916604082015265ffffffffffff8b16606082015260006080820152612a39916127e9565b8a546002546040805163a9059cbb60e01b81526001600160a01b039283169e81019e8f5260208f0194909452929c8d939084900301918391165a90600091f17f129794f6f9aa0adfa6dda6ca7d08d05812fea954f80008e5cf68ae7b9fa898b499612af097918015612b23575b612af5575b50506040805133815265ffffffffffff9889166020820152908101989098526060880152608087015260a086015260c085015290911660e08301528190610100820190565b0390a1565b81612b1492903d10612b1c575b612b0c8183610608565b8101906117c3565b503880612aab565b503d612b02565b612b2b611bdf565b612aa6565b612b4690843d8611612b1c57612b0c8183610608565b5038612986565b612b55611bdf565b612981565b612b7191508a3d8c11611f1857611f098183610608565b38612932565b612b7f611bdf565b61292b565b15612b8b57565b60405162461bcd60e51b815260206004820152601160248201527f4e6f7468696e6720746f2072656465656d0000000000000000000000000000006044820152606490fd5b90612bda8261139c565b612be76040519182610608565b8281528092612bf8601f199161139c565b0190602036910137565b60019060001981146116aa570190565b6020918151811015612c27575b60051b010190565b612c2f610da5565b612c1f565b15612c3b57565b60405162461bcd60e51b815260206004820152601260248201527f4e6f2070656e64696e672076657374696e6700000000000000000000000000006044820152606490fd5b60ff8091169116908160ff0381116116aa570190565b90815180825260208080930193019160005b828110612cb6575050505090565b835185529381019392810192600101612ca8565b906001600160a01b039095949295168152612cf16020956080878401526080830190612c96565b818103604083015285808551928381520194019060005b818110612d25575050506117d89394506060818403910152612c96565b825160ff1686529487019491870191600101612d08565b90600091612d4c81511515612b84565b612d568151612bd0565b90612d618151612bd0565b9160005b8251811015612e4257336000908152600160205260409020612d878285612c12565b51612d91916110bc565b50612d9c8285612c12565b51612da79033612fc8565b9660ff9081891692831515612dbb90612c34565b600281018054909a9060601c60ff1690612dd491612c80565b8a5460ff60601b191660609190911b60ff60601b16178a556001015492612dfb90846115e9565b612e049161169e565b975460601c60ff1680612e178587612c12565b60ff90911690521690612e29916115e9565b612e338286612c12565b52612e3d90612c02565b612d65565b5090612af07f5a21b90378728eb82fe7be28a8f4a46d422e5c1f08ac7521b84ef5c190b0cc869360006020612eb1612e88611df0611df06004546001600160a01b031690565b60405163a9059cbb60e01b8152336004820152602481018c905293849283919082906044820190565b03925af18015612eed575b612ecf575b506040519384933385612cca565b612ee69060203d8111612b1c57612b0c8183610608565b5038612ec1565b612ef5611bdf565b612ebc565b9060405160a0810181811067ffffffffffffffff821117612f53575b604052608060ff600283958054855260018101546020860152015465ffffffffffff80821660408601528160301c16606085015260601c16910152565b612f5b6105c8565b612f16565b908154612f6c8161139c565b92612f7a6040519485610608565b818452600090815260208082208186015b848410612f99575050505050565b600383600192612fa885612efa565b815201920193019290612f8b565b60ff9182169116818110611692570390565b612ff791612fec612ff1926001600160a01b03166000526001602052604060002090565b6110bc565b50612efa565b6080810160ff613008825160ff1690565b7f00000000000000000000000000000000000000000000000000000000000000008216911681146130ea576130ae60ff9161309c61305e613058611cc860406117d899015165ffffffffffff1690565b42611687565b60005460a01c60ff16156130bd5765ffffffffffff7f00000000000000000000000000000000000000000000000000000000000000005b16906115fc565b818111156130b55750925b5160ff1690565b9116612fb6565b9050926130a7565b65ffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000613095565b50505060009056fea26469706673582212204481cd9380804ec11c01ec8286cc3f8a52469b2edb0a5c3192ea7e230020014364736f6c634300080e0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c8062aeef8a1461026a57806308ed8d16146102615780630aebeb4e14610258578063203732b41461024f578063217fe6c614610246578063231259d91461023d57806339d2525f146102345780633eca1cf01461022b57806345fd86ac14610222578063498e324f146102195780635ea1d6f8146102105780636088d109146102075780637136a7a6146101fe578063715018a6146101f55780637cbd26ef146101ec5780637ecb084d146101e357806382952200146101da5780638d03b102146101d15780638da5cb5b146101c857806399d508c0146101bf578063ab2adc00146101b6578063b1283e77146101ad578063bc3b2b12146101a4578063bfacba3d1461019b578063c0680e2014610192578063c0aa0e8a14610189578063e0b117ff14610180578063e3684e3914610177578063f2fde38b1461016e5763f9afb26a1461016657600080fd5b61000e6113c3565b5061000e6112d0565b5061000e611233565b5061000e611198565b5061000e6110e6565b5061000e611018565b5061000e610ee6565b5061000e610e8d565b5061000e610e03565b5061000e610d7d565b5061000e610d3e565b5061000e610d16565b5061000e610cef565b5061000e610cc7565b5061000e610c83565b5061000e610c5b565b5061000e610bfa565b5061000e610abe565b5061000e610a26565b5061000e610a00565b5061000e6109b9565b5061000e610975565b5061000e6108f9565b5061000e610847565b5061000e610800565b5061000e610771565b5061000e610581565b5061000e610499565b5061000e610454565b503461000e57606036600319011261000e5760043560243561028b82610dbc565b509161029681611073565b506102a0906114a6565b9265ffffffffffff9381838642169260208101516102c39065ffffffffffff1690565b65ffffffffffff1684106102d6906114f5565b6102e084836118db565b6102e9826125c0565b6102f7604435821115611541565b80610301896115a4565b9061030b916115fc565b61031484610fad565b505460f01c60ff166103259061161c565b61032e916115fc565b9760038501548911156103409061163b565b80600186019a8a8c546103579060ff9060a01c1690565b600014966103e5956103d1946103c39460409a6104415761037a825b8d54611687565b8c5560058c0161038b83825461169e565b90556103b9600267ffffffffffffffff87169d8e6103ae6004830191825461169e565b9055019c8d5461169e565b8c553393166128a8565b9a546001600160a01b031690565b6003546001600160a01b03169033906116b6565b0151905411156104315750600090557f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe56000604051a25b604080519182526020820192909252f35b0390f35b905061043c91611c89565b61041c565b61037a85610373565b8015150361000e57565b503461000e57602036600319011261000e576004356104728161044a565b61047a61144e565b6000805460ff60a01b191691151560a01b60ff60a01b16919091179055005b503461000e57602036600319011261000e576004356104b6611f34565b906104d86000926001600160a01b038454163314908115610537575b50611f55565b6105016104e482611073565b50600101805465ffffffffffff19164265ffffffffffff16179055565b8161050b82610dbc565b5055604051907f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe58383a2f35b60ff9150602061055f913387526005825260408720826040519483868095519384920161073c565b8201908152030190205416386104d2565b6001600160a01b0381160361000e57565b503461000e57602036600319011261000e576001600160a01b036004356105a781610570565b6105af61144e565b166001600160a01b031960035416176003556000604051f35b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176105fb57604052565b6106036105c8565b604052565b90601f8019910116810190811067ffffffffffffffff8211176105fb57604052565b604051906080820182811067ffffffffffffffff8211176105fb57604052565b6040519060e0820182811067ffffffffffffffff8211176105fb57604052565b604051906060820182811067ffffffffffffffff8211176105fb57604052565b6040519060c0820182811067ffffffffffffffff8211176105fb57604052565b6040519060a0820182811067ffffffffffffffff8211176105fb57604052565b60209067ffffffffffffffff81116106e8575b601f01601f19160190565b6106f06105c8565b6106dd565b81601f8201121561000e5780359061070c826106ca565b9261071a6040519485610608565b8284526020838301011161000e57816000926020809301838601378301015290565b918091926000905b82821061075c575011610755575050565b6000910152565b91508060209183015181860152018291610744565b503461000e57604036600319011261000e5760043561078f81610570565b60243567ffffffffffffffff811161000e576107e3602061042d936001600160a01b036107c260ff9536906004016106f5565b9116600052600582526040600020826040519483868095519384920161073c565b820190815203019020546040519116151581529081906020820190565b503461000e57602036600319011261000e576001600160a01b0360043561082681610570565b61082e61144e565b166001600160a01b031960045416176004556000604051f35b503461000e57606036600319011261000e5760043561086581610570565b60243567ffffffffffffffff811161000e57602061088a6108c79236906004016106f5565b6001600160a01b036044359461089f8661044a565b6108a761144e565b16600052600582526040600020826040519483868095519384920161073c565b8201908152030190209060ff8019835416911515161790556000604051f35b60c4359063ffffffff8216820361000e57565b503461000e5760e036600319011261000e5760043561091781610570565b604435906109248261044a565b6084359165ffffffffffff8316830361000e5760a43563ffffffff8116810361000e5761042d93610965936109576108e6565b936064359160243590611fa1565b6040519081529081906020820190565b503461000e57600036600319011261000e57602060405165ffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e57602036600319011261000e576001600160a01b036004356109df81610570565b6109e761144e565b166001600160a01b031960025416176002556000604051f35b503461000e57600036600319011261000e57602061ffff60045460a01c16604051908152f35b503461000e57602036600319011261000e5760043561ffff811680820361000e5761271090610a5361144e565b11610a79576004805461ffff60a01b191660a09290921b61ffff60a01b16919091179055005b60405162461bcd60e51b815260206004820152601360248201527f496e76616c696420626173697320706f696e74000000000000000000000000006044820152606490fd5b503461000e57602036600319011261000e57600435610af8610af3336001600160a01b03166000526001602052604060002090565b612f60565b6000805b8251811015610b6f578365ffffffffffff610b2a6060610b1c8588612c12565b51015165ffffffffffff1690565b161480610b5a575b610b45575b610b4090612c02565b610afc565b90610b52610b4091612c02565b919050610b37565b5060ff610b678233612fc8565b161515610b32565b50610b7990612bd0565b6000805b8351811015610bee578465ffffffffffff610b9d6060610b1c8589612c12565b161480610bd9575b610bb8575b610bb390612c02565b610b7d565b90610bd18183610bcb610bb39487612c12565b52612c02565b919050610baa565b5060ff610be68233612fc8565b161515610ba5565b61042d61096584612d3c565b503461000e57600080600319360112610c5857610c1561144e565b80546001600160a01b031981168255816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e5760206001600160a01b0360035416604051908152f35b503461000e57600036600319011261000e57602060405165ffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e57600036600319011261000e5760206001600160a01b0360045416604051908152f35b503461000e57600036600319011261000e57602060ff60005460a01c166040519015158152f35b503461000e57600036600319011261000e5760206001600160a01b0360005416604051908152f35b503461000e57600036600319011261000e57602060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e57600036600319011261000e5760206001600160a01b0360025416604051908152f35b50634e487b7160e01b600052603260045260246000fd5b6006908154811015610df6575b81600052027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0190600090565b610dfe610da5565b610dc9565b503461000e57602036600319011261000e5760043560065481101561000e57610e2b90610dbc565b5080546001820154600283015460038401546004850154600590950154604080519586526001600160a01b038516602087015260ff60a095861c16151590860152606085019290925260808401529082019290925260c081019190915260e090f35b503461000e57602036600319011261000e5760043560005260096020526080604060002060ff6001825492015460405192835265ffffffffffff80821660208501528160301c16604084015260601c1615156060820152f35b503461000e57602036600319011261000e57600435610f04816125c0565b61042d6b033b2e3c9fd0803ce8000000610f8283610f7d610f2487610dbc565b505496610f7760ff6003610f3784610dbc565b50015492600854811015610fa0575b60086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3015460f01c1661161c565b906115e9565b6115e9565b04604051938493846040919493926060820195825260208201520152565b610fa8610da5565b610f46565b600854811015610fe5575b60086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30190600090565b610fed610da5565b610fb8565b805482101561100b575b60005260206000200190600090565b611013610da5565b610ffc565b503461000e57604036600319011261000e5760043561103681610570565b6001600160a01b036024359116600052600a6020526040600020805482101561000e5760209161106591610ff2565b90546040519160031b1c8152f35b6003906007548110156110af575b6007600052027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880190600090565b6110b7610da5565b611081565b80548210156110d9575b6000526003602060002091020190600090565b6110e1610da5565b6110c6565b503461000e57602036600319011261000e5760043560075481101561000e576003606091600760005202807fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880154907fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a65ffffffffffff7fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c689830154169101549060405192835260208301526040820152f35b503461000e57604036600319011261000e576004356111b681610570565b6001600160a01b0360243591166000526001602052604060002090815481101561000e576111e3916110bc565b508054600182015460029092015460408051928352602083019390935265ffffffffffff80821693830193909352603081901c9092166060808301919091529190911c60ff16608082015260a090f35b503461000e57602036600319011261000e5760043560085481101561000e5760086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301546040805165ffffffffffff8084168252603084901c81166020830152606084811c821693830193909352609084901c81169282019290925260c083811c909216608082015260f09290921c60ff1660a083015290f35b503461000e57602036600319011261000e576004356112ee81610570565b6112f661144e565b6001600160a01b0380911690811561134857600091825491816001600160a01b0319841617845560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b60209067ffffffffffffffff81116113b6575b60051b0190565b6113be6105c8565b6113af565b503461000e5760208060031936011261000e5760043567ffffffffffffffff811161000e573660238201121561000e578060040135906114028261139c565b916114106040519384610608565b80835260248484019160051b8301019136831161000e57602401905b82821061143f5761042d61096585612d3c565b8135815290840190840161142c565b6001600160a01b0360005416330361146257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b906040516060810181811067ffffffffffffffff8211176114e8575b6040526040600282948054845265ffffffffffff60018201541660208501520154910152565b6114f06105c8565b6114c2565b156114fc57565b60405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c75646564000000006044820152606490fd5b1561154857565b60405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d6178207072696365006044820152606490fd5b50634e487b7160e01b600052601160045260246000fd5b6b033b2e3c9fd0803ce80000009080600019048211811515166115c5570290565b6115cd61158d565b0290565b620f42409080600019048211811515166115c5570290565b80600019048211811515166115c5570290565b8115611606570490565b634e487b7160e01b600052601260045260246000fd5b60ff16604d811161162e575b600a0a90565b61163661158d565b611628565b1561164257565b60405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a652065786365656465640000006044820152606490fd5b818110611692570390565b61169a61158d565b0390565b811981116116aa570190565b6116b261158d565b0190565b6040516323b872dd60e01b60208083019182526001600160a01b0394851660248401529484166044830152606480830196909652948152929391906116fc608485610608565b16906040519261170b846105df565b8484527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656485850152823b1561177e57611757939260009283809351925af161175161183a565b9061186a565b8051908161176457505050565b8261177c936117779383010191016117c3565b6117db565b565b60405162461bcd60e51b815260048101869052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9081602091031261000e57516117d88161044a565b90565b156117e257565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b3d15611865573d9061184b826106ca565b916118596040519384610608565b82523d6000602084013e565b606090565b90919015611876575090565b8151156118865750805190602001fd5b6044604051809262461bcd60e51b8252602060048301526118b6815180928160248601526020868601910161073c565b601f01601f19168101030190fd5b65ffffffffffff9182169116818110611692570390565b90600854821015611ab2575b600860005261196961195c61195c611920857ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301611abf565b65ffffffffffff604061195282602085015116804210611aa5575b60026119468b610dbc565b509142039101546115e9565b92015116906115fc565b67ffffffffffffffff1690565b611981600261197785610dbc565b5001918254611687565b90556119b58161199084610fad565b509065ffffffffffff60301b82549160301b169065ffffffffffff60301b1916179055565b6119d960016119ce846000526009602052604060002090565b015460601c60ff1690565b6119e1575050565b6119f5826000526009602052604060002090565b91611a0b611a02826126c2565b91929093611073565b50611a17838254611687565b905515611a9257611a52600185611a35611a799461177c9854611687565b81550192611a4d845465ffffffffffff9060301c1690565b6118c4565b82546bffffffffffff000000000000191660309190911b65ffffffffffff60301b16178255565b9065ffffffffffff1665ffffffffffff19825416179055565b505050600101805460ff60601b19169055565b611aad61158d565b61193b565b611aba610da5565b6118e7565b9060405160c0810181811067ffffffffffffffff821117611b25575b60405260a060ff82945465ffffffffffff8082168552808260301c166020860152808260601c166040860152808260901c1660608601528160c01c16608085015260f01c16910152565b611b2d6105c8565b611adb565b9065ffffffffffff80809316911680920381116116aa570190565b9060405160e0810181811067ffffffffffffffff821117611bc3575b60405260c06005829480548452611b9e60ff60018301546001600160a01b038116602088015260a01c16604086019015159052565b6002810154606085015260038101546080850152600481015460a08501520154910152565b611bcb6105c8565b611b69565b9081602091031261000e575190565b506040513d6000823e3d90fd5b50634e487b7160e01b600052600060045260246000fd5b60606001611c8592845181550192611c6a65ffffffffffff611c3f81602085015116879065ffffffffffff1665ffffffffffff19825416179055565b604083015186546bffffffffffff0000000000001916911660301b65ffffffffffff60301b16178555565b0151825460ff60601b191690151560601b60ff60601b161790565b9055565b90611c9c611c9683610fad565b50611abf565b805165ffffffffffff1692611cd3611cc86080840195611cc2875165ffffffffffff1690565b90611b32565b65ffffffffffff1690565b65ffffffffffff84161015611ce9575b50505050565b611e6f93611e2661195c85611d6f6004611dd6611e5598611d6f89610f77611cc86040611d41611cc8611d24611d1e87610dbc565b50611b4d565b9b611a4d6001611d3389611073565b50015465ffffffffffff1690565b95611d4b856125c0565b9a8b611d5984830151151590565b15611f2c57611d7490611d6f611d9093516115a4565b6115fc565b611d8a611d8560a085015160ff1690565b61161c565b906115fc565b945b6003611dc6611dc061195c61195c8c611d6f611dba611cc860608b015165ffffffffffff1690565b8d6115e9565b92610dbc565b500155015165ffffffffffff1690565b926020611dfc611df0611df085546001600160a01b031690565b6001600160a01b031690565b604051633fdaeac760e11b815293849182905afa918215611f1f575b600092611eef575b506115e9565b9067ffffffffffffffff611e3984611073565b50549216918210611e785750611e4e82611073565b5055610fad565b509065ffffffffffff1665ffffffffffff19825416179055565b38808080611ce3565b611eca611ea2611e95611eea94611e8e87611073565b5054611687565b925165ffffffffffff1690565b611eaa61062a565b92835265ffffffffffff8716602084015265ffffffffffff166040830152565b60016060820152611ee5836000526009602052604060002090565b611c03565b610fad565b611f1191925060203d8111611f18575b611f098183610608565b810190611bd0565b9038611e20565b503d611eff565b611f27611bdf565b611e18565b505194611d92565b60405190611f41826105df565b600582526430b236b4b760d91b6020830152565b15611f5c57565b60405162461bcd60e51b815260206004820152600e60248201527f4e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606490fd5b9094929394611fae611f34565b92611fcf6001600160a01b0394856000541633149081156122a65750611f55565b611fe14265ffffffffffff8916611687565b916040519663313ce56760e01b88526020886004818989165afa978815612299575b600098612268575b508215612260578861202f61202383611d6f866115a4565b611d8a60ff8c166122e9565b915b6006549b8c9a8761204863ffffffff8d16876115e9565b90612052916115fc565b61205a61064a565b8781526001600160a01b038b166020820152908815156040830152866060830152608082015260a081016000905260c0810160009052612099906122f7565b600454604051633fdaeac760e11b8152928691849081906001600160a01b03165a92600491602094fa90811563ffffffff7f3f414051967f5a5e84f3af856364502239c9052e98e136c6ed4ed90bc5f5b0ba9f6121b065ffffffffffff6122339f6121776121e09e60209e61216d6121db9f60ff9f6121d09e611d6f8c9f612152946121c09f9461213695612253575b60009261223957506115e9565b9361214c612143826115d1565b620186a0900490565b9061169e565b9161215b61066a565b93845265ffffffffffff166020840152565b60408201526123b8565b6121a082421661218561068a565b65ffffffffffff821681529e8f019065ffffffffffff169052565b1665ffffffffffff1660408c0152565b1665ffffffffffff166060890152565b1665ffffffffffff166080860152565b1660ff1660a0830152565b612435565b612208876122038787166001600160a01b0316600052600a602052604060002090565b61257b565b6040519485941697849192604091949365ffffffffffff606085019616845260208401521515910152565b0390a390565b6020611f119293503d602011611f1857611f098183610608565b61225b611bdf565b612129565b888291612031565b61228b91985060203d602011612292575b6122838183610608565b8101906122d0565b963861200b565b503d612279565b6122a1611bdf565b612003565b60ff9150602061055f9133600052600582526040600020826040519483868095519384920161073c565b9081602091031261000e575160ff8116810361000e5790565b604d811161162e57600a0a90565b600560c061231a600654600160401b8110156123ab575b60018101600655610dbc565b93909361239e575b805184556123796001850161235a6001600160a01b0360208501511682906001600160a01b03166001600160a01b0319825416179055565b6040830151815460ff60a01b191690151560a01b60ff60a01b16179055565b606081015160028501556080810151600385015560a081015160048501550151910155565b6123a6611bec565b612322565b6123b36105c8565b61230e565b600260406123db600754600160401b811015612428575b60018101600755611073565b93909361241b575b8051845561241465ffffffffffff602083015116600186019065ffffffffffff1665ffffffffffff19825416179055565b0151910155565b612423611bec565b6123e3565b6124306105c8565b6123cf565b61177c9061254760a061245d600854600160401b81101561256e575b60018101600855610fad565b939093612561575b805184546020830151604084015160608086015191901b71ffffffffffff0000000000000000000000001660309290921b65ffffffffffff60301b1665ffffffffffff9485167fffffffffffffffff00000000000000000000000000000000000000000000000090941693909317929092171760909190911b77ffffffffffff00000000000000000000000000000000000016178555608082015161253f911685547fffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff1660c09190911b65ffffffffffff60c01b16178555565b015160ff1690565b815460ff60f01b191660f09190911b60ff60f01b16179055565b612569611bec565b612465565b6125766105c8565b612451565b805461259991600160401b8210156125b3575b600182018155610ff2565b819291549060031b600019811b9283911b16911916179055565b6125bb6105c8565b61258e565b6117d890611d8a611d8561267d6126776125d985611073565b5054610f77600461263460026125ee8a610dbc565b5001546008548a10156126b5575b60086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee38a0154610f779060f01c60ff1661161c565b602061264d611df0611df085546001600160a01b031690565b604051633fdaeac760e11b815293849182905afa9182156126a8575b600092612688575b506115fc565b93610fad565b505460f01c60ff1690565b6126a191925060203d8111611f1857611f098183610608565b9038612671565b6126b0611bdf565b612669565b6126bd610da5565b6125fc565b6000908152600960205260408120906001604051926080840184811067ffffffffffffffff82111761277f575b6040528054845201549165ffffffffffff9283811680602084015260ff6040840192868160301c16845260601c16158015606085015261277457612735908542166118c4565b93612749611cc8835165ffffffffffff1690565b9085169081109350831561276e57611cc8611e95611d8a9261276b95516115e9565b92565b50505192565b505050809150918190565b6127876105c8565b6126ef565b1561279357565b60405162461bcd60e51b815260206004820152602860248201527f496e73756666696369656e742074726561737572792062616c616e636520666f6044820152671c881c185e5bdd5d60c21b6064820152608490fd5b60ff60806002612811611c8594805490600160401b82101561289b575b6001820181556110bc565b61288e575b855181556020860151600182015560408601519101805465ffffffffffff191665ffffffffffff928316178155949061287490606083015187546bffffffffffff0000000000001916911660301b65ffffffffffff60301b16178655565b0151835460ff60601b1916911660601b60ff60601b161790565b612896611bec565b612816565b6128a36105c8565b612806565b90929194936004936128c185546001600160a01b031690565b916129756128d76003546001600160a01b031690565b9382604051956370a0823160e01b8752896000602098899561293a8683612910888883019190916001600160a01b036020820193169052565b039389816001600160a01b0396818888165afa908115612b77575b8691612b5a575b50101561278c565b6040805163276d76f960e21b81526001600160a01b039092169482019485523060208601528401959095529395869485939091849160600190565b0393165af18015612b4d575b612b30575b50855460a01c61ffff1661ffff1661299e90826115e9565b612710900490816129ae91611687565b6129cb866001600160a01b03166000526001602052604060002090565b54986129eb8a976001600160a01b03166000526001602052604060002090565b938560058404944265ffffffffffff1696612a046106aa565b86815283810188905265ffffffffffff8916604082015265ffffffffffff8b16606082015260006080820152612a39916127e9565b8a546002546040805163a9059cbb60e01b81526001600160a01b039283169e81019e8f5260208f0194909452929c8d939084900301918391165a90600091f17f129794f6f9aa0adfa6dda6ca7d08d05812fea954f80008e5cf68ae7b9fa898b499612af097918015612b23575b612af5575b50506040805133815265ffffffffffff9889166020820152908101989098526060880152608087015260a086015260c085015290911660e08301528190610100820190565b0390a1565b81612b1492903d10612b1c575b612b0c8183610608565b8101906117c3565b503880612aab565b503d612b02565b612b2b611bdf565b612aa6565b612b4690843d8611612b1c57612b0c8183610608565b5038612986565b612b55611bdf565b612981565b612b7191508a3d8c11611f1857611f098183610608565b38612932565b612b7f611bdf565b61292b565b15612b8b57565b60405162461bcd60e51b815260206004820152601160248201527f4e6f7468696e6720746f2072656465656d0000000000000000000000000000006044820152606490fd5b90612bda8261139c565b612be76040519182610608565b8281528092612bf8601f199161139c565b0190602036910137565b60019060001981146116aa570190565b6020918151811015612c27575b60051b010190565b612c2f610da5565b612c1f565b15612c3b57565b60405162461bcd60e51b815260206004820152601260248201527f4e6f2070656e64696e672076657374696e6700000000000000000000000000006044820152606490fd5b60ff8091169116908160ff0381116116aa570190565b90815180825260208080930193019160005b828110612cb6575050505090565b835185529381019392810192600101612ca8565b906001600160a01b039095949295168152612cf16020956080878401526080830190612c96565b818103604083015285808551928381520194019060005b818110612d25575050506117d89394506060818403910152612c96565b825160ff1686529487019491870191600101612d08565b90600091612d4c81511515612b84565b612d568151612bd0565b90612d618151612bd0565b9160005b8251811015612e4257336000908152600160205260409020612d878285612c12565b51612d91916110bc565b50612d9c8285612c12565b51612da79033612fc8565b9660ff9081891692831515612dbb90612c34565b600281018054909a9060601c60ff1690612dd491612c80565b8a5460ff60601b191660609190911b60ff60601b16178a556001015492612dfb90846115e9565b612e049161169e565b975460601c60ff1680612e178587612c12565b60ff90911690521690612e29916115e9565b612e338286612c12565b52612e3d90612c02565b612d65565b5090612af07f5a21b90378728eb82fe7be28a8f4a46d422e5c1f08ac7521b84ef5c190b0cc869360006020612eb1612e88611df0611df06004546001600160a01b031690565b60405163a9059cbb60e01b8152336004820152602481018c905293849283919082906044820190565b03925af18015612eed575b612ecf575b506040519384933385612cca565b612ee69060203d8111612b1c57612b0c8183610608565b5038612ec1565b612ef5611bdf565b612ebc565b9060405160a0810181811067ffffffffffffffff821117612f53575b604052608060ff600283958054855260018101546020860152015465ffffffffffff80821660408601528160301c16606085015260601c16910152565b612f5b6105c8565b612f16565b908154612f6c8161139c565b92612f7a6040519485610608565b818452600090815260208082208186015b848410612f99575050505050565b600383600192612fa885612efa565b815201920193019290612f8b565b60ff9182169116818110611692570390565b612ff791612fec612ff1926001600160a01b03166000526001602052604060002090565b6110bc565b50612efa565b6080810160ff613008825160ff1690565b7f00000000000000000000000000000000000000000000000000000000000000008216911681146130ea576130ae60ff9161309c61305e613058611cc860406117d899015165ffffffffffff1690565b42611687565b60005460a01c60ff16156130bd5765ffffffffffff7f00000000000000000000000000000000000000000000000000000000000000005b16906115fc565b818111156130b55750925b5160ff1690565b9116612fb6565b9050926130a7565b65ffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000613095565b50505060009056fea26469706673582212204481cd9380804ec11c01ec8286cc3f8a52469b2edb0a5c3192ea7e230020014364736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "close(uint256)": {
        "params": {
          "_id": "ID of market to close"
        }
      },
      "deposit(uint256,uint256,uint256)": {
        "params": {
          "_amount": "the amount of quote token to spend",
          "_id": "the ID of the market",
          "_maxPrice": "the maxeimum price at which to buy"
        },
        "returns": {
          "index_": "     the user index of the Note (usd to redeem or query information)",
          "payout_": "    the amount of NEND due"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeem(uint256[])": {
        "params": {
          "_indexes": "the note indexes to redeem"
        },
        "returns": {
          "payout_": "    sum of payout sent, in NEND"
        }
      },
      "redeemAll(uint256)": {
        "details": "if possible, query indexesFor() off-chain and input in redeem() to save gas",
        "returns": {
          "_0": "sum of payout sent, in NEND"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "close(uint256)": {
        "notice": "disable existing market"
      },
      "deposit(uint256,uint256,uint256)": {
        "notice": "deposit quote tokens in exchange for a bond from a specified market"
      },
      "redeem(uint256[])": {
        "notice": "redeem notes for user"
      },
      "redeemAll(uint256)": {
        "notice": "redeem all redeemable markets for user"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8424,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 26378,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "testing",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9707,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "notes",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_struct(Note)9645_storage)dyn_storage)"
      },
      {
        "astId": 9709,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "insurancePool",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9711,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "ecosystemPool",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9713,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "nend",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 9719,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "commissionRate",
        "offset": 20,
        "slot": "4",
        "type": "t_uint16"
      },
      {
        "astId": 8539,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "hasRole",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))"
      },
      {
        "astId": 8677,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "markets",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(Market)9552_storage)dyn_storage"
      },
      {
        "astId": 8681,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "terms",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(Terms)9559_storage)dyn_storage"
      },
      {
        "astId": 8685,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "metadata",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(Metadata)9572_storage)dyn_storage"
      },
      {
        "astId": 8690,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "adjustments",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Adjustment)9581_storage)"
      },
      {
        "astId": 8695,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "marketsForQuote",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Market)9552_storage)dyn_storage": {
        "base": "t_struct(Market)9552_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Metadata)9572_storage)dyn_storage": {
        "base": "t_struct(Metadata)9572_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Metadata[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Note)9645_storage)dyn_storage": {
        "base": "t_struct(Note)9645_storage",
        "encoding": "dynamic_array",
        "label": "struct INoteKeeper.Note[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Terms)9559_storage)dyn_storage": {
        "base": "t_struct(Terms)9559_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Terms[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)4822": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Note)9645_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct INoteKeeper.Note[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Note)9645_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Adjustment)9581_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBondDepository.Adjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(Adjustment)9581_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Adjustment)9581_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Adjustment",
        "members": [
          {
            "astId": 9574,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "change",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9576,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "lastAdjustment",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 9578,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "timeToAdjusted",
            "offset": 6,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 9580,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "active",
            "offset": 12,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Market)9552_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Market",
        "members": [
          {
            "astId": 9538,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "capacity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9541,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "quoteToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)4822"
          },
          {
            "astId": 9543,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "capacityInQuote",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 9545,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "totalDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9547,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "maxPayout",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9549,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "sold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9551,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "purchased",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Metadata)9572_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Metadata",
        "members": [
          {
            "astId": 9561,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "lastTune",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 9563,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "lastDecay",
            "offset": 6,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 9565,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "length",
            "offset": 12,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 9567,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "depositInterval",
            "offset": 18,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 9569,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "tuneInterval",
            "offset": 24,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 9571,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "quoteDecimals",
            "offset": 30,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Note)9645_storage": {
        "encoding": "inplace",
        "label": "struct INoteKeeper.Note",
        "members": [
          {
            "astId": 9636,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9638,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "payoutPerVesting",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9640,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "created",
            "offset": 0,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 9642,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "marketID",
            "offset": 6,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 9644,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "vestingCount",
            "offset": 12,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Terms)9559_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Terms",
        "members": [
          {
            "astId": 9554,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "controlVariable",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9556,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "conclusion",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 9558,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "maxDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}