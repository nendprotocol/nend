{
  "address": "0xDf8A50a388ED4deF8b3D4a4eb64791f4E699e887",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nend",
          "type": "address"
        },
        {
          "internalType": "contract Vault",
          "name": "_lendingPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "details",
          "type": "string"
        }
      ],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ILendingPoolStaking.EscrowStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "EscrowStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "InflationRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "NonInflationRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ILendingPoolStaking.StakeStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "StakeStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "start",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "end",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint256[3]",
          "name": "amountsPerDuration",
          "type": "uint256[3]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isEscrow",
          "type": "bool"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activeStakeTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakeToken",
          "type": "address"
        }
      ],
      "name": "addStakeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "authorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_durationId",
          "type": "uint8"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inflationReward",
          "type": "uint256"
        }
      ],
      "name": "distributeInflationRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeNonInflationRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrowLockPeriod",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasPendingNonInflationRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "inflationRollOver",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "issueEAB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "lastEscrowRewardByToken_Duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingPool",
      "outputs": [
        {
          "internalType": "contract Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nend",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ongoingStakeCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolRollOver",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakeToken",
          "type": "address"
        }
      ],
      "name": "removeStakeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardAllocations",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[3]",
          "name": "_rewardAllocations",
          "type": "uint8[3]"
        }
      ],
      "name": "setRewardAllocations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_testing",
          "type": "bool"
        }
      ],
      "name": "setTesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakeDurations",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "stakeEscrowedReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakeTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "start",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "end",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "rewardAllocated",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isEscrow",
          "type": "bool"
        },
        {
          "internalType": "enum ILendingPoolStaking.EscrowStatus",
          "name": "escrowStatus",
          "type": "uint8"
        },
        {
          "internalType": "enum ILendingPoolStaking.StakeStatus",
          "name": "stakeStatus",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "totalStakedByToken_Duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5e5d302bb7182dcf503c750bb595f9298bbab1edc3926bb61c7a1c787a6ed5fc",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x7E8aE5C72eCA86946b695dCc211863D9721A0961",
    "contractAddress": null,
    "transactionIndex": 19,
    "gasUsed": "4447111",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000080000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800001000001000000000100800000000000000000020000000000010000000800000000000000000080000000000000400040000000040000000000000000000000000000000000000000000000000000200000000000000000000040000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000120000000020000000000000000000000000010000000000000000000000000000000000100000",
    "blockHash": "0xa7ce9f1e6297a2223f393f68fa6236645744257a49855688f75a38ab2612195d",
    "transactionHash": "0x5e5d302bb7182dcf503c750bb595f9298bbab1edc3926bb61c7a1c787a6ed5fc",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 35513231,
        "transactionHash": "0x5e5d302bb7182dcf503c750bb595f9298bbab1edc3926bb61c7a1c787a6ed5fc",
        "address": "0xDf8A50a388ED4deF8b3D4a4eb64791f4E699e887",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007e8ae5c72eca86946b695dcc211863d9721a0961"
        ],
        "data": "0x",
        "logIndex": 70,
        "blockHash": "0xa7ce9f1e6297a2223f393f68fa6236645744257a49855688f75a38ab2612195d"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 35513231,
        "transactionHash": "0x5e5d302bb7182dcf503c750bb595f9298bbab1edc3926bb61c7a1c787a6ed5fc",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007e8ae5c72eca86946b695dcc211863d9721a0961",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x000000000000000000000000000000000000000000000000040b31d559c07a1300000000000000000000000000000000000000000000000176313f346bd782c6000000000000000000000000000000000000000000006566fe5dcc70ac12661600000000000000000000000000000000000000000000000172260d5f121708b30000000000000000000000000000000000000000000065670268fe4605d2e029",
        "logIndex": 71,
        "blockHash": "0xa7ce9f1e6297a2223f393f68fa6236645744257a49855688f75a38ab2612195d"
      }
    ],
    "blockNumber": 35513231,
    "cumulativeGasUsed": "6783459",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x91b2a4d34C953Dc036a94dA066b1cFd8b948b38E",
    "0x7aD43D0cecd610053E874068264e4C9d632cE4C7"
  ],
  "numDeployments": 1,
  "solcInputHash": "9f9b24330e64b4aed8e24e00b5f5786e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nend\",\"type\":\"address\"},{\"internalType\":\"contract Vault\",\"name\":\"_lendingPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ILendingPoolStaking.EscrowStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"EscrowStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InflationRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NonInflationRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ILendingPoolStaking.StakeStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StakeStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"end\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"amountsPerDuration\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEscrow\",\"type\":\"bool\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeStakeTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"addStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_durationId\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inflationReward\",\"type\":\"uint256\"}],\"name\":\"distributeInflationRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeNonInflationRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrowLockPeriod\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasPendingNonInflationRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inflationRollOver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"issueEAB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lastEscrowRewardByToken_Duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ongoingStakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRollOver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"removeStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardAllocations\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"_rewardAllocations\",\"type\":\"uint8[3]\"}],\"name\":\"setRewardAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_testing\",\"type\":\"bool\"}],\"name\":\"setTesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeDurations\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"stakeEscrowedReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"end\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"rewardAllocated\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEscrow\",\"type\":\"bool\"},{\"internalType\":\"enum ILendingPoolStaking.EscrowStatus\",\"name\":\"escrowStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum ILendingPoolStaking.StakeStatus\",\"name\":\"stakeStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"totalStakedByToken_Duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/LendingPoolStaking.sol\":\"LendingPoolStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/access/MWOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract MWOwnable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(0x7E8aE5C72eCA86946b695dCc211863D9721A0961);  // Nend Mainnet Main Wallet\\r\\n        // _transferOwnership(0x4a580D71c0F73202C51C58147aA7c7E09245b10A);  // Nend Turbo Main Wallet\\r\\n        // _transferOwnership(0x2F358B80eD2d296C09560d2b9F70a7f81d57e352); // Kong Wallet\\r\\n        // _transferOwnership(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier \\r\\n    onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x71026b1c2671af0f1d6e4c17a3f1d1a291b17725b21e27937369a8be395260c7\",\"license\":\"MIT\"},\"contracts/access/SimpleRoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract SimpleRoleAccess is MWOwnable {\\r\\n    mapping(address => mapping(string => bool)) public hasRole;\\r\\n\\r\\n    function authorize(\\r\\n        address operator,\\r\\n        string memory role,\\r\\n        bool authorized \\r\\n    ) public onlyOwner {\\r\\n        hasRole[operator][role] = authorized;\\r\\n    }\\r\\n\\r\\n    modifier onlyRole(string memory _role) {\\r\\n        require(\\r\\n            msg.sender == owner() || hasRole[msg.sender][_role],\\r\\n            \\\"Not authorized\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasAllRoles(string[] memory _roles) {\\r\\n        for (uint256 i = 0; i < _roles.length; i++) {\\r\\n            require(hasRole[msg.sender][_roles[i]], \\\"Not authorized\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasSomeRoles(string[] memory _roles) {\\r\\n        bool _hasRole;\\r\\n        for (uint256 i = 0; i < _roles.length; i++) {\\r\\n            if (hasRole[msg.sender][_roles[i]]) {\\r\\n                _hasRole = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(_hasRole, \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf30bd718616125e5f0d4ff2dc1a0cf23fdca63476180b656cb7642ed23e86369\",\"license\":\"UNLICENSED\"},\"contracts/staking/LendingPoolStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"../vault/Vault.sol\\\";\\r\\nimport \\\"../vault/BalanceNames.sol\\\";\\r\\nimport \\\"./interfaces/ILendingPoolStaking.sol\\\";\\r\\nimport \\\"../test/Testing.sol\\\";\\r\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\ncontract LendingPoolStaking is\\r\\n    ILendingPoolStaking,\\r\\n    ERC721URIStorage,\\r\\n    BalanceNames,\\r\\n    Testing,\\r\\n    SimpleRoleAccess\\r\\n{\\r\\n    address public nend;\\r\\n    Vault public lendingPool;\\r\\n    mapping(address => bool) public activeStakeTokens;\\r\\n    mapping(address => uint256) public inflationRollOver;\\r\\n    address[] public stakeTokens;\\r\\n    uint48 public escrowLockPeriod = 30 weeks;\\r\\n    // Active stake token count\\r\\n    uint256 public stakeTokenCount;\\r\\n    // Active stake count\\r\\n    uint256 public ongoingStakeCount;\\r\\n    mapping(address => uint256) internal ifpTokenToAmount;\\r\\n    // User address to this week's escrowed reward stake id\\r\\n    mapping(address => mapping(address => uint256)) userToStakeTokenToLastEscrowId;\\r\\n    mapping(address => mapping(uint8 => uint256))\\r\\n        public lastEscrowRewardByToken_Duration;\\r\\n    Stake[] public stakes;\\r\\n    uint48[3] public stakeDurations = [1 weeks, 4 weeks, 12 weeks];\\r\\n    // Token address => duration id => amount\\r\\n    mapping(address => mapping(uint8 => uint256))\\r\\n        public totalStakedByToken_Duration;\\r\\n    uint8[3] public rewardAllocations = [20, 30, 50];\\r\\n    uint256 public poolRollOver;\\r\\n\\r\\n    function setRewardAllocations(uint8[3] memory _rewardAllocations)\\r\\n        external\\r\\n        onlyRole(\\\"admin\\\")\\r\\n    {\\r\\n        if (\\r\\n            _rewardAllocations[0] +\\r\\n                _rewardAllocations[1] +\\r\\n                _rewardAllocations[2] !=\\r\\n            100\\r\\n        ) {\\r\\n            revert InvalidArgument(\\\"Must sum up to 100\\\");\\r\\n        }\\r\\n        rewardAllocations = _rewardAllocations;\\r\\n    }\\r\\n\\r\\n    constructor(address _nend, Vault _lendingPool)\\r\\n        ERC721(\\\"Escrowed Asset Bond\\\", \\\"EAB\\\")\\r\\n    {\\r\\n        nend = _nend;\\r\\n        lendingPool = _lendingPool;\\r\\n        // Add native token\\r\\n        activeStakeTokens[address(0)] = true;\\r\\n        stakeTokens.push(address(0));\\r\\n        stakeTokenCount++;\\r\\n\\r\\n        // Add nend\\r\\n        activeStakeTokens[_nend] = true;\\r\\n        stakeTokens.push(_nend);\\r\\n        stakeTokenCount++;\\r\\n    }\\r\\n\\r\\n    function deposit(\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        uint8 _durationId\\r\\n    ) external payable override {\\r\\n        if (_amount == 0) {\\r\\n            revert InvalidArgument(\\\"Amount cannot be zero\\\");\\r\\n        }\\r\\n        if (!activeStakeTokens[_token]) {\\r\\n            revert InvalidArgument(\\\"Invalid stake token\\\");\\r\\n        }\\r\\n\\r\\n        bool isNativeCoin = _token == address(0);\\r\\n\\r\\n        if (!isNativeCoin && IERC20(_token).balanceOf(msg.sender) < _amount) {\\r\\n            revert InsufficientBalance();\\r\\n        }\\r\\n\\r\\n        if (isNativeCoin) {\\r\\n            if (msg.value != _amount) {\\r\\n                revert InvalidArgument(\\\"Incorrect native coin stake amount\\\");\\r\\n            }\\r\\n            payable(address(lendingPool)).transfer(_amount);\\r\\n        } else {\\r\\n            IERC20(_token).transferFrom(\\r\\n                msg.sender,\\r\\n                address(lendingPool),\\r\\n                _amount\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256[3] memory _amounts;\\r\\n        _amounts[_durationId] = _amount;\\r\\n\\r\\n        stakes.push(\\r\\n            Stake(\\r\\n                msg.sender,\\r\\n                _token,\\r\\n                uint48(block.timestamp),\\r\\n                uint48(block.timestamp) +\\r\\n                    (stakeDurations[_durationId] / (testing ? 1008 : 1)),\\r\\n                _amounts,\\r\\n                0,\\r\\n                false,\\r\\n                EscrowStatus.DEFAULT,\\r\\n                StakeStatus.STAKED\\r\\n            )\\r\\n        );\\r\\n\\r\\n        totalStakedByToken_Duration[_token][_durationId] += _amount;\\r\\n        ongoingStakeCount++;\\r\\n\\r\\n        _emitStaked(stakes.length);\\r\\n    }\\r\\n\\r\\n    function stakeEscrowedReward(uint256 _stakeId) external override {\\r\\n        Stake storage _stake = stakes[_stakeId - 1];\\r\\n        if (_stake.staker != msg.sender) {\\r\\n            revert Unauthorized();\\r\\n        }\\r\\n\\r\\n        // Stake is not escrow or is already staked\\r\\n        if (!_stake.isEscrow || _stake.stakeStatus != StakeStatus.DEFAULT) {\\r\\n            revert InvalidState();\\r\\n        }\\r\\n\\r\\n        _stake.stakeStatus = StakeStatus.STAKED;\\r\\n        ongoingStakeCount++;\\r\\n\\r\\n        for (uint8 i = 0; i < 3; i++) {\\r\\n            totalStakedByToken_Duration[nend][i] += _stake.amountsPerDuration[\\r\\n                i\\r\\n            ];\\r\\n        }\\r\\n\\r\\n        emit StakeStatusChanged(_stakeId, _stake.stakeStatus);\\r\\n    }\\r\\n\\r\\n    function _compoundEscrow(uint256 _stakeId, uint256 _inflationReward)\\r\\n        internal\\r\\n    {\\r\\n        Stake storage _stake = stakes[_stakeId - 1];\\r\\n        uint256 lastEscrowId = userToStakeTokenToLastEscrowId[_stake.staker][\\r\\n            _stake.isEscrow ? nend : _stake.token\\r\\n        ];\\r\\n        if (\\r\\n            lastEscrowId == 0 ||\\r\\n            stakes[lastEscrowId - 1].start != uint48(block.timestamp)\\r\\n        ) {\\r\\n            uint256[3] memory _amounts;\\r\\n            stakes.push(\\r\\n                Stake(\\r\\n                    _stake.staker,\\r\\n                    _stake.isEscrow ? nend : _stake.token,\\r\\n                    uint48(block.timestamp),\\r\\n                    uint48(block.timestamp) +\\r\\n                        escrowLockPeriod /\\r\\n                        (testing ? 1008 : 1),\\r\\n                    _amounts,\\r\\n                    0,\\r\\n                    true,\\r\\n                    EscrowStatus.DEFAULT,\\r\\n                    StakeStatus.DEFAULT\\r\\n                )\\r\\n            );\\r\\n\\r\\n            lastEscrowId = userToStakeTokenToLastEscrowId[_stake.staker][\\r\\n                _stake.isEscrow ? nend : _stake.token\\r\\n            ] = stakes.length;\\r\\n        }\\r\\n\\r\\n        Stake storage _escrow = stakes[lastEscrowId - 1];\\r\\n\\r\\n        for (uint8 i = 0; i < 3; i++) {\\r\\n            uint256 _reward = _calculateReward(\\r\\n                _stake.isEscrow ? nend : _stake.token,\\r\\n                i,\\r\\n                _stake.amountsPerDuration[i],\\r\\n                _inflationReward /\\r\\n                    stakeTokenCount +\\r\\n                    inflationRollOver[_stake.isEscrow ? nend : _stake.token]\\r\\n            );\\r\\n            _escrow.amountsPerDuration[i] += _reward;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _accrueNonInflationReward(\\r\\n        uint256 _stakeId,\\r\\n        uint256 _nonInflationReward\\r\\n    ) internal {\\r\\n        Stake storage _stake = stakes[_stakeId - 1];\\r\\n\\r\\n        for (uint8 i = 0; i < 3; i++) {\\r\\n            uint256 _reward = _calculateReward(\\r\\n                _stake.isEscrow ? nend : _stake.token,\\r\\n                i,\\r\\n                _stake.amountsPerDuration[i],\\r\\n                _nonInflationReward\\r\\n            );\\r\\n            _stake.rewardAllocated += _reward;\\r\\n\\r\\n            lendingPool.namedBalanceSpend(\\r\\n                interestForPoolBalanceName,\\r\\n                _stake.isEscrow ? nend : _stake.token,\\r\\n                _reward\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function distributeInflationRewards(uint256 _inflationReward)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        // if (msg.sender != nend) {\\r\\n        //     revert Unauthorized();\\r\\n        // }\\r\\n\\r\\n        uint256 _rolledOverInflationReward = _inflationReward + poolRollOver;\\r\\n        poolRollOver = 0;\\r\\n\\r\\n        // Deal with list being modified during loop\\r\\n        uint256 _stakeCount = stakes.length;\\r\\n\\r\\n        for (uint256 i = 0; i < _stakeCount; i++) {\\r\\n            Stake storage _stake = stakes[i];\\r\\n\\r\\n            if (_stake.stakeStatus != StakeStatus.STAKED) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            _compoundEscrow(i + 1, _rolledOverInflationReward);\\r\\n        }\\r\\n\\r\\n        for (uint256 i = _stakeCount; i < stakes.length; i++) {\\r\\n            _emitStaked(i + 1);\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < stakeTokens.length; i++) {\\r\\n            address tokenAddr = stakeTokens[i];\\r\\n            uint256 poolReward = _rolledOverInflationReward /\\r\\n                stakeTokenCount +\\r\\n                inflationRollOver[tokenAddr];\\r\\n            inflationRollOver[tokenAddr] = 0;\\r\\n            uint8 predefinedRollOverCount = 0;\\r\\n            for (uint8 j = 0; j < 3; j++) {\\r\\n                uint256 predefinedDurationReward = (poolReward *\\r\\n                    rewardAllocations[j]) / 100;\\r\\n                if (totalStakedByToken_Duration[tokenAddr][j] == 0) {\\r\\n                    inflationRollOver[tokenAddr] += predefinedDurationReward;\\r\\n                    predefinedRollOverCount++;\\r\\n                }\\r\\n                lastEscrowRewardByToken_Duration[tokenAddr][\\r\\n                    j\\r\\n                ] = predefinedDurationReward;\\r\\n            }\\r\\n            // Reward for all durations was rolled over => Pool rollover\\r\\n            if (predefinedRollOverCount == 3) {\\r\\n                inflationRollOver[tokenAddr] = 0;\\r\\n                poolRollOver += _inflationReward / stakeTokenCount;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit InflationRewardDistributed();\\r\\n    }\\r\\n\\r\\n    function distributeNonInflationRewards() external override onlyOwner {\\r\\n        for (uint256 i = 0; i < stakeTokens.length; i++) {\\r\\n            ifpTokenToAmount[stakeTokens[i]] = lendingPool.getNamedBalance(\\r\\n                interestForPoolBalanceName,\\r\\n                stakeTokens[i]\\r\\n            );\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < stakes.length; i++) {\\r\\n            Stake storage _stake = stakes[i];\\r\\n\\r\\n            if (_stake.stakeStatus != StakeStatus.STAKED) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            _accrueNonInflationReward(\\r\\n                i + 1,\\r\\n                ifpTokenToAmount[_stake.isEscrow ? nend : _stake.token]\\r\\n            );\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < stakeTokens.length; i++) {\\r\\n            uint256 distributedAmount = ifpTokenToAmount[stakeTokens[i]] -\\r\\n                lendingPool.getNamedBalance(\\r\\n                    interestForPoolBalanceName,\\r\\n                    stakeTokens[i]\\r\\n                );\\r\\n\\r\\n            if (distributedAmount > 0) {\\r\\n                lendingPool.transferERC20(\\r\\n                    stakeTokens[i],\\r\\n                    address(this),\\r\\n                    distributedAmount\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit NonInflationRewardDistributed();\\r\\n    }\\r\\n\\r\\n    function hasPendingNonInflationRewards()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        for (uint256 i = 0; i < stakeTokens.length; i++) {\\r\\n            address token = stakeTokens[i];\\r\\n            uint256 reward = lendingPool.getNamedBalance(\\r\\n                interestForPoolBalanceName,\\r\\n                token\\r\\n            );\\r\\n\\r\\n            uint256 stakedAmount = totalStakedByToken_Duration[token][0] +\\r\\n                totalStakedByToken_Duration[token][1] +\\r\\n                totalStakedByToken_Duration[token][2];\\r\\n\\r\\n            if (reward > 0 && stakedAmount > 0) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function issueEAB(uint256 _stakeId) external {\\r\\n        Stake storage _stake = stakes[_stakeId - 1];\\r\\n        if (_stake.staker != msg.sender) {\\r\\n            revert Unauthorized();\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            _stake.stakeStatus == StakeStatus.FULFILLED ||\\r\\n            _stake.escrowStatus != EscrowStatus.DEFAULT\\r\\n        ) {\\r\\n            revert InvalidState();\\r\\n        }\\r\\n\\r\\n        _stake.escrowStatus = EscrowStatus.ISSUED;\\r\\n        _mint(msg.sender, _stakeId);\\r\\n\\r\\n        emit EscrowStatusChanged(_stakeId, EscrowStatus.ISSUED);\\r\\n    }\\r\\n\\r\\n    function unstake(uint256 _stakeId) external override {\\r\\n        Stake storage _stake = stakes[_stakeId - 1];\\r\\n\\r\\n        if (_stake.staker != msg.sender) {\\r\\n            revert Unauthorized();\\r\\n        }\\r\\n        if (\\r\\n            _stake.end > block.timestamp ||\\r\\n            _stake.stakeStatus == StakeStatus.FULFILLED ||\\r\\n            _stake.escrowStatus == EscrowStatus.CLAIMED\\r\\n        ) {\\r\\n            revert InvalidState();\\r\\n        }\\r\\n\\r\\n        // Transfer original staked amount\\r\\n        uint256 _stakedAmount = _stake.amountsPerDuration[0] +\\r\\n            _stake.amountsPerDuration[1] +\\r\\n            _stake.amountsPerDuration[2];\\r\\n\\r\\n        if (_stake.isEscrow) {\\r\\n            IERC20(nend).transfer(msg.sender, _stakedAmount);\\r\\n        } else {\\r\\n            _lendingPoolTransfer(_stake.token, msg.sender, _stakedAmount);\\r\\n        }\\r\\n\\r\\n        // Transfer ifp reward\\r\\n        if (_stake.rewardAllocated > 0) {\\r\\n            IERC20(_stake.isEscrow ? nend : _stake.token).transfer(\\r\\n                msg.sender,\\r\\n                _stake.rewardAllocated\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (_stake.stakeStatus == StakeStatus.STAKED) {\\r\\n            ongoingStakeCount--;\\r\\n\\r\\n            for (uint8 i = 0; i < 3; i++) {\\r\\n                totalStakedByToken_Duration[\\r\\n                    _stake.isEscrow ? nend : _stake.token\\r\\n                ][i] -= _stake.amountsPerDuration[i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _stake.stakeStatus = StakeStatus.FULFILLED;\\r\\n        emit StakeStatusChanged(_stakeId, StakeStatus.FULFILLED);\\r\\n\\r\\n        if (_stake.escrowStatus == EscrowStatus.ISSUED || _stake.isEscrow) {\\r\\n            _stake.escrowStatus = EscrowStatus.CLAIMED;\\r\\n\\r\\n            if (_exists(_stakeId)) {\\r\\n                _burn(_stakeId);\\r\\n            }\\r\\n\\r\\n            emit EscrowStatusChanged(_stakeId, EscrowStatus.CLAIMED);\\r\\n        }\\r\\n\\r\\n        delete stakes[_stakeId - 1];\\r\\n    }\\r\\n\\r\\n    function addStakeToken(address _stakeToken)\\r\\n        external\\r\\n        override\\r\\n        onlyRole(\\\"admin\\\")\\r\\n    {\\r\\n        if (!activeStakeTokens[_stakeToken]) {\\r\\n            stakeTokenCount++;\\r\\n            activeStakeTokens[_stakeToken] = true;\\r\\n        }\\r\\n\\r\\n        for (uint8 i = 0; i < stakeTokens.length; i++) {\\r\\n            if (stakeTokens[i] == _stakeToken) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        stakeTokens.push(_stakeToken);\\r\\n    }\\r\\n\\r\\n    function removeStakeToken(address _stakeToken)\\r\\n        external\\r\\n        override\\r\\n        onlyRole(\\\"admin\\\")\\r\\n    {\\r\\n        if (activeStakeTokens[_stakeToken]) {\\r\\n            stakeTokenCount--;\\r\\n            activeStakeTokens[_stakeToken] = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setTokenURI(uint256 _tokenId, string memory _tokenURI)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        _setTokenURI(_tokenId, _tokenURI);\\r\\n    }\\r\\n\\r\\n    function _lendingPoolTransfer(\\r\\n        address _token,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        bool isNativeCoin = _token == address(0);\\r\\n\\r\\n        if (isNativeCoin) {\\r\\n            if (address(lendingPool).balance < _amount) {\\r\\n                revert InsufficientBalance();\\r\\n            }\\r\\n            lendingPool.transferNative(payable(_to), _amount);\\r\\n        } else {\\r\\n            if (IERC20(_token).balanceOf(address(lendingPool)) < _amount) {\\r\\n                revert InsufficientBalance();\\r\\n            }\\r\\n            lendingPool.transferERC20(_token, _to, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _calculateReward(\\r\\n        address _stakeToken,\\r\\n        uint8 _durationId,\\r\\n        uint256 _amountStaked,\\r\\n        uint256 _reward\\r\\n    ) internal view returns (uint256) {\\r\\n        return\\r\\n            _amountStaked == 0\\r\\n                ? 0\\r\\n                : (_reward * rewardAllocations[_durationId] * _amountStaked) /\\r\\n                    100 /\\r\\n                    totalStakedByToken_Duration[_stakeToken][_durationId];\\r\\n    }\\r\\n\\r\\n    function _emitStaked(uint256 _stakeId) internal {\\r\\n        Stake memory _stake = stakes[_stakeId - 1];\\r\\n        emit Staked(\\r\\n            _stakeId,\\r\\n            _stake.staker,\\r\\n            _stake.token,\\r\\n            _stake.start,\\r\\n            _stake.end,\\r\\n            _stake.amountsPerDuration,\\r\\n            _stake.isEscrow\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal override {\\r\\n        if (from != address(0) && to != address(0)) {\\r\\n            stakes[tokenId - 1].staker = to;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7a78275dc466dfc7b37a8e1f5f3de60ec857692b43da9bd5df7ea595c0db1021\",\"license\":\"UNLICENSED\"},\"contracts/staking/interfaces/ILendingPoolStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILendingPoolStaking {\\r\\n    error InsufficientBalance();\\r\\n    error InvalidArgument(string details);\\r\\n    error InvalidState();\\r\\n    error Unauthorized();\\r\\n\\r\\n    enum StakeStatus {\\r\\n        DEFAULT, // Not staked, only applicable to escrowed reward\\r\\n        STAKED, // Stake ongoing\\r\\n        FULFILLED // Stake ended gracefully\\r\\n    }\\r\\n\\r\\n    enum EscrowStatus {\\r\\n        DEFAULT, // Not issued\\r\\n        ISSUED,\\r\\n        CLAIMED\\r\\n    }\\r\\n\\r\\n    struct Stake {\\r\\n        // Staker address\\r\\n        address staker;\\r\\n        // Stake token address\\r\\n        address token;\\r\\n        // The time of deposit\\r\\n        uint48 start;\\r\\n        // The time of withdrawal\\r\\n        uint48 end;\\r\\n        // The amount staked by each stake duration\\r\\n        uint256[3] amountsPerDuration;\\r\\n        // The amount of stake token that will be rewarded upon finishing the stake duration\\r\\n        uint256 rewardAllocated;\\r\\n        // Stake is escrow\\r\\n        bool isEscrow;\\r\\n        // Status of eab\\r\\n        EscrowStatus escrowStatus;\\r\\n        // Status of stake\\r\\n        StakeStatus stakeStatus;\\r\\n    }\\r\\n\\r\\n    event Staked(\\r\\n        uint256 stakeId,\\r\\n        address staker,\\r\\n        address token,\\r\\n        uint48 start,\\r\\n        uint48 end,\\r\\n        uint256[3] amountsPerDuration,\\r\\n        bool isEscrow\\r\\n    );\\r\\n    event StakeStatusChanged(uint256 stakeId, StakeStatus status);\\r\\n    event EscrowStatusChanged(uint256 stakeId, EscrowStatus status);\\r\\n    event InflationRewardDistributed();\\r\\n    event NonInflationRewardDistributed();\\r\\n\\r\\n    function deposit(\\r\\n        address _stakeToken,\\r\\n        uint256 _amount,\\r\\n        uint8 _durationId\\r\\n    ) external payable;\\r\\n\\r\\n    function stakeEscrowedReward(uint256 _stakeId) external;\\r\\n\\r\\n    function distributeInflationRewards(uint256 _inflationReward) external;\\r\\n\\r\\n    function distributeNonInflationRewards() external;\\r\\n\\r\\n    function hasPendingNonInflationRewards() external view returns (bool);\\r\\n\\r\\n    function unstake(uint256 _stakeId) external;\\r\\n\\r\\n    function addStakeToken(address _stakeToken) external;\\r\\n\\r\\n    function removeStakeToken(address _stakeToken) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x4bec2a92147df12dffb6075f6fbcb47ecf6718bdb662e9f769e4e63fa6025619\",\"license\":\"UNLICENSED\"},\"contracts/test/Testing.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract Testing is MWOwnable {\\r\\n    bool public testing = false;\\r\\n\\r\\n    function setTesting(bool _testing) external onlyOwner {\\r\\n        testing = _testing;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc42166b7defa6b84a92cfc80f626f4900a803d2025057133be94a6f42ac1719a\",\"license\":\"Unlicense\"},\"contracts/vault/BalanceNames.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract BalanceNames {\\r\\n    string internal interestForPoolBalanceName = \\\"ifp\\\";\\r\\n    string internal interestForLenderBalanceName = \\\"ifl\\\";\\r\\n    string internal tradeCommissionBalanceName = \\\"tc\\\";\\r\\n    string internal bondingCommissionBalanceName = \\\"bc\\\";\\r\\n}\\r\\n\",\"keccak256\":\"0xd6ce3f7eb90d05e918d705b7afea89d3ee88aaab98be74a8b8ac6522a277743d\",\"license\":\"MIT\"},\"contracts/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\r\\n\\r\\ncontract Vault is SimpleRoleAccess {\\r\\n    bytes4 private ERC1155_INTERFACE_ID = 0xd9b67a26;\\r\\n    string public name;\\r\\n\\r\\n    mapping(address => bool) public authorizedOperators;\\r\\n    mapping(address => bool) public authorizedSpenders;\\r\\n    // Balance name => token => amount\\r\\n    mapping(string => mapping(address => uint256)) public namedBalances;\\r\\n\\r\\n    constructor(string memory _name) {\\r\\n        name = _name;\\r\\n    }\\r\\n\\r\\n    function approveERC20Transfer(\\r\\n        address _tokenAddress,\\r\\n        address _spender,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.approve(_spender, _amount);\\r\\n    }\\r\\n\\r\\n    function transferERC20(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.transfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function setERC721ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function transferERC721(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.transferFrom(address(this), _to, _tokenId);\\r\\n    }\\r\\n\\r\\n    function transferERC1155(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeTransferFrom(address(this), _to, _id, _value, _data);\\r\\n    }\\r\\n\\r\\n    function transferERC1155Batch(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeBatchTransferFrom(address(this), _to, _ids, _values, _data);\\r\\n    }\\r\\n\\r\\n    function setERC1155ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function getNativeBalance() external view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function transferNative(address payable _to, uint256 _amount)\\r\\n        public\\r\\n        payable\\r\\n        onlyRole(\\\"spender\\\")\\r\\n    {\\r\\n        (bool sent, ) = _to.call{ value: _amount }(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n\\r\\n    function burn(address _token, uint256 _amount) public onlyRole(\\\"spender\\\") {\\r\\n        ERC20Burnable(_token).burn(_amount);\\r\\n    }\\r\\n\\r\\n    function namedBalanceReceive(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        namedBalances[_name][_token] += _amount;\\r\\n    }\\r\\n\\r\\n    function namedBalanceSpend(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        require(\\r\\n            namedBalances[_name][_token] >= _amount,\\r\\n            \\\"Insufficient balance\\\"\\r\\n        );\\r\\n        namedBalances[_name][_token] -= _amount;\\r\\n    }\\r\\n\\r\\n    function getNamedBalance(string memory _name, address _token)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 balance = namedBalances[_name][_token];\\r\\n        uint256 actualBalance = _token == address(0)\\r\\n            ? payable(this).balance\\r\\n            : IERC20(_token).balanceOf(address(this));\\r\\n\\r\\n        return balance <= actualBalance ? balance : actualBalance;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x558d46944255126ec213d7229ddcd6f07490fef3e057bbe05aef5099c942f54d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234620001c357620051966040813803918262000020816200022e565b938492833981010312620001c357806200011d6020620001a2935192620000478462000254565b0151620000548162000254565b620000736200006262000266565b6200006c6200029d565b90620004a1565b6200008e630114db0065ffffffffffff196012541617601255565b620000ba6200009c620001df565b62093a8081526224ea006020820152626ebe006040820152620002d3565b620000e0620000c8620001df565b60148152601e6020820152603260408201526200033e565b600d80546001600160a01b0319166001600160a01b038516179055600e80546001600160a01b0319166001600160a01b0392909216919091179055565b60008052600f602052620001597ff4803e074bd026baaf6ed2e288c9515f68c72fb7216eebdd7cae1718a53ec3755b805460ff19166001179055565b620001636200039e565b62000179620001746013546200047b565b601355565b6001600160a01b0381166000908152600f602052604090206200019c906200014c565b62000410565b620001b3620001746013546200047b565b6040516147b49081620009c28239f35b600080fd5b50634e487b7160e01b600052604160045260246000fd5b60405190606082016001600160401b03811183821017620001ff57604052565b62000209620001c8565b604052565b60408051919082016001600160401b03811183821017620001ff57604052565b6040519190601f01601f191682016001600160401b03811183821017620001ff57604052565b6001600160a01b03811603620001c357565b620002706200020e565b90601382527f457363726f77656420417373657420426f6e64000000000000000000000000006020830152565b620002a76200020e565b90600382526222a0a160e91b6020830152565b818110620002c6575050565b60008155600101620002ba565b906019600080935b60038086101562000336578160209162ffffff600694511690858754911b65ffffffffffff811b9283911b1691191617855501910193601a851162000326575b6001019390620002db565b600094506001909201916200031b565b505050509050565b90601b60009081935b60038086101562000336579060209160ff908183511691868654921b90811b9283911b169119161783550193600180930192601f84116200038e575b506001019362000347565b6000935090910190600162000383565b6011546801000000000000000081101562000400575b6001810180601155811015620003ea576011600052600080516020620051768339815191520180546001600160a01b0319169055565b634e487b7160e01b600052603260045260246000fd5b6200040a620001c8565b620003b4565b601154680100000000000000008110156200046b575b6001810180601155811015620003ea576011600052600080516020620051768339815191520180546001600160a01b0319166001600160a01b03909216919091179055565b62000475620001c8565b62000426565b60001981146200048b5760010190565b634e487b7160e01b600052601160045260246000fd5b8051909291906001600160401b038111620005e9575b600090620004d181620004cb8454620005f9565b62000636565b602080601f83116001146200055a575081906200050b959684926200054e575b50508160011b916000199060031b1c19161790556200085f565b62000515620006bd565b6200051f62000726565b620005296200078f565b62000533620007f7565b6200053d62000961565b600b805460ff60a01b19169055565b565b015190503880620004f1565b60008052601f198316967f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563929185905b898210620005d0575050908392916001946200050b989910620005b6575b505050811b0190556200085f565b015160001960f88460031b161c19169055388080620005a8565b806001859682949686015181550195019301906200058a565b620005f3620001c8565b620004b7565b90600182811c921680156200062b575b60208310146200061557565b634e487b7160e01b600052602260045260246000fd5b91607f169162000609565b90601f821162000644575050565b6200054c91600080526020600020906020601f840160051c8301931062000674575b601f0160051c0190620002ba565b909150819062000666565b90601f82116200068d575050565b6200054c9160016000526020600020906020601f840160051c830193106200067457601f0160051c0190620002ba565b620006ca600754620005f9565b601f8111620006e4575b5060066206966760ec1b01600755565b60076000526200071f90601f0160051c7fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68890810190620002ba565b38620006d4565b62000733600854620005f9565b601f81116200074d575b506006621a599b60ea1b01600855565b60086000526200078890601f0160051c7ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee390810190620002ba565b386200073d565b6200079c600954620005f9565b601f8111620007b5575b50600461746360f01b01600955565b6009600052620007f090601f0160051c7f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90810190620002ba565b38620007a6565b62000804600a54620005f9565b601f81116200081d575b50600461626360f01b01600a55565b600a6000526200085890601f0160051c7fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890810190620002ba565b386200080e565b80519091906001600160401b03811162000951575b6001906200088e81620008888454620005f9565b6200067f565b602080601f8311600114620008cc575081929394600092620008c0575b5050600019600383901b1c191690821b179055565b015190503880620008ab565b6001600052601f198316959091907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b8882106200093957505083859697106200091f575b505050811b019055565b015160001960f88460031b161c1916905538808062000915565b80878596829496860151815501950193019062000900565b6200095b620001c8565b62000874565b600b8054737e8ae5c72eca86946b695dcc211863d9721a09616001600160a01b0319821681179092556040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a356fe60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a71461039757806306fdde031461038e578063081812fc1461038557806308ed8d161461037c578063095ea7b314610373578063125cc42f1461036a578063162094c414610361578063166866c7146103585780631fecb71a1461034f578063217fe6c61461034657806323b872dd1461033d5780632e17de78146103345780633587e1611461032b57806339d2525f146103225780633c661b8b146103195780633de15c121461031057806342842e0e14610307578063528a9e4d146102fe5780636352211e146102f557806370a08231146102ec578063715018a6146102e357806372a4db4a146102da5780637547c7a3146102d157806378fecc99146102c857806382952200146102bf578063848778b4146102b65780638d03b102146102ad5780638da5cb5b146102a457806395d89b411461029b5780639b45d024146102925780639db5fa6514610289578063a22cb46514610280578063a59a997314610277578063b88d4fde1461026e578063ba5e4bad14610265578063bad7edab1461025c578063bf02155014610253578063c87b56dd1461024a578063d5a44f8614610241578063de3e3eff14610238578063e25b7d821461022f578063e985e9c514610226578063ef7bd7f31461021d578063f19ed6be146102145763f2fde38b1461020c57600080fd5b61000e61265f565b5061000e6122b2565b5061000e612293565b5061000e612230565b5061000e612209565b5061000e6121c6565b5061000e612122565b5061000e612025565b5061000e611fd6565b5061000e611f0f565b5061000e611ef0565b5061000e611e8f565b5061000e611e67565b5061000e611d79565b5061000e611d21565b5061000e611d02565b5061000e611c5c565b5061000e611c34565b5061000e611c0d565b5061000e611bd2565b5061000e611baa565b5061000e611b84565b5061000e611b29565b5061000e611a87565b5061000e6119f9565b5061000e611956565b5061000e611937565b5061000e61180a565b5061000e6117c2565b5061000e611545565b5061000e61150a565b5061000e611433565b5061000e611128565b5061000e610ce4565b5061000e610cba565b5061000e610bfa565b5061000e610b5f565b5061000e610aa0565b5061000e6108ec565b5061000e610760565b5061000e610620565b5061000e6105af565b5061000e610575565b5061000e61049a565b5061000e6103b2565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e5760206004356103d2816103a0565b63ffffffff60e01b166380ac58cd60e01b8114908115610410575b81156103ff575b506040519015158152f35b6301ffc9a760e01b149050386103f4565b635b5e139f60e01b811491506103ed565b600091031261000e57565b918091926000905b82821061044c575011610445575050565b6000910152565b91508060209183015181860152018291610434565b9060209161047a8151809281855285808601910161042c565b601f01601f1916010190565b906020610497928181520190610461565b90565b503461000e5760008060031936011261057257604051908080546104bd816127a0565b8085529160019180831690811561055157506001146104f7575b6104f3856104e78187038261082c565b60405191829182610486565b0390f35b80809450527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b8284106105395750505081016020016104e7826104f36104d7565b8054602085870181019190915290930192810161051e565b60ff1916602087015250506040840192506104e791508390506104f36104d7565b80fd5b503461000e57602036600319011261000e576020610594600435612988565b6001600160a01b0360405191168152f35b8015150361000e57565b503461000e57602036600319011261000e576004356105cd816105a5565b6105d5613387565b600b805460ff60a01b191691151560a01b60ff60a01b16919091179055005b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57604036600319011261000e5761063a6105f4565b60243561064681612729565b916001600160a01b0380841680918316146106c6576106789361067391331490811561067a575b50612916565b612e88565b005b6106c091506106b9906106a133916001600160a01b03166000526005602052604060002090565b906001600160a01b0316600052602052604060002090565b5460ff1690565b3861066d565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b6001600160a01b0316600052601a602052604060002090565b6001600160a01b03166000526015602052604060002090565b6001600160a01b03166000526010602052604060002090565b503461000e57602036600319011261000e576001600160a01b036107826105f4565b16600052600f602052602060ff604060002054166040519015158152f35b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116107cb57604052565b6107d36107a0565b604052565b6060810190811067ffffffffffffffff8211176107cb57604052565b6020810190811067ffffffffffffffff8211176107cb57604052565b6040810190811067ffffffffffffffff8211176107cb57604052565b90601f8019910116810190811067ffffffffffffffff8211176107cb57604052565b60405190610120820182811067ffffffffffffffff8211176107cb57604052565b60209067ffffffffffffffff811161088d575b601f01601f19160190565b6108956107a0565b610882565b9291926108a68261086f565b916108b4604051938461082c565b82948184528183011161000e578281602093846000960137010152565b9080601f8301121561000e578160206104979335910161089a565b503461000e57604036600319011261000e5767ffffffffffffffff60043560243582811161000e576109229036906004016108d1565b9161092b613387565b61094b8260005260026020526001600160a01b0360406000205416151590565b15610a355760009182526020906006825260408320918451918211610a28575b61097f8261097985546127a0565b8561429f565b80601f83116001146109bb57508394829394926109b0575b50508160011b916000199060031b1c1916179055604051f35b015190503880610997565b90601f198316956109d185600052602060002090565b9286905b888210610a10575050836001959697106109f7575b505050811b019055604051f35b015160001960f88460031b161c191690553880806109ea565b806001859682949686015181550195019301906109d5565b610a306107a0565b61096b565b60405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201527f6578697374656e7420746f6b656e0000000000000000000000000000000000006064820152608490fd5b503461000e5760208060031936011261000e57610abb6105f4565b610ac36133df565b90610ae76001600160a01b03928484600b54163314918215610b24575b5050613400565b169081600052600f815260ff60406000205416610b0057005b600f91610b0e601354613fc3565b60135560005252604060002060ff198154169055005b60ff925090610b4d9133600052600c82526040600020826040519483868095519384920161042c565b82019081520301902054168438610ae0565b503461000e57602036600319011261000e57610678610b7c6105f4565b610ba3610b876133df565b6001600160a01b03600b54163314908115610ba8575b50613400565b6141f7565b60ff91506020610bd29133600052600c82526040600020826040519483868095519384920161042c565b820190815203019020541638610b9d565b90610bf66020928281519485920161042c565b0190565b503461000e57604036600319011261000e57610c146105f4565b60243567ffffffffffffffff811161000e57610c6860206104f3936001600160a01b03610c4760ff9536906004016108d1565b9116600052600c82526040600020826040519483868095519384920161042c565b820190815203019020546040519116151581529081906020820190565b606090600319011261000e576001600160a01b0390600435828116810361000e5791602435908116810361000e579060443590565b503461000e57610678610ccc36610c85565b91610cdf610cda8433612b31565b612a21565b612cf0565b503461000e5760208060031936011261000e57600435610d0b610d0682612c98565b612059565b5091610d1e83546001600160a01b031690565b906001600160a01b03918233911603611117576001840190815492428460d01c1180156110f9575b80156110db575b6110c9576005600287019683610d8f610d818a54610d7b610d718d60010190600090565b90549060031b1c90565b90612ce4565b610d7b60028c016000610d71565b6006830197610d9f895460ff1690565b156110b6575090610dfb600092610dd0610dc4610dc4600d546001600160a01b031690565b6001600160a01b031690565b60405163a9059cbb60e01b815233600482015260248101929092529093849283919082906044820190565b03925af180156110a9575b61108c575b505b015480610fda575b505082546001915060101c60ff16610e2c816120a2565b14610f38575b50805462ff00001916620200001781556106789250610eaf91610d069160408051838152600260208201527fab7e44c17ad2a7b4de0e42ab0bc824366a946f184a1133f0b5528347e4ccbd2991819081010390a18054600160ff8260081c16610e9a816120a2565b14908115610f2d575b50610eb5575b50612c98565b90613fd0565b805461ff001916610200179055610ee28160005260026020526001600160a01b0360406000205416151590565b610f1f575b60408051828152600260208201527f855f5f4ea7c8c6a92f173fbc35c24d01139c2a49e9bcc085f03620cb6a1c65139190a138610ea9565b610f288161405e565b610ee7565b60ff91501638610ea3565b610f4b610f46601454613fc3565b601455565b600090815b600360ff821610610f62575050610e32565b80610f73610d71610fba9389613860565b855460ff1615610fbf57610fb3610fab83610f99610715600d546001600160a01b031690565b9060ff16600052602052604060002090565b918254612cb5565b905561384e565b610f50565b610fb3610fab83610f9961071588546001600160a01b031690565b6110298391610fea875460ff1690565b1561107b57600d546001600160a01b0316905b60405163a9059cbb60e01b81523360048201526024810191909152938492839160009183906044820190565b0393165af1801561106e575b611040575b80610e15565b8161105f92903d10611067575b611057818361082c565b8101906135c9565b50388061103a565b503d61104d565b611076612f32565b611035565b85546001600160a01b031690610ffd565b6110a290853d871161106757611057818361082c565b5038610e0b565b6110b1612f32565b610e06565b6110c49250853391166142e4565b610e0d565b60405163baf3f0f760e01b8152600490fd5b50600686015460029060081c60ff166110f3816120a2565b14610d4d565b50600686015460029060101c60ff16611111816120a2565b14610d46565b6040516282b42960e81b8152600490fd5b503461000e5760008060031936011261057257611143613387565b805b601154811015611212576111d3906111a961116b610dc4600e546001600160a01b031690565b61118a61117784611ae4565b90546001600160a01b039160031b1c1690565b6040518092630530fa2160e01b82528180602096879560048301613ba6565b03915afa918215611205575b85926111d8575b50506111cd61072e61117784611ae4565b5561324a565b611145565b6111f79250803d106111fe575b6111ef818361082c565b8101906135ba565b38806111bc565b503d6111e5565b61120d612f32565b6111b5565b50805b6018548110156112b1578061122c61128592612059565b50600681015460ff91828260101c1690611245826120a2565b60018092036112a8576112809361125b86612ccc565b93161561128a57505061127961072e600d546001600160a01b031690565b5490613bf4565b61324a565b611215565b01546001600160a01b03166000908152601560205260409020611279565b5050505061324a565b50805b60115481101561140957806112d161072e61117761134694611ae4565b54836112e8610dc4600e546001600160a01b031690565b6112f461117785611ae4565b6040916113348351630530fa2160e01b815260209687828061131a600498898301613ba6565b0381875afa9182156113fc575b87926113dd575b50612cb5565b918261134b575b50505050505061324a565b6112b4565b61139894869461135d6111778a611ae4565b905163276d76f960e21b81526001600160a01b0390911692810192835230602084015260408301949094529294859384929091839160600190565b03925af180156113d0575b6113b2575b808080879361133b565b816113c892903d1061106757611057818361082c565b5038806113a8565b6113d8612f32565b6113a3565b6113f5919250883d8a116111fe576111ef818361082c565b903861132e565b611404612f32565b611327565b506040517f3ebfd10f795a127a78001b56051c04828d55b68d9d77ebce97b617c8adc53ed28282a1f35b503461000e57606036600319011261000e5761144d6105f4565b6024359067ffffffffffffffff821161000e576114b360206114766106789436906004016108d1565b6001600160a01b036044359461148b866105a5565b611493613387565b16600052600c82526040600020826040519483868095519384920161042c565b8201908152030190209060ff801983541691151516179055565b50634e487b7160e01b600052603260045260246000fd5b9060038210156114fd575b601f8260051c601b01921690565b6115056114cd565b6114ef565b503461000e57602036600319011261000e57600435600381101561000e578060ff60209260051c601b015460f86040519360031b161c168152f35b503461000e57602036600319011261000e57600435601c90611568825482612ce4565b906115736000601c55565b60185460005b81811061177d5750601854905b81811061176357505060005b601154811015611738576115a861117782611ae4565b60136115dc6115b8825487613271565b6115d5846001600160a01b03166000526010602052604060002090565b5490612ce4565b60006115fb846001600160a01b03166000526010602052604060002090565b55600090815b600360ff82161061167057505090600360ff611627959493161461162c575b505061324a565b611592565b61165d611664916000611655611669956001600160a01b03166000526010602052604060002090565b555486613271565b8754612ce4565b601c55565b3880611620565b6116a561169e611698611692611685856114e4565b905460ff9160031b1c1690565b60ff1690565b84613520565b6064900490565b6116c682610f99886001600160a01b0316600052601a602052604060002090565b54156116fe575b906116f9916116f382610f99896001600160a01b03166000526017602052604060002090565b5561384e565b611601565b929061172f6116f992611724886001600160a01b03166000526010602052604060002090565b610fb3878254612ce4565b939091506116cd565b60006040517fbd9c0e36f2110aa67058734f061a385583a1d8b5758bcb065ca0f26c4c64603c8282a1f35b8061128061177361177893612ccc565b6145ad565b611586565b80600161179d60066117916117bd95612059565b50015460101c60ff1690565b6117a6816120a2565b0361128057611280856117b883612ccc565b613894565b611579565b503461000e576106786117d436610c85565b90604051926020840184811067ffffffffffffffff8211176117fd575b60405260008452612aa6565b6118056107a0565b6117f1565b503461000e57602036600319011261000e5760043561182b610d0682612c98565b509061183e82546001600160a01b031690565b6001600160a01b0333911603611117576006820180549260ff93848082161591821561191f575b50506110c957815462ff000019166201000017825592611889610f4660145461324a565b600260009401935b6003828216106118e1577fab7e44c17ad2a7b4de0e42ab0bc824366a946f184a1133f0b5528347e4ccbd29846118cc855460ff9060101c1690565b906118dc6040519283928361387e565b0390a1005b611918816118f4610d7160039489613860565b610fb361191083610f99610715600d546001600160a01b031690565b918254612ce4565b9050611891565b60101c16905061192e816120a2565b15158438611865565b503461000e57602036600319011261000e576020610594600435612729565b503461000e57602036600319011261000e576001600160a01b036119786105f4565b1680156119a15760005260036020526104f3604060002054604051918291829190602083019252565b60405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608490fd5b503461000e5760008060031936011261057257611a14613387565b600b546001600160a01b03198116600b55816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b6024359060ff8216820361000e57565b6044359060ff8216820361000e57565b359060ff8216820361000e57565b503461000e57606036600319011261000e57366023121561000e57604051611aae816107d8565b60648136821161000e576004905b828210611acc576106788461344c565b60208091611ad984611a79565b815201910190611abc565b601154811015611b1c575b60116000527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680190600090565b611b246114cd565b611aef565b503461000e57602036600319011261000e5760043560115481101561000e576001600160a01b0360209160116000527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68015416604051908152f35b503461000e57600036600319011261000e576020611ba0613d32565b6040519015158152f35b503461000e57600036600319011261000e5760206001600160a01b03600d5416604051908152f35b503461000e57602036600319011261000e576001600160a01b03611bf46105f4565b1660005260106020526020604060002054604051908152f35b503461000e57600036600319011261000e57602060ff600b5460a01c166040519015158152f35b503461000e57600036600319011261000e5760206001600160a01b03600b5416604051908152f35b503461000e576000806003193601126105725760405190806001805491611c82836127a0565b808652928281169081156105515750600114611ca8576104f3856104e78187038261082c565b92508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b828410611cea5750505081016020016104e7826104f36104d7565b80546020858701810191909152909301928101611ccf565b503461000e57600036600319011261000e576020601454604051908152f35b503461000e57604036600319011261000e576020611d70611d406105f4565b6001600160a01b03611d50611a59565b9116600052601a835260406000209060ff16600052602052604060002090565b54604051908152f35b503461000e57604036600319011261000e57611d936105f4565b602435611d9f816105a5565b6001600160a01b03821691823314611e225781611ddf611df0923360005260056020526040600020906001600160a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b503461000e57600036600319011261000e5760206001600160a01b03600e5416604051908152f35b503461000e57608036600319011261000e57611ea96105f4565b611eb161060a565b6064359167ffffffffffffffff831161000e573660238401121561000e57611ee661067893369060248160040135910161089a565b9160443591612aa6565b503461000e57600036600319011261000e576020601c54604051908152f35b503461000e57602036600319011261000e57600435611f30610d0682612c98565b508054336001600160a01b0390911603611117576006018054600260ff8260101c16611f5b816120a2565b14908115611fbd575b506110c957805461ff0019166101001790557f855f5f4ea7c8c6a92f173fbc35c24d01139c2a49e9bcc085f03620cb6a1c6513906118dc90611fa68133613e9a565b604080519182526001602083015290918291820190565b60ff915060081c16611fce816120a2565b151538611f64565b503461000e57604036600319011261000e576020611d70611ff56105f4565b6001600160a01b03612005611a59565b91166000526017835260406000209060ff16600052602052604060002090565b503461000e57602036600319011261000e576104f3612045600435613079565b604051918291602083526020830190610461565b600790601854811015612095575b6018600052027fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e0190600090565b61209d6114cd565b612067565b600311156120ac57565b634e487b7160e01b600052602160045260246000fd5b94919897969360e096939161010087019a6001600160a01b03809216885216602087015265ffffffffffff80921660408701521660608501526080840152151560a0830152612110816120a2565b60c082015261211e836120a2565b0152565b503461000e57602036600319011261000e5760043560185481101561000e5761214a90612059565b506001600160a01b036104f381835416600184015490600660058601549501549060405195869560ff8460101c169460ff808660081c169516938160d01c9265ffffffffffff8360a01c16921690896120c2565b9060038210156121b9575b6006600580840460190193060290565b6121c16114cd565b6121a9565b503461000e57602036600319011261000e57600435600381101561000e578065ffffffffffff600560209304601901546006600560405194060260031b1c168152f35b503461000e57600036600319011261000e57602065ffffffffffff60125416604051908152f35b503461000e57604036600319011261000e57602060ff6122876122516105f4565b6001600160a01b0361226161060a565b9116600052600584526040600020906001600160a01b0316600052602052604060002090565b54166040519015158152f35b503461000e57600036600319011261000e576020601354604051908152f35b50606036600319011261000e576122c76105f4565b602435906122d3611a69565b908215612619576123016122fd6106b9836001600160a01b0316600052600f602052604060002090565b1590565b6125d3576001600160a01b038116801590811580612572575b612560578491156124ba575034036124695761243791610f9961191092600080808089612358610dc4610dc4610dc4600e546001600160a01b031690565b82f11561245c575b61071561236b6135de565b8761237960ff8716836134d4565b5265ffffffffffff42169061240a6123cd6123c76123ab6123998a61219e565b905465ffffffffffff9160031b1c1690565b600b5460a01c60ff16156124525761ffff6103f05b16906135f2565b84613616565b6123fb6123d861084e565b338152946001600160a01b03881660208701525b65ffffffffffff166040860152565b65ffffffffffff166060840152565b6080820152600060a0820152600060c0820152600060e0820152612432610100820160019052565b6136a5565b9055612447610f4660145461324a565b6106786018546145ad565b61ffff60016123c0565b612464612f32565b612360565b604051631fff1b3b60e21b815260206004820152602260248201527f496e636f7272656374206e617469766520636f696e207374616b6520616d6f756044820152611b9d60f21b6064820152608490fd5b6119109261251f60206124379694610f99946124e1610dc4600e546001600160a01b031690565b6040516323b872dd60e01b81523360048201526001600160a01b03909116602482015260448101929092529092839190829060009082906064820190565b03925af18015612553575b612535575b50612360565b61254c9060203d811161106757611057818361082c565b503861252f565b61255b612f32565b61252a565b604051631e9acf1760e31b8152600490fd5b506040516370a0823160e01b81523360048201528590602081602481865afa9081156125c6575b6000916125a8575b501061231a565b6125c0915060203d81116111fe576111ef818361082c565b386125a1565b6125ce612f32565b612599565b604051631fff1b3b60e21b815260206004820152601360248201527f496e76616c6964207374616b6520746f6b656e000000000000000000000000006044820152606490fd5b604051631fff1b3b60e21b815260206004820152601560248201527f416d6f756e742063616e6e6f74206265207a65726f00000000000000000000006044820152606490fd5b503461000e57602036600319011261000e576126796105f4565b612681613387565b6001600160a01b038091169081156126d557600091600b5491816001600160a01b0319841617600b5560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b60005260026020526001600160a01b036040600020541680156127495790565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608490fd5b90600182811c921680156127d0575b60208310146127ba57565b634e487b7160e01b600052602260045260246000fd5b91607f16916127af565b600754600092916127ea826127a0565b80825291600190818116908115612861575060011461280857505050565b9192935060076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688916000925b84841061284957505060209250010190565b80546020858501810191909152909301928101612837565b60ff191660208401525050604001925050565b9060405191826000825492612888846127a0565b9081845260019485811690816000146128f757506001146128b4575b50506128b29250038361082c565b565b9093915060005260209081600020936000915b8183106128df5750506128b2935082010138806128a4565b855488840185015294850194879450918301916128c7565b9550505050505060ff191660208301526128b2826040810138806128a4565b1561291d57565b60405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608490fd5b6129a88160005260026020526001600160a01b0360406000205416151590565b156129c75760005260046020526001600160a01b036040600020541690565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b15612a2857565b60405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608490fd5b60405190612aa0826107f4565b60008252565b90612aca939291612aba610cda8433612b31565b612ac5838383612cf0565b612f6f565b15612ad157565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b612b518260005260026020526001600160a01b0360406000205416151590565b15612bcf57612b5f82612729565b916001600160a01b0390818316928285168414948515612b9f575b50508315612b89575b50505090565b612b9591929350612988565b1614388080612b83565b60ff929550906106a1612bc5926001600160a01b03166000526005602052604060002090565b5416923880612b7a565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b15612c3057565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b60018110612ca8575b6000190190565b612cb0612c81565b612ca1565b818110612cc0570390565b612cc8612c81565b0390565b6001906001198111612cdc570190565b610bf6612c81565b81198111612cdc570190565b9190612cfb82612729565b6001600160a01b0380851694918116859003612ddf576128b2948491841690612d25821515612c29565b612d2e83612e32565b612d4b846001600160a01b03166000526003602052604060002090565b612d558154612c98565b9055612d74856001600160a01b03166000526003602052604060002090565b612d7e8154612ccc565b9055612db385612d98856000526002602052604060002090565b906001600160a01b03166001600160a01b0319825416179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4614713565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b600081815260046020526040812080546001600160a01b03191690556001600160a01b03612e5f83612729565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92582604051a4565b600082815260046020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b0380612ec184612729565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b9081602091031261000e5751610497816103a0565b909261049794936080936001600160a01b03809216845216602083015260408201528160608201520190610461565b506040513d6000823e3d90fd5b3d15612f6a573d90612f508261086f565b91612f5e604051938461082c565b82523d6000602084013e565b606090565b92909190823b1561307057612faa9260209260006001600160a01b03604051809781968295630a85bd0160e11b9b8c85523360048601612f03565b0393165af160009181613040575b5061303257612fc5612f3f565b8051908161302d5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b602001fd5b6001600160e01b0319161490565b61306291925060203d8111613069575b61305a818361082c565b810190612eee565b9038612fb8565b503d613050565b50505050600190565b6130998160005260026020526001600160a01b0360406000205416151590565b15613110576130ba6130b5826000526006602052604060002090565b612874565b906130c3612a93565b80511561310b5782516130db5750610497915061317b565b61049791506130fd6130f7936040519485936020850190610be3565b90610be3565b03601f19810183528261082c565b505090565b60405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f722060448201527f6e6f6e6578697374656e7420746f6b656e0000000000000000000000000000006064820152608490fd5b61319b8160005260026020526001600160a01b0360406000205416151590565b156131df576131a8612a93565b8051909190156131d5576130f7916130fd6131c5610497936132a6565b6040519485936020850190610be3565b5050610497612a93565b60405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608490fd5b6001906000198114612cdc570190565b50634e487b7160e01b600052601260045260246000fd5b811561327b570490565b61328361325a565b0490565b90602091805182101561329957010190565b6132a16114cd565b010190565b801561336957806000908282935b61335557506132c28361086f565b926132d0604051948561082c565b80845281601f196132e08361086f565b013660208701375b6132f25750505090565b6132fb90612c98565b90600a90603082820680198211613348575b0160f81b7fff0000000000000000000000000000000000000000000000000000000000000016841a61333f8487613287565b530490816132e8565b613350612c81565b61330d565b92613361600a9161324a565b9304806132b4565b5060405161337681610810565b60018152600360fc1b602082015290565b6001600160a01b03600b5416330361339b57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b604051906133ec82610810565b600582526430b236b4b760d91b6020830152565b1561340757565b60405162461bcd60e51b815260206004820152600e60248201527f4e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606490fd5b613457610b876133df565b606460ff61347f6134728285511683602087015116906134f3565b82604086015116906134f3565b160361348e576128b290613556565b604051631fff1b3b60e21b815260206004820152601260248201527f4d7573742073756d20757020746f2031303000000000000000000000000000006044820152606490fd5b9060038110156134e6575b60051b0190565b6134ee6114cd565b6134df565b60ff8091169116908160ff038111612cdc570190565b50634e487b7160e01b600052600060045260246000fd5b8060001904821181151516613533570290565b61353b612c81565b0290565b81811061354a575050565b6000815560010161353f565b90601b60009081935b6003808610156135b2579060209160ff908183511691868654921b90811b9283911b169119161783550193600180930192601f84116135a3575b506001019361355f565b60009350909101906001613599565b505050509050565b9081602091031261000e575190565b9081602091031261000e5751610497816105a5565b604051906135eb826107d8565b6060368337565b9065ffffffffffff80911691821561360957160490565b61361161325a565b160490565b9065ffffffffffff8080931691168092038111612cdc570190565b61363a826120a2565b52565b906000905b6003821061364f57505050565b6001602082829351865501930191019091613642565b9061366f816120a2565b61ff0082549160081b169061ff001916179055565b9061368e816120a2565b62ff000082549160101b169062ff00001916179055565b6128b29061010060066136d260185468010000000000000000811015613841575b60018101601855612059565b613834575b6137076136eb85516001600160a01b031690565b82546001600160a01b0319166001600160a01b03909116178255565b6137cd600182016137256136eb60208801516001600160a01b031690565b61377561373b604088015165ffffffffffff1690565b82547fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b65ffffffffffff60a01b16178255565b606086015165ffffffffffff16815479ffffffffffffffffffffffffffffffffffffffffffffffffffff1660d09190911b7fffffffffffff000000000000000000000000000000000000000000000000000016179055565b6137de60808501516002830161363d565b60a08401516005820155019161380c6137fa60c0830151151590565b849060ff801983541691151516179055565b61382360e082015161381d816120a2565b84613665565b01519061382f826120a2565b613684565b61383c613509565b6136d7565b6138496107a0565b6136c6565b60ff6001911660ff8114612cdc570190565b6003821015613871575b0190600090565b6138796114cd565b61386a565b9081526040810192919060209061211e836120a2565b610d066138a091612c98565b50906138b382546001600160a01b031690565b906138d1826001600160a01b03166000526016602052604060002090565b600684019261390f6138e4855460ff1690565b928315613b9357600d546001600160a01b03165b6001600160a01b0316600052602052604060002090565b549182158015613b5d575b613a2a575b5050610d0661393091949394612c98565b509060009260028082019301935b600360ff82161061395157505050505050565b6139fa906139f56139b9613966895460ff1690565b8015613a1657600d546001600160a01b0316905b846139b361398b610d71838d613860565b926139986013548c613271565b90156139ff576115d5610747600d546001600160a01b031690565b9261446d565b6139dc6139c6848a613860565b9190926139d78385549060031b1c90565b612ce4565b9082549060031b600019811b9283911b16911916179055565b61384e565b61393e565b6115d561074760018c01546001600160a01b031690565b60018601546001600160a01b03169061397a565b613ad09250613a376135de565b9015613b4157613aa9613a52600d546001600160a01b031690565b6123fb65ffffffffffff42166123ec613a7e613a786123ab60125465ffffffffffff1690565b83613616565b93613a99613a8a61084e565b6001600160a01b039099168952565b6001600160a01b03166020880152565b6080820152600060a0820152600160c0820152600060e082015260006101008201526136a5565b613930610d0660185480613b25613b0a613af189546001600160a01b031690565b6001600160a01b03166000526016602052604060002090565b875460ff1615613b2c57600d546001600160a01b03166138f8565b559161391f565b60018901546001600160a01b03165b906106a1565b613aa9613b5860018801546001600160a01b031690565b613a52565b50613b806001613b6f610d0686612c98565b50015460a01c65ffffffffffff1690565b65ffffffffffff8042169116141561391a565b60018701546001600160a01b0316613b3b565b9190916040815260206001600160a01b03613bc3604084016127da565b9416910152565b60409093929193606081526001600160a01b03613be9606083016127da565b951660208201520152565b610d06613c0091612c98565b5060058101916006820191600281019160005b600360ff821610613c2657505050505050565b845460ff16908115613d1557613c5c83613c48600d546001600160a01b031690565b83613c56610d71828b613860565b9161446d565b91613c68838954612ce4565b8855613c7f610dc4600e546001600160a01b031690565b9015613d0257600d546001600160a01b03165b813b1561000e57613cd793613cc19260009283604051809681958294636c49e02160e01b845260048401613bca565b03925af18015613cf5575b613cdc575b5061384e565b613c13565b80613ce9613cef926107b7565b80610421565b38613cd1565b613cfd612f32565b613ccc565b60018501546001600160a01b0316613c92565b613c5c83613d2d60018701546001600160a01b031690565b613c48565b600060115490613d4d610dc4600e546001600160a01b031690565b905b828110613d5e57505050600090565b613d6a61117782611ae4565b604051630530fa2160e01b815260209190828180613d8b8560048301613ba6565b0381885afa928315613e8d575b600093613e68575b5050806115d5613e29613e0f613dde613dcf613e39966001600160a01b0316600052601a602052604060002090565b60008052602052604060002090565b546115d5613dff866001600160a01b0316600052601a602052604060002090565b6001600052602052604060002090565b926001600160a01b0316600052601a602052604060002090565b6002600052602052604060002090565b9015159081613e5e575b50613e5657613e519061324a565b613d4f565b505050600190565b9050151538613e43565b613e399293509081613e8592903d106111fe576111ef818361082c565b919038613da0565b613e95612f32565b613d98565b6001600160a01b038116908115613f7f57613ecb8360005260026020526001600160a01b0360406000205416151590565b613f3a5780613ef0613f10926001600160a01b03166000526003602052604060002090565b613efa8154612ccc565b9055612d98846000526002602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a4565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b8015612ca8576000190190565b600690600092613ffb575b8281558260018201558260058201613ff6816002850161353f565b550155565b614003613509565b613fdb565b61049790546127a0565b61401c81546127a0565b9081614026575050565b81601f60009311600114614038575055565b8183526020832061405491601f0160051c81019060010161353f565b8160208120915555565b6001600160a01b0361406f82612729565b61407883612e32565b1660008181526003602052604081209081549160018310614169575b6000198093019055838152600260205260408120926001600160a01b0319938481541690558482827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef82604051a415159081614161575b50614132575b505061410f61410a826000526006602052604060002090565b614008565b6141165750565b61412d6128b2916000526006602052604060002090565b614012565b6141469060018410614154575b8301612059565b5090815416905538806140f1565b61415c612c81565b61413f565b9050386140eb565b614171612c81565b614094565b6001600160a01b03601154680100000000000000008110156141ea575b60018101806011558110156141dd575b60116000527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680191166001600160a01b0319825416179055565b6141e56114cd565b6141a3565b6141f26107a0565b614193565b6001600160a01b039081811680600052600f60205260ff92836040600020541615614264575b60115460005b818682161061423a57505050506128b29150614176565b838361424861117784611ae4565b161461425c576142579061384e565b614223565b505050505050565b61426f60135461324a565b60135561428f836001600160a01b0316600052600f602052604060002090565b805460ff1916600117905561421d565b9190601f81116142ae57505050565b6128b2926000526020600020906020601f840160051c830193106142da575b601f0160051c019061353f565b90915081906142cd565b6001600160a01b039290838116908161437957505061430e610dc4600e546001600160a01b031690565b8181311061256057803b1561000e57604051633e97486160e11b8152939092166001600160a01b03166004840152602483015260009082908183816044810103925af1801561436c575b61435f5750565b80613ce96128b2926107b7565b614374612f32565b614358565b91909350614392610dc4600e546001600160a01b031690565b6040516370a0823160e01b81526001600160a01b03821660048201526020958391908790829060249082905afa908115614460575b600091614443575b50106125605760405163276d76f960e21b81526001600160a01b03938416600482015293909216602484015260448301528290829060649082906000905af18015614436575b61441d575050565b8161443392903d1061106757611057818361082c565b50565b61443e612f32565b614415565b61445a9150873d89116111fe576111ef818361082c565b386143cf565b614468612f32565b6143c7565b9291600081614480575050505050600090565b6001600160a01b0360646144bf6040946144ba6144dc9860038910156144e8575b60ff8960051c601b015460f88b60031b161c1690613520565b613520565b0495168152601a602052209060ff16600052602052604060002090565b5490811561327b570490565b6144f06114cd565b6144a1565b60405191906000835b60038210614525575050506060820182811067ffffffffffffffff8211176107cb57604052565b60016020819285548152019301910190916144fe565b95939192979694909761012087019887526001600160a01b039081602095168589015216604087015265ffffffffffff809216606087015216608085015260a084016000905b600382106145985750505050610100901515910152565b82806001928651815201940191019092614581565b7fbbad5407299f3773930327d215f85a16617efbbddc1fe3902bd39ba46feacf269060018110614706575b6145e56000198201612059565b50906147016145f261084e565b61461361460685546001600160a01b031690565b6001600160a01b03168252565b60018401546001600160a01b038116602083019081529490919060a083901c65ffffffffffff16604083019081529260d01c606083019081526146f46146eb6146de6146d16146c36006614669600289016144f5565b9760808a01988952600581015460a08b01520154976146b660ff60c083019a6146968282168d9015159052565b6146a8828260081c1660e08601613631565b60101c166101008301613631565b516001600160a01b031690565b9a516001600160a01b031690565b965165ffffffffffff1690565b925165ffffffffffff1690565b92519351151590565b936040519788978861453b565b0390a1565b61470e612c81565b6145d8565b6001600160a01b0380911615159081614772575b50614730575050565b6147498260016128b29410614765575b60001901612059565b50906001600160a01b03166001600160a01b0319825416179055565b61476d612c81565b614740565b9050811615153861472756fea26469706673582212200215d489570798181357323a33d5cc0f1eab3a0a24f950c1bdad5a470529b26e64736f6c634300080e003331ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a71461039757806306fdde031461038e578063081812fc1461038557806308ed8d161461037c578063095ea7b314610373578063125cc42f1461036a578063162094c414610361578063166866c7146103585780631fecb71a1461034f578063217fe6c61461034657806323b872dd1461033d5780632e17de78146103345780633587e1611461032b57806339d2525f146103225780633c661b8b146103195780633de15c121461031057806342842e0e14610307578063528a9e4d146102fe5780636352211e146102f557806370a08231146102ec578063715018a6146102e357806372a4db4a146102da5780637547c7a3146102d157806378fecc99146102c857806382952200146102bf578063848778b4146102b65780638d03b102146102ad5780638da5cb5b146102a457806395d89b411461029b5780639b45d024146102925780639db5fa6514610289578063a22cb46514610280578063a59a997314610277578063b88d4fde1461026e578063ba5e4bad14610265578063bad7edab1461025c578063bf02155014610253578063c87b56dd1461024a578063d5a44f8614610241578063de3e3eff14610238578063e25b7d821461022f578063e985e9c514610226578063ef7bd7f31461021d578063f19ed6be146102145763f2fde38b1461020c57600080fd5b61000e61265f565b5061000e6122b2565b5061000e612293565b5061000e612230565b5061000e612209565b5061000e6121c6565b5061000e612122565b5061000e612025565b5061000e611fd6565b5061000e611f0f565b5061000e611ef0565b5061000e611e8f565b5061000e611e67565b5061000e611d79565b5061000e611d21565b5061000e611d02565b5061000e611c5c565b5061000e611c34565b5061000e611c0d565b5061000e611bd2565b5061000e611baa565b5061000e611b84565b5061000e611b29565b5061000e611a87565b5061000e6119f9565b5061000e611956565b5061000e611937565b5061000e61180a565b5061000e6117c2565b5061000e611545565b5061000e61150a565b5061000e611433565b5061000e611128565b5061000e610ce4565b5061000e610cba565b5061000e610bfa565b5061000e610b5f565b5061000e610aa0565b5061000e6108ec565b5061000e610760565b5061000e610620565b5061000e6105af565b5061000e610575565b5061000e61049a565b5061000e6103b2565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e5760206004356103d2816103a0565b63ffffffff60e01b166380ac58cd60e01b8114908115610410575b81156103ff575b506040519015158152f35b6301ffc9a760e01b149050386103f4565b635b5e139f60e01b811491506103ed565b600091031261000e57565b918091926000905b82821061044c575011610445575050565b6000910152565b91508060209183015181860152018291610434565b9060209161047a8151809281855285808601910161042c565b601f01601f1916010190565b906020610497928181520190610461565b90565b503461000e5760008060031936011261057257604051908080546104bd816127a0565b8085529160019180831690811561055157506001146104f7575b6104f3856104e78187038261082c565b60405191829182610486565b0390f35b80809450527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b8284106105395750505081016020016104e7826104f36104d7565b8054602085870181019190915290930192810161051e565b60ff1916602087015250506040840192506104e791508390506104f36104d7565b80fd5b503461000e57602036600319011261000e576020610594600435612988565b6001600160a01b0360405191168152f35b8015150361000e57565b503461000e57602036600319011261000e576004356105cd816105a5565b6105d5613387565b600b805460ff60a01b191691151560a01b60ff60a01b16919091179055005b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57604036600319011261000e5761063a6105f4565b60243561064681612729565b916001600160a01b0380841680918316146106c6576106789361067391331490811561067a575b50612916565b612e88565b005b6106c091506106b9906106a133916001600160a01b03166000526005602052604060002090565b906001600160a01b0316600052602052604060002090565b5460ff1690565b3861066d565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b6001600160a01b0316600052601a602052604060002090565b6001600160a01b03166000526015602052604060002090565b6001600160a01b03166000526010602052604060002090565b503461000e57602036600319011261000e576001600160a01b036107826105f4565b16600052600f602052602060ff604060002054166040519015158152f35b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116107cb57604052565b6107d36107a0565b604052565b6060810190811067ffffffffffffffff8211176107cb57604052565b6020810190811067ffffffffffffffff8211176107cb57604052565b6040810190811067ffffffffffffffff8211176107cb57604052565b90601f8019910116810190811067ffffffffffffffff8211176107cb57604052565b60405190610120820182811067ffffffffffffffff8211176107cb57604052565b60209067ffffffffffffffff811161088d575b601f01601f19160190565b6108956107a0565b610882565b9291926108a68261086f565b916108b4604051938461082c565b82948184528183011161000e578281602093846000960137010152565b9080601f8301121561000e578160206104979335910161089a565b503461000e57604036600319011261000e5767ffffffffffffffff60043560243582811161000e576109229036906004016108d1565b9161092b613387565b61094b8260005260026020526001600160a01b0360406000205416151590565b15610a355760009182526020906006825260408320918451918211610a28575b61097f8261097985546127a0565b8561429f565b80601f83116001146109bb57508394829394926109b0575b50508160011b916000199060031b1c1916179055604051f35b015190503880610997565b90601f198316956109d185600052602060002090565b9286905b888210610a10575050836001959697106109f7575b505050811b019055604051f35b015160001960f88460031b161c191690553880806109ea565b806001859682949686015181550195019301906109d5565b610a306107a0565b61096b565b60405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201527f6578697374656e7420746f6b656e0000000000000000000000000000000000006064820152608490fd5b503461000e5760208060031936011261000e57610abb6105f4565b610ac36133df565b90610ae76001600160a01b03928484600b54163314918215610b24575b5050613400565b169081600052600f815260ff60406000205416610b0057005b600f91610b0e601354613fc3565b60135560005252604060002060ff198154169055005b60ff925090610b4d9133600052600c82526040600020826040519483868095519384920161042c565b82019081520301902054168438610ae0565b503461000e57602036600319011261000e57610678610b7c6105f4565b610ba3610b876133df565b6001600160a01b03600b54163314908115610ba8575b50613400565b6141f7565b60ff91506020610bd29133600052600c82526040600020826040519483868095519384920161042c565b820190815203019020541638610b9d565b90610bf66020928281519485920161042c565b0190565b503461000e57604036600319011261000e57610c146105f4565b60243567ffffffffffffffff811161000e57610c6860206104f3936001600160a01b03610c4760ff9536906004016108d1565b9116600052600c82526040600020826040519483868095519384920161042c565b820190815203019020546040519116151581529081906020820190565b606090600319011261000e576001600160a01b0390600435828116810361000e5791602435908116810361000e579060443590565b503461000e57610678610ccc36610c85565b91610cdf610cda8433612b31565b612a21565b612cf0565b503461000e5760208060031936011261000e57600435610d0b610d0682612c98565b612059565b5091610d1e83546001600160a01b031690565b906001600160a01b03918233911603611117576001840190815492428460d01c1180156110f9575b80156110db575b6110c9576005600287019683610d8f610d818a54610d7b610d718d60010190600090565b90549060031b1c90565b90612ce4565b610d7b60028c016000610d71565b6006830197610d9f895460ff1690565b156110b6575090610dfb600092610dd0610dc4610dc4600d546001600160a01b031690565b6001600160a01b031690565b60405163a9059cbb60e01b815233600482015260248101929092529093849283919082906044820190565b03925af180156110a9575b61108c575b505b015480610fda575b505082546001915060101c60ff16610e2c816120a2565b14610f38575b50805462ff00001916620200001781556106789250610eaf91610d069160408051838152600260208201527fab7e44c17ad2a7b4de0e42ab0bc824366a946f184a1133f0b5528347e4ccbd2991819081010390a18054600160ff8260081c16610e9a816120a2565b14908115610f2d575b50610eb5575b50612c98565b90613fd0565b805461ff001916610200179055610ee28160005260026020526001600160a01b0360406000205416151590565b610f1f575b60408051828152600260208201527f855f5f4ea7c8c6a92f173fbc35c24d01139c2a49e9bcc085f03620cb6a1c65139190a138610ea9565b610f288161405e565b610ee7565b60ff91501638610ea3565b610f4b610f46601454613fc3565b601455565b600090815b600360ff821610610f62575050610e32565b80610f73610d71610fba9389613860565b855460ff1615610fbf57610fb3610fab83610f99610715600d546001600160a01b031690565b9060ff16600052602052604060002090565b918254612cb5565b905561384e565b610f50565b610fb3610fab83610f9961071588546001600160a01b031690565b6110298391610fea875460ff1690565b1561107b57600d546001600160a01b0316905b60405163a9059cbb60e01b81523360048201526024810191909152938492839160009183906044820190565b0393165af1801561106e575b611040575b80610e15565b8161105f92903d10611067575b611057818361082c565b8101906135c9565b50388061103a565b503d61104d565b611076612f32565b611035565b85546001600160a01b031690610ffd565b6110a290853d871161106757611057818361082c565b5038610e0b565b6110b1612f32565b610e06565b6110c49250853391166142e4565b610e0d565b60405163baf3f0f760e01b8152600490fd5b50600686015460029060081c60ff166110f3816120a2565b14610d4d565b50600686015460029060101c60ff16611111816120a2565b14610d46565b6040516282b42960e81b8152600490fd5b503461000e5760008060031936011261057257611143613387565b805b601154811015611212576111d3906111a961116b610dc4600e546001600160a01b031690565b61118a61117784611ae4565b90546001600160a01b039160031b1c1690565b6040518092630530fa2160e01b82528180602096879560048301613ba6565b03915afa918215611205575b85926111d8575b50506111cd61072e61117784611ae4565b5561324a565b611145565b6111f79250803d106111fe575b6111ef818361082c565b8101906135ba565b38806111bc565b503d6111e5565b61120d612f32565b6111b5565b50805b6018548110156112b1578061122c61128592612059565b50600681015460ff91828260101c1690611245826120a2565b60018092036112a8576112809361125b86612ccc565b93161561128a57505061127961072e600d546001600160a01b031690565b5490613bf4565b61324a565b611215565b01546001600160a01b03166000908152601560205260409020611279565b5050505061324a565b50805b60115481101561140957806112d161072e61117761134694611ae4565b54836112e8610dc4600e546001600160a01b031690565b6112f461117785611ae4565b6040916113348351630530fa2160e01b815260209687828061131a600498898301613ba6565b0381875afa9182156113fc575b87926113dd575b50612cb5565b918261134b575b50505050505061324a565b6112b4565b61139894869461135d6111778a611ae4565b905163276d76f960e21b81526001600160a01b0390911692810192835230602084015260408301949094529294859384929091839160600190565b03925af180156113d0575b6113b2575b808080879361133b565b816113c892903d1061106757611057818361082c565b5038806113a8565b6113d8612f32565b6113a3565b6113f5919250883d8a116111fe576111ef818361082c565b903861132e565b611404612f32565b611327565b506040517f3ebfd10f795a127a78001b56051c04828d55b68d9d77ebce97b617c8adc53ed28282a1f35b503461000e57606036600319011261000e5761144d6105f4565b6024359067ffffffffffffffff821161000e576114b360206114766106789436906004016108d1565b6001600160a01b036044359461148b866105a5565b611493613387565b16600052600c82526040600020826040519483868095519384920161042c565b8201908152030190209060ff801983541691151516179055565b50634e487b7160e01b600052603260045260246000fd5b9060038210156114fd575b601f8260051c601b01921690565b6115056114cd565b6114ef565b503461000e57602036600319011261000e57600435600381101561000e578060ff60209260051c601b015460f86040519360031b161c168152f35b503461000e57602036600319011261000e57600435601c90611568825482612ce4565b906115736000601c55565b60185460005b81811061177d5750601854905b81811061176357505060005b601154811015611738576115a861117782611ae4565b60136115dc6115b8825487613271565b6115d5846001600160a01b03166000526010602052604060002090565b5490612ce4565b60006115fb846001600160a01b03166000526010602052604060002090565b55600090815b600360ff82161061167057505090600360ff611627959493161461162c575b505061324a565b611592565b61165d611664916000611655611669956001600160a01b03166000526010602052604060002090565b555486613271565b8754612ce4565b601c55565b3880611620565b6116a561169e611698611692611685856114e4565b905460ff9160031b1c1690565b60ff1690565b84613520565b6064900490565b6116c682610f99886001600160a01b0316600052601a602052604060002090565b54156116fe575b906116f9916116f382610f99896001600160a01b03166000526017602052604060002090565b5561384e565b611601565b929061172f6116f992611724886001600160a01b03166000526010602052604060002090565b610fb3878254612ce4565b939091506116cd565b60006040517fbd9c0e36f2110aa67058734f061a385583a1d8b5758bcb065ca0f26c4c64603c8282a1f35b8061128061177361177893612ccc565b6145ad565b611586565b80600161179d60066117916117bd95612059565b50015460101c60ff1690565b6117a6816120a2565b0361128057611280856117b883612ccc565b613894565b611579565b503461000e576106786117d436610c85565b90604051926020840184811067ffffffffffffffff8211176117fd575b60405260008452612aa6565b6118056107a0565b6117f1565b503461000e57602036600319011261000e5760043561182b610d0682612c98565b509061183e82546001600160a01b031690565b6001600160a01b0333911603611117576006820180549260ff93848082161591821561191f575b50506110c957815462ff000019166201000017825592611889610f4660145461324a565b600260009401935b6003828216106118e1577fab7e44c17ad2a7b4de0e42ab0bc824366a946f184a1133f0b5528347e4ccbd29846118cc855460ff9060101c1690565b906118dc6040519283928361387e565b0390a1005b611918816118f4610d7160039489613860565b610fb361191083610f99610715600d546001600160a01b031690565b918254612ce4565b9050611891565b60101c16905061192e816120a2565b15158438611865565b503461000e57602036600319011261000e576020610594600435612729565b503461000e57602036600319011261000e576001600160a01b036119786105f4565b1680156119a15760005260036020526104f3604060002054604051918291829190602083019252565b60405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608490fd5b503461000e5760008060031936011261057257611a14613387565b600b546001600160a01b03198116600b55816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b6024359060ff8216820361000e57565b6044359060ff8216820361000e57565b359060ff8216820361000e57565b503461000e57606036600319011261000e57366023121561000e57604051611aae816107d8565b60648136821161000e576004905b828210611acc576106788461344c565b60208091611ad984611a79565b815201910190611abc565b601154811015611b1c575b60116000527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680190600090565b611b246114cd565b611aef565b503461000e57602036600319011261000e5760043560115481101561000e576001600160a01b0360209160116000527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68015416604051908152f35b503461000e57600036600319011261000e576020611ba0613d32565b6040519015158152f35b503461000e57600036600319011261000e5760206001600160a01b03600d5416604051908152f35b503461000e57602036600319011261000e576001600160a01b03611bf46105f4565b1660005260106020526020604060002054604051908152f35b503461000e57600036600319011261000e57602060ff600b5460a01c166040519015158152f35b503461000e57600036600319011261000e5760206001600160a01b03600b5416604051908152f35b503461000e576000806003193601126105725760405190806001805491611c82836127a0565b808652928281169081156105515750600114611ca8576104f3856104e78187038261082c565b92508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b828410611cea5750505081016020016104e7826104f36104d7565b80546020858701810191909152909301928101611ccf565b503461000e57600036600319011261000e576020601454604051908152f35b503461000e57604036600319011261000e576020611d70611d406105f4565b6001600160a01b03611d50611a59565b9116600052601a835260406000209060ff16600052602052604060002090565b54604051908152f35b503461000e57604036600319011261000e57611d936105f4565b602435611d9f816105a5565b6001600160a01b03821691823314611e225781611ddf611df0923360005260056020526040600020906001600160a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b503461000e57600036600319011261000e5760206001600160a01b03600e5416604051908152f35b503461000e57608036600319011261000e57611ea96105f4565b611eb161060a565b6064359167ffffffffffffffff831161000e573660238401121561000e57611ee661067893369060248160040135910161089a565b9160443591612aa6565b503461000e57600036600319011261000e576020601c54604051908152f35b503461000e57602036600319011261000e57600435611f30610d0682612c98565b508054336001600160a01b0390911603611117576006018054600260ff8260101c16611f5b816120a2565b14908115611fbd575b506110c957805461ff0019166101001790557f855f5f4ea7c8c6a92f173fbc35c24d01139c2a49e9bcc085f03620cb6a1c6513906118dc90611fa68133613e9a565b604080519182526001602083015290918291820190565b60ff915060081c16611fce816120a2565b151538611f64565b503461000e57604036600319011261000e576020611d70611ff56105f4565b6001600160a01b03612005611a59565b91166000526017835260406000209060ff16600052602052604060002090565b503461000e57602036600319011261000e576104f3612045600435613079565b604051918291602083526020830190610461565b600790601854811015612095575b6018600052027fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e0190600090565b61209d6114cd565b612067565b600311156120ac57565b634e487b7160e01b600052602160045260246000fd5b94919897969360e096939161010087019a6001600160a01b03809216885216602087015265ffffffffffff80921660408701521660608501526080840152151560a0830152612110816120a2565b60c082015261211e836120a2565b0152565b503461000e57602036600319011261000e5760043560185481101561000e5761214a90612059565b506001600160a01b036104f381835416600184015490600660058601549501549060405195869560ff8460101c169460ff808660081c169516938160d01c9265ffffffffffff8360a01c16921690896120c2565b9060038210156121b9575b6006600580840460190193060290565b6121c16114cd565b6121a9565b503461000e57602036600319011261000e57600435600381101561000e578065ffffffffffff600560209304601901546006600560405194060260031b1c168152f35b503461000e57600036600319011261000e57602065ffffffffffff60125416604051908152f35b503461000e57604036600319011261000e57602060ff6122876122516105f4565b6001600160a01b0361226161060a565b9116600052600584526040600020906001600160a01b0316600052602052604060002090565b54166040519015158152f35b503461000e57600036600319011261000e576020601354604051908152f35b50606036600319011261000e576122c76105f4565b602435906122d3611a69565b908215612619576123016122fd6106b9836001600160a01b0316600052600f602052604060002090565b1590565b6125d3576001600160a01b038116801590811580612572575b612560578491156124ba575034036124695761243791610f9961191092600080808089612358610dc4610dc4610dc4600e546001600160a01b031690565b82f11561245c575b61071561236b6135de565b8761237960ff8716836134d4565b5265ffffffffffff42169061240a6123cd6123c76123ab6123998a61219e565b905465ffffffffffff9160031b1c1690565b600b5460a01c60ff16156124525761ffff6103f05b16906135f2565b84613616565b6123fb6123d861084e565b338152946001600160a01b03881660208701525b65ffffffffffff166040860152565b65ffffffffffff166060840152565b6080820152600060a0820152600060c0820152600060e0820152612432610100820160019052565b6136a5565b9055612447610f4660145461324a565b6106786018546145ad565b61ffff60016123c0565b612464612f32565b612360565b604051631fff1b3b60e21b815260206004820152602260248201527f496e636f7272656374206e617469766520636f696e207374616b6520616d6f756044820152611b9d60f21b6064820152608490fd5b6119109261251f60206124379694610f99946124e1610dc4600e546001600160a01b031690565b6040516323b872dd60e01b81523360048201526001600160a01b03909116602482015260448101929092529092839190829060009082906064820190565b03925af18015612553575b612535575b50612360565b61254c9060203d811161106757611057818361082c565b503861252f565b61255b612f32565b61252a565b604051631e9acf1760e31b8152600490fd5b506040516370a0823160e01b81523360048201528590602081602481865afa9081156125c6575b6000916125a8575b501061231a565b6125c0915060203d81116111fe576111ef818361082c565b386125a1565b6125ce612f32565b612599565b604051631fff1b3b60e21b815260206004820152601360248201527f496e76616c6964207374616b6520746f6b656e000000000000000000000000006044820152606490fd5b604051631fff1b3b60e21b815260206004820152601560248201527f416d6f756e742063616e6e6f74206265207a65726f00000000000000000000006044820152606490fd5b503461000e57602036600319011261000e576126796105f4565b612681613387565b6001600160a01b038091169081156126d557600091600b5491816001600160a01b0319841617600b5560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b60005260026020526001600160a01b036040600020541680156127495790565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608490fd5b90600182811c921680156127d0575b60208310146127ba57565b634e487b7160e01b600052602260045260246000fd5b91607f16916127af565b600754600092916127ea826127a0565b80825291600190818116908115612861575060011461280857505050565b9192935060076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688916000925b84841061284957505060209250010190565b80546020858501810191909152909301928101612837565b60ff191660208401525050604001925050565b9060405191826000825492612888846127a0565b9081845260019485811690816000146128f757506001146128b4575b50506128b29250038361082c565b565b9093915060005260209081600020936000915b8183106128df5750506128b2935082010138806128a4565b855488840185015294850194879450918301916128c7565b9550505050505060ff191660208301526128b2826040810138806128a4565b1561291d57565b60405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608490fd5b6129a88160005260026020526001600160a01b0360406000205416151590565b156129c75760005260046020526001600160a01b036040600020541690565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b15612a2857565b60405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608490fd5b60405190612aa0826107f4565b60008252565b90612aca939291612aba610cda8433612b31565b612ac5838383612cf0565b612f6f565b15612ad157565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b612b518260005260026020526001600160a01b0360406000205416151590565b15612bcf57612b5f82612729565b916001600160a01b0390818316928285168414948515612b9f575b50508315612b89575b50505090565b612b9591929350612988565b1614388080612b83565b60ff929550906106a1612bc5926001600160a01b03166000526005602052604060002090565b5416923880612b7a565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b15612c3057565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b60018110612ca8575b6000190190565b612cb0612c81565b612ca1565b818110612cc0570390565b612cc8612c81565b0390565b6001906001198111612cdc570190565b610bf6612c81565b81198111612cdc570190565b9190612cfb82612729565b6001600160a01b0380851694918116859003612ddf576128b2948491841690612d25821515612c29565b612d2e83612e32565b612d4b846001600160a01b03166000526003602052604060002090565b612d558154612c98565b9055612d74856001600160a01b03166000526003602052604060002090565b612d7e8154612ccc565b9055612db385612d98856000526002602052604060002090565b906001600160a01b03166001600160a01b0319825416179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4614713565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b600081815260046020526040812080546001600160a01b03191690556001600160a01b03612e5f83612729565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92582604051a4565b600082815260046020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b0380612ec184612729565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b9081602091031261000e5751610497816103a0565b909261049794936080936001600160a01b03809216845216602083015260408201528160608201520190610461565b506040513d6000823e3d90fd5b3d15612f6a573d90612f508261086f565b91612f5e604051938461082c565b82523d6000602084013e565b606090565b92909190823b1561307057612faa9260209260006001600160a01b03604051809781968295630a85bd0160e11b9b8c85523360048601612f03565b0393165af160009181613040575b5061303257612fc5612f3f565b8051908161302d5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b602001fd5b6001600160e01b0319161490565b61306291925060203d8111613069575b61305a818361082c565b810190612eee565b9038612fb8565b503d613050565b50505050600190565b6130998160005260026020526001600160a01b0360406000205416151590565b15613110576130ba6130b5826000526006602052604060002090565b612874565b906130c3612a93565b80511561310b5782516130db5750610497915061317b565b61049791506130fd6130f7936040519485936020850190610be3565b90610be3565b03601f19810183528261082c565b505090565b60405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f722060448201527f6e6f6e6578697374656e7420746f6b656e0000000000000000000000000000006064820152608490fd5b61319b8160005260026020526001600160a01b0360406000205416151590565b156131df576131a8612a93565b8051909190156131d5576130f7916130fd6131c5610497936132a6565b6040519485936020850190610be3565b5050610497612a93565b60405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608490fd5b6001906000198114612cdc570190565b50634e487b7160e01b600052601260045260246000fd5b811561327b570490565b61328361325a565b0490565b90602091805182101561329957010190565b6132a16114cd565b010190565b801561336957806000908282935b61335557506132c28361086f565b926132d0604051948561082c565b80845281601f196132e08361086f565b013660208701375b6132f25750505090565b6132fb90612c98565b90600a90603082820680198211613348575b0160f81b7fff0000000000000000000000000000000000000000000000000000000000000016841a61333f8487613287565b530490816132e8565b613350612c81565b61330d565b92613361600a9161324a565b9304806132b4565b5060405161337681610810565b60018152600360fc1b602082015290565b6001600160a01b03600b5416330361339b57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b604051906133ec82610810565b600582526430b236b4b760d91b6020830152565b1561340757565b60405162461bcd60e51b815260206004820152600e60248201527f4e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606490fd5b613457610b876133df565b606460ff61347f6134728285511683602087015116906134f3565b82604086015116906134f3565b160361348e576128b290613556565b604051631fff1b3b60e21b815260206004820152601260248201527f4d7573742073756d20757020746f2031303000000000000000000000000000006044820152606490fd5b9060038110156134e6575b60051b0190565b6134ee6114cd565b6134df565b60ff8091169116908160ff038111612cdc570190565b50634e487b7160e01b600052600060045260246000fd5b8060001904821181151516613533570290565b61353b612c81565b0290565b81811061354a575050565b6000815560010161353f565b90601b60009081935b6003808610156135b2579060209160ff908183511691868654921b90811b9283911b169119161783550193600180930192601f84116135a3575b506001019361355f565b60009350909101906001613599565b505050509050565b9081602091031261000e575190565b9081602091031261000e5751610497816105a5565b604051906135eb826107d8565b6060368337565b9065ffffffffffff80911691821561360957160490565b61361161325a565b160490565b9065ffffffffffff8080931691168092038111612cdc570190565b61363a826120a2565b52565b906000905b6003821061364f57505050565b6001602082829351865501930191019091613642565b9061366f816120a2565b61ff0082549160081b169061ff001916179055565b9061368e816120a2565b62ff000082549160101b169062ff00001916179055565b6128b29061010060066136d260185468010000000000000000811015613841575b60018101601855612059565b613834575b6137076136eb85516001600160a01b031690565b82546001600160a01b0319166001600160a01b03909116178255565b6137cd600182016137256136eb60208801516001600160a01b031690565b61377561373b604088015165ffffffffffff1690565b82547fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b65ffffffffffff60a01b16178255565b606086015165ffffffffffff16815479ffffffffffffffffffffffffffffffffffffffffffffffffffff1660d09190911b7fffffffffffff000000000000000000000000000000000000000000000000000016179055565b6137de60808501516002830161363d565b60a08401516005820155019161380c6137fa60c0830151151590565b849060ff801983541691151516179055565b61382360e082015161381d816120a2565b84613665565b01519061382f826120a2565b613684565b61383c613509565b6136d7565b6138496107a0565b6136c6565b60ff6001911660ff8114612cdc570190565b6003821015613871575b0190600090565b6138796114cd565b61386a565b9081526040810192919060209061211e836120a2565b610d066138a091612c98565b50906138b382546001600160a01b031690565b906138d1826001600160a01b03166000526016602052604060002090565b600684019261390f6138e4855460ff1690565b928315613b9357600d546001600160a01b03165b6001600160a01b0316600052602052604060002090565b549182158015613b5d575b613a2a575b5050610d0661393091949394612c98565b509060009260028082019301935b600360ff82161061395157505050505050565b6139fa906139f56139b9613966895460ff1690565b8015613a1657600d546001600160a01b0316905b846139b361398b610d71838d613860565b926139986013548c613271565b90156139ff576115d5610747600d546001600160a01b031690565b9261446d565b6139dc6139c6848a613860565b9190926139d78385549060031b1c90565b612ce4565b9082549060031b600019811b9283911b16911916179055565b61384e565b61393e565b6115d561074760018c01546001600160a01b031690565b60018601546001600160a01b03169061397a565b613ad09250613a376135de565b9015613b4157613aa9613a52600d546001600160a01b031690565b6123fb65ffffffffffff42166123ec613a7e613a786123ab60125465ffffffffffff1690565b83613616565b93613a99613a8a61084e565b6001600160a01b039099168952565b6001600160a01b03166020880152565b6080820152600060a0820152600160c0820152600060e082015260006101008201526136a5565b613930610d0660185480613b25613b0a613af189546001600160a01b031690565b6001600160a01b03166000526016602052604060002090565b875460ff1615613b2c57600d546001600160a01b03166138f8565b559161391f565b60018901546001600160a01b03165b906106a1565b613aa9613b5860018801546001600160a01b031690565b613a52565b50613b806001613b6f610d0686612c98565b50015460a01c65ffffffffffff1690565b65ffffffffffff8042169116141561391a565b60018701546001600160a01b0316613b3b565b9190916040815260206001600160a01b03613bc3604084016127da565b9416910152565b60409093929193606081526001600160a01b03613be9606083016127da565b951660208201520152565b610d06613c0091612c98565b5060058101916006820191600281019160005b600360ff821610613c2657505050505050565b845460ff16908115613d1557613c5c83613c48600d546001600160a01b031690565b83613c56610d71828b613860565b9161446d565b91613c68838954612ce4565b8855613c7f610dc4600e546001600160a01b031690565b9015613d0257600d546001600160a01b03165b813b1561000e57613cd793613cc19260009283604051809681958294636c49e02160e01b845260048401613bca565b03925af18015613cf5575b613cdc575b5061384e565b613c13565b80613ce9613cef926107b7565b80610421565b38613cd1565b613cfd612f32565b613ccc565b60018501546001600160a01b0316613c92565b613c5c83613d2d60018701546001600160a01b031690565b613c48565b600060115490613d4d610dc4600e546001600160a01b031690565b905b828110613d5e57505050600090565b613d6a61117782611ae4565b604051630530fa2160e01b815260209190828180613d8b8560048301613ba6565b0381885afa928315613e8d575b600093613e68575b5050806115d5613e29613e0f613dde613dcf613e39966001600160a01b0316600052601a602052604060002090565b60008052602052604060002090565b546115d5613dff866001600160a01b0316600052601a602052604060002090565b6001600052602052604060002090565b926001600160a01b0316600052601a602052604060002090565b6002600052602052604060002090565b9015159081613e5e575b50613e5657613e519061324a565b613d4f565b505050600190565b9050151538613e43565b613e399293509081613e8592903d106111fe576111ef818361082c565b919038613da0565b613e95612f32565b613d98565b6001600160a01b038116908115613f7f57613ecb8360005260026020526001600160a01b0360406000205416151590565b613f3a5780613ef0613f10926001600160a01b03166000526003602052604060002090565b613efa8154612ccc565b9055612d98846000526002602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a4565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b8015612ca8576000190190565b600690600092613ffb575b8281558260018201558260058201613ff6816002850161353f565b550155565b614003613509565b613fdb565b61049790546127a0565b61401c81546127a0565b9081614026575050565b81601f60009311600114614038575055565b8183526020832061405491601f0160051c81019060010161353f565b8160208120915555565b6001600160a01b0361406f82612729565b61407883612e32565b1660008181526003602052604081209081549160018310614169575b6000198093019055838152600260205260408120926001600160a01b0319938481541690558482827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef82604051a415159081614161575b50614132575b505061410f61410a826000526006602052604060002090565b614008565b6141165750565b61412d6128b2916000526006602052604060002090565b614012565b6141469060018410614154575b8301612059565b5090815416905538806140f1565b61415c612c81565b61413f565b9050386140eb565b614171612c81565b614094565b6001600160a01b03601154680100000000000000008110156141ea575b60018101806011558110156141dd575b60116000527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680191166001600160a01b0319825416179055565b6141e56114cd565b6141a3565b6141f26107a0565b614193565b6001600160a01b039081811680600052600f60205260ff92836040600020541615614264575b60115460005b818682161061423a57505050506128b29150614176565b838361424861117784611ae4565b161461425c576142579061384e565b614223565b505050505050565b61426f60135461324a565b60135561428f836001600160a01b0316600052600f602052604060002090565b805460ff1916600117905561421d565b9190601f81116142ae57505050565b6128b2926000526020600020906020601f840160051c830193106142da575b601f0160051c019061353f565b90915081906142cd565b6001600160a01b039290838116908161437957505061430e610dc4600e546001600160a01b031690565b8181311061256057803b1561000e57604051633e97486160e11b8152939092166001600160a01b03166004840152602483015260009082908183816044810103925af1801561436c575b61435f5750565b80613ce96128b2926107b7565b614374612f32565b614358565b91909350614392610dc4600e546001600160a01b031690565b6040516370a0823160e01b81526001600160a01b03821660048201526020958391908790829060249082905afa908115614460575b600091614443575b50106125605760405163276d76f960e21b81526001600160a01b03938416600482015293909216602484015260448301528290829060649082906000905af18015614436575b61441d575050565b8161443392903d1061106757611057818361082c565b50565b61443e612f32565b614415565b61445a9150873d89116111fe576111ef818361082c565b386143cf565b614468612f32565b6143c7565b9291600081614480575050505050600090565b6001600160a01b0360646144bf6040946144ba6144dc9860038910156144e8575b60ff8960051c601b015460f88b60031b161c1690613520565b613520565b0495168152601a602052209060ff16600052602052604060002090565b5490811561327b570490565b6144f06114cd565b6144a1565b60405191906000835b60038210614525575050506060820182811067ffffffffffffffff8211176107cb57604052565b60016020819285548152019301910190916144fe565b95939192979694909761012087019887526001600160a01b039081602095168589015216604087015265ffffffffffff809216606087015216608085015260a084016000905b600382106145985750505050610100901515910152565b82806001928651815201940191019092614581565b7fbbad5407299f3773930327d215f85a16617efbbddc1fe3902bd39ba46feacf269060018110614706575b6145e56000198201612059565b50906147016145f261084e565b61461361460685546001600160a01b031690565b6001600160a01b03168252565b60018401546001600160a01b038116602083019081529490919060a083901c65ffffffffffff16604083019081529260d01c606083019081526146f46146eb6146de6146d16146c36006614669600289016144f5565b9760808a01988952600581015460a08b01520154976146b660ff60c083019a6146968282168d9015159052565b6146a8828260081c1660e08601613631565b60101c166101008301613631565b516001600160a01b031690565b9a516001600160a01b031690565b965165ffffffffffff1690565b925165ffffffffffff1690565b92519351151590565b936040519788978861453b565b0390a1565b61470e612c81565b6145d8565b6001600160a01b0380911615159081614772575b50614730575050565b6147498260016128b29410614765575b60001901612059565b50906001600160a01b03166001600160a01b0319825416179055565b61476d612c81565b614740565b9050811615153861472756fea26469706673582212200215d489570798181357323a33d5cc0f1eab3a0a24f950c1bdad5a470529b26e64736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5141,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 5143,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 5147,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5151,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5155,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5161,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6158,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 26896,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "interestForPoolBalanceName",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 26899,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "interestForLenderBalanceName",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 26902,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "tradeCommissionBalanceName",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 26905,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "bondingCommissionBalanceName",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 8424,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 26378,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "testing",
        "offset": 20,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 8539,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "hasRole",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))"
      },
      {
        "astId": 23967,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "nend",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 23970,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "lendingPool",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(Vault)27506"
      },
      {
        "astId": 23974,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "activeStakeTokens",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 23978,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "inflationRollOver",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 23981,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "stakeTokens",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 23984,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "escrowLockPeriod",
        "offset": 0,
        "slot": "18",
        "type": "t_uint48"
      },
      {
        "astId": 23986,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "stakeTokenCount",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 23988,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "ongoingStakeCount",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 23992,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "ifpTokenToAmount",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 23998,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "userToStakeTokenToLastEscrowId",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 24004,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "lastEscrowRewardByToken_Duration",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 24008,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "stakes",
        "offset": 0,
        "slot": "24",
        "type": "t_array(t_struct(Stake)26039_storage)dyn_storage"
      },
      {
        "astId": 24016,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "stakeDurations",
        "offset": 0,
        "slot": "25",
        "type": "t_array(t_uint48)3_storage"
      },
      {
        "astId": 24022,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "totalStakedByToken_Duration",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 24030,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "rewardAllocations",
        "offset": 0,
        "slot": "27",
        "type": "t_array(t_uint8)3_storage"
      },
      {
        "astId": 24032,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "poolRollOver",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Stake)26039_storage)dyn_storage": {
        "base": "t_struct(Stake)26039_storage",
        "encoding": "dynamic_array",
        "label": "struct ILendingPoolStaking.Stake[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint48)3_storage": {
        "base": "t_uint48",
        "encoding": "inplace",
        "label": "uint48[3]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)3_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[3]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Vault)27506": {
        "encoding": "inplace",
        "label": "contract Vault",
        "numberOfBytes": "20"
      },
      "t_enum(EscrowStatus)26016": {
        "encoding": "inplace",
        "label": "enum ILendingPoolStaking.EscrowStatus",
        "numberOfBytes": "1"
      },
      "t_enum(StakeStatus)26012": {
        "encoding": "inplace",
        "label": "enum ILendingPoolStaking.StakeStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Stake)26039_storage": {
        "encoding": "inplace",
        "label": "struct ILendingPoolStaking.Stake",
        "members": [
          {
            "astId": 26018,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "staker",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 26020,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 26022,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "start",
            "offset": 20,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 26024,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "end",
            "offset": 26,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 26028,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "amountsPerDuration",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)3_storage"
          },
          {
            "astId": 26030,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "rewardAllocated",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 26032,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "isEscrow",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 26035,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "escrowStatus",
            "offset": 1,
            "slot": "6",
            "type": "t_enum(EscrowStatus)26016"
          },
          {
            "astId": 26038,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "stakeStatus",
            "offset": 2,
            "slot": "6",
            "type": "t_enum(StakeStatus)26012"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}