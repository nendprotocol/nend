{
  "address": "0x0F443432584953EEbE27C7D0dbc927c9D1b0b27b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_periFiAdminAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_loanRepaymentAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "enum AuctionStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "AuctionInvalidStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuctionNotRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollateralOwnershipNotTransferred",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncompleteStepDownConfig",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InexactFraction",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endAmount",
          "type": "uint256"
        }
      ],
      "name": "InvalidPriceRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStepDownConfig",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "InvalidTimeRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProtectionNotOver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProtectionOver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StepDownConfigAndAuctionTimeMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StepDownConfigOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "loanBorrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protectedUntil",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanRepaymentAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "stepDownConfig",
          "type": "bytes"
        }
      ],
      "name": "LoanAuctionBegun",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "name": "LoanAuctionCancelledByPayout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        }
      ],
      "name": "LoanAuctionSoldAndProtected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        }
      ],
      "name": "LoanAuctionSoldToBidder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "auctionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protectedUntil",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "loanId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "stepDownConfig",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "loanBorrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "loanAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "loanRepaymentAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isProtected",
              "type": "bool"
            }
          ],
          "internalType": "struct AuctionParameters",
          "name": "parameters",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "loanId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "stepDownConfig",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "loanBorrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "loanAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "loanRepaymentAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isProtected",
              "type": "bool"
            }
          ],
          "internalType": "struct AuctionParameters",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "beginAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bidAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bidders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "currentBidPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decrementInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanRepaymentAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "makeBid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "completed",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "payout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periFiAdminAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum AuctionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "intervalInSec",
          "type": "uint256"
        }
      ],
      "name": "updateDecrementInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x781bf6584d8f688359e61d712234ad6d43e71086959b0784065a7a0076c562ff",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x7E8aE5C72eCA86946b695dCc211863D9721A0961",
    "contractAddress": null,
    "transactionIndex": 29,
    "gasUsed": "2755537",
    "logsBloom": "0x
    "blockHash": "0x435d8a62ea4a72cdf23aff4f1bafaf897f5b6be2883de980d95e92c4cc59a4b3",
    "transactionHash": "0x781bf6584d8f688359e61d712234ad6d43e71086959b0784065a7a0076c562ff",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 35513464,
        "transactionHash": "0x781bf6584d8f688359e61d712234ad6d43e71086959b0784065a7a0076c562ff",
        "address": "0x0F443432584953EEbE27C7D0dbc927c9D1b0b27b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007e8ae5c72eca86946b695dcc211863d9721a0961"
        ],
        "data": "0x",
        "logIndex": 116,
        "blockHash": "0x435d8a62ea4a72cdf23aff4f1bafaf897f5b6be2883de980d95e92c4cc59a4b3"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 35513464,
        "transactionHash": "0x781bf6584d8f688359e61d712234ad6d43e71086959b0784065a7a0076c562ff",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007e8ae5c72eca86946b695dcc211863d9721a0961",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000225a9ce99d220520000000000000000000000000000000000000000000000016cfc1c72b7f1910e000000000000000000000000000000000000000000001b84a16b9d84b98b54d80000000000000000000000000000000000000000000000016ad672a41e1f70bc000000000000000000000000000000000000000000001b84a3914753535d752a",
        "logIndex": 117,
        "blockHash": "0x435d8a62ea4a72cdf23aff4f1bafaf897f5b6be2883de980d95e92c4cc59a4b3"
      }
    ],
    "blockNumber": 35513464,
    "cumulativeGasUsed": "7940745",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x63b7B222C7fe9Af3a11871446062C19f6d032092",
    "0x884FE97ebBc2766b1d3b2d39FE2c23a4A1d6b199"
  ],
  "numDeployments": 1,
  "solcInputHash": "9f9b24330e64b4aed8e24e00b5f5786e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_periFiAdminAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_loanRepaymentAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"enum AuctionStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"AuctionInvalidStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralOwnershipNotTransferred\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncompleteStepDownConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InexactFraction\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"}],\"name\":\"InvalidPriceRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStepDownConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"InvalidTimeRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtectionNotOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtectionOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StepDownConfigAndAuctionTimeMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StepDownConfigOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanBorrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protectedUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanRepaymentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"stepDownConfig\",\"type\":\"bytes\"}],\"name\":\"LoanAuctionBegun\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"LoanAuctionCancelledByPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"LoanAuctionSoldAndProtected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"LoanAuctionSoldToBidder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auctionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protectedUntil\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"stepDownConfig\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"loanBorrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanRepaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isProtected\",\"type\":\"bool\"}],\"internalType\":\"struct AuctionParameters\",\"name\":\"parameters\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"stepDownConfig\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"loanBorrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanRepaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isProtected\",\"type\":\"bool\"}],\"internalType\":\"struct AuctionParameters\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"beginAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"currentBidPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decrementInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanRepaymentAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"makeBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periFiAdminAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum AuctionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"intervalInSec\",\"type\":\"uint256\"}],\"name\":\"updateDecrementInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InexactFraction()\":[{\"details\":\"Revert with an error when attempting to apply a fraction as part of      a partial fill that does not divide the target amount cleanly.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/loan/LoanAuction.sol\":\"LoanAuction\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/PeriFiAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\nimport \\\"./access/MWOwnable.sol\\\";\\r\\n\\r\\ncontract PeriFiAdmin is MWOwnable {\\r\\n    uint256 public maximumLoanDuration = 53 weeks;\\r\\n    uint256 public maximumNumberOfActiveLoans = 100;\\r\\n\\r\\n    uint256 public poolCommissionIFPUpTo20 = 4000;\\r\\n    uint256 public poolCommissionIFPUpTo30 = 4500;\\r\\n    uint256 public poolCommissionIFPUpTo40 = 5000;\\r\\n    uint256 public poolCommissionIFPUpTo50 = 5000;\\r\\n    uint256 public poolCommissionIFPUpTo60 = 5500;\\r\\n    uint256 public poolCommissionIFPUpTo70 = 6000;\\r\\n    uint256 public poolCommissionIFPUpTo80 = 7000;\\r\\n    uint256 public poolCommissionIFPUpTo90 = 8000;\\r\\n    uint256 public poolCommissionIFPUpTo100 = 9000;\\r\\n\\r\\n    uint256 public ivCommissionForIFP = 500; // 5%\\r\\n    uint256 public commissionForIFL = 500;\\r\\n    \\r\\n    // uint256 public loanCommissionInBasisPoints = 500; // 5%\\r\\n    uint256 public preLiquidationDuration = 24 hours;\\r\\n    uint256 public claimCollateralDuration = 24 hours;\\r\\n    uint256 public liquidateProtectionDuration = 48 hours;\\r\\n    \\r\\n    uint256 public liquidationThresholdInBasisPoints = 8000; // 80%\\r\\n    \\r\\n    function updateMaximumLoanDuration(uint256 _newMaximumLoanDuration) external onlyOwner {\\r\\n        require(_newMaximumLoanDuration <= uint256(~uint32(0)), 'loan duration cannot exceed space alotted in struct');\\r\\n        maximumLoanDuration = _newMaximumLoanDuration;\\r\\n    }\\r\\n\\r\\n    function updateMaximumNumberOfActiveLoans(uint256 _newMaximumNumberOfActiveLoans) external onlyOwner {\\r\\n        maximumNumberOfActiveLoans = _newMaximumNumberOfActiveLoans;\\r\\n    }\\r\\n    function updatePoolCommission(uint256 leveragePercent, uint256 poolCommissionInBasisPoint) external onlyOwner {\\r\\n        require(leveragePercent % 10 == 0, \\\"leveragePercent must be multiples of 10\\\");\\r\\n        require(leveragePercent >= 20, \\\"leveragePercent must be bigger than or equal to 20\\\");\\r\\n        require(leveragePercent <= 100, \\\"leveragePercent must be smaller than or equal to 100\\\");\\r\\n\\r\\n        if (leveragePercent == 20){\\r\\n            poolCommissionIFPUpTo20 = poolCommissionInBasisPoint;\\r\\n        } else if (leveragePercent == 30){\\r\\n            poolCommissionIFPUpTo30 = poolCommissionInBasisPoint;\\r\\n        } else if (leveragePercent == 40){\\r\\n            poolCommissionIFPUpTo40 = poolCommissionInBasisPoint;\\r\\n        } else if (leveragePercent == 50){\\r\\n            poolCommissionIFPUpTo50 = poolCommissionInBasisPoint;\\r\\n        } else if (leveragePercent == 60){\\r\\n            poolCommissionIFPUpTo60 = poolCommissionInBasisPoint;\\r\\n        } else if (leveragePercent == 70){\\r\\n            poolCommissionIFPUpTo70 = poolCommissionInBasisPoint;\\r\\n        } else if (leveragePercent == 80){\\r\\n            poolCommissionIFPUpTo80 = poolCommissionInBasisPoint;\\r\\n        } else if (leveragePercent == 90){\\r\\n            poolCommissionIFPUpTo90 = poolCommissionInBasisPoint;\\r\\n        } else if (leveragePercent == 100){\\r\\n            poolCommissionIFPUpTo100 = poolCommissionInBasisPoint;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function updateIVCommissionForIFP(uint256 _newIVCommissionForIFP) external onlyOwner {\\r\\n        require(_newIVCommissionForIFP <= 10000, 'By definition, basis points cannot exceed 10000');\\r\\n        ivCommissionForIFP = _newIVCommissionForIFP;\\r\\n        // emit InterestForIVUpdated(_newInterestForIVInBasisPoints);\\r\\n    }\\r\\n\\r\\n    function updateCommissionForIFL(uint256 _newCommissionForIFL) external onlyOwner {\\r\\n        require(_newCommissionForIFL <= 10000, 'By definition, basis points cannot exceed 10000');\\r\\n        commissionForIFL = _newCommissionForIFL;\\r\\n        // emit InterestForIVUpdated(_newInterestForIVInBasisPoints);\\r\\n    }\\r\\n    \\r\\n\\r\\n    function updateLiquidateProtectionDuration(uint256 _newLiquidateProtectionDuration) external onlyOwner {\\r\\n        liquidateProtectionDuration = _newLiquidateProtectionDuration;\\r\\n    }\\r\\n\\r\\n    function updatePreLiquidationDuration(uint256 _newPreLiquidationDuration) external onlyOwner {\\r\\n        preLiquidationDuration = _newPreLiquidationDuration;\\r\\n    }\\r\\n    function updateClaimCollateralDuration(uint256 _newClaimCollateralDuration) external onlyOwner {\\r\\n        claimCollateralDuration = _newClaimCollateralDuration;\\r\\n    }\\r\\n\\r\\n    function updateLiquidationThreshold(uint256 _newLiquidationThresholdInBasisPoints) external onlyOwner {\\r\\n        require(_newLiquidationThresholdInBasisPoints <= 10000, 'By definition, basis points cannot exceed 10000');\\r\\n        liquidationThresholdInBasisPoints = _newLiquidationThresholdInBasisPoints;\\r\\n        // emit InterestForIVUpdated(_newLiquidationThresholdInBasisPoints);\\r\\n    }\\r\\n\\r\\n    // function updateloanCommissionInBasisPoints(uint256 _newLoanCommissionInBasisPoints) external onlyOwner {\\r\\n    //     require(_newLoanCommissionInBasisPoints <= 10000, 'By definition, basis points cannot exceed 10000');\\r\\n    //     loanCommissionInBasisPoints = _newLoanCommissionInBasisPoints;\\r\\n    //     // emit LoanCommissionUpdated(_newLoanCommissionInBasisPoints);\\r\\n    // }\\r\\n}\\r\\n    // event InterestForIVUpdated(\\r\\n    //     uint256 basisPointValue\\r\\n    // );\\r\\n\\r\\n    // event LoanCommissionUpdated(\\r\\n    //     uint256 basisPointValue\\r\\n    // );\\r\\n\\r\\n    // event LiquidationThresholdUpdated(\\r\\n    //     uint256 basisPointValue\\r\\n    // );\\r\\n\\r\\n    // event ProtectionDurationUpdated(\\r\\n    //     uint256 durationInSeconds\\r\\n    // );\\r\\n\\r\\n    // event LiquidateDurationUpdated(\\r\\n    //     uint256 durationInSeconds\\r\\n    // );\\r\\n\\r\\n    // event ERC20WhiteListConfigured(\\r\\n    //     address erc20,\\r\\n    //     bool isWhitelisted\\r\\n    // );\\r\\n\\r\\n    // event CollectionLeverageConfigured(\\r\\n    //     address collection,\\r\\n    //     bool isAllowed\\r\\n    // );\\r\\n\\r\\n    // event CollectionHealthFactorConfigured(\\r\\n    //     address collection,\\r\\n    //     bool isTrakcked\\r\\n    // );\\r\\n\\r\\n    // @notice A mapping from from an ERC20 currency address to whether that\\r\\n    //         currency is whitelisted to be used by this contract.\\r\\n    // mapping (address => bool) public erc20CurrencyIsWhitelisted;\\r\\n\\r\\n    // mapping (address => bool) public leverageAvailableCollections;\\r\\n\\r\\n    // mapping (address => bool) public healthFactorEnabledCollection;\\r\\n    // @notice The percentage of interest earned by lenders on this platform\\r\\n    //         that is taken by the contract admin's as a fee, measured in\\r\\n    //         basis points (hundreths of a percent).\\r\\n    \\r\\n    // function whitelistERC20Currency(address _erc20Currency, bool _setAsWhitelisted) external onlyOwner {\\r\\n    //     erc20CurrencyIsWhitelisted[_erc20Currency] = _setAsWhitelisted;\\r\\n    //     emit ERC20WhiteListConfigured(_erc20Currency, _setAsWhitelisted);\\r\\n    // }\\r\\n\\r\\n    // function setLeverageOnCollection(address collection, bool allowed) external onlyOwner {\\r\\n    //     leverageAvailableCollections[collection] = allowed;\\r\\n    //     emit CollectionLeverageConfigured(collection, allowed);\\r\\n    // }\\r\\n\\r\\n    // function setHealthFactorOnCollection(address collection, bool tracked) external onlyOwner {\\r\\n    //     healthFactorEnabledCollection[collection] = tracked;\\r\\n    //     emit CollectionHealthFactorConfigured(collection, tracked);\\r\\n    // }\\r\\n\",\"keccak256\":\"0x2b1ad4777cc1fdc7307fd9b562e28ef2f8f32e8efc4d4c09ce2c9130b06e152c\",\"license\":\"MIT\"},\"contracts/access/MWOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract MWOwnable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(0x7E8aE5C72eCA86946b695dCc211863D9721A0961);  // Nend Mainnet Main Wallet\\r\\n        // _transferOwnership(0x4a580D71c0F73202C51C58147aA7c7E09245b10A);  // Nend Turbo Main Wallet\\r\\n        // _transferOwnership(0x2F358B80eD2d296C09560d2b9F70a7f81d57e352); // Kong Wallet\\r\\n        // _transferOwnership(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier \\r\\n    onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x71026b1c2671af0f1d6e4c17a3f1d1a291b17725b21e27937369a8be395260c7\",\"license\":\"MIT\"},\"contracts/access/SimpleRoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract SimpleRoleAccess is MWOwnable {\\r\\n    mapping(address => mapping(string => bool)) public hasRole;\\r\\n\\r\\n    function authorize(\\r\\n        address operator,\\r\\n        string memory role,\\r\\n        bool authorized \\r\\n    ) public onlyOwner {\\r\\n        hasRole[operator][role] = authorized;\\r\\n    }\\r\\n\\r\\n    modifier onlyRole(string memory _role) {\\r\\n        require(\\r\\n            msg.sender == owner() || hasRole[msg.sender][_role],\\r\\n            \\\"Not authorized\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasAllRoles(string[] memory _roles) {\\r\\n        for (uint256 i = 0; i < _roles.length; i++) {\\r\\n            require(hasRole[msg.sender][_roles[i]], \\\"Not authorized\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasSomeRoles(string[] memory _roles) {\\r\\n        bool _hasRole;\\r\\n        for (uint256 i = 0; i < _roles.length; i++) {\\r\\n            if (hasRole[msg.sender][_roles[i]]) {\\r\\n                _hasRole = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(_hasRole, \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf30bd718616125e5f0d4ff2dc1a0cf23fdca63476180b656cb7642ed23e86369\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/AmountDerivationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\n/**\\r\\n * @title AmountDerivationErrors\\r\\n * @author 0age\\r\\n * @notice AmountDerivationErrors contains errors related to amount derivation.\\r\\n */\\r\\ninterface AmountDerivationErrors {\\r\\n    /**\\r\\n     * @dev Revert with an error when attempting to apply a fraction as part of\\r\\n     *      a partial fill that does not divide the target amount cleanly.\\r\\n     */\\r\\n    error InexactFraction();\\r\\n}\\r\\n\",\"keccak256\":\"0x9ee3f62d72d01d6a2857c175c37f2bdef9392ff60cac73ae7b3d675091c4e50a\",\"license\":\"MIT\"},\"contracts/lib/AmountDeriver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.13;\\r\\n\\r\\n// prettier-ignore\\r\\nimport {\\r\\n    AmountDerivationErrors\\r\\n} from \\\"../interfaces/AmountDerivationErrors.sol\\\";\\r\\n\\r\\nimport \\\"./ConsiderationConstants.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title AmountDeriver\\r\\n * @author 0age\\r\\n * @notice AmountDeriver contains view and pure functions related to deriving\\r\\n *         item amounts based on partial fill quantity and on linear\\r\\n *         interpolation based on current time when the start amount and end\\r\\n *         amount differ.\\r\\n */\\r\\ncontract AmountDeriver is AmountDerivationErrors {\\r\\n\\r\\n    /**\\r\\n     * @dev Internal view function to derive the current amount of a given item\\r\\n     *      based on the current price, the starting price, and the ending\\r\\n     *      price. If the start and end prices differ, the current price will be\\r\\n     *      interpolated on a linear basis. Note that this function expects that\\r\\n     *      the startTime parameter of orderParameters is not greater than the\\r\\n     *      current block timestamp and that the endTime parameter is greater\\r\\n     *      than the current block timestamp. If this condition is not upheld,\\r\\n     *      duration / elapsed / remaining variables will underflow.\\r\\n     *\\r\\n     * @param startAmount The starting amount of the item.\\r\\n     * @param endAmount   The ending amount of the item.\\r\\n     * @param startTime   The starting time of the order.\\r\\n     * @param endTime     The end time of the order.\\r\\n     * @param roundUp     A boolean indicating whether the resultant amount\\r\\n     *                    should be rounded up or down.\\r\\n     *\\r\\n     * @return amount The current amount.\\r\\n     */\\r\\n    function _locateCurrentAmount(\\r\\n        uint256 startAmount,\\r\\n        uint256 endAmount,\\r\\n        uint256 startTime,\\r\\n        uint256 endTime,\\r\\n        bool roundUp\\r\\n    ) internal view returns (uint256 amount) {\\r\\n        // Only modify end amount if it doesn't already equal start amount.\\r\\n        if (startAmount != endAmount) {\\r\\n            // Declare variables to derive in the subsequent unchecked scope.\\r\\n            uint256 duration;\\r\\n            uint256 elapsed;\\r\\n            uint256 remaining;\\r\\n\\r\\n            // Skip underflow checks as startTime <= block.timestamp < endTime.\\r\\n            unchecked {\\r\\n                // Derive the duration for the order and place it on the stack.\\r\\n                duration = endTime - startTime;\\r\\n\\r\\n                // Derive time elapsed since the order started & place on stack.\\r\\n                elapsed = block.timestamp - startTime;\\r\\n\\r\\n                // Derive time remaining until order expires and place on stack.\\r\\n                remaining = duration - elapsed;\\r\\n            }\\r\\n\\r\\n            // Aggregate new amounts weighted by time with rounding factor.\\r\\n            uint256 totalBeforeDivision = ((startAmount * remaining) +\\r\\n                (endAmount * elapsed));\\r\\n\\r\\n            // Use assembly to combine operations and skip divide-by-zero check.\\r\\n            assembly {\\r\\n                // Multiply by iszero(iszero(totalBeforeDivision)) to ensure\\r\\n                // amount is set to zero if totalBeforeDivision is zero,\\r\\n                // as intermediate overflow can occur if it is zero.\\r\\n                amount := mul(\\r\\n                    iszero(iszero(totalBeforeDivision)),\\r\\n                    // Subtract 1 from the numerator and add 1 to the result if\\r\\n                    // roundUp is true to get the proper rounding direction.\\r\\n                    // Division is performed with no zero check as duration\\r\\n                    // cannot be zero as long as startTime < endTime.\\r\\n                    add(\\r\\n                        div(sub(totalBeforeDivision, roundUp), duration),\\r\\n                        roundUp\\r\\n                    )\\r\\n                )\\r\\n            }\\r\\n\\r\\n            // Return the current amount.\\r\\n            return amount;\\r\\n        }\\r\\n\\r\\n        // Return the original amount as startAmount == endAmount.\\r\\n        return endAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal pure function to return a fraction of a given value and to\\r\\n     *      ensure the resultant value does not have any fractional component.\\r\\n     *      Note that this function assumes that zero will never be supplied as\\r\\n     *      the denominator parameter; invalid / undefined behavior will result\\r\\n     *      should a denominator of zero be provided.\\r\\n     *\\r\\n     * @param numerator   A value indicating the portion of the order that\\r\\n     *                    should be filled.\\r\\n     * @param denominator A value indicating the total size of the order. Note\\r\\n     *                    that this value cannot be equal to zero.\\r\\n     * @param value       The value for which to compute the fraction.\\r\\n     *\\r\\n     * @return newValue The value after applying the fraction.\\r\\n     */\\r\\n    function _getFraction(\\r\\n        uint256 numerator,\\r\\n        uint256 denominator,\\r\\n        uint256 value\\r\\n    ) internal pure returns (uint256 newValue) {\\r\\n        // Return value early in cases where the fraction resolves to 1.\\r\\n        if (numerator == denominator) {\\r\\n            return value;\\r\\n        }\\r\\n\\r\\n        // Ensure fraction can be applied to the value with no remainder. Note\\r\\n        // that the denominator cannot be zero.\\r\\n        assembly {\\r\\n            // Ensure new value contains no remainder via mulmod operator.\\r\\n            // Credit to @hrkrshnn + @axic for proposing this optimal solution.\\r\\n            if mulmod(value, numerator, denominator) {\\r\\n                mstore(0, InexactFraction_error_signature)\\r\\n                revert(0, InexactFraction_error_len)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Multiply the numerator by the value and ensure no overflow occurs.\\r\\n        uint256 valueTimesNumerator = value * numerator;\\r\\n\\r\\n        // Divide and check for remainder. Note that denominator cannot be zero.\\r\\n        assembly {\\r\\n            // Perform division without zero check.\\r\\n            newValue := div(valueTimesNumerator, denominator)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal view function to apply a fraction to a consideration\\r\\n     * or offer item.\\r\\n     *\\r\\n     * @param startAmount     The starting amount of the item.\\r\\n     * @param endAmount       The ending amount of the item.\\r\\n     * @param numerator       A value indicating the portion of the order that\\r\\n     *                        should be filled.\\r\\n     * @param denominator     A value indicating the total size of the order.\\r\\n     * @param startTime       The starting time of the order.\\r\\n     * @param endTime         The end time of the order.\\r\\n     * @param roundUp         A boolean indicating whether the resultant\\r\\n     *                        amount should be rounded up or down.\\r\\n     *\\r\\n     * @return amount The received item to transfer with the final amount.\\r\\n     */\\r\\n    function _applyFraction(\\r\\n        uint256 startAmount,\\r\\n        uint256 endAmount,\\r\\n        uint256 numerator,\\r\\n        uint256 denominator,\\r\\n        uint256 startTime,\\r\\n        uint256 endTime,\\r\\n        bool roundUp\\r\\n    ) internal view returns (uint256 amount) {\\r\\n        // If start amount equals end amount, apply fraction to end amount.\\r\\n        if (startAmount == endAmount) {\\r\\n            // Apply fraction to end amount.\\r\\n            amount = _getFraction(numerator, denominator, endAmount);\\r\\n        } else {\\r\\n            // Otherwise, apply fraction to both and interpolated final amount.\\r\\n            amount = _locateCurrentAmount(\\r\\n                _getFraction(numerator, denominator, startAmount),\\r\\n                _getFraction(numerator, denominator, endAmount),\\r\\n                startTime,\\r\\n                endTime,\\r\\n                roundUp\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x37ab0810e3d319960e52fab4812d2985a22c11450824e29647b29522071a1377\",\"license\":\"MIT\"},\"contracts/lib/ConsiderationConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\n/*\\r\\n * -------------------------- Disambiguation & Other Notes ---------------------\\r\\n *    - The term \\\"head\\\" is used as it is in the documentation for ABI encoding,\\r\\n *      but only in reference to dynamic types, i.e. it always refers to the\\r\\n *      offset or pointer to the body of a dynamic type. In calldata, the head\\r\\n *      is always an offset (relative to the parent object), while in memory,\\r\\n *      the head is always the pointer to the body. More information found here:\\r\\n *      https://docs.soliditylang.org/en/v0.8.14/abi-spec.html#argument-encoding\\r\\n *        - Note that the length of an array is separate from and precedes the\\r\\n *          head of the array.\\r\\n *\\r\\n *    - The term \\\"body\\\" is used in place of the term \\\"head\\\" used in the ABI\\r\\n *      documentation. It refers to the start of the data for a dynamic type,\\r\\n *      e.g. the first word of a struct or the first word of the first element\\r\\n *      in an array.\\r\\n *\\r\\n *    - The term \\\"pointer\\\" is used to describe the absolute position of a value\\r\\n *      and never an offset relative to another value.\\r\\n *        - The suffix \\\"_ptr\\\" refers to a memory pointer.\\r\\n *        - The suffix \\\"_cdPtr\\\" refers to a calldata pointer.\\r\\n *\\r\\n *    - The term \\\"offset\\\" is used to describe the position of a value relative\\r\\n *      to some parent value. For example, OrderParameters_conduit_offset is the\\r\\n *      offset to the \\\"conduit\\\" value in the OrderParameters struct relative to\\r\\n *      the start of the body.\\r\\n *        - Note: Offsets are used to derive pointers.\\r\\n *\\r\\n *    - Some structs have pointers defined for all of their fields in this file.\\r\\n *      Lines which are commented out are fields that are not used in the\\r\\n *      codebase but have been left in for readability.\\r\\n */\\r\\n\\r\\n// Declare constants for name, version, and reentrancy sentinel values.\\r\\n\\r\\n// Name is right padded, so it touches the length which is left padded. This\\r\\n// enables writing both values at once. Length goes at byte 95 in memory, and\\r\\n// name fills bytes 96-109, so both values can be written left-padded to 77.\\r\\nuint256 constant NameLengthPtr = 77;\\r\\nuint256 constant NameWithLength = 0x0d436F6E73696465726174696F6E;\\r\\n\\r\\nuint256 constant Version = 0x312e31;\\r\\nuint256 constant Version_length = 3;\\r\\nuint256 constant Version_shift = 0xe8;\\r\\n\\r\\nuint256 constant _NOT_ENTERED = 1;\\r\\nuint256 constant _ENTERED = 2;\\r\\n\\r\\n// Common Offsets\\r\\n// Offsets for identically positioned fields shared by:\\r\\n// OfferItem, ConsiderationItem, SpentItem, ReceivedItem\\r\\n\\r\\nuint256 constant Common_token_offset = 0x20;\\r\\nuint256 constant Common_identifier_offset = 0x40;\\r\\nuint256 constant Common_amount_offset = 0x60;\\r\\n\\r\\nuint256 constant ReceivedItem_size = 0xa0;\\r\\nuint256 constant ReceivedItem_amount_offset = 0x60;\\r\\nuint256 constant ReceivedItem_recipient_offset = 0x80;\\r\\n\\r\\nuint256 constant ReceivedItem_CommonParams_size = 0x60;\\r\\n\\r\\nuint256 constant ConsiderationItem_recipient_offset = 0xa0;\\r\\n// Store the same constant in an abbreviated format for a line length fix.\\r\\nuint256 constant ConsiderItem_recipient_offset = 0xa0;\\r\\n\\r\\nuint256 constant Execution_offerer_offset = 0x20;\\r\\nuint256 constant Execution_conduit_offset = 0x40;\\r\\n\\r\\nuint256 constant InvalidFulfillmentComponentData_error_signature = (\\r\\n    0x7fda727900000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant InvalidFulfillmentComponentData_error_len = 0x04;\\r\\n\\r\\nuint256 constant Panic_error_signature = (\\r\\n    0x4e487b7100000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant Panic_error_offset = 0x04;\\r\\nuint256 constant Panic_error_length = 0x24;\\r\\nuint256 constant Panic_arithmetic = 0x11;\\r\\n\\r\\nuint256 constant MissingItemAmount_error_signature = (\\r\\n    0x91b3e51400000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant MissingItemAmount_error_len = 0x04;\\r\\n\\r\\nuint256 constant OrderParameters_offer_head_offset = 0x40;\\r\\nuint256 constant OrderParameters_consideration_head_offset = 0x60;\\r\\nuint256 constant OrderParameters_conduit_offset = 0x120;\\r\\nuint256 constant OrderParameters_counter_offset = 0x140;\\r\\n\\r\\nuint256 constant Fulfillment_itemIndex_offset = 0x20;\\r\\n\\r\\nuint256 constant AdvancedOrder_numerator_offset = 0x20;\\r\\n\\r\\nuint256 constant AlmostOneWord = 0x1f;\\r\\nuint256 constant OneWord = 0x20;\\r\\nuint256 constant TwoWords = 0x40;\\r\\nuint256 constant ThreeWords = 0x60;\\r\\nuint256 constant FourWords = 0x80;\\r\\nuint256 constant FiveWords = 0xa0;\\r\\n\\r\\nuint256 constant FreeMemoryPointerSlot = 0x40;\\r\\nuint256 constant ZeroSlot = 0x60;\\r\\nuint256 constant DefaultFreeMemoryPointer = 0x80;\\r\\n\\r\\nuint256 constant Slot0x80 = 0x80;\\r\\nuint256 constant Slot0xA0 = 0xa0;\\r\\n\\r\\nuint256 constant BasicOrder_endAmount_cdPtr = 0x104;\\r\\nuint256 constant BasicOrder_common_params_size = 0xa0;\\r\\nuint256 constant BasicOrder_considerationHashesArray_ptr = 0x160;\\r\\n\\r\\nuint256 constant EIP712_Order_size = 0x180;\\r\\nuint256 constant EIP712_OfferItem_size = 0xc0;\\r\\nuint256 constant EIP712_ConsiderationItem_size = 0xe0;\\r\\nuint256 constant AdditionalRecipients_size = 0x40;\\r\\n\\r\\nuint256 constant EIP712_DomainSeparator_offset = 0x02;\\r\\nuint256 constant EIP712_OrderHash_offset = 0x22;\\r\\nuint256 constant EIP712_DigestPayload_size = 0x42;\\r\\n\\r\\nuint256 constant receivedItemsHash_ptr = 0x60;\\r\\n\\r\\n/*\\r\\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\\r\\n *  data for OrderFulfilled\\r\\n *\\r\\n *   event OrderFulfilled(\\r\\n *     bytes32 orderHash,\\r\\n *     address indexed offerer,\\r\\n *     address indexed zone,\\r\\n *     address fulfiller,\\r\\n *     SpentItem[] offer,\\r\\n *       > (itemType, token, id, amount)\\r\\n *     ReceivedItem[] consideration\\r\\n *       > (itemType, token, id, amount, recipient)\\r\\n *   )\\r\\n *\\r\\n *  - 0x00: orderHash\\r\\n *  - 0x20: fulfiller\\r\\n *  - 0x40: offer offset (0x80)\\r\\n *  - 0x60: consideration offset (0x120)\\r\\n *  - 0x80: offer.length (1)\\r\\n *  - 0xa0: offerItemType\\r\\n *  - 0xc0: offerToken\\r\\n *  - 0xe0: offerIdentifier\\r\\n *  - 0x100: offerAmount\\r\\n *  - 0x120: consideration.length (1 + additionalRecipients.length)\\r\\n *  - 0x140: considerationItemType\\r\\n *  - 0x160: considerationToken\\r\\n *  - 0x180: considerationIdentifier\\r\\n *  - 0x1a0: considerationAmount\\r\\n *  - 0x1c0: considerationRecipient\\r\\n *  - ...\\r\\n */\\r\\n\\r\\n// Minimum length of the OrderFulfilled event data.\\r\\n// Must be added to the size of the ReceivedItem array for additionalRecipients\\r\\n// (0xa0 * additionalRecipients.length) to calculate full size of the buffer.\\r\\nuint256 constant OrderFulfilled_baseSize = 0x1e0;\\r\\nuint256 constant OrderFulfilled_selector = (\\r\\n    0x9d9af8e38d66c62e2c12f0225249fd9d721c54b83f48d9352c97c6cacdcb6f31\\r\\n);\\r\\n\\r\\n// Minimum offset in memory to OrderFulfilled event data.\\r\\n// Must be added to the size of the EIP712 hash array for additionalRecipients\\r\\n// (32 * additionalRecipients.length) to calculate the pointer to event data.\\r\\nuint256 constant OrderFulfilled_baseOffset = 0x180;\\r\\nuint256 constant OrderFulfilled_consideration_length_baseOffset = 0x2a0;\\r\\nuint256 constant OrderFulfilled_offer_length_baseOffset = 0x200;\\r\\n\\r\\n// uint256 constant OrderFulfilled_orderHash_offset = 0x00;\\r\\nuint256 constant OrderFulfilled_fulfiller_offset = 0x20;\\r\\nuint256 constant OrderFulfilled_offer_head_offset = 0x40;\\r\\nuint256 constant OrderFulfilled_offer_body_offset = 0x80;\\r\\nuint256 constant OrderFulfilled_consideration_head_offset = 0x60;\\r\\nuint256 constant OrderFulfilled_consideration_body_offset = 0x120;\\r\\n\\r\\n// BasicOrderParameters\\r\\nuint256 constant BasicOrder_parameters_cdPtr = 0x04;\\r\\nuint256 constant BasicOrder_considerationToken_cdPtr = 0x24;\\r\\n// uint256 constant BasicOrder_considerationIdentifier_cdPtr = 0x44;\\r\\nuint256 constant BasicOrder_considerationAmount_cdPtr = 0x64;\\r\\nuint256 constant BasicOrder_offerer_cdPtr = 0x84;\\r\\nuint256 constant BasicOrder_zone_cdPtr = 0xa4;\\r\\nuint256 constant BasicOrder_offerToken_cdPtr = 0xc4;\\r\\n// uint256 constant BasicOrder_offerIdentifier_cdPtr = 0xe4;\\r\\nuint256 constant BasicOrder_offerAmount_cdPtr = 0x104;\\r\\nuint256 constant BasicOrder_basicOrderType_cdPtr = 0x124;\\r\\nuint256 constant BasicOrder_startTime_cdPtr = 0x144;\\r\\n// uint256 constant BasicOrder_endTime_cdPtr = 0x164;\\r\\n// uint256 constant BasicOrder_zoneHash_cdPtr = 0x184;\\r\\n// uint256 constant BasicOrder_salt_cdPtr = 0x1a4;\\r\\nuint256 constant BasicOrder_offererConduit_cdPtr = 0x1c4;\\r\\nuint256 constant BasicOrder_fulfillerConduit_cdPtr = 0x1e4;\\r\\nuint256 constant BasicOrder_totalOriginalAdditionalRecipients_cdPtr = 0x204;\\r\\nuint256 constant BasicOrder_additionalRecipients_head_cdPtr = 0x224;\\r\\nuint256 constant BasicOrder_signature_cdPtr = 0x244;\\r\\nuint256 constant BasicOrder_additionalRecipients_length_cdPtr = 0x264;\\r\\nuint256 constant BasicOrder_additionalRecipients_data_cdPtr = 0x284;\\r\\n\\r\\nuint256 constant BasicOrder_parameters_ptr = 0x20;\\r\\n\\r\\nuint256 constant BasicOrder_basicOrderType_range = 0x18; // 24 values\\r\\n\\r\\n/*\\r\\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\\r\\n *  EIP712 data for ConsiderationItem\\r\\n *   - 0x80: ConsiderationItem EIP-712 typehash (constant)\\r\\n *   - 0xa0: itemType\\r\\n *   - 0xc0: token\\r\\n *   - 0xe0: identifier\\r\\n *   - 0x100: startAmount\\r\\n *   - 0x120: endAmount\\r\\n *   - 0x140: recipient\\r\\n */\\r\\nuint256 constant BasicOrder_considerationItem_typeHash_ptr = 0x80; // memoryPtr\\r\\nuint256 constant BasicOrder_considerationItem_itemType_ptr = 0xa0;\\r\\nuint256 constant BasicOrder_considerationItem_token_ptr = 0xc0;\\r\\nuint256 constant BasicOrder_considerationItem_identifier_ptr = 0xe0;\\r\\nuint256 constant BasicOrder_considerationItem_startAmount_ptr = 0x100;\\r\\nuint256 constant BasicOrder_considerationItem_endAmount_ptr = 0x120;\\r\\n// uint256 constant BasicOrder_considerationItem_recipient_ptr = 0x140;\\r\\n\\r\\n/*\\r\\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\\r\\n *  EIP712 data for OfferItem\\r\\n *   - 0x80:  OfferItem EIP-712 typehash (constant)\\r\\n *   - 0xa0:  itemType\\r\\n *   - 0xc0:  token\\r\\n *   - 0xe0:  identifier (reused for offeredItemsHash)\\r\\n *   - 0x100: startAmount\\r\\n *   - 0x120: endAmount\\r\\n */\\r\\nuint256 constant BasicOrder_offerItem_typeHash_ptr = DefaultFreeMemoryPointer;\\r\\nuint256 constant BasicOrder_offerItem_itemType_ptr = 0xa0;\\r\\nuint256 constant BasicOrder_offerItem_token_ptr = 0xc0;\\r\\n// uint256 constant BasicOrder_offerItem_identifier_ptr = 0xe0;\\r\\n// uint256 constant BasicOrder_offerItem_startAmount_ptr = 0x100;\\r\\nuint256 constant BasicOrder_offerItem_endAmount_ptr = 0x120;\\r\\n\\r\\n/*\\r\\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\\r\\n *  EIP712 data for Order\\r\\n *   - 0x80:   Order EIP-712 typehash (constant)\\r\\n *   - 0xa0:   orderParameters.offerer\\r\\n *   - 0xc0:   orderParameters.zone\\r\\n *   - 0xe0:   keccak256(abi.encodePacked(offerHashes))\\r\\n *   - 0x100:  keccak256(abi.encodePacked(considerationHashes))\\r\\n *   - 0x120:  orderType\\r\\n *   - 0x140:  startTime\\r\\n *   - 0x160:  endTime\\r\\n *   - 0x180:  zoneHash\\r\\n *   - 0x1a0:  salt\\r\\n *   - 0x1c0:  conduit\\r\\n *   - 0x1e0:  _counters[orderParameters.offerer] (from storage)\\r\\n */\\r\\nuint256 constant BasicOrder_order_typeHash_ptr = 0x80;\\r\\nuint256 constant BasicOrder_order_offerer_ptr = 0xa0;\\r\\n// uint256 constant BasicOrder_order_zone_ptr = 0xc0;\\r\\nuint256 constant BasicOrder_order_offerHashes_ptr = 0xe0;\\r\\nuint256 constant BasicOrder_order_considerationHashes_ptr = 0x100;\\r\\nuint256 constant BasicOrder_order_orderType_ptr = 0x120;\\r\\nuint256 constant BasicOrder_order_startTime_ptr = 0x140;\\r\\n// uint256 constant BasicOrder_order_endTime_ptr = 0x160;\\r\\n// uint256 constant BasicOrder_order_zoneHash_ptr = 0x180;\\r\\n// uint256 constant BasicOrder_order_salt_ptr = 0x1a0;\\r\\n// uint256 constant BasicOrder_order_conduitKey_ptr = 0x1c0;\\r\\nuint256 constant BasicOrder_order_counter_ptr = 0x1e0;\\r\\nuint256 constant BasicOrder_additionalRecipients_head_ptr = 0x240;\\r\\nuint256 constant BasicOrder_signature_ptr = 0x260;\\r\\n\\r\\n// Signature-related\\r\\nbytes32 constant EIP2098_allButHighestBitMask = (\\r\\n    0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\r\\n);\\r\\nbytes32 constant ECDSA_twentySeventhAndTwentyEighthBytesSet = (\\r\\n    0x0000000000000000000000000000000000000000000000000000000101000000\\r\\n);\\r\\nuint256 constant ECDSA_MaxLength = 65;\\r\\nuint256 constant ECDSA_signature_s_offset = 0x40;\\r\\nuint256 constant ECDSA_signature_v_offset = 0x60;\\r\\n\\r\\nbytes32 constant EIP1271_isValidSignature_selector = (\\r\\n    0x1626ba7e00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant EIP1271_isValidSignature_signatureHead_negativeOffset = 0x20;\\r\\nuint256 constant EIP1271_isValidSignature_digest_negativeOffset = 0x40;\\r\\nuint256 constant EIP1271_isValidSignature_selector_negativeOffset = 0x44;\\r\\nuint256 constant EIP1271_isValidSignature_calldata_baseLength = 0x64;\\r\\n\\r\\nuint256 constant EIP1271_isValidSignature_signature_head_offset = 0x40;\\r\\n\\r\\n// abi.encodeWithSignature(\\\"NoContract(address)\\\")\\r\\nuint256 constant NoContract_error_signature = (\\r\\n    0x5f15d67200000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant NoContract_error_sig_ptr = 0x0;\\r\\nuint256 constant NoContract_error_token_ptr = 0x4;\\r\\nuint256 constant NoContract_error_length = 0x24; // 4 + 32 == 36\\r\\n\\r\\nuint256 constant EIP_712_PREFIX = (\\r\\n    0x1901000000000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\n\\r\\nuint256 constant ExtraGasBuffer = 0x20;\\r\\nuint256 constant CostPerWord = 3;\\r\\nuint256 constant MemoryExpansionCoefficient = 0x200; // 512\\r\\n\\r\\nuint256 constant Create2AddressDerivation_ptr = 0x0b;\\r\\nuint256 constant Create2AddressDerivation_length = 0x55;\\r\\n\\r\\nuint256 constant MaskOverByteTwelve = (\\r\\n    0x0000000000000000000000ff0000000000000000000000000000000000000000\\r\\n);\\r\\n\\r\\nuint256 constant MaskOverLastTwentyBytes = (\\r\\n    0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff\\r\\n);\\r\\n\\r\\nuint256 constant MaskOverFirstFourBytes = (\\r\\n    0xffffffff00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\n\\r\\nuint256 constant Conduit_execute_signature = (\\r\\n    0x4ce34aa200000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\n\\r\\nuint256 constant MaxUint8 = 0xff;\\r\\nuint256 constant MaxUint120 = 0xffffffffffffffffffffffffffffff;\\r\\n\\r\\nuint256 constant Conduit_execute_ConduitTransfer_ptr = 0x20;\\r\\nuint256 constant Conduit_execute_ConduitTransfer_length = 0x01;\\r\\n\\r\\nuint256 constant Conduit_execute_ConduitTransfer_offset_ptr = 0x04;\\r\\nuint256 constant Conduit_execute_ConduitTransfer_length_ptr = 0x24;\\r\\nuint256 constant Conduit_execute_transferItemType_ptr = 0x44;\\r\\nuint256 constant Conduit_execute_transferToken_ptr = 0x64;\\r\\nuint256 constant Conduit_execute_transferFrom_ptr = 0x84;\\r\\nuint256 constant Conduit_execute_transferTo_ptr = 0xa4;\\r\\nuint256 constant Conduit_execute_transferIdentifier_ptr = 0xc4;\\r\\nuint256 constant Conduit_execute_transferAmount_ptr = 0xe4;\\r\\n\\r\\nuint256 constant OneConduitExecute_size = 0x104;\\r\\n\\r\\n// Sentinel value to indicate that the conduit accumulator is not armed.\\r\\nuint256 constant AccumulatorDisarmed = 0x20;\\r\\nuint256 constant AccumulatorArmed = 0x40;\\r\\nuint256 constant Accumulator_conduitKey_ptr = 0x20;\\r\\nuint256 constant Accumulator_selector_ptr = 0x40;\\r\\nuint256 constant Accumulator_array_offset_ptr = 0x44;\\r\\nuint256 constant Accumulator_array_length_ptr = 0x64;\\r\\n\\r\\nuint256 constant Accumulator_itemSizeOffsetDifference = 0x3c;\\r\\n\\r\\nuint256 constant Accumulator_array_offset = 0x20;\\r\\nuint256 constant Conduit_transferItem_size = 0xc0;\\r\\nuint256 constant Conduit_transferItem_token_ptr = 0x20;\\r\\nuint256 constant Conduit_transferItem_from_ptr = 0x40;\\r\\nuint256 constant Conduit_transferItem_to_ptr = 0x60;\\r\\nuint256 constant Conduit_transferItem_identifier_ptr = 0x80;\\r\\nuint256 constant Conduit_transferItem_amount_ptr = 0xa0;\\r\\n\\r\\n// Declare constant for errors related to amount derivation.\\r\\n// error InexactFraction() @ AmountDerivationErrors.sol\\r\\nuint256 constant InexactFraction_error_signature = (\\r\\n    0xc63cf08900000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant InexactFraction_error_len = 0x04;\\r\\n\\r\\n// Declare constant for errors related to signature verification.\\r\\nuint256 constant Ecrecover_precompile = 1;\\r\\nuint256 constant Ecrecover_args_size = 0x80;\\r\\nuint256 constant Signature_lower_v = 27;\\r\\n\\r\\n// error BadSignatureV(uint8) @ SignatureVerificationErrors.sol\\r\\nuint256 constant BadSignatureV_error_signature = (\\r\\n    0x1f003d0a00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant BadSignatureV_error_offset = 0x04;\\r\\nuint256 constant BadSignatureV_error_length = 0x24;\\r\\n\\r\\n// error InvalidSigner() @ SignatureVerificationErrors.sol\\r\\nuint256 constant InvalidSigner_error_signature = (\\r\\n    0x815e1d6400000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant InvalidSigner_error_length = 0x04;\\r\\n\\r\\n// error InvalidSignature() @ SignatureVerificationErrors.sol\\r\\nuint256 constant InvalidSignature_error_signature = (\\r\\n    0x8baa579f00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant InvalidSignature_error_length = 0x04;\\r\\n\\r\\n// error BadContractSignature() @ SignatureVerificationErrors.sol\\r\\nuint256 constant BadContractSignature_error_signature = (\\r\\n    0x4f7fb80d00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant BadContractSignature_error_length = 0x04;\\r\\n\\r\\nuint256 constant NumBitsAfterSelector = 0xe0;\\r\\n\\r\\n// 69 is the lowest modulus for which the remainder\\r\\n// of every selector other than the two match functions\\r\\n// is greater than those of the match functions.\\r\\nuint256 constant NonMatchSelector_MagicModulus = 69;\\r\\n// Of the two match function selectors, the highest\\r\\n// remainder modulo 69 is 29.\\r\\nuint256 constant NonMatchSelector_MagicRemainder = 0x1d;\\r\\n\",\"keccak256\":\"0x1b14d9576e020dd9ebff527c527dffef06a9bb5fe42b9e9ffc6bf8bcde3201e4\",\"license\":\"MIT\"},\"contracts/loan/LoanAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport { AmountDeriver } from \\\"../lib/AmountDeriver.sol\\\";\\r\\nimport \\\"../PeriFiAdmin.sol\\\";\\r\\nimport \\\"./LoanAuctionEnums.sol\\\";\\r\\nimport \\\"./LoanAuctionEventsAndErrors.sol\\\";\\r\\nimport \\\"./LoanAuctionStructs.sol\\\";\\r\\nimport \\\"./LoanRepaymentCalculator.sol\\\";\\r\\nimport \\\"../vault/Vault.sol\\\";\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract LoanAuction is MWOwnable, ReentrancyGuard, AmountDeriver, LoanAuctionEventsAndErrors {\\r\\n    uint256 public auctionCount = 0;\\r\\n    mapping(uint256 => Auction) public auctions;\\r\\n    mapping(uint256 => AuctionStatus) public status;\\r\\n    mapping(uint256 => uint256) public bidAmounts;\\r\\n    mapping(uint256 => address) public bidders;\\r\\n    address public periFiAdminAddr;\\r\\n    address public loanRepaymentAddr;\\r\\n    uint256 public decrementInterval = 1 days;\\r\\n\\r\\n    constructor(address _periFiAdminAddr, address _loanRepaymentAddr) {\\r\\n        periFiAdminAddr = _periFiAdminAddr;\\r\\n        loanRepaymentAddr = _loanRepaymentAddr;\\r\\n    }\\r\\n\\r\\n    // display current price\\r\\n\\r\\n    // display price for borrower\\r\\n\\r\\n    function beginAuction(\\r\\n        AuctionParameters calldata params\\r\\n    ) external onlyOwner nonReentrant {\\r\\n        Auction memory auction = Auction({\\r\\n            id: auctionCount,\\r\\n            protectedUntil: 0,\\r\\n            parameters: params\\r\\n        });\\r\\n        \\r\\n        address owner = IERC721(params.tokenAddress).ownerOf(params.tokenId);\\r\\n\\r\\n        // We will assume auction contract will hold the defaulted collateral for ease of use.\\r\\n        if (owner != address(this)) {\\r\\n            revert CollateralOwnershipNotTransferred();\\r\\n        }\\r\\n\\r\\n        if (params.startAmount <= params.endAmount) {\\r\\n            revert InvalidPriceRange(params.startAmount, params.endAmount);\\r\\n        }\\r\\n\\r\\n        if (params.startTime >= params.endTime) {\\r\\n            revert InvalidTimeRange(params.startTime, params.endTime);\\r\\n        }\\r\\n\\r\\n        if (block.timestamp >= params.endTime) {\\r\\n            revert InvalidTimeRange(params.startTime, params.endTime);\\r\\n        }\\r\\n\\r\\n        if (params.stepDownConfig.length != 0) {\\r\\n            validateStepDownConfig(params.startTime, params.endTime, params.stepDownConfig);\\r\\n        }\\r\\n\\r\\n        // set liquidation protection expiration\\r\\n        if (params.isProtected){\\r\\n            uint256 protection = PeriFiAdmin(periFiAdminAddr).liquidateProtectionDuration();\\r\\n            auction.protectedUntil = params.startTime + protection;\\r\\n        }\\r\\n\\r\\n        auctions[auctionCount] = auction;\\r\\n        status[auctionCount] = AuctionStatus.Registered;\\r\\n        auctionCount += 1;\\r\\n        emit LoanAuctionBegun(auction.id, params.loanId, params.tokenAddress, params.paymentToken,\\r\\n            params.loanBorrower, params.tokenId, params.startAmount, params.endAmount,\\r\\n            params.startTime, params.endTime, auction.protectedUntil, params.loanRepaymentAmount,\\r\\n            params.stepDownConfig);\\r\\n    }\\r\\n\\r\\n    function makeBid(uint256 auctionId) external nonReentrant returns (bool completed) {\\r\\n        if (status[auctionId] != AuctionStatus.Registered) {\\r\\n            revert AuctionInvalidStatus(auctionId, status[auctionId]);\\r\\n        }\\r\\n\\r\\n        uint256 currentPrice = currentBidPrice(auctionId);\\r\\n\\r\\n        Auction memory item = auctions[auctionId];\\r\\n        AuctionParameters memory params = item.parameters;\\r\\n\\r\\n        if (item.protectedUntil > block.timestamp) {\\r\\n            // hold the asset until the protection period is over\\r\\n            IERC20(params.paymentToken).transferFrom(msg.sender, address(this), currentPrice);\\r\\n            bidders[auctionId] = msg.sender;\\r\\n            status[auctionId] = AuctionStatus.Protected;\\r\\n            bidAmounts[auctionId] = currentPrice;\\r\\n            emit LoanAuctionSoldAndProtected(auctionId, msg.sender, params.loanBorrower, currentPrice);\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        IERC721(params.tokenAddress).transferFrom(address(this), msg.sender, params.tokenId);\\r\\n        \\r\\n        // transfer erc20 from this contract to all the recipients\\r\\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(loanRepaymentAddr);\\r\\n        Repayment[] memory repayments = calculator.getDestinations(\\r\\n            params.loanId, \\r\\n            params.loanRepaymentAmount,\\r\\n            params.loanAmount,\\r\\n            params.lender);\\r\\n        address insuranceVaultAddr = calculator.insuranceVaultAddress();\\r\\n        IERC20 erc20 = IERC20(params.paymentToken);\\r\\n        uint256 bidAmountLeft = currentPrice;\\r\\n        uint256 insuranceLeft = erc20.balanceOf(insuranceVaultAddr);\\r\\n        uint repaymentLength = repayments.length;\\r\\n        for (uint idx = 0; idx < repaymentLength; idx++) {\\r\\n            Repayment memory repaymentItem = repayments[idx];\\r\\n            uint256 paymentLeft = repaymentItem.value;\\r\\n\\r\\n            // cover the repayment from deposit amount from bid\\r\\n            if (bidAmountLeft > 0) {\\r\\n                if (bidAmountLeft >= paymentLeft) {\\r\\n                    console.log('sending from %s to %s, %s', msg.sender, repaymentItem.targetAddress, paymentLeft);\\r\\n                    erc20.transferFrom(msg.sender, repaymentItem.targetAddress, paymentLeft);\\r\\n                    bidAmountLeft -= paymentLeft;\\r\\n                    continue;\\r\\n                }\\r\\n                console.log('sending partial from %s to %s, %s', msg.sender,repaymentItem.targetAddress, bidAmountLeft);\\r\\n                erc20.transferFrom(msg.sender, repaymentItem.targetAddress, bidAmountLeft);\\r\\n                paymentLeft -= bidAmountLeft;\\r\\n                bidAmountLeft = 0;\\r\\n            }\\r\\n            if (insuranceVaultAddr == repaymentItem.targetAddress) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            // if not guaranteed, next\\r\\n            if (!repaymentItem.guaranteed) {\\r\\n                continue;\\r\\n            }\\r\\n            // if guaranteed, pay with insurance\\r\\n            if (insuranceLeft >= paymentLeft) {\\r\\n                console.log('sending from IV to %s, %s',repaymentItem.targetAddress, paymentLeft);\\r\\n                \\r\\n                Vault(payable(insuranceVaultAddr)).transferERC20(params.paymentToken, repaymentItem.targetAddress, paymentLeft);\\r\\n                insuranceLeft -= paymentLeft;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            // if insurance can't cover the current payment, pay what it has, and stop\\r\\n            if (insuranceLeft > 0){\\r\\n                console.log('sending partial from IV to %s, %s',repaymentItem.targetAddress, insuranceLeft);\\r\\n                Vault(payable(insuranceVaultAddr)).transferERC20(params.paymentToken, repaymentItem.targetAddress, insuranceLeft);\\r\\n            }\\r\\n            break;\\r\\n        }\\r\\n        if (bidAmountLeft > 0) {\\r\\n            console.log('sending from %s to %s, %s', msg.sender, params.loanBorrower, bidAmountLeft);\\r\\n            erc20.transferFrom(msg.sender, params.loanBorrower, bidAmountLeft);\\r\\n        }\\r\\n        emit LoanAuctionSoldToBidder(auctionId, msg.sender, currentPrice);\\r\\n        status[auctionId] = AuctionStatus.SoldToBidder;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function claim(uint256 auctionId) external nonReentrant {\\r\\n        if (status[auctionId] != AuctionStatus.Protected) {\\r\\n            revert AuctionInvalidStatus(auctionId, status[auctionId]);\\r\\n        }\\r\\n\\r\\n        Auction memory item = auctions[auctionId];\\r\\n\\r\\n        AuctionParameters memory params = item.parameters;\\r\\n        \\r\\n        if (block.timestamp < item.protectedUntil) {\\r\\n            revert ProtectionNotOver();\\r\\n        }\\r\\n\\r\\n        IERC721(params.tokenAddress).transferFrom(address(this), msg.sender, params.tokenId);\\r\\n        status[auctionId] = AuctionStatus.SoldToBidder;\\r\\n        uint256 bidAmount = bidAmounts[auctionId];\\r\\n        address bidder = bidders[auctionId];\\r\\n\\r\\n        // transfer erc20 from this contract to all the recipients\\r\\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(loanRepaymentAddr);\\r\\n        Repayment[] memory repayments = calculator.getDestinations(\\r\\n            params.loanId, \\r\\n            params.loanRepaymentAmount,\\r\\n            params.loanAmount,\\r\\n            params.lender);\\r\\n\\r\\n        address insuranceVaultAddr = calculator.insuranceVaultAddress();\\r\\n        IERC20 erc20 = IERC20(params.paymentToken);\\r\\n        uint256 bidAmountLeft = bidAmount;\\r\\n        uint256 insuranceLeft = erc20.balanceOf(insuranceVaultAddr);\\r\\n        uint repaymentLength = repayments.length;\\r\\n        for (uint idx = 0; idx < repaymentLength; idx++) {\\r\\n            Repayment memory repaymentItem = repayments[idx];\\r\\n            uint256 paymentLeft = repaymentItem.value;\\r\\n\\r\\n            // cover the repayment from deposit amount from bid\\r\\n            if (bidAmountLeft > 0) {\\r\\n                if (bidAmountLeft >= paymentLeft) {\\r\\n                    console.log('sending from %s to %s, %s', address(this), repaymentItem.targetAddress, paymentLeft);\\r\\n                    erc20.transfer(repaymentItem.targetAddress, paymentLeft);\\r\\n                    bidAmountLeft -= paymentLeft;\\r\\n                    continue;\\r\\n                }\\r\\n                console.log('sending partial from %s to %s, %s', address(this),repaymentItem.targetAddress, bidAmountLeft);\\r\\n                erc20.transfer(repaymentItem.targetAddress, bidAmountLeft);\\r\\n                paymentLeft -= bidAmountLeft;\\r\\n                bidAmountLeft = 0;\\r\\n            }\\r\\n            if (insuranceVaultAddr == repaymentItem.targetAddress) {\\r\\n                continue;\\r\\n            }\\r\\n            // if not guaranteed, next\\r\\n            if (!repaymentItem.guaranteed) {\\r\\n                continue;\\r\\n            }\\r\\n            // if guaranteed, pay with insurance\\r\\n            if (insuranceLeft >= paymentLeft) {\\r\\n                console.log('sending from IV to %s, %s',repaymentItem.targetAddress, paymentLeft);\\r\\n                Vault(payable(insuranceVaultAddr)).transferERC20(params.paymentToken, repaymentItem.targetAddress, paymentLeft);\\r\\n                insuranceLeft -= paymentLeft;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            // if insurance can't cover the current payment, pay what it has, and stop\\r\\n            if (insuranceLeft > 0){\\r\\n                console.log('sending partial from IV to %s, %s',repaymentItem.targetAddress, insuranceLeft);\\r\\n                Vault(payable(insuranceVaultAddr)).transferERC20(params.paymentToken, repaymentItem.targetAddress, insuranceLeft);\\r\\n            }\\r\\n            break;\\r\\n        }\\r\\n        if (bidAmountLeft > 0) {\\r\\n            console.log('sending from %s to %s, %s', address(this), params.loanBorrower, bidAmountLeft);\\r\\n            erc20.transfer(params.loanBorrower, bidAmountLeft);\\r\\n        }\\r\\n        emit LoanAuctionSoldToBidder(auctionId, bidder, bidAmount);\\r\\n    }\\r\\n    \\r\\n\\r\\n    function payout(uint256 auctionId) external nonReentrant {\\r\\n        AuctionStatus currentStatus = status[auctionId];\\r\\n        \\r\\n        if (currentStatus != AuctionStatus.Registered\\r\\n            && currentStatus != AuctionStatus.Protected) {\\r\\n            revert AuctionInvalidStatus(auctionId, currentStatus);\\r\\n        }\\r\\n\\r\\n        Auction memory item = auctions[auctionId];\\r\\n        AuctionParameters memory params = item.parameters;\\r\\n\\r\\n        if (msg.sender != params.loanBorrower) {\\r\\n            revert NotAuthorized();\\r\\n        }\\r\\n\\r\\n        // check auction's protection period has been expired\\r\\n        if (block.timestamp > item.protectedUntil) {\\r\\n            revert ProtectionOver();\\r\\n        }\\r\\n\\r\\n        uint256 repayment = params.loanRepaymentAmount;\\r\\n        uint256 penalty = 0;\\r\\n        if (currentStatus == AuctionStatus.Protected) {\\r\\n            uint bidAmount = bidAmounts[auctionId];\\r\\n            penalty = bidAmount * 5 / 100;\\r\\n            IERC20(params.paymentToken).transferFrom(msg.sender, bidders[auctionId], penalty);\\r\\n            IERC20(params.paymentToken).transfer(bidders[auctionId], bidAmount);\\r\\n            bidAmounts[auctionId] = 0;\\r\\n        }\\r\\n        uint256 fullRepayment = repayment + penalty;\\r\\n        IERC721(params.tokenAddress).transferFrom(address(this), msg.sender, params.tokenId);\\r\\n        \\r\\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(loanRepaymentAddr);\\r\\n        Repayment[] memory repayments = calculator.getDestinations(\\r\\n            params.loanId, \\r\\n            params.loanRepaymentAmount,\\r\\n            params.loanAmount,\\r\\n            params.lender);\\r\\n        IERC20 erc20 = IERC20(params.paymentToken);\\r\\n        uint repaymentLength = repayments.length;\\r\\n        for (uint idx = 0; idx < repaymentLength; idx++) {\\r\\n            Repayment memory repaymentItem = repayments[idx];\\r\\n            erc20.transferFrom(msg.sender, repaymentItem.targetAddress, repaymentItem.value);\\r\\n        }\\r\\n        status[auctionId] = AuctionStatus.SoldToBorrower;\\r\\n        emit LoanAuctionCancelledByPayout(auctionId, msg.sender, fullRepayment);\\r\\n    }\\r\\n\\r\\n    function currentDebt(uint256 auctionId) public view returns (uint256 debt) {\\r\\n        AuctionStatus currentStatus = status[auctionId];\\r\\n        \\r\\n        if (currentStatus != AuctionStatus.Registered\\r\\n            && currentStatus != AuctionStatus.Protected) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        Auction memory item = auctions[auctionId];\\r\\n        AuctionParameters memory params = item.parameters;\\r\\n\\r\\n        if (msg.sender != params.loanBorrower) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 repayment = params.loanRepaymentAmount;\\r\\n        uint256 penalty = 0;\\r\\n        if (currentStatus == AuctionStatus.Protected) {\\r\\n            uint bidAmount = bidAmounts[auctionId];\\r\\n            penalty = bidAmount * 5 / 100;\\r\\n        }\\r\\n        return repayment + penalty;\\r\\n    }\\r\\n    \\r\\n    function currentBidPrice(uint256 auctionId) public view returns (uint256 amount) {\\r\\n        if (status[auctionId] != AuctionStatus.Registered) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        Auction memory item = auctions[auctionId];\\r\\n        AuctionParameters memory params = item.parameters;\\r\\n        if (params.stepDownConfig.length == 0) {\\r\\n            // no stepDown\\r\\n            return _locateCurrentAmount(\\r\\n                params.startAmount, \\r\\n                params.endAmount, \\r\\n                params.startTime, \\r\\n                params.endTime, \\r\\n                true\\r\\n            );\\r\\n        } \\r\\n\\r\\n        // stepDown\\r\\n        return _locateCurrentStepDownAmount(\\r\\n            params.startAmount,\\r\\n            params.endAmount,\\r\\n            params.startTime,\\r\\n            params.stepDownConfig,\\r\\n            true\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function validateStepDownConfig(\\r\\n        uint256 startTime,\\r\\n        uint256 endTime,\\r\\n        bytes memory config\\r\\n    ) internal view {\\r\\n        if (config.length <= 0) {\\r\\n            revert InvalidStepDownConfig();\\r\\n        }\\r\\n\\r\\n        uint accDecrement;\\r\\n        uint8 actualLength;\\r\\n        uint length = config.length;\\r\\n        for (uint idx = 0; idx < length; idx++){\\r\\n            uint8 decrement = uint8(config[idx]);\\r\\n            if (decrement == 255) {\\r\\n                break;\\r\\n            }\\r\\n            accDecrement += decrement;\\r\\n            actualLength++;\\r\\n        }\\r\\n\\r\\n        uint256 duration = endTime - startTime;\\r\\n        uint256 minDuration = uint256(actualLength * decrementInterval);\\r\\n        uint256 maxDuration = uint256((actualLength+2) * decrementInterval);\\r\\n        if (duration <= minDuration) {\\r\\n            revert StepDownConfigAndAuctionTimeMismatch();\\r\\n        }\\r\\n        if (duration >= maxDuration) {\\r\\n            revert StepDownConfigAndAuctionTimeMismatch();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateDecrementInterval(uint256 intervalInSec) public {\\r\\n        require(intervalInSec != 0, \\\"interval must be non-zero value\\\");\\r\\n        decrementInterval = intervalInSec;\\r\\n    }\\r\\n\\r\\n    function _locateCurrentStepDownAmount(\\r\\n        uint256 startAmount,\\r\\n        uint256 endAmount,\\r\\n        uint256 startTime,\\r\\n        bytes memory stepDownConfig,\\r\\n        bool roundUp\\r\\n    ) internal view returns (uint256 amount) {\\r\\n        // Only modify end amount if it doesn't already equal start amount.\\r\\n        if (startAmount != endAmount) {\\r\\n            // Declare variables to derive in the subsequent unchecked scope.\\r\\n            uint256 duration;\\r\\n            uint256 elapsed;\\r\\n            uint256 remaining;\\r\\n\\r\\n            uint256 elapsedTs;\\r\\n            uint accDecrement;\\r\\n            uint totalDecrement;\\r\\n            // Skip underflow checks as startTime <= block.timestamp < endTime.\\r\\n            unchecked {\\r\\n                // Derive the duration for the order and place it on the stack.\\r\\n                // duration = endTime - startTime;\\r\\n\\r\\n                // Derive time elapsed since the order started & place on stack.\\r\\n                elapsedTs = block.timestamp - startTime;\\r\\n\\r\\n                // Derive time remaining until order expires and place on stack.\\r\\n                // remaining = duration - elapsed;\\r\\n            }\\r\\n            uint256 daysPassed = elapsedTs / decrementInterval;\\r\\n            uint length = stepDownConfig.length;\\r\\n            for (uint idx = 0; idx < length; idx++){\\r\\n                uint8 decrement = uint8(stepDownConfig[idx]);\\r\\n                if (decrement == 255) {\\r\\n                    break;\\r\\n                }\\r\\n                if (idx < daysPassed) {\\r\\n                    accDecrement += decrement;\\r\\n                }\\r\\n                totalDecrement += decrement;\\r\\n            }\\r\\n            duration = totalDecrement;\\r\\n            elapsed = accDecrement;\\r\\n            remaining = duration - elapsed;\\r\\n            // Aggregate new amounts weighted by time with rounding factor.\\r\\n            uint256 totalBeforeDivision = ((startAmount * remaining) +\\r\\n                (endAmount * elapsed));\\r\\n\\r\\n            // Use assembly to combine operations and skip divide-by-zero check.\\r\\n            assembly {\\r\\n                // Multiply by iszero(iszero(totalBeforeDivision)) to ensure\\r\\n                // amount is set to zero if totalBeforeDivision is zero,\\r\\n                // as intermediate overflow can occur if it is zero.\\r\\n                amount := mul(\\r\\n                    iszero(iszero(totalBeforeDivision)),\\r\\n                    // Subtract 1 from the numerator and add 1 to the result if\\r\\n                    // roundUp is true to get the proper rounding direction.\\r\\n                    // Division is performed with no zero check as duration\\r\\n                    // cannot be zero as long as startTime < endTime.\\r\\n                    add(\\r\\n                        div(sub(totalBeforeDivision, roundUp), duration),\\r\\n                        roundUp\\r\\n                    )\\r\\n                )\\r\\n            }\\r\\n\\r\\n            // Return the current amount.\\r\\n            return amount;\\r\\n        }\\r\\n\\r\\n        // Return the original amount as startAmount == endAmount.\\r\\n        return endAmount;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x2bd8d61bb692cfe073868d721365f34571ae2843105d693892ac71cfbbe3e0dd\",\"license\":\"MIT\"},\"contracts/loan/LoanAuctionEnums.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\nenum AuctionStatus {\\r\\n    NotRegistered,\\r\\n    Registered,\\r\\n    Protected,\\r\\n    SoldToBidder,\\r\\n    SoldToBorrower\\r\\n}\\r\\n\\r\\nenum RecipientType {\\r\\n    LendingPool,\\r\\n    Lender,\\r\\n    Commission,\\r\\n    Borrower\\r\\n}\",\"keccak256\":\"0xba2ef7a8ce89271cf196f313419eab308a84850879002622c664e672d912f3a4\",\"license\":\"MIT\"},\"contracts/loan/LoanAuctionEventsAndErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\nimport \\\"./LoanAuctionEnums.sol\\\";\\r\\n\\r\\ninterface LoanAuctionEventsAndErrors{\\r\\n    error InvalidStepDownConfig();\\r\\n    error StepDownConfigOverflow();\\r\\n    error IncompleteStepDownConfig();\\r\\n    error StepDownConfigAndAuctionTimeMismatch();\\r\\n    \\r\\n    error CollateralOwnershipNotTransferred();\\r\\n    error AuctionInvalidStatus(uint256 auctionId, AuctionStatus status);\\r\\n    error AuctionNotRegistered();\\r\\n    error ProtectionNotOver();\\r\\n    error ProtectionOver();\\r\\n    error InvalidPriceRange(uint256 startAmount, uint256 endAmount);\\r\\n    error InvalidTimeRange(uint256 startTime, uint256 endTime);\\r\\n    error NotAuthorized();\\r\\n\\r\\n    event LoanAuctionBegun(uint256 indexed auctionId, uint256 loanId, \\r\\n        address tokenAddr, address paymentToken, \\r\\n        address loanBorrower, uint256 tokenId, uint256 startAmount, uint256 endAmount,\\r\\n        uint256 startTime, uint256 endTime, uint256 protectedUntil, uint256 loanRepaymentAmount,\\r\\n        bytes stepDownConfig);\\r\\n    event LoanAuctionSoldAndProtected(uint256 indexed auctionId, address bidder, address borrower, uint256 bidAmount);\\r\\n    event LoanAuctionSoldToBidder(uint256 indexed auctionId, address bidder, uint256 bidAmount);\\r\\n    event LoanAuctionCancelledByPayout(uint256 indexed auctionId, address borrower, uint256 payout);\\r\\n}\",\"keccak256\":\"0x8c5757fb16cd612b72114303bd0ae5401d524d5f77d01a77718f126ac0c3815d\",\"license\":\"MIT\"},\"contracts/loan/LoanAuctionStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\nimport \\\"./LoanAuctionEnums.sol\\\";\\r\\n\\r\\nstruct AuctionParameters {\\r\\n    uint256 loanId;\\r\\n    address tokenAddress;\\r\\n    address paymentToken;\\r\\n    uint256 tokenId;\\r\\n    uint256 startAmount;\\r\\n    uint256 endAmount;\\r\\n    uint256 startTime;\\r\\n    uint256 endTime;\\r\\n    bytes stepDownConfig;\\r\\n    address loanBorrower;\\r\\n    uint256 loanAmount;\\r\\n    uint256 loanRepaymentAmount;\\r\\n    address lender;\\r\\n    bool isProtected;\\r\\n}\\r\\n\\r\\n\\r\\nstruct PaymentRecipients {\\r\\n    address recipient;\\r\\n    uint256 amount;\\r\\n    RecipientType recipientType;\\r\\n}\\r\\n\\r\\nstruct Auction {\\r\\n    uint256 id;\\r\\n    uint256 protectedUntil;\\r\\n    AuctionParameters parameters;\\r\\n}\",\"keccak256\":\"0x0593c2a7a4f3cd6ccfb9f508f9b64b88c1b7bcac30df95e70c31aeb20ea1cd31\",\"license\":\"MIT\"},\"contracts/loan/LoanRepaymentCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\nimport \\\"../PeriFiAdmin.sol\\\";\\r\\nimport \\\"../vault/LendingPool.sol\\\";\\r\\n\\r\\nenum DestinationType {\\r\\n    Pool,\\r\\n    Lender,\\r\\n    InsuranceVault,\\r\\n    Commission,\\r\\n    CurationRewardPool\\r\\n}\\r\\n\\r\\nstruct Repayment {\\r\\n    address targetAddress;\\r\\n    uint256 value;\\r\\n    bool guaranteed;\\r\\n}\\r\\n\\r\\n\\r\\ncontract LoanRepaymentCalculator {\\r\\n    address public insuranceVaultAddress;\\r\\n    address public lendingPoolAddress;\\r\\n    address public masterWalletAddress;\\r\\n    address public periFiAdminAddress;\\r\\n    address public curationRewardPoolAddress;\\r\\n\\r\\n    constructor(\\r\\n        address _insuranceVaultAddress,\\r\\n        address _lendingPoolAddress,\\r\\n        address _masterWalletAddress,\\r\\n        address _periFiAdminAddress,\\r\\n        address _curationRewardPoolAddress) {\\r\\n        insuranceVaultAddress = _insuranceVaultAddress;\\r\\n        lendingPoolAddress = _lendingPoolAddress;\\r\\n        masterWalletAddress = _masterWalletAddress;\\r\\n        periFiAdminAddress = _periFiAdminAddress;\\r\\n        curationRewardPoolAddress = _curationRewardPoolAddress;\\r\\n    }\\r\\n\\r\\n    function getDestinations(\\r\\n        uint256 loanId,\\r\\n        uint256 repaymentAmount, \\r\\n        uint256 loanAmount,\\r\\n        address lender\\r\\n    ) external view returns (Repayment[] memory results) {\\r\\n        uint256 interestDue = repaymentAmount - loanAmount;\\r\\n\\r\\n        LendingPool lendingPool = LendingPool(payable(lendingPoolAddress));\\r\\n        uint256 leverageAmount = lendingPool.loanToLeverage(loanId);\\r\\n\\r\\n        // if there is no interest\\r\\n        if (interestDue == 0) {\\r\\n            if (leverageAmount == 0){\\r\\n                results = new Repayment[](1);\\r\\n                results[0] = Repayment(lender, loanAmount, false);\\r\\n            } else {\\r\\n                results = new Repayment[](2);\\r\\n                results[0] = Repayment(lendingPoolAddress, leverageAmount, true);\\r\\n                results[1] = Repayment(lender, loanAmount - leverageAmount, false);\\r\\n            }\\r\\n            return results;\\r\\n        }\\r\\n\\r\\n        uint256 interestForPool = interestDue * leverageAmount / loanAmount;\\r\\n        uint256 interestForLender = interestDue - interestForPool;\\r\\n        uint256 loanAmountByLender = loanAmount - leverageAmount;\\r\\n\\r\\n        uint256 lenderForIFL;\\r\\n        uint256 commissionForIFL;\\r\\n        uint256 curationRewardForIFL;\\r\\n\\r\\n        (\\r\\n            lenderForIFL, \\r\\n            commissionForIFL, \\r\\n            curationRewardForIFL\\r\\n        ) = distributeIFL(interestForLender);\\r\\n\\r\\n        if (leverageAmount == 0) {\\r\\n            // no leverage Used, only need to get InterestForLender (IFL)\\r\\n            results = new Repayment[](3);\\r\\n            results[0] = Repayment(lender, loanAmountByLender + lenderForIFL, false);\\r\\n            results[1] = Repayment(masterWalletAddress, commissionForIFL, false);\\r\\n            results[2] = Repayment(curationRewardPoolAddress, curationRewardForIFL, true);\\r\\n        } else {\\r\\n            PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddress);\\r\\n\\r\\n            uint256 poolUsageInBasisPoints = lendingPool.loanToPoolUsageInBasisPoint(loanId);\\r\\n            uint256 ivCommissionForIFP = periFiAdmin.ivCommissionForIFP();\\r\\n\\r\\n            uint256 commissionBasisPoint = poolCommissionInBasisPointByPoolUsage(poolUsageInBasisPoints);\\r\\n            \\r\\n            uint256 poolForIFP = interestForPool * commissionBasisPoint / 10000;\\r\\n            uint256 insuranceVaultForIFP = interestForPool * ivCommissionForIFP / 10000;\\r\\n            uint256 lenderForIFP = interestForPool - (poolForIFP + insuranceVaultForIFP);\\r\\n\\r\\n            results = new Repayment[](7);\\r\\n            results[0] = Repayment(lendingPoolAddress, leverageAmount, true);\\r\\n            results[1] = Repayment(lender, loanAmountByLender, false);\\r\\n            results[2] = Repayment(lendingPoolAddress, poolForIFP, false);\\r\\n            results[3] = Repayment(lender, lenderForIFP + lenderForIFL, false);\\r\\n            results[4] = Repayment(curationRewardPoolAddress, curationRewardForIFL, true);\\r\\n            results[5] = Repayment(insuranceVaultAddress, insuranceVaultForIFP, false);\\r\\n            results[6] = Repayment(masterWalletAddress, commissionForIFL, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function distributeIFL(\\r\\n        uint256 interestForLender) internal view returns (\\r\\n            uint256 lenderForIFL,\\r\\n            uint256 commissionForIFL,\\r\\n            uint256 curationRewardForIFL\\r\\n        ) {\\r\\n            PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddress);\\r\\n            uint256 commissionInBasisPoints = periFiAdmin.commissionForIFL();\\r\\n            if (commissionInBasisPoints < 100) {\\r\\n                commissionInBasisPoints = 100; // to ensure curation reward commission\\r\\n            }\\r\\n            // no leverage Used, only need to get InterestForLender (IFL)\\r\\n            uint256 totalCommission = interestForLender * commissionInBasisPoints / 10000;\\r\\n            curationRewardForIFL = interestForLender / 100; // take 1%\\r\\n            commissionForIFL = totalCommission - curationRewardForIFL;\\r\\n            lenderForIFL = interestForLender - totalCommission;\\r\\n        }\\r\\n\\r\\n    function poolCommissionInBasisPointByPoolUsage(uint256 poolUsageInBasisPoints) internal view returns (uint256 basisPoint) {\\r\\n            PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddress);\\r\\n            if (poolUsageInBasisPoints <= 2000) {\\r\\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo20();\\r\\n            }\\r\\n            else if (poolUsageInBasisPoints <= 3000) {\\r\\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo30();\\r\\n            }\\r\\n            else if (poolUsageInBasisPoints <= 4000) {\\r\\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo40();\\r\\n            }\\r\\n            else if (poolUsageInBasisPoints <= 5000) {\\r\\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo50();\\r\\n            }\\r\\n            else if (poolUsageInBasisPoints <= 6000) {\\r\\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo60();\\r\\n            }\\r\\n            else if (poolUsageInBasisPoints <= 7000) {\\r\\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo70();\\r\\n            }\\r\\n            else if (poolUsageInBasisPoints <= 8000) {\\r\\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo80();\\r\\n            }\\r\\n            else if (poolUsageInBasisPoints <= 9000) {\\r\\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo90();\\r\\n            }\\r\\n            else {\\r\\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo100();\\r\\n            }\\r\\n            return basisPoint;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xeb2182c99a31800a820c1fb530c5aa807c7e17704c9a920802facd2ac80ef799\",\"license\":\"MIT\"},\"contracts/vault/LendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\nimport \\\"./Vault.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nerror NotSufficientBalanceInPool(uint256 loanId, uint256 balance, uint256 requested);\\r\\nerror IllegalLeverageAccess(address sender, uint256 loanId, uint256 requested);\\r\\nerror AlreadyLeveragedLoan(uint256 loanId);\\r\\ncontract LendingPool is Vault, ReentrancyGuard {\\r\\n\\r\\n    constructor(string memory name) Vault(name) {\\r\\n    }\\r\\n\\r\\n    address public loanAddress;\\r\\n\\r\\n    mapping (uint256 => bool) public leveragedLoan;\\r\\n\\r\\n    mapping (uint256 => uint256) public loanToLeverage;\\r\\n\\r\\n    mapping (uint256 => uint256) public loanToPoolUsageInBasisPoint;\\r\\n\\r\\n    function leverageLoan(\\r\\n        uint256 loanId, \\r\\n        address paymentToken, \\r\\n        uint256 leveragedAmount, \\r\\n        address borrower) external nonReentrant onlyRole(\\\"spender\\\") {\\r\\n        if (leveragedLoan[loanId]) {\\r\\n            revert AlreadyLeveragedLoan(loanId);\\r\\n        }\\r\\n\\r\\n        if (leveragedAmount == 0) {\\r\\n            leveragedLoan[loanId] = true;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IERC20 erc20 = IERC20(paymentToken);\\r\\n        uint256 balance = erc20.balanceOf(address(this));\\r\\n\\r\\n        if (balance < leveragedAmount) {\\r\\n            revert NotSufficientBalanceInPool(loanId, balance, leveragedAmount);\\r\\n        }\\r\\n\\r\\n        erc20.transfer(borrower, leveragedAmount);\\r\\n        uint256 poolUsageInBasisPoint = (leveragedAmount * 10000) / balance;\\r\\n        loanToLeverage[loanId] = leveragedAmount;\\r\\n        loanToPoolUsageInBasisPoint[loanId] = poolUsageInBasisPoint;\\r\\n        leveragedLoan[loanId] = true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x99f75900c0909faf88c855b9de75eba27fd47117ae29a144c9db3a3c0c5e7411\",\"license\":\"MIT\"},\"contracts/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\r\\n\\r\\ncontract Vault is SimpleRoleAccess {\\r\\n    bytes4 private ERC1155_INTERFACE_ID = 0xd9b67a26;\\r\\n    string public name;\\r\\n\\r\\n    mapping(address => bool) public authorizedOperators;\\r\\n    mapping(address => bool) public authorizedSpenders;\\r\\n    // Balance name => token => amount\\r\\n    mapping(string => mapping(address => uint256)) public namedBalances;\\r\\n\\r\\n    constructor(string memory _name) {\\r\\n        name = _name;\\r\\n    }\\r\\n\\r\\n    function approveERC20Transfer(\\r\\n        address _tokenAddress,\\r\\n        address _spender,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.approve(_spender, _amount);\\r\\n    }\\r\\n\\r\\n    function transferERC20(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.transfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function setERC721ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function transferERC721(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.transferFrom(address(this), _to, _tokenId);\\r\\n    }\\r\\n\\r\\n    function transferERC1155(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeTransferFrom(address(this), _to, _id, _value, _data);\\r\\n    }\\r\\n\\r\\n    function transferERC1155Batch(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeBatchTransferFrom(address(this), _to, _ids, _values, _data);\\r\\n    }\\r\\n\\r\\n    function setERC1155ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function getNativeBalance() external view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function transferNative(address payable _to, uint256 _amount)\\r\\n        public\\r\\n        payable\\r\\n        onlyRole(\\\"spender\\\")\\r\\n    {\\r\\n        (bool sent, ) = _to.call{ value: _amount }(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n\\r\\n    function burn(address _token, uint256 _amount) public onlyRole(\\\"spender\\\") {\\r\\n        ERC20Burnable(_token).burn(_amount);\\r\\n    }\\r\\n\\r\\n    function namedBalanceReceive(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        namedBalances[_name][_token] += _amount;\\r\\n    }\\r\\n\\r\\n    function namedBalanceSpend(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        require(\\r\\n            namedBalances[_name][_token] >= _amount,\\r\\n            \\\"Insufficient balance\\\"\\r\\n        );\\r\\n        namedBalances[_name][_token] -= _amount;\\r\\n    }\\r\\n\\r\\n    function getNamedBalance(string memory _name, address _token)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 balance = namedBalances[_name][_token];\\r\\n        uint256 actualBalance = _token == address(0)\\r\\n            ? payable(this).balance\\r\\n            : IERC20(_token).balanceOf(address(this));\\r\\n\\r\\n        return balance <= actualBalance ? balance : actualBalance;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x558d46944255126ec213d7229ddcd6f07490fef3e057bbe05aef5099c942f54d\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200007657601f62002fd338819003918201601f19168301916001600160401b038311848410176200007b5780849260409485528339810103126200007657806200005f602062000057620000669462000091565b920162000091565b90620000a6565b604051612ea09081620001338239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200007657565b600080546001600160a01b0319808216737e8ae5c72eca86946b695dcc211863d9721a0961908117845560405191956001600160a01b0395909486949193918516917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a360018055600060025562015180600955168360075416176007551690600854161760085556fe60806040526004361015610013575b600080fd5b60003560e01c8063175b23041461017b5780632ad7157314610172578063379607f51461016957806342d21ef714610160578063571a26a014610157578063715018a61461014e5780638da5cb5b146101455780639b3e45b41461013c578063a754807a14610133578063b8b9e2941461012a578063bcb2966714610121578063c18c277514610118578063cb0fc56d1461010f578063cff29dfd14610106578063d0f7146d146100fd578063d126b4e5146100f4578063e1152343146100eb5763f2fde38b146100e357600080fd5b61000e6118e9565b5061000e61138a565b5061000e611325565b5061000e6112fd565b5061000e6112c7565b5061000e6112a8565b5061000e611280565b5061000e611259565b5061000e610eb7565b5061000e610e8a565b5061000e610e6b565b5061000e610e43565b5061000e610de2565b5061000e610cae565b5061000e610985565b5061000e6101e6565b5061000e6101c7565b503461000e57602036600319011261000e5761019c60026001541415611a0d565b600260015560206101ae600435612251565b600180556040519015158152f35b600091031261000e57565b503461000e57600036600319011261000e576020600254604051908152f35b503461000e57602036600319011261000e5761020760026001541415611a0d565b6002600155600261022e6102276004356000526004602052604060002090565b5460ff1690565b61023781610958565b0361091c5761025a6102556004356000526003602052604060002090565b611fca565b60206040820151910151421061090a5761029061028461028460208401516001600160a01b031690565b6001600160a01b031690565b606082015190803b1561000e576040516323b872dd60e01b815230600482015233602482015260448101929092526000908290606490829084905af180156108fd575b6108e4575b506102ff6102f26004356000526004602052604060002090565b805460ff19166003179055565b6103156004356000526005602052604060002090565b54600461033d61033082356000526006602052604060002090565b546001600160a01b031690565b926103566102846102846008546001600160a01b031690565b8151906000610160840151610140850151936103bc6103806101808801516001600160a01b031690565b604051968794859463b0a89bd960e01b86528b860192936001600160a01b03919594606093608086019786526020860152604085015216910152565b0381845afa9182156108d7575b6000926108af575b5060209060405194858092629cbddd60e11b82525afa9283156108a2575b600093610871575b5061040f61028460408401516001600160a01b031690565b6040516370a0823160e01b81526001600160a01b0385166004820152909385929091602081806024810103816001600160a01b038a165afa908115610864575b600091610835575b50815160005b81811061059d575b5050505050917feaa5e39b43e701893bc019e42337b913a8c5cdce162a87d5a36b0f75c4bfd0d59391836104c1946104cf575b5050506040519182916004359583602090939291936001600160a01b0360408201951681520152565b0390a26104cd60018055565b005b6105499261050d61012060209401610500846104f283516001600160a01b031690565b306104fb612142565b612e10565b516001600160a01b031690565b60006001600160a01b0360405180978196829563a9059cbb60e01b845260048401602090939291936001600160a01b0360408201951681520152565b0393165af18015610590575b610561575b8080610498565b6105829060203d602011610589575b61057a8183610a66565b810190612018565b503861055a565b503d610570565b610598611be4565b610555565b6105a78185612120565b51936020850151876107b4575b85516001600160a01b03166001600160a01b0381166001600160a01b038916146107a6576105ec6105e86040890151151590565b1590565b6107a65781861015610713575050505050916104c1959391837feaa5e39b43e701893bc019e42337b913a8c5cdce162a87d5a36b0f75c4bfd0d598969461063b575b8496985083959750610465565b6106cf928261066483610657602096516001600160a01b031690565b61065f61220e565b612da3565b60006001600160a01b0361069361068560408b01516001600160a01b031690565b93516001600160a01b031690565b60405163276d76f960e21b81526001600160a01b0394851660048201529316602484015260448301949094529094859384929183906064820190565b0393165af18015610706575b6106e7575b808061062e565b6106ff9060203d6020116105895761057a8183610a66565b50386106e0565b61070e611be4565b6106db565b946107556020838a61076c96989a60008f61069361068560406107729d9f93610747896001600160a01b039661065f6121d5565b01516001600160a01b031690565b0393165af18015610799575b61077a575b5061217b565b926120f9565b92909261045d565b6107929060203d6020116105895761057a8183610a66565b5038610766565b6107a1611be4565b610761565b5050919350610772906120f9565b898189939910156108045750906107fb916107e3826107da89516001600160a01b031690565b306104fb612192565b6107556020838d61050d8b516001600160a01b031690565b956000966105b4565b9161075560208361082f9561050d8b6105006107729a9f9b9d6104f28691516001600160a01b031690565b956120f9565b610857915060203d60201161085d575b61084f8183610a66565b810190611c2e565b38610457565b503d610845565b61086c611be4565b61044f565b61089491935060203d60201161089b575b61088c8183610a66565b810190611bcf565b91386103f7565b503d610882565b6108aa611be4565b6103ef565b60209192506108d0903d806000833e6108c88183610a66565b81019061202d565b91906103d1565b6108df611be4565b6103c9565b806108f16108f792610a0d565b806101bc565b386102d8565b610905611be4565b6102d3565b604051632ab4e4b960e21b8152600490fd5b6109546109386102276004356000526004602052604060002090565b604051635430ca1760e01b815291829160048035908401611fb4565b0390fd5b6005111561096257565b634e487b7160e01b600052602160045260246000fd5b9060058210156109625752565b503461000e57602036600319011261000e576004356000526004602052602060ff604060002054166109ba6040518092610978565bf35b90600182811c921680156109ec575b60208310146109d657565b634e487b7160e01b600052602260045260246000fd5b91607f16916109cb565b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610a2157604052565b610a296109f6565b604052565b6060810190811067ffffffffffffffff821117610a2157604052565b6040810190811067ffffffffffffffff821117610a2157604052565b90601f8019910116810190811067ffffffffffffffff821117610a2157604052565b9060405191826000825492610a9c846109bc565b908184526001948581169081600014610b0b5750600114610ac8575b5050610ac692500383610a66565b565b9093915060005260209081600020936000915b818310610af3575050610ac693508201013880610ab8565b85548884018501529485019487945091830191610adb565b9550505050505060ff19166020830152610ac682604081013880610ab8565b604051906101c0820182811067ffffffffffffffff821117610a2157604052565b60405190610ac682610a2e565b90610ac660ff600c610b68610b2a565b9480548652610b94610b8460018301546001600160a01b031690565b6001600160a01b03166020880152565b610bbb610bab60028301546001600160a01b031690565b6001600160a01b03166040880152565b6003810154606087015260048101546080870152600581015460a0870152600681015460c0870152600781015460e0870152610bf960088201610a88565b610100870152610c27610c1660098301546001600160a01b031690565b6001600160a01b0316610120880152565b600a810154610140870152600b81015461016087015201546001600160a01b03811661018086015260a01c1615156101a0840152565b91908251928382526000905b848210610c96575092806020939411610c89575b601f01601f1916010190565b6000838284010152610c7d565b90602090818082850101519082860101520190610c69565b503461000e57602036600319011261000e57600435600052600360205260406000208054610ce3600260018401549301610b58565b604051928392835260208301526060604083015280516060830152610d18602082015160808401906001600160a01b03169052565b60408101516001600160a01b031660a0830152606081015160c0830152608081015160e0830152610dde60a0820151610100908185015260c0830151926101209384860152610dd260e0820151926101409384880152820151926101c0610d8c6101609582878b01526102208a0190610c5d565b9684015191610da961018093848b01906001600160a01b03169052565b840151946101a095868a0152840151908801528201516101e08701906001600160a01b03169052565b01511515610200840152565b0390f35b503461000e57600080600319360112610e4057610dfd6119b5565b80546001600160a01b031981168255816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e5760206001600160a01b0360005416604051908152f35b503461000e57600036600319011261000e576020600954604051908152f35b503461000e57602036600319011261000e5760043560005260056020526020604060002054604051908152f35b503461000e5760031960203682011261000e5767ffffffffffffffff6004351161000e576101c0906004353603011261000e57610ef26119b5565b610f0160026001541415611a0d565b6002600155600254610f11610b4b565b9080825260006020830152610f2b36600435600401611ae1565b6040830152610f44610284610284602460043501611bc5565b6040516331a9108f60e11b815260048035606401359082015290602090829081806024810103915afa90811561124c575b60009161122d575b506001600160a01b033091160361121b5760a460043501356084600435013511156111f25760e4600435013560c4600435013510156111c95760e460043501354210156111c9578161100b61101092610fe161010460043501600435600401611bf1565b905061118f575b610ff76101a460043501611c24565b6110fe576000526003602052604060002090565b611dad565b6110366110296002546000526004602052604060002090565b805460ff19166001179055565b611049611044600254611c54565b600255565b7f9646b4a182fb1ac357dcde11fd0f02336fff19d5cd9177879d352d0fe85ba81981519161107b602460043501611bc5565b6104c161108c604460043501611bc5565b92602061109e61012460043501611bc5565b9101516110b661010460043501600435600401611bf1565b92909160405196879661016460043501359360e460043501359260c460043501359260a4600435013592608460043501359260646004350135928d6004356004013590611f34565b61114e6004602061111d6102846102846007546001600160a01b031690565b60405163cf4e00cf60e01b815292839182905afa908115611182575b600091611163575b5060c46004350135611c70565b60208401526000526003602052604060002090565b61117c915060203d60201161085d5761084f8183610a66565b38611141565b61118a611be4565b611139565b6111c46111b16111aa61010460043501600435600401611bf1565b3691611a59565b60e4600435013560c46004350135612bf2565b610fe8565b604051630e781b2360e31b815260c460048035918201359083015260e401356024820152604490fd5b6040516347cc0ae160e01b8152608460048035918201359083015260a401356024820152604490fd5b6040516355a5813d60e11b8152600490fd5b611246915060203d60201161089b5761088c8183610a66565b38610f7d565b611254611be4565b610f75565b503461000e57602036600319011261000e5760206112786004356129f4565b604051908152f35b503461000e57600036600319011261000e5760206001600160a01b0360075416604051908152f35b503461000e57602036600319011261000e576020611278600435612ad5565b503461000e57602036600319011261000e57600435600052600660205260206001600160a01b0360406000205416604051908152f35b503461000e57600036600319011261000e5760206001600160a01b0360085416604051908152f35b503461000e57602036600319011261000e57600435801561134557600955005b60405162461bcd60e51b815260206004820152601f60248201527f696e74657276616c206d757374206265206e6f6e2d7a65726f2076616c7565006044820152606490fd5b503461000e5760208060031936011261000e5760049081356113b160026001541415611a0d565b60026001556113cd610227826000526004602052604060002090565b926113d784610958565b6001841415806118b9575b61189e576113fd610255836000526003602052604060002090565b92604093848101519061141e6102846101208401516001600160a01b031690565b330361188e57820151421161187e57610160810195865190600260009161144481610958565b146116e5575b61145391611c70565b9561146d610284610284858501516001600160a01b031690565b606083015192813b1561000e5787516323b872dd60e01b80825230828901908152336020820152604081019690965294899360009183919082908490829060600103925af180156116d8575b6116c5575b5060006114d96102846102846008546001600160a01b031690565b8251945190610140840151958961153a6114fe6101808801516001600160a01b031690565b8851998a968795869563b0a89bd960e01b8752860192936001600160a01b03919594606093608086019786526020860152604085015216910152565b03915afa9283156116b8575b600093611693575b500151909390611566906001600160a01b0316610284565b908451946001600160a01b0360009316925b8681106115f257600089897fd9778e84173ed82dd2bb850ad64fd44439124d54c442898c74f70496d817590d6115e38e6115cc6115bf856000526004602052604060002090565b805460ff19166004179055565b845133815260208101919091529081906040820190565b0390a26115ef60018055565b51f35b8061164b876116046116649486612120565b518161161782516001600160a01b031690565b9101518d518a8152338982019081526001600160a01b03909316602084015260408301919091529283918291606090910190565b038160008a5af18015611686575b611669575b506120f9565b611578565b61167f90883d8a116105895761057a8183610a66565b503861165e565b61168e611be4565b611659565b916116af6115669361028493953d8091833e6108c88183610a66565b9391509161154e565b6116c0611be4565b611546565b806108f16116d292610a0d565b386114be565b6116e0611be4565b6114b9565b506116fa856000526005602052604060002090565b54906117058261299f565b6064900490858589860194898b83878951611726906001600160a01b031690565b6001600160a01b03166001600160a01b031661174c856000526006602052604060002090565b5484516323b872dd60e01b815233998101998a526001600160a01b0390911660208a0152604089019290925290968791908290036060019082905a90600091f18b81156103306117c26102846102846114539e6118039c6000986117d397611871575b611854575b50516001600160a01b031690565b956000526006602052604060002090565b92519687958694859363a9059cbb60e01b85528401602090939291936001600160a01b0360408201951681520152565b03925af18015611847575b61182a575b50600087815260056020526040812055915061144a565b61184090863d88116105895761057a8183610a66565b5038611813565b61184f611be4565b61180e565b61186a908d803d106105895761057a8183610a66565b50386117b4565b611879611be4565b6117af565b8451639ae4be8360e01b81528390fd5b855163ea8e4eb560e01b81528490fd5b61095484604051938493635430ca1760e01b85528401611fb4565b506118c384610958565b60028414156113e2565b6001600160a01b0381160361000e57565b3590610ac6826118cd565b503461000e57602036600319011261000e57600435611907816118cd565b61190f6119b5565b6001600160a01b0380911690811561196157600091825491816001600160a01b0319841617845560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6001600160a01b036000541633036119c957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15611a1457565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b92919267ffffffffffffffff8211611aa1575b60405191611a84601f8201601f191660200184610a66565b82948184528183011161000e578281602093846000960137010152565b611aa96109f6565b611a6c565b9080601f8301121561000e57816020611ac993359101611a59565b90565b8015150361000e57565b3590610ac682611acc565b9190916101c08184031261000e57611af7610b2a565b9281358452611b08602083016118de565b6020850152611b19604083016118de565b6040850152606082013560608501526080820135608085015260a082013560a085015260c082013560c085015260e082013560e085015261010090818301359067ffffffffffffffff821161000e57611b73918401611aae565b90840152610120611b858183016118de565b9084015261014080820135908401526101608082013590840152610180611bad8183016118de565b90840152611bbf6101a0809201611ad6565b90830152565b35611ac9816118cd565b9081602091031261000e5751611ac9816118cd565b506040513d6000823e3d90fd5b903590601e198136030182121561000e570180359067ffffffffffffffff821161000e5760200191813603831361000e57565b35611ac981611acc565b9081602091031261000e575190565b50634e487b7160e01b600052601160045260246000fd5b6001906001198111611c64570190565b611c6c611c3d565b0190565b81198111611c64570190565b90601f8111611c8a57505050565b600091825260208220906020601f850160051c83019410611cc6575b601f0160051c01915b828110611cbb57505050565b818155600101611caf565b9092508290611ca6565b919091825167ffffffffffffffff8111611da0575b611cf981611cf384546109bc565b84611c7c565b602080601f8311600114611d35575081929394600092611d2a575b50508160011b916000199060031b1c1916179055565b015190503880611d14565b90601f19831695611d4b85600052602060002090565b926000905b888210611d8857505083600195969710611d6f575b505050811b019055565b015160001960f88460031b161c19169055388080611d65565b80600185968294968601518155019501930190611d50565b611da86109f6565b611ce5565b611f1a6101a0600e6040610ac695805186556020810151600187015501519384516002820155611e09611dea60208701516001600160a01b031690565b60038301906001600160a01b03166001600160a01b0319825416179055565b611e3f611e2060408701516001600160a01b031690565b60048301906001600160a01b03166001600160a01b0319825416179055565b606085015160058201556080850151600682015560a0850151600782015560c0850151600882015560e08501516009820155611e83610100860151600a8301611cd0565b611eba611e9b6101208701516001600160a01b031690565b600b8301906001600160a01b03166001600160a01b0319825416179055565b610140850151600c820155610160850151600d8201550192611f13611eea6101808301516001600160a01b031690565b855473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909116178555565b0151151590565b815460ff60a01b191690151560a01b60ff60a01b16179055565b9b9c9a999897969594939190926020938d528c6001600160a01b0394858094169101521660408c01521660608a0152608089015260a088015260c087015260e08601526101008501526101208401526101408301528061018080610160850152830152806101a093848401376000828201840152601f01601f1916010190565b908152604081019291610ac69160200190610978565b906040516060810181811067ffffffffffffffff82111761200b575b604052604061200660028395805485526001810154602086015201610b58565b910152565b6120136109f6565b611fe6565b9081602091031261000e5751611ac981611acc565b6020808284031261000e57815167ffffffffffffffff9283821161000e57019083601f8301121561000e5781519283116120ec575b604093845194612077838660051b0187610a66565b848652828601918360608097028601019481861161000e578401925b8584106120a4575050505050505090565b868483031261000e5784879184516120bb81610a2e565b86516120c6816118cd565b81528287015183820152858701516120dd81611acc565b86820152815201930192612093565b6120f46109f6565b612062565b6001906000198114611c64570190565b50634e487b7160e01b600052603260045260246000fd5b6020918151811015612135575b60051b010190565b61213d612109565b61212d565b6040519061214f82610a4a565b601982527f73656e64696e672066726f6d20257320746f2025732c202573000000000000006020830152565b818110612186570390565b61218e611c3d565b0390565b6040519061219f82610a2e565b60218252607360f81b6040837f73656e64696e67207061727469616c2066726f6d20257320746f2025732c202560208201520152565b604051906121e282610a4a565b601982527f73656e64696e672066726f6d20495620746f2025732c202573000000000000006020830152565b6040519061221b82610a2e565b60218252607360f81b6040837f73656e64696e67207061727469616c2066726f6d20495620746f2025732c202560208201520152565b90600161226b610227846000526004602052604060002090565b61227481610958565b0361296a5761228282612ad5565b9161229a610255826000526003602052604060002090565b9260206040850151940151421061281b576122c561028461028460208701516001600160a01b031690565b606085015190803b1561000e576040516323b872dd60e01b815230600482015233602482015260448101929092526000908290606490829084905af1801561280e575b6127fb575b506123266102846102846008546001600160a01b031690565b9380519460006101608301516101408401519761238e6123516101808701516001600160a01b031690565b6040519a8b94859463b0a89bd960e01b86526004860192936001600160a01b03919594606093608086019786526020860152604085015216910152565b0381845afa9586156127ee575b6000966127c9575b5090602060049260405193848092629cbddd60e11b82525afa9182156127bc575b60009261279b575b506123e461028460408301516001600160a01b031690565b6040516370a0823160e01b81526001600160a01b038416600482015290928491602081806024810103816001600160a01b0389165afa90811561278e575b60009161276f575b50885160005b818110612556575b505050506124a395965084936102f295937feaa5e39b43e701893bc019e42337b913a8c5cdce162a87d5a36b0f75c4bfd0d59383612490946124a8575b50506040805133815260208101939093529192839283019150565b0390a26000526004602052604060002090565b600190565b612512926124d461012060209401610500846124cb83516001600160a01b031690565b336104fb612142565b6040516323b872dd60e01b81523360048201526001600160a01b03918216602482015260448101939093529193849283916000919083906064820190565b0393165af18015612549575b61252a575b8080612475565b6125429060203d6020116105895761057a8183610a66565b5038612523565b612551611be4565b61251e565b612560818c612120565b519a60208c0151866126fc575b8c516001600160a01b03166001600160a01b0381166001600160a01b038816146126ee576125a16105e88f60400151151590565b6126ee5781861015612662575050505050937feaa5e39b43e701893bc019e42337b913a8c5cdce162a87d5a36b0f75c4bfd0d593612490938897936124a39a9b886102f29b99612602575b505050938a995083975082969850819550612438565b61261e928261066483610657602096516001600160a01b031690565b0393165af18015612655575b612636575b80806125ec565b61264e9060203d6020116105895761057a8183610a66565b503861262f565b61265d611be4565b61262a565b9481602061076c94969f61269461268660408e610747876126e69c9e61065f6121d5565b91516001600160a01b031690565b60405163276d76f960e21b81526001600160a01b039283166004820152911660248201526044810192909252818060648101038160006001600160a01b038d165af180156107995761077a575061217b565b999099612430565b5050919a506126e6906120f9565b80879297101561273e57906127359161075560208f8c6124d4826105008861272c8196516001600160a01b031690565b336104fb612192565b9460009561256d565b6127699161075560206126e69599969f8c6124d482610500886124cb8196516001600160a01b031690565b946120f9565b612788915060203d60201161085d5761084f8183610a66565b3861242a565b612796611be4565b612422565b6127b591925060203d60201161089b5761088c8183610a66565b90386123cc565b6127c4611be4565b6123c4565b6004929196506127e56020913d806000833e6108c88183610a66565b969192506123a3565b6127f6611be4565b61239b565b806108f161280892610a0d565b3861230d565b612816611be4565b612308565b6129176101208561285f61028461028460407f3005fc6b3bb46c08e0cf129dca16ec43a82367c23823eddfdfbb7a1c41f4c35b98999a01516001600160a01b031690565b6040516323b872dd60e01b81523360048201523060248201526044810186905290602090829060649082906000905af1801561295d575b61293e575b506128cf336128b4886000526006602052604060002090565b906001600160a01b03166001600160a01b0319825416179055565b6128f36128e6876000526004602052604060002090565b805460ff19166002179055565b83612908876000526005602052604060002090565b5501516001600160a01b031690565b604080513381526001600160a01b03929092166020830152810191909152606090a2600090565b6129569060203d6020116105895761057a8183610a66565b503861289b565b612965611be4565b612896565b50612982610227826000526004602052604060002090565b604051635430ca1760e01b81529182916109549160048401611fb4565b60059080600019048211811515166129b5570290565b6129bd611c3d565b0290565b80600019048211811515166129b5570290565b81156129de570490565b634e487b7160e01b600052601260045260246000fd5b612a0b610227826000526004602052604060002090565b612a1481610958565b600181141580612ac1575b612aba576040612a3c610255846000526003602052604060002090565b015191612a576102846101208501516001600160a01b031690565b3303612ab257610160611ac9930151906002600093612a7581610958565b14612a81575b50611c70565b612aab919250612a9e612aa4916000526005602052604060002090565b5461299f565b6064900490565b9038612a7b565b505050600090565b5050600090565b50612acb81610958565b6002811415612a1f565b6001612aee610227836000526004602052604060002090565b612af781610958565b03612b6157612b156102556040926000526003602052604060002090565b015161010081019081515115612b4157611ac99160808201519160c060a0820151910151915192612ce8565b611ac9915060808101519060a081015160e060c083015192015192612b67565b50600090565b9092838203612b765750505090565b92612b9a612ba092612b9485600196970396420391828803906129c1565b926129c1565b90611c70565b91600019830104019015150290565b906020918051821015612bc157010190565b612bc9612109565b010190565b60ff6001911660ff8114611c64570190565b60ff6002911660fd8111611c64570190565b90825115612cd65760008093805190825b828410612c5e575b5050505090612c199161217b565b612c3c60095460ff612c36612c30838388166129c1565b95612be0565b166129c1565b91811115612c4c571015612c4c57565b604051633176730d60e21b8152600490fd5b60ff969293969081612ca2612c9c612c768b87612baf565b517fff000000000000000000000000000000000000000000000000000000000000001690565b60f81c90565b16918214612ccd57612cba612cc692612cc092611c70565b93612bce565b966120f9565b9291612c03565b50829650612c0b565b60405163431abebf60e01b8152600490fd5b92909192828103612cfa575050905090565b600091612d0d83956009549042036129d4565b81519084925b828410612d3d575b5050505091612b9a82612b94600195612d37612ba0968961217b565b906129c1565b9091929660ff9081612d55612c9c612c768c87612baf565b16918214612d9c57838910612d80575b612d7891612d7291611c70565b976120f9565b929190612d13565b9581612d92612d7893612d7293611c70565b9791509150612d65565b9750612d1b565b612df590612ddb92610ac6946001600160a01b036040519586946307c8121760e01b6020870152606060248701526084860190610c5d565b92166044840152606483015203601f198101835282610a66565b600080916020815191016a636f6e736f6c652e6c6f675afa50565b612e4092610ac694612df593604051958694636eb7943d60e01b60208701526080602487015260a4860190610c5d565b6001600160a01b03918216604486015292166064840152608483015203601f198101835282610a6656fea2646970667358221220979293070761a077ddfdfdd823010bc24e5883abc6623a5146b031355468ce3764736f6c634300080e0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c8063175b23041461017b5780632ad7157314610172578063379607f51461016957806342d21ef714610160578063571a26a014610157578063715018a61461014e5780638da5cb5b146101455780639b3e45b41461013c578063a754807a14610133578063b8b9e2941461012a578063bcb2966714610121578063c18c277514610118578063cb0fc56d1461010f578063cff29dfd14610106578063d0f7146d146100fd578063d126b4e5146100f4578063e1152343146100eb5763f2fde38b146100e357600080fd5b61000e6118e9565b5061000e61138a565b5061000e611325565b5061000e6112fd565b5061000e6112c7565b5061000e6112a8565b5061000e611280565b5061000e611259565b5061000e610eb7565b5061000e610e8a565b5061000e610e6b565b5061000e610e43565b5061000e610de2565b5061000e610cae565b5061000e610985565b5061000e6101e6565b5061000e6101c7565b503461000e57602036600319011261000e5761019c60026001541415611a0d565b600260015560206101ae600435612251565b600180556040519015158152f35b600091031261000e57565b503461000e57600036600319011261000e576020600254604051908152f35b503461000e57602036600319011261000e5761020760026001541415611a0d565b6002600155600261022e6102276004356000526004602052604060002090565b5460ff1690565b61023781610958565b0361091c5761025a6102556004356000526003602052604060002090565b611fca565b60206040820151910151421061090a5761029061028461028460208401516001600160a01b031690565b6001600160a01b031690565b606082015190803b1561000e576040516323b872dd60e01b815230600482015233602482015260448101929092526000908290606490829084905af180156108fd575b6108e4575b506102ff6102f26004356000526004602052604060002090565b805460ff19166003179055565b6103156004356000526005602052604060002090565b54600461033d61033082356000526006602052604060002090565b546001600160a01b031690565b926103566102846102846008546001600160a01b031690565b8151906000610160840151610140850151936103bc6103806101808801516001600160a01b031690565b604051968794859463b0a89bd960e01b86528b860192936001600160a01b03919594606093608086019786526020860152604085015216910152565b0381845afa9182156108d7575b6000926108af575b5060209060405194858092629cbddd60e11b82525afa9283156108a2575b600093610871575b5061040f61028460408401516001600160a01b031690565b6040516370a0823160e01b81526001600160a01b0385166004820152909385929091602081806024810103816001600160a01b038a165afa908115610864575b600091610835575b50815160005b81811061059d575b5050505050917feaa5e39b43e701893bc019e42337b913a8c5cdce162a87d5a36b0f75c4bfd0d59391836104c1946104cf575b5050506040519182916004359583602090939291936001600160a01b0360408201951681520152565b0390a26104cd60018055565b005b6105499261050d61012060209401610500846104f283516001600160a01b031690565b306104fb612142565b612e10565b516001600160a01b031690565b60006001600160a01b0360405180978196829563a9059cbb60e01b845260048401602090939291936001600160a01b0360408201951681520152565b0393165af18015610590575b610561575b8080610498565b6105829060203d602011610589575b61057a8183610a66565b810190612018565b503861055a565b503d610570565b610598611be4565b610555565b6105a78185612120565b51936020850151876107b4575b85516001600160a01b03166001600160a01b0381166001600160a01b038916146107a6576105ec6105e86040890151151590565b1590565b6107a65781861015610713575050505050916104c1959391837feaa5e39b43e701893bc019e42337b913a8c5cdce162a87d5a36b0f75c4bfd0d598969461063b575b8496985083959750610465565b6106cf928261066483610657602096516001600160a01b031690565b61065f61220e565b612da3565b60006001600160a01b0361069361068560408b01516001600160a01b031690565b93516001600160a01b031690565b60405163276d76f960e21b81526001600160a01b0394851660048201529316602484015260448301949094529094859384929183906064820190565b0393165af18015610706575b6106e7575b808061062e565b6106ff9060203d6020116105895761057a8183610a66565b50386106e0565b61070e611be4565b6106db565b946107556020838a61076c96989a60008f61069361068560406107729d9f93610747896001600160a01b039661065f6121d5565b01516001600160a01b031690565b0393165af18015610799575b61077a575b5061217b565b926120f9565b92909261045d565b6107929060203d6020116105895761057a8183610a66565b5038610766565b6107a1611be4565b610761565b5050919350610772906120f9565b898189939910156108045750906107fb916107e3826107da89516001600160a01b031690565b306104fb612192565b6107556020838d61050d8b516001600160a01b031690565b956000966105b4565b9161075560208361082f9561050d8b6105006107729a9f9b9d6104f28691516001600160a01b031690565b956120f9565b610857915060203d60201161085d575b61084f8183610a66565b810190611c2e565b38610457565b503d610845565b61086c611be4565b61044f565b61089491935060203d60201161089b575b61088c8183610a66565b810190611bcf565b91386103f7565b503d610882565b6108aa611be4565b6103ef565b60209192506108d0903d806000833e6108c88183610a66565b81019061202d565b91906103d1565b6108df611be4565b6103c9565b806108f16108f792610a0d565b806101bc565b386102d8565b610905611be4565b6102d3565b604051632ab4e4b960e21b8152600490fd5b6109546109386102276004356000526004602052604060002090565b604051635430ca1760e01b815291829160048035908401611fb4565b0390fd5b6005111561096257565b634e487b7160e01b600052602160045260246000fd5b9060058210156109625752565b503461000e57602036600319011261000e576004356000526004602052602060ff604060002054166109ba6040518092610978565bf35b90600182811c921680156109ec575b60208310146109d657565b634e487b7160e01b600052602260045260246000fd5b91607f16916109cb565b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610a2157604052565b610a296109f6565b604052565b6060810190811067ffffffffffffffff821117610a2157604052565b6040810190811067ffffffffffffffff821117610a2157604052565b90601f8019910116810190811067ffffffffffffffff821117610a2157604052565b9060405191826000825492610a9c846109bc565b908184526001948581169081600014610b0b5750600114610ac8575b5050610ac692500383610a66565b565b9093915060005260209081600020936000915b818310610af3575050610ac693508201013880610ab8565b85548884018501529485019487945091830191610adb565b9550505050505060ff19166020830152610ac682604081013880610ab8565b604051906101c0820182811067ffffffffffffffff821117610a2157604052565b60405190610ac682610a2e565b90610ac660ff600c610b68610b2a565b9480548652610b94610b8460018301546001600160a01b031690565b6001600160a01b03166020880152565b610bbb610bab60028301546001600160a01b031690565b6001600160a01b03166040880152565b6003810154606087015260048101546080870152600581015460a0870152600681015460c0870152600781015460e0870152610bf960088201610a88565b610100870152610c27610c1660098301546001600160a01b031690565b6001600160a01b0316610120880152565b600a810154610140870152600b81015461016087015201546001600160a01b03811661018086015260a01c1615156101a0840152565b91908251928382526000905b848210610c96575092806020939411610c89575b601f01601f1916010190565b6000838284010152610c7d565b90602090818082850101519082860101520190610c69565b503461000e57602036600319011261000e57600435600052600360205260406000208054610ce3600260018401549301610b58565b604051928392835260208301526060604083015280516060830152610d18602082015160808401906001600160a01b03169052565b60408101516001600160a01b031660a0830152606081015160c0830152608081015160e0830152610dde60a0820151610100908185015260c0830151926101209384860152610dd260e0820151926101409384880152820151926101c0610d8c6101609582878b01526102208a0190610c5d565b9684015191610da961018093848b01906001600160a01b03169052565b840151946101a095868a0152840151908801528201516101e08701906001600160a01b03169052565b01511515610200840152565b0390f35b503461000e57600080600319360112610e4057610dfd6119b5565b80546001600160a01b031981168255816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e5760206001600160a01b0360005416604051908152f35b503461000e57600036600319011261000e576020600954604051908152f35b503461000e57602036600319011261000e5760043560005260056020526020604060002054604051908152f35b503461000e5760031960203682011261000e5767ffffffffffffffff6004351161000e576101c0906004353603011261000e57610ef26119b5565b610f0160026001541415611a0d565b6002600155600254610f11610b4b565b9080825260006020830152610f2b36600435600401611ae1565b6040830152610f44610284610284602460043501611bc5565b6040516331a9108f60e11b815260048035606401359082015290602090829081806024810103915afa90811561124c575b60009161122d575b506001600160a01b033091160361121b5760a460043501356084600435013511156111f25760e4600435013560c4600435013510156111c95760e460043501354210156111c9578161100b61101092610fe161010460043501600435600401611bf1565b905061118f575b610ff76101a460043501611c24565b6110fe576000526003602052604060002090565b611dad565b6110366110296002546000526004602052604060002090565b805460ff19166001179055565b611049611044600254611c54565b600255565b7f9646b4a182fb1ac357dcde11fd0f02336fff19d5cd9177879d352d0fe85ba81981519161107b602460043501611bc5565b6104c161108c604460043501611bc5565b92602061109e61012460043501611bc5565b9101516110b661010460043501600435600401611bf1565b92909160405196879661016460043501359360e460043501359260c460043501359260a4600435013592608460043501359260646004350135928d6004356004013590611f34565b61114e6004602061111d6102846102846007546001600160a01b031690565b60405163cf4e00cf60e01b815292839182905afa908115611182575b600091611163575b5060c46004350135611c70565b60208401526000526003602052604060002090565b61117c915060203d60201161085d5761084f8183610a66565b38611141565b61118a611be4565b611139565b6111c46111b16111aa61010460043501600435600401611bf1565b3691611a59565b60e4600435013560c46004350135612bf2565b610fe8565b604051630e781b2360e31b815260c460048035918201359083015260e401356024820152604490fd5b6040516347cc0ae160e01b8152608460048035918201359083015260a401356024820152604490fd5b6040516355a5813d60e11b8152600490fd5b611246915060203d60201161089b5761088c8183610a66565b38610f7d565b611254611be4565b610f75565b503461000e57602036600319011261000e5760206112786004356129f4565b604051908152f35b503461000e57600036600319011261000e5760206001600160a01b0360075416604051908152f35b503461000e57602036600319011261000e576020611278600435612ad5565b503461000e57602036600319011261000e57600435600052600660205260206001600160a01b0360406000205416604051908152f35b503461000e57600036600319011261000e5760206001600160a01b0360085416604051908152f35b503461000e57602036600319011261000e57600435801561134557600955005b60405162461bcd60e51b815260206004820152601f60248201527f696e74657276616c206d757374206265206e6f6e2d7a65726f2076616c7565006044820152606490fd5b503461000e5760208060031936011261000e5760049081356113b160026001541415611a0d565b60026001556113cd610227826000526004602052604060002090565b926113d784610958565b6001841415806118b9575b61189e576113fd610255836000526003602052604060002090565b92604093848101519061141e6102846101208401516001600160a01b031690565b330361188e57820151421161187e57610160810195865190600260009161144481610958565b146116e5575b61145391611c70565b9561146d610284610284858501516001600160a01b031690565b606083015192813b1561000e5787516323b872dd60e01b80825230828901908152336020820152604081019690965294899360009183919082908490829060600103925af180156116d8575b6116c5575b5060006114d96102846102846008546001600160a01b031690565b8251945190610140840151958961153a6114fe6101808801516001600160a01b031690565b8851998a968795869563b0a89bd960e01b8752860192936001600160a01b03919594606093608086019786526020860152604085015216910152565b03915afa9283156116b8575b600093611693575b500151909390611566906001600160a01b0316610284565b908451946001600160a01b0360009316925b8681106115f257600089897fd9778e84173ed82dd2bb850ad64fd44439124d54c442898c74f70496d817590d6115e38e6115cc6115bf856000526004602052604060002090565b805460ff19166004179055565b845133815260208101919091529081906040820190565b0390a26115ef60018055565b51f35b8061164b876116046116649486612120565b518161161782516001600160a01b031690565b9101518d518a8152338982019081526001600160a01b03909316602084015260408301919091529283918291606090910190565b038160008a5af18015611686575b611669575b506120f9565b611578565b61167f90883d8a116105895761057a8183610a66565b503861165e565b61168e611be4565b611659565b916116af6115669361028493953d8091833e6108c88183610a66565b9391509161154e565b6116c0611be4565b611546565b806108f16116d292610a0d565b386114be565b6116e0611be4565b6114b9565b506116fa856000526005602052604060002090565b54906117058261299f565b6064900490858589860194898b83878951611726906001600160a01b031690565b6001600160a01b03166001600160a01b031661174c856000526006602052604060002090565b5484516323b872dd60e01b815233998101998a526001600160a01b0390911660208a0152604089019290925290968791908290036060019082905a90600091f18b81156103306117c26102846102846114539e6118039c6000986117d397611871575b611854575b50516001600160a01b031690565b956000526006602052604060002090565b92519687958694859363a9059cbb60e01b85528401602090939291936001600160a01b0360408201951681520152565b03925af18015611847575b61182a575b50600087815260056020526040812055915061144a565b61184090863d88116105895761057a8183610a66565b5038611813565b61184f611be4565b61180e565b61186a908d803d106105895761057a8183610a66565b50386117b4565b611879611be4565b6117af565b8451639ae4be8360e01b81528390fd5b855163ea8e4eb560e01b81528490fd5b61095484604051938493635430ca1760e01b85528401611fb4565b506118c384610958565b60028414156113e2565b6001600160a01b0381160361000e57565b3590610ac6826118cd565b503461000e57602036600319011261000e57600435611907816118cd565b61190f6119b5565b6001600160a01b0380911690811561196157600091825491816001600160a01b0319841617845560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6001600160a01b036000541633036119c957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15611a1457565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b92919267ffffffffffffffff8211611aa1575b60405191611a84601f8201601f191660200184610a66565b82948184528183011161000e578281602093846000960137010152565b611aa96109f6565b611a6c565b9080601f8301121561000e57816020611ac993359101611a59565b90565b8015150361000e57565b3590610ac682611acc565b9190916101c08184031261000e57611af7610b2a565b9281358452611b08602083016118de565b6020850152611b19604083016118de565b6040850152606082013560608501526080820135608085015260a082013560a085015260c082013560c085015260e082013560e085015261010090818301359067ffffffffffffffff821161000e57611b73918401611aae565b90840152610120611b858183016118de565b9084015261014080820135908401526101608082013590840152610180611bad8183016118de565b90840152611bbf6101a0809201611ad6565b90830152565b35611ac9816118cd565b9081602091031261000e5751611ac9816118cd565b506040513d6000823e3d90fd5b903590601e198136030182121561000e570180359067ffffffffffffffff821161000e5760200191813603831361000e57565b35611ac981611acc565b9081602091031261000e575190565b50634e487b7160e01b600052601160045260246000fd5b6001906001198111611c64570190565b611c6c611c3d565b0190565b81198111611c64570190565b90601f8111611c8a57505050565b600091825260208220906020601f850160051c83019410611cc6575b601f0160051c01915b828110611cbb57505050565b818155600101611caf565b9092508290611ca6565b919091825167ffffffffffffffff8111611da0575b611cf981611cf384546109bc565b84611c7c565b602080601f8311600114611d35575081929394600092611d2a575b50508160011b916000199060031b1c1916179055565b015190503880611d14565b90601f19831695611d4b85600052602060002090565b926000905b888210611d8857505083600195969710611d6f575b505050811b019055565b015160001960f88460031b161c19169055388080611d65565b80600185968294968601518155019501930190611d50565b611da86109f6565b611ce5565b611f1a6101a0600e6040610ac695805186556020810151600187015501519384516002820155611e09611dea60208701516001600160a01b031690565b60038301906001600160a01b03166001600160a01b0319825416179055565b611e3f611e2060408701516001600160a01b031690565b60048301906001600160a01b03166001600160a01b0319825416179055565b606085015160058201556080850151600682015560a0850151600782015560c0850151600882015560e08501516009820155611e83610100860151600a8301611cd0565b611eba611e9b6101208701516001600160a01b031690565b600b8301906001600160a01b03166001600160a01b0319825416179055565b610140850151600c820155610160850151600d8201550192611f13611eea6101808301516001600160a01b031690565b855473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909116178555565b0151151590565b815460ff60a01b191690151560a01b60ff60a01b16179055565b9b9c9a999897969594939190926020938d528c6001600160a01b0394858094169101521660408c01521660608a0152608089015260a088015260c087015260e08601526101008501526101208401526101408301528061018080610160850152830152806101a093848401376000828201840152601f01601f1916010190565b908152604081019291610ac69160200190610978565b906040516060810181811067ffffffffffffffff82111761200b575b604052604061200660028395805485526001810154602086015201610b58565b910152565b6120136109f6565b611fe6565b9081602091031261000e5751611ac981611acc565b6020808284031261000e57815167ffffffffffffffff9283821161000e57019083601f8301121561000e5781519283116120ec575b604093845194612077838660051b0187610a66565b848652828601918360608097028601019481861161000e578401925b8584106120a4575050505050505090565b868483031261000e5784879184516120bb81610a2e565b86516120c6816118cd565b81528287015183820152858701516120dd81611acc565b86820152815201930192612093565b6120f46109f6565b612062565b6001906000198114611c64570190565b50634e487b7160e01b600052603260045260246000fd5b6020918151811015612135575b60051b010190565b61213d612109565b61212d565b6040519061214f82610a4a565b601982527f73656e64696e672066726f6d20257320746f2025732c202573000000000000006020830152565b818110612186570390565b61218e611c3d565b0390565b6040519061219f82610a2e565b60218252607360f81b6040837f73656e64696e67207061727469616c2066726f6d20257320746f2025732c202560208201520152565b604051906121e282610a4a565b601982527f73656e64696e672066726f6d20495620746f2025732c202573000000000000006020830152565b6040519061221b82610a2e565b60218252607360f81b6040837f73656e64696e67207061727469616c2066726f6d20495620746f2025732c202560208201520152565b90600161226b610227846000526004602052604060002090565b61227481610958565b0361296a5761228282612ad5565b9161229a610255826000526003602052604060002090565b9260206040850151940151421061281b576122c561028461028460208701516001600160a01b031690565b606085015190803b1561000e576040516323b872dd60e01b815230600482015233602482015260448101929092526000908290606490829084905af1801561280e575b6127fb575b506123266102846102846008546001600160a01b031690565b9380519460006101608301516101408401519761238e6123516101808701516001600160a01b031690565b6040519a8b94859463b0a89bd960e01b86526004860192936001600160a01b03919594606093608086019786526020860152604085015216910152565b0381845afa9586156127ee575b6000966127c9575b5090602060049260405193848092629cbddd60e11b82525afa9182156127bc575b60009261279b575b506123e461028460408301516001600160a01b031690565b6040516370a0823160e01b81526001600160a01b038416600482015290928491602081806024810103816001600160a01b0389165afa90811561278e575b60009161276f575b50885160005b818110612556575b505050506124a395965084936102f295937feaa5e39b43e701893bc019e42337b913a8c5cdce162a87d5a36b0f75c4bfd0d59383612490946124a8575b50506040805133815260208101939093529192839283019150565b0390a26000526004602052604060002090565b600190565b612512926124d461012060209401610500846124cb83516001600160a01b031690565b336104fb612142565b6040516323b872dd60e01b81523360048201526001600160a01b03918216602482015260448101939093529193849283916000919083906064820190565b0393165af18015612549575b61252a575b8080612475565b6125429060203d6020116105895761057a8183610a66565b5038612523565b612551611be4565b61251e565b612560818c612120565b519a60208c0151866126fc575b8c516001600160a01b03166001600160a01b0381166001600160a01b038816146126ee576125a16105e88f60400151151590565b6126ee5781861015612662575050505050937feaa5e39b43e701893bc019e42337b913a8c5cdce162a87d5a36b0f75c4bfd0d593612490938897936124a39a9b886102f29b99612602575b505050938a995083975082969850819550612438565b61261e928261066483610657602096516001600160a01b031690565b0393165af18015612655575b612636575b80806125ec565b61264e9060203d6020116105895761057a8183610a66565b503861262f565b61265d611be4565b61262a565b9481602061076c94969f61269461268660408e610747876126e69c9e61065f6121d5565b91516001600160a01b031690565b60405163276d76f960e21b81526001600160a01b039283166004820152911660248201526044810192909252818060648101038160006001600160a01b038d165af180156107995761077a575061217b565b999099612430565b5050919a506126e6906120f9565b80879297101561273e57906127359161075560208f8c6124d4826105008861272c8196516001600160a01b031690565b336104fb612192565b9460009561256d565b6127699161075560206126e69599969f8c6124d482610500886124cb8196516001600160a01b031690565b946120f9565b612788915060203d60201161085d5761084f8183610a66565b3861242a565b612796611be4565b612422565b6127b591925060203d60201161089b5761088c8183610a66565b90386123cc565b6127c4611be4565b6123c4565b6004929196506127e56020913d806000833e6108c88183610a66565b969192506123a3565b6127f6611be4565b61239b565b806108f161280892610a0d565b3861230d565b612816611be4565b612308565b6129176101208561285f61028461028460407f3005fc6b3bb46c08e0cf129dca16ec43a82367c23823eddfdfbb7a1c41f4c35b98999a01516001600160a01b031690565b6040516323b872dd60e01b81523360048201523060248201526044810186905290602090829060649082906000905af1801561295d575b61293e575b506128cf336128b4886000526006602052604060002090565b906001600160a01b03166001600160a01b0319825416179055565b6128f36128e6876000526004602052604060002090565b805460ff19166002179055565b83612908876000526005602052604060002090565b5501516001600160a01b031690565b604080513381526001600160a01b03929092166020830152810191909152606090a2600090565b6129569060203d6020116105895761057a8183610a66565b503861289b565b612965611be4565b612896565b50612982610227826000526004602052604060002090565b604051635430ca1760e01b81529182916109549160048401611fb4565b60059080600019048211811515166129b5570290565b6129bd611c3d565b0290565b80600019048211811515166129b5570290565b81156129de570490565b634e487b7160e01b600052601260045260246000fd5b612a0b610227826000526004602052604060002090565b612a1481610958565b600181141580612ac1575b612aba576040612a3c610255846000526003602052604060002090565b015191612a576102846101208501516001600160a01b031690565b3303612ab257610160611ac9930151906002600093612a7581610958565b14612a81575b50611c70565b612aab919250612a9e612aa4916000526005602052604060002090565b5461299f565b6064900490565b9038612a7b565b505050600090565b5050600090565b50612acb81610958565b6002811415612a1f565b6001612aee610227836000526004602052604060002090565b612af781610958565b03612b6157612b156102556040926000526003602052604060002090565b015161010081019081515115612b4157611ac99160808201519160c060a0820151910151915192612ce8565b611ac9915060808101519060a081015160e060c083015192015192612b67565b50600090565b9092838203612b765750505090565b92612b9a612ba092612b9485600196970396420391828803906129c1565b926129c1565b90611c70565b91600019830104019015150290565b906020918051821015612bc157010190565b612bc9612109565b010190565b60ff6001911660ff8114611c64570190565b60ff6002911660fd8111611c64570190565b90825115612cd65760008093805190825b828410612c5e575b5050505090612c199161217b565b612c3c60095460ff612c36612c30838388166129c1565b95612be0565b166129c1565b91811115612c4c571015612c4c57565b604051633176730d60e21b8152600490fd5b60ff969293969081612ca2612c9c612c768b87612baf565b517fff000000000000000000000000000000000000000000000000000000000000001690565b60f81c90565b16918214612ccd57612cba612cc692612cc092611c70565b93612bce565b966120f9565b9291612c03565b50829650612c0b565b60405163431abebf60e01b8152600490fd5b92909192828103612cfa575050905090565b600091612d0d83956009549042036129d4565b81519084925b828410612d3d575b5050505091612b9a82612b94600195612d37612ba0968961217b565b906129c1565b9091929660ff9081612d55612c9c612c768c87612baf565b16918214612d9c57838910612d80575b612d7891612d7291611c70565b976120f9565b929190612d13565b9581612d92612d7893612d7293611c70565b9791509150612d65565b9750612d1b565b612df590612ddb92610ac6946001600160a01b036040519586946307c8121760e01b6020870152606060248701526084860190610c5d565b92166044840152606483015203601f198101835282610a66565b600080916020815191016a636f6e736f6c652e6c6f675afa50565b612e4092610ac694612df593604051958694636eb7943d60e01b60208701526080602487015260a4860190610c5d565b6001600160a01b03918216604486015292166064840152608483015203601f198101835282610a6656fea2646970667358221220979293070761a077ddfdfdd823010bc24e5883abc6623a5146b031355468ce3764736f6c634300080e0033",
  "devdoc": {
    "errors": {
      "InexactFraction()": [
        {
          "details": "Revert with an error when attempting to apply a fraction as part of      a partial fill that does not divide the target amount cleanly."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8424,
        "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4007,
        "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 19193,
        "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
        "label": "auctionCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 19198,
        "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
        "label": "auctions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Auction)20883_storage)"
      },
      {
        "astId": 19203,
        "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
        "label": "status",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_enum(AuctionStatus)20735)"
      },
      {
        "astId": 19207,
        "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
        "label": "bidAmounts",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 19211,
        "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
        "label": "bidders",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 19213,
        "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
        "label": "periFiAdminAddr",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 19215,
        "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
        "label": "loanRepaymentAddr",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 19218,
        "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
        "label": "decrementInterval",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(AuctionStatus)20735": {
        "encoding": "inplace",
        "label": "enum AuctionStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_enum(AuctionStatus)20735)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum AuctionStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(AuctionStatus)20735"
      },
      "t_mapping(t_uint256,t_struct(Auction)20883_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)20883_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Auction)20883_storage": {
        "encoding": "inplace",
        "label": "struct Auction",
        "members": [
          {
            "astId": 20877,
            "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20879,
            "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
            "label": "protectedUntil",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20882,
            "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
            "label": "parameters",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(AuctionParameters)20867_storage"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(AuctionParameters)20867_storage": {
        "encoding": "inplace",
        "label": "struct AuctionParameters",
        "members": [
          {
            "astId": 20840,
            "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
            "label": "loanId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20842,
            "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 20844,
            "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
            "label": "paymentToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 20846,
            "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
            "label": "tokenId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 20848,
            "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
            "label": "startAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 20850,
            "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
            "label": "endAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 20852,
            "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
            "label": "startTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 20854,
            "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
            "label": "endTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 20856,
            "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
            "label": "stepDownConfig",
            "offset": 0,
            "slot": "8",
            "type": "t_bytes_storage"
          },
          {
            "astId": 20858,
            "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
            "label": "loanBorrower",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          },
          {
            "astId": 20860,
            "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
            "label": "loanAmount",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 20862,
            "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
            "label": "loanRepaymentAmount",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 20864,
            "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
            "label": "lender",
            "offset": 0,
            "slot": "12",
            "type": "t_address"
          },
          {
            "astId": 20866,
            "contract": "contracts/loan/LoanAuction.sol:LoanAuction",
            "label": "isProtected",
            "offset": 20,
            "slot": "12",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}