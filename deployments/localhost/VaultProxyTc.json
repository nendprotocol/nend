{
  "address": "0xf994Dc1aD81d7DD77aedf0b57Dc7A8d1421C0f5C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_balanceName",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasPendingTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_hasPendingTransfer",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokensIn",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokensOut",
          "type": "address[]"
        },
        {
          "internalType": "contract Vault",
          "name": "_targetVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Vault",
          "name": "_targetVault",
          "type": "address"
        }
      ],
      "name": "setTargetVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetVault",
      "outputs": [
        {
          "internalType": "contract Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "terminate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenInToOut",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokensIn",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x514d4d6f73142728ce0c0014fab092a0434e4dbad74d4e9ddd789f06e131801a",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x2F358B80eD2d296C09560d2b9F70a7f81d57e352",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1565408",
    "logsBloom": "0x
    "blockHash": "0xb5b0bc64a541cad048bdd9b971081b6c0bcb4317034e3d71b04c3321891d429e",
    "transactionHash": "0x514d4d6f73142728ce0c0014fab092a0434e4dbad74d4e9ddd789f06e131801a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 26,
        "transactionHash": "0x514d4d6f73142728ce0c0014fab092a0434e4dbad74d4e9ddd789f06e131801a",
        "address": "0xf994Dc1aD81d7DD77aedf0b57Dc7A8d1421C0f5C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002f358b80ed2d296c09560d2b9f70a7f81d57e352"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb5b0bc64a541cad048bdd9b971081b6c0bcb4317034e3d71b04c3321891d429e"
      }
    ],
    "blockNumber": 26,
    "cumulativeGasUsed": "1565408",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "tc"
  ],
  "numDeployments": 1,
  "solcInputHash": "91942d0bfd6efcf2f85da000c34c69e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_balanceName\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasPendingTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_hasPendingTransfer\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokensIn\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokensOut\",\"type\":\"address[]\"},{\"internalType\":\"contract Vault\",\"name\":\"_targetVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Vault\",\"name\":\"_targetVault\",\"type\":\"address\"}],\"name\":\"setTargetVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetVault\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"terminate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInToOut\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensIn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/VaultProxy.sol\":\"VaultProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"contracts/access/MWOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract MWOwnable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(0x2F358B80eD2d296C09560d2b9F70a7f81d57e352);\\r\\n        // _transferOwnership(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier \\r\\n    onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x74bdfa3e963b95404e1b54bad52ae3f45163684fe644cd84b6b4054817cbff86\",\"license\":\"MIT\"},\"contracts/access/SimpleRoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract SimpleRoleAccess is MWOwnable {\\r\\n    mapping(address => mapping(string => bool)) public hasRole;\\r\\n\\r\\n    function authorize(\\r\\n        address operator,\\r\\n        string memory role,\\r\\n        bool authorized // onlyOwner\\r\\n    ) public {\\r\\n        hasRole[operator][role] = authorized;\\r\\n    }\\r\\n\\r\\n    modifier onlyRole(string memory _role) {\\r\\n        // require(\\r\\n        //     msg.sender == owner() || hasRole[msg.sender][_role],\\r\\n        //     \\\"Not authorized\\\"\\r\\n        // );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasAllRoles(string[] memory _roles) {\\r\\n        // for (uint256 i = 0; i < _roles.length; i++) {\\r\\n        //     require(hasRole[msg.sender][_roles[i]], \\\"Not authorized\\\");\\r\\n        // }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasSomeRoles(string[] memory _roles) {\\r\\n        // bool _hasRole;\\r\\n        // for (uint256 i = 0; i < _roles.length; i++) {\\r\\n        //     if (hasRole[msg.sender][_roles[i]]) {\\r\\n        //         _hasRole = true;\\r\\n        //         break;\\r\\n        //     }\\r\\n        // }\\r\\n        // require(_hasRole, \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfa22c01bc01559b14a4c692d1c7ca3ccd71541fbf54ecebefcf0b5a5e46da466\",\"license\":\"UNLICENSED\"},\"contracts/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\r\\n\\r\\ncontract Vault is SimpleRoleAccess {\\r\\n    bytes4 private ERC1155_INTERFACE_ID = 0xd9b67a26;\\r\\n    string public name;\\r\\n\\r\\n    mapping(address => bool) public authorizedOperators;\\r\\n    mapping(address => bool) public authorizedSpenders;\\r\\n    // Balance name => token => amount\\r\\n    mapping(string => mapping(address => uint256)) public namedBalances;\\r\\n\\r\\n    constructor(string memory _name) {\\r\\n        name = _name;\\r\\n    }\\r\\n\\r\\n    function approveERC20Transfer(\\r\\n        address _tokenAddress,\\r\\n        address _spender,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.approve(_spender, _amount);\\r\\n    }\\r\\n\\r\\n    function transferERC20(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.transfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function setERC721ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function transferERC721(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.transferFrom(address(this), _to, _tokenId);\\r\\n    }\\r\\n\\r\\n    function transferERC1155(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeTransferFrom(address(this), _to, _id, _value, _data);\\r\\n    }\\r\\n\\r\\n    function transferERC1155Batch(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeBatchTransferFrom(address(this), _to, _ids, _values, _data);\\r\\n    }\\r\\n\\r\\n    function setERC1155ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function getNativeBalance() external view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function transferNative(address payable _to, uint256 _amount)\\r\\n        public\\r\\n        payable\\r\\n        onlyRole(\\\"spender\\\")\\r\\n    {\\r\\n        (bool sent, ) = _to.call{ value: _amount }(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n\\r\\n    function burn(address _token, uint256 _amount)\\r\\n        public\\r\\n        onlyRole(\\\"spender\\\")\\r\\n    {\\r\\n        ERC20Burnable(_token).burn(_amount);\\r\\n    }\\r\\n\\r\\n    function namedBalanceReceive(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        namedBalances[_name][_token] += _amount;\\r\\n    }\\r\\n\\r\\n    function namedBalanceSpend(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        require(\\r\\n            namedBalances[_name][_token] >= _amount,\\r\\n            \\\"Insufficient balance\\\"\\r\\n        );\\r\\n        namedBalances[_name][_token] -= _amount;\\r\\n    }\\r\\n\\r\\n    function getNamedBalance(string memory _name, address _token)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 balance = namedBalances[_name][_token];\\r\\n        uint256 actualBalance = IERC20(_token).balanceOf(address(this));\\r\\n\\r\\n        return balance <= actualBalance ? balance : actualBalance;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x7672753c5a5fc18ca172629386e8b21426b0eade7e9676cbb91d56e2cbbceb63\",\"license\":\"MIT\"},\"contracts/vault/VaultProxy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\\\";\\r\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\nimport \\\"./Vault.sol\\\";\\r\\n\\r\\ncontract VaultProxy is MWOwnable {\\r\\n    IUniswapV2Router01 public swapRouter;\\r\\n    Vault public targetVault;\\r\\n    string public balanceName;\\r\\n    address[] public tokensIn;\\r\\n    mapping(address => address) public tokenInToOut;\\r\\n\\r\\n    uint24 public constant poolFee = 3000;\\r\\n\\r\\n    constructor(string memory _balanceName) {\\r\\n        balanceName = _balanceName;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address[] memory _tokensIn,\\r\\n        address[] memory _tokensOut,\\r\\n        Vault _targetVault,\\r\\n        address _swapRouter\\r\\n    ) external onlyOwner {\\r\\n        targetVault = _targetVault;\\r\\n        swapRouter = IUniswapV2Router01(_swapRouter);\\r\\n        require(\\r\\n            _tokensIn.length == _tokensOut.length,\\r\\n            \\\"Tokens in and tokens out not matching in length\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < _tokensIn.length; i++) {\\r\\n            address _tokenIn = _tokensIn[i];\\r\\n            address _tokenOut = _tokensOut[i];\\r\\n            _tokenIn = _tokenIn == address(0) ? swapRouter.WETH() : _tokenIn;\\r\\n            _tokenOut = _tokenIn == address(0) ? swapRouter.WETH() : _tokenOut;\\r\\n            require(tokenInToOut[_tokenIn] == address(0), \\\"Duplicate token in\\\");\\r\\n            tokenInToOut[_tokenIn] = _tokenOut;\\r\\n            tokensIn.push(_tokenIn);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setTargetVault(Vault _targetVault) external onlyOwner {\\r\\n        targetVault = _targetVault;\\r\\n    }\\r\\n\\r\\n    function addToken(address _tokenIn, address _tokenOut) external onlyOwner {\\r\\n        _tokenIn = _tokenIn == address(0) ? swapRouter.WETH() : _tokenIn;\\r\\n        tokensIn.push(_tokenIn);\\r\\n        tokenInToOut[_tokenIn] = _tokenOut;\\r\\n    }\\r\\n\\r\\n    function removeToken(address _tokenIn) external onlyOwner {\\r\\n        _tokenIn = _tokenIn == address(0) ? swapRouter.WETH() : _tokenIn;\\r\\n        tokenInToOut[_tokenIn] = address(0);\\r\\n    }\\r\\n\\r\\n    function hasPendingTransfer()\\r\\n        external\\r\\n        view\\r\\n        returns (bool _hasPendingTransfer)\\r\\n    {\\r\\n        for (uint256 i = 0; i < tokensIn.length; i++) {\\r\\n            address _tokenIn = tokensIn[i];\\r\\n            bool _nativeIn = _tokenIn == swapRouter.WETH();\\r\\n\\r\\n            // Token removed\\r\\n            if (tokenInToOut[_tokenIn] == address(0)) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (\\r\\n                (!_nativeIn && IERC20(_tokenIn).balanceOf(address(this)) > 0) ||\\r\\n                (_nativeIn && address(this).balance > 0)\\r\\n            ) {\\r\\n                _hasPendingTransfer = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transfer() external onlyOwner {\\r\\n        for (uint256 i = 0; i < tokensIn.length; i++) {\\r\\n            address _tokenIn = tokensIn[i];\\r\\n            address _tokenOut = tokenInToOut[_tokenIn];\\r\\n\\r\\n            // Token removed\\r\\n            if (_tokenOut == address(0)) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            bool _nativeIn = _tokenIn == swapRouter.WETH();\\r\\n            bool _nativeOut = _tokenOut == swapRouter.WETH();\\r\\n\\r\\n            uint256 _amountIn = _nativeIn\\r\\n                ? address(this).balance\\r\\n                : IERC20(_tokenIn).balanceOf(address(this));\\r\\n\\r\\n            if (_amountIn == 0) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            uint256 _amountOut = _amountIn;\\r\\n\\r\\n            // Conversion needed\\r\\n            if (_tokenIn != _tokenOut) {\\r\\n                address[] memory _path = new address[](2);\\r\\n                _path[0] = _tokenIn;\\r\\n                _path[1] = _tokenOut;\\r\\n                uint256[] memory _amounts;\\r\\n\\r\\n                if (!_nativeIn) {\\r\\n                    TransferHelper.safeApprove(\\r\\n                        _tokenIn,\\r\\n                        address(swapRouter),\\r\\n                        _amountIn\\r\\n                    );\\r\\n                }\\r\\n\\r\\n                // Case 1 ERC20 -> Native\\r\\n                if (!_nativeIn && _nativeOut) {\\r\\n                    _amounts = swapRouter.swapExactTokensForETH(\\r\\n                        _amountIn,\\r\\n                        0,\\r\\n                        _path,\\r\\n                        address(targetVault),\\r\\n                        block.timestamp\\r\\n                    );\\r\\n                }\\r\\n                // Case 2 Native -> ERC20\\r\\n                else if (_nativeIn && !_nativeOut) {\\r\\n                    _amounts = swapRouter.swapExactETHForTokens{\\r\\n                        value: _amountIn\\r\\n                    }(0, _path, address(targetVault), block.timestamp);\\r\\n                }\\r\\n                // Case 3 ERC20 -> ERC20\\r\\n                else {\\r\\n                    _amounts = swapRouter.swapExactTokensForTokens(\\r\\n                        _amountIn,\\r\\n                        0,\\r\\n                        _path,\\r\\n                        address(targetVault),\\r\\n                        block.timestamp\\r\\n                    );\\r\\n                }\\r\\n\\r\\n                _amountOut = _amounts[1];\\r\\n            }\\r\\n            // in == out and is ERC20\\r\\n            else if (!_nativeIn) {\\r\\n                TransferHelper.safeTransfer(\\r\\n                    _tokenOut,\\r\\n                    address(targetVault),\\r\\n                    _amountIn\\r\\n                );\\r\\n            }\\r\\n            // in == out and is Native\\r\\n            else {\\r\\n                TransferHelper.safeTransferETH(address(targetVault), _amountIn);\\r\\n            }\\r\\n\\r\\n            targetVault.namedBalanceReceive(\\r\\n                balanceName,\\r\\n                _nativeOut ? address(0) : _tokenOut,\\r\\n                _amountOut\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function terminate(address receiver) external onlyOwner {\\r\\n        for (uint256 i = 0; i < tokensIn.length; i++) {\\r\\n            address _tokenIn = tokensIn[i];\\r\\n            bool _nativeIn = _tokenIn == swapRouter.WETH();\\r\\n\\r\\n            if (!_nativeIn) {\\r\\n                TransferHelper.safeTransfer(\\r\\n                    _tokenIn,\\r\\n                    receiver,\\r\\n                    IERC20(_tokenIn).balanceOf(address(this))\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        selfdestruct(payable(receiver));\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xce0976e433d99ac5c46671802da3c1cf3eaef248c63e079aad9861824efb620a\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234620000d55762001d65803803806200001d8162000101565b92833981016020918281830312620000d55780516001600160401b0391828211620000d557019282601f85011215620000d5578351918211620000da575b6200006f601f8301601f1916820162000101565b92828452818386010111620000d5576000935b828510620000bf575081620000a09411620000b0575b5050620001cc565b604051611a3a90816200032b8239f35b60009183010152388062000098565b8481018201518486018301529381019362000082565b600080fd5b620000e4620000ea565b6200005b565b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b038111838210176200012757604052565b62000131620000ea565b604052565b90600182811c9216801562000168575b60208310146200015257565b634e487b7160e01b600052602260045260246000fd5b91607f169162000146565b601f811162000180575050565b6000906003825260208220906020601f850160051c83019410620001c1575b601f0160051c01915b828110620001b557505050565b818155600101620001a8565b90925082906200019f565b60008054732f358b80ed2d296c09560d2b9f70a7f81d57e3526001600160a01b031982168117835560405193949390916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908490a38251906001600160401b0382116200031a575b62000256826200025060035462000136565b62000173565b6020938491601f84116001146200029557839495509262000289575b50508160011b916000199060031b1c191617600355565b01519050388062000272565b6003600052601f198416957fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b939291905b87821062000301575050836001959610620002e7575b505050811b01600355565b015160001960f88460031b161c19169055388080620002dc565b80600185968294968601518155019501930190620002c6565b62000324620000ea565b6200023e56fe60806040526004361015610018575b361561001657005b005b60003560e01c8063089fe6aa146101585780631f92db451461014f57806333e7b9a5146101465780633c8bf9b31461013d5780633d0a1c2c146101345780635476bd721461012b5780635fa7b584146101225780636452c5e414610119578063715018a6146101105780638a4068dd146101075780638da5cb5b146100fe578063c31c9c07146100f5578063ca9de643146100ec578063edb45529146100e3578063f2fde38b146100da5763f6ed98bf0361000e576100d5611111565b61000e565b506100d5611045565b506100d5610ef2565b506100d5610eb1565b506100d5610e89565b506100d5610e61565b506100d56109b8565b506100d561095a565b506100d561087d565b506100d561071a565b506100d561063e565b506100d56105f7565b506100d5610368565b506100d5610213565b506100d561018f565b506100d5610171565b600091031261016c57565b600080fd5b503461016c57600036600319011261016c576020604051610bb88152f35b503461016c57600036600319011261016c5760206001600160a01b0360025416604051908152f35b50634e487b7160e01b600052603260045260246000fd5b600454811015610206575b60046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b61020e6101b7565b6101d9565b503461016c57602036600319011261016c5760043560045481101561016c576001600160a01b0360209160046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b015416604051908152f35b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161029957604052565b6102a161026e565b604052565b90601f8019910116810190811067ffffffffffffffff82111761029957604052565b60209067ffffffffffffffff81116102e2575b60051b0190565b6102ea61026e565b6102db565b6001600160a01b0381160361016c57565b81601f8201121561016c57803591610317836102c8565b9261032560405194856102a6565b808452602092838086019260051b82010192831161016c578301905b82821061034f575050505090565b838091833561035d816102ef565b815201910190610341565b503461016c57608036600319011261016c57600467ffffffffffffffff813581811161016c5761039b9036908401610300565b9060243590811161016c576103b39036908401610300565b6044356103bf816102ef565b6103f3606435916103cf836102ef565b6103d76112ba565b6001600160a01b03166001600160a01b03196002541617600255565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283161790556104298351835114611312565b60005b8351811015610016578061057a61045661044961057f94886113d4565b516001600160a01b031690565b61046361044984886113d4565b908581166105f1575061048d6104816001546001600160a01b031690565b6001600160a01b031690565b60405180916315ab88c960e31b8252818b60209485935afa9182156105e4575b6000926105c7575b5050905b8186166105be57506105756104d96104816001546001600160a01b031690565b60405180916315ab88c960e31b8252818c60209485935afa9182156105b1575b600092610584575b50505b61053d61053761048161052a866001600160a01b03166000526005602052604060002090565b546001600160a01b031690565b1561141b565b61055a836001600160a01b03166000526005602052604060002090565b906001600160a01b03166001600160a01b0319825416179055565b611467565b611384565b61042c565b6105a39250803d106105aa575b61059b81836102a6565b8101906113f6565b3880610501565b503d610591565b6105b961140e565b6104f9565b61057590610504565b6105dd9250803d106105aa5761059b81836102a6565b38806104b5565b6105ec61140e565b6104ad565b906104b9565b503461016c57602036600319011261016c576001600160a01b0360043561061d816102ef565b6106256112ba565b166001600160a01b031960025416176002556000604051f35b503461016c57604036600319011261016c5761001660043561065f816102ef565b61055a6024359161066f836102ef565b6106776112ba565b6001600160a01b0390808216610713575060206106a0600492600154166001600160a01b031690565b6040516315ab88c960e31b815292839182905afa908115610706575b6000916106e8575b505b6106cf81611467565b6001600160a01b03166000526005602052604060002090565b610700915060203d81116105aa5761059b81836102a6565b386106c4565b61070e61140e565b6106bc565b90506106c6565b503461016c57602036600319011261016c5761001661079d60043561073e816102ef565b6107466112ba565b6001600160a01b03908082166107e55750602060049160015416604051928380926315ab88c960e31b82525afa9081156107d8575b6000916107ba575b506001600160a01b03166000526005602052604060002090565b805473ffffffffffffffffffffffffffffffffffffffff19169055565b6107d2915060203d81116105aa5761059b81836102a6565b38610783565b6107e061140e565b61077b565b90506106cf565b90600182811c9216801561081c575b602083101461080657565b634e487b7160e01b600052602260045260246000fd5b91607f16916107fb565b919091602080825283519081818401526000945b82861061086757505080604093941161085a575b601f01601f1916010190565b600083828401015261084e565b858101820151848701604001529481019461083a565b503461016c576000806003193601126109575760405190806003546108a1816107ec565b8085529160019180831690811561093657506001146108db575b6108d7856108cb818703826102a6565b60405191829182610826565b0390f35b9250600383527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b82841061091e5750505081016020016108cb826108d76108bb565b80546020858701810191909152909301928101610903565b60ff1916602087015250506040840192506108cb91508390506108d76108bb565b80fd5b503461016c57600080600319360112610957576109756112ba565b80546001600160a01b031981168255816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461016c57600080600319360112610957576109d36112ba565b805b6004908154811015610e5b57610a006109ed826101ce565b90546001600160a01b039160031b1c1690565b9183610a2261052a856001600160a01b03166000526005602052604060002090565b6001600160a01b0390818116958615610e4c57600196610a4c61048189546001600160a01b031690565b91604098898051966315ab88c960e31b95868952602096878a8d81855afa998a15610e3f575b8b9a610e1e575b5087908c848089169c168c1495518094819382525afa908115610e11575b8a91610df4575b5016841494898c8315610d825750505047935b8415610d6e57928b9285928a958c979a1415600014610d1a57610b7d9798995083610ada6114f7565b93610af681610ae8876113a9565b906001600160a01b03169052565b610b038c610ae8876113c3565b82159182610cf5575b505080610cee575b15610c405750610b2f6104818692546001600160a01b031690565b92610b64610b486104816002546001600160a01b031690565b95516318cbafe560e01b815297889687958694429386016115e9565b03925af1908115610c33575b8591610c11575b506113c3565b51915b610b956104816002546001600160a01b031690565b9115610c0c5750825b813b15610c085783610bc795610bdd985196879586948593637bfabc8360e01b85528401611654565b03925af18015610bfb575b610be2575b50611384565b6109d5565b80610bef610bf592610285565b80610161565b38610bd7565b610c0361140e565b610bd2565b8380fd5b610b9e565b610c2d91503d8087833e610c2581836102a6565b810190611532565b38610b77565b610c3b61140e565b610b70565b9095939080610ce6575b15610c9a5750610c67610481610b6496546001600160a01b031690565b91610c7d6104816002546001600160a01b031690565b918d5196879586948593637ff36ab560e01b855242928501611622565b9294610cb16104818692546001600160a01b031690565b92610b64610cca6104816002546001600160a01b031690565b95516338ed173960e01b815297889687958694429386016115e9565b508715610c4a565b5088610b14565b610d1391610d0d61048187546001600160a01b031690565b90611782565b3885610b0c565b9450505092505092919215600014610d5057610d4b90610d456104816002546001600160a01b031690565b8361186d565b610b80565b610d4b90610d696104816002546001600160a01b031690565b611950565b50505050505050505050610bdd9150611384565b516370a0823160e01b8152309181019182529082908290819060200103818c5afa918215610de7575b8a92610dba575b505093610ab1565b610dd99250803d10610de0575b610dd181836102a6565b8101906114e8565b3880610db2565b503d610dc7565b610def61140e565b610dab565b610e0b9150873d89116105aa5761059b81836102a6565b38610a9e565b610e1961140e565b610a97565b88919a50610e3890823d84116105aa5761059b81836102a6565b9990610a79565b610e4761140e565b610a72565b5050505050610bdd9150611384565b82604051f35b503461016c57600036600319011261016c5760206001600160a01b0360005416604051908152f35b503461016c57600036600319011261016c5760206001600160a01b0360015416604051908152f35b503461016c57602036600319011261016c576020600435610ed1816102ef565b6001600160a01b038091166000526005825260406000205416604051908152f35b503461016c5760208060031936011261016c57600490813591610f14836102ef565b610f1c6112ba565b60005b81548110156110395780610f386109ed610f96936101ce565b8386610f4f6104816001546001600160a01b031690565b92876040948551948580926315ab88c960e31b82525afa92831561102c575b60009361100d575b50876001600160a01b0380831694168403610f9b575b5050505050611384565b610f1f565b93516370a0823160e01b815230888201908152610fd795919485918290819060200103915afa928315611000575b600093610fe1575b5061186d565b3880868187610f8c565b610ff9919350883d8a11610de057610dd181836102a6565b9138610fd1565b61100861140e565b610fc9565b611025919350883d8a116105aa5761059b81836102a6565b9138610f76565b61103461140e565b610f6e565b6001600160a01b038416ff5b503461016c57602036600319011261016c57600435611063816102ef565b61106b6112ba565b6001600160a01b038091169081156110bd57600091825491816001600160a01b0319841617845560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461016c57600080600319360112610957578081600480549360019261114261048185546001600160a01b031690565b915b868110611159575b6040518615158152602090f35b6111656109ed826101ce565b60409081516315ab88c960e31b8152602090818189818a5afa9081156112ad575b8691611290575b506111c061048161052a6001600160a01b0380871694168414956001600160a01b03166000526005602052604060002090565b156112835782159384611217575b5050508115611200575b506111eb576111e690611384565b611144565b5050505090506108d79150388080808061114c565b90508061120e575b386111d8565b50471515611208565b516370a0823160e01b8152308982019081529394509192839183918290819060200103915afa918215611276575b8592611259575b50501515903880806111ce565b61126f9250803d10610de057610dd181836102a6565b388061124c565b61127e61140e565b611245565b505050506111e690611384565b6112a79150823d84116105aa5761059b81836102a6565b3861118d565b6112b561140e565b611186565b6001600160a01b036000541633036112ce57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b1561131957565b60405162461bcd60e51b815260206004820152602f60248201527f546f6b656e7320696e20616e6420746f6b656e73206f7574206e6f74206d617460448201527f6368696e6720696e206c656e67746800000000000000000000000000000000006064820152608490fd5b60001981146113935760010190565b634e487b7160e01b600052601160045260246000fd5b6020908051156113b7570190565b6113bf6101b7565b0190565b6040908051600110156113b7570190565b60209181518110156113e9575b60051b010190565b6113f16101b7565b6113e1565b9081602091031261016c575161140b816102ef565b90565b506040513d6000823e3d90fd5b1561142257565b60405162461bcd60e51b815260206004820152601260248201527f4475706c696361746520746f6b656e20696e00000000000000000000000000006044820152606490fd5b6001600160a01b03600454680100000000000000008110156114db575b60018101806004558110156114ce575b60046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0191166001600160a01b0319825416179055565b6114d66101b7565b611494565b6114e361026e565b611484565b9081602091031261016c575190565b604051906060820182811067ffffffffffffffff821117611525575b60405260028252604082602036910137565b61152d61026e565b611513565b602090818184031261016c5780519067ffffffffffffffff821161016c57019180601f8401121561016c578251611568816102c8565b9361157660405195866102a6565b818552838086019260051b82010192831161016c578301905b82821061159d575050505090565b8151815290830190830161158f565b90815180825260208080930193019160005b8281106115cc575050505090565b83516001600160a01b0316855293810193928101926001016115be565b906116176080936001600160a01b03929796959784526000602085015260a0604085015260a08401906115ac565b951660608201520152565b6001600160a01b0361164960609396959496600084526080602085015260808401906115ac565b951660408201520152565b9291909260608152600060035461166a816107ec565b9081606085015260019081811690816000146116ff57506001146116a5575b50506001600160a01b03909416602082015260400152565b0152565b6003600090815292507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8284106116e95750505081016080016116a16040611689565b80546080858701015260209093019281016116d0565b60ff19166080860152505060a0830191506116a190506040611689565b3d15611765573d9067ffffffffffffffff8211611758575b6040519161174c601f8201601f1916602001846102a6565b82523d6000602084013e565b61176061026e565b611734565b606090565b9081602091031261016c5751801515810361016c5790565b60405163095ea7b360e01b602082019081526001600160a01b039093166024820152604481019390935260009283929083906117cb81606481015b03601f1981018352826102a6565b51925af16117d761171c565b8161183e575b50156117e557565b60405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201526a1c9bdd994819985a5b195960aa1b6064820152608490fd5b8051801592508215611853575b5050386117dd565b611866925060208091830101910161176a565b388061184b565b60405163a9059cbb60e01b602082019081526001600160a01b039093166024820152604481019390935260009283929083906118ac81606481016117bd565b51925af16118b861171c565b81611921575b50156118c657565b60405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b6064820152608490fd5b8051801592508215611936575b5050386118be565b611949925060208091830101910161176a565b388061192e565b600080929181926040519183602084019380851067ffffffffffffffff8611176119f7575b84604052525af161198461171c565b501561198c57565b60405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527f20455448207472616e73666572206661696c65640000000000000000000000006064820152608490fd5b6119ff61026e565b61197556fea2646970667358221220fb9993a6f9bb207274183b86115eba8a32408068ee7eb8c939ad00b4e76357fa64736f6c634300080e0033",
  "deployedBytecode": "0x60806040526004361015610018575b361561001657005b005b60003560e01c8063089fe6aa146101585780631f92db451461014f57806333e7b9a5146101465780633c8bf9b31461013d5780633d0a1c2c146101345780635476bd721461012b5780635fa7b584146101225780636452c5e414610119578063715018a6146101105780638a4068dd146101075780638da5cb5b146100fe578063c31c9c07146100f5578063ca9de643146100ec578063edb45529146100e3578063f2fde38b146100da5763f6ed98bf0361000e576100d5611111565b61000e565b506100d5611045565b506100d5610ef2565b506100d5610eb1565b506100d5610e89565b506100d5610e61565b506100d56109b8565b506100d561095a565b506100d561087d565b506100d561071a565b506100d561063e565b506100d56105f7565b506100d5610368565b506100d5610213565b506100d561018f565b506100d5610171565b600091031261016c57565b600080fd5b503461016c57600036600319011261016c576020604051610bb88152f35b503461016c57600036600319011261016c5760206001600160a01b0360025416604051908152f35b50634e487b7160e01b600052603260045260246000fd5b600454811015610206575b60046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b61020e6101b7565b6101d9565b503461016c57602036600319011261016c5760043560045481101561016c576001600160a01b0360209160046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b015416604051908152f35b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161029957604052565b6102a161026e565b604052565b90601f8019910116810190811067ffffffffffffffff82111761029957604052565b60209067ffffffffffffffff81116102e2575b60051b0190565b6102ea61026e565b6102db565b6001600160a01b0381160361016c57565b81601f8201121561016c57803591610317836102c8565b9261032560405194856102a6565b808452602092838086019260051b82010192831161016c578301905b82821061034f575050505090565b838091833561035d816102ef565b815201910190610341565b503461016c57608036600319011261016c57600467ffffffffffffffff813581811161016c5761039b9036908401610300565b9060243590811161016c576103b39036908401610300565b6044356103bf816102ef565b6103f3606435916103cf836102ef565b6103d76112ba565b6001600160a01b03166001600160a01b03196002541617600255565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283161790556104298351835114611312565b60005b8351811015610016578061057a61045661044961057f94886113d4565b516001600160a01b031690565b61046361044984886113d4565b908581166105f1575061048d6104816001546001600160a01b031690565b6001600160a01b031690565b60405180916315ab88c960e31b8252818b60209485935afa9182156105e4575b6000926105c7575b5050905b8186166105be57506105756104d96104816001546001600160a01b031690565b60405180916315ab88c960e31b8252818c60209485935afa9182156105b1575b600092610584575b50505b61053d61053761048161052a866001600160a01b03166000526005602052604060002090565b546001600160a01b031690565b1561141b565b61055a836001600160a01b03166000526005602052604060002090565b906001600160a01b03166001600160a01b0319825416179055565b611467565b611384565b61042c565b6105a39250803d106105aa575b61059b81836102a6565b8101906113f6565b3880610501565b503d610591565b6105b961140e565b6104f9565b61057590610504565b6105dd9250803d106105aa5761059b81836102a6565b38806104b5565b6105ec61140e565b6104ad565b906104b9565b503461016c57602036600319011261016c576001600160a01b0360043561061d816102ef565b6106256112ba565b166001600160a01b031960025416176002556000604051f35b503461016c57604036600319011261016c5761001660043561065f816102ef565b61055a6024359161066f836102ef565b6106776112ba565b6001600160a01b0390808216610713575060206106a0600492600154166001600160a01b031690565b6040516315ab88c960e31b815292839182905afa908115610706575b6000916106e8575b505b6106cf81611467565b6001600160a01b03166000526005602052604060002090565b610700915060203d81116105aa5761059b81836102a6565b386106c4565b61070e61140e565b6106bc565b90506106c6565b503461016c57602036600319011261016c5761001661079d60043561073e816102ef565b6107466112ba565b6001600160a01b03908082166107e55750602060049160015416604051928380926315ab88c960e31b82525afa9081156107d8575b6000916107ba575b506001600160a01b03166000526005602052604060002090565b805473ffffffffffffffffffffffffffffffffffffffff19169055565b6107d2915060203d81116105aa5761059b81836102a6565b38610783565b6107e061140e565b61077b565b90506106cf565b90600182811c9216801561081c575b602083101461080657565b634e487b7160e01b600052602260045260246000fd5b91607f16916107fb565b919091602080825283519081818401526000945b82861061086757505080604093941161085a575b601f01601f1916010190565b600083828401015261084e565b858101820151848701604001529481019461083a565b503461016c576000806003193601126109575760405190806003546108a1816107ec565b8085529160019180831690811561093657506001146108db575b6108d7856108cb818703826102a6565b60405191829182610826565b0390f35b9250600383527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b82841061091e5750505081016020016108cb826108d76108bb565b80546020858701810191909152909301928101610903565b60ff1916602087015250506040840192506108cb91508390506108d76108bb565b80fd5b503461016c57600080600319360112610957576109756112ba565b80546001600160a01b031981168255816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461016c57600080600319360112610957576109d36112ba565b805b6004908154811015610e5b57610a006109ed826101ce565b90546001600160a01b039160031b1c1690565b9183610a2261052a856001600160a01b03166000526005602052604060002090565b6001600160a01b0390818116958615610e4c57600196610a4c61048189546001600160a01b031690565b91604098898051966315ab88c960e31b95868952602096878a8d81855afa998a15610e3f575b8b9a610e1e575b5087908c848089169c168c1495518094819382525afa908115610e11575b8a91610df4575b5016841494898c8315610d825750505047935b8415610d6e57928b9285928a958c979a1415600014610d1a57610b7d9798995083610ada6114f7565b93610af681610ae8876113a9565b906001600160a01b03169052565b610b038c610ae8876113c3565b82159182610cf5575b505080610cee575b15610c405750610b2f6104818692546001600160a01b031690565b92610b64610b486104816002546001600160a01b031690565b95516318cbafe560e01b815297889687958694429386016115e9565b03925af1908115610c33575b8591610c11575b506113c3565b51915b610b956104816002546001600160a01b031690565b9115610c0c5750825b813b15610c085783610bc795610bdd985196879586948593637bfabc8360e01b85528401611654565b03925af18015610bfb575b610be2575b50611384565b6109d5565b80610bef610bf592610285565b80610161565b38610bd7565b610c0361140e565b610bd2565b8380fd5b610b9e565b610c2d91503d8087833e610c2581836102a6565b810190611532565b38610b77565b610c3b61140e565b610b70565b9095939080610ce6575b15610c9a5750610c67610481610b6496546001600160a01b031690565b91610c7d6104816002546001600160a01b031690565b918d5196879586948593637ff36ab560e01b855242928501611622565b9294610cb16104818692546001600160a01b031690565b92610b64610cca6104816002546001600160a01b031690565b95516338ed173960e01b815297889687958694429386016115e9565b508715610c4a565b5088610b14565b610d1391610d0d61048187546001600160a01b031690565b90611782565b3885610b0c565b9450505092505092919215600014610d5057610d4b90610d456104816002546001600160a01b031690565b8361186d565b610b80565b610d4b90610d696104816002546001600160a01b031690565b611950565b50505050505050505050610bdd9150611384565b516370a0823160e01b8152309181019182529082908290819060200103818c5afa918215610de7575b8a92610dba575b505093610ab1565b610dd99250803d10610de0575b610dd181836102a6565b8101906114e8565b3880610db2565b503d610dc7565b610def61140e565b610dab565b610e0b9150873d89116105aa5761059b81836102a6565b38610a9e565b610e1961140e565b610a97565b88919a50610e3890823d84116105aa5761059b81836102a6565b9990610a79565b610e4761140e565b610a72565b5050505050610bdd9150611384565b82604051f35b503461016c57600036600319011261016c5760206001600160a01b0360005416604051908152f35b503461016c57600036600319011261016c5760206001600160a01b0360015416604051908152f35b503461016c57602036600319011261016c576020600435610ed1816102ef565b6001600160a01b038091166000526005825260406000205416604051908152f35b503461016c5760208060031936011261016c57600490813591610f14836102ef565b610f1c6112ba565b60005b81548110156110395780610f386109ed610f96936101ce565b8386610f4f6104816001546001600160a01b031690565b92876040948551948580926315ab88c960e31b82525afa92831561102c575b60009361100d575b50876001600160a01b0380831694168403610f9b575b5050505050611384565b610f1f565b93516370a0823160e01b815230888201908152610fd795919485918290819060200103915afa928315611000575b600093610fe1575b5061186d565b3880868187610f8c565b610ff9919350883d8a11610de057610dd181836102a6565b9138610fd1565b61100861140e565b610fc9565b611025919350883d8a116105aa5761059b81836102a6565b9138610f76565b61103461140e565b610f6e565b6001600160a01b038416ff5b503461016c57602036600319011261016c57600435611063816102ef565b61106b6112ba565b6001600160a01b038091169081156110bd57600091825491816001600160a01b0319841617845560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461016c57600080600319360112610957578081600480549360019261114261048185546001600160a01b031690565b915b868110611159575b6040518615158152602090f35b6111656109ed826101ce565b60409081516315ab88c960e31b8152602090818189818a5afa9081156112ad575b8691611290575b506111c061048161052a6001600160a01b0380871694168414956001600160a01b03166000526005602052604060002090565b156112835782159384611217575b5050508115611200575b506111eb576111e690611384565b611144565b5050505090506108d79150388080808061114c565b90508061120e575b386111d8565b50471515611208565b516370a0823160e01b8152308982019081529394509192839183918290819060200103915afa918215611276575b8592611259575b50501515903880806111ce565b61126f9250803d10610de057610dd181836102a6565b388061124c565b61127e61140e565b611245565b505050506111e690611384565b6112a79150823d84116105aa5761059b81836102a6565b3861118d565b6112b561140e565b611186565b6001600160a01b036000541633036112ce57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b1561131957565b60405162461bcd60e51b815260206004820152602f60248201527f546f6b656e7320696e20616e6420746f6b656e73206f7574206e6f74206d617460448201527f6368696e6720696e206c656e67746800000000000000000000000000000000006064820152608490fd5b60001981146113935760010190565b634e487b7160e01b600052601160045260246000fd5b6020908051156113b7570190565b6113bf6101b7565b0190565b6040908051600110156113b7570190565b60209181518110156113e9575b60051b010190565b6113f16101b7565b6113e1565b9081602091031261016c575161140b816102ef565b90565b506040513d6000823e3d90fd5b1561142257565b60405162461bcd60e51b815260206004820152601260248201527f4475706c696361746520746f6b656e20696e00000000000000000000000000006044820152606490fd5b6001600160a01b03600454680100000000000000008110156114db575b60018101806004558110156114ce575b60046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0191166001600160a01b0319825416179055565b6114d66101b7565b611494565b6114e361026e565b611484565b9081602091031261016c575190565b604051906060820182811067ffffffffffffffff821117611525575b60405260028252604082602036910137565b61152d61026e565b611513565b602090818184031261016c5780519067ffffffffffffffff821161016c57019180601f8401121561016c578251611568816102c8565b9361157660405195866102a6565b818552838086019260051b82010192831161016c578301905b82821061159d575050505090565b8151815290830190830161158f565b90815180825260208080930193019160005b8281106115cc575050505090565b83516001600160a01b0316855293810193928101926001016115be565b906116176080936001600160a01b03929796959784526000602085015260a0604085015260a08401906115ac565b951660608201520152565b6001600160a01b0361164960609396959496600084526080602085015260808401906115ac565b951660408201520152565b9291909260608152600060035461166a816107ec565b9081606085015260019081811690816000146116ff57506001146116a5575b50506001600160a01b03909416602082015260400152565b0152565b6003600090815292507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8284106116e95750505081016080016116a16040611689565b80546080858701015260209093019281016116d0565b60ff19166080860152505060a0830191506116a190506040611689565b3d15611765573d9067ffffffffffffffff8211611758575b6040519161174c601f8201601f1916602001846102a6565b82523d6000602084013e565b61176061026e565b611734565b606090565b9081602091031261016c5751801515810361016c5790565b60405163095ea7b360e01b602082019081526001600160a01b039093166024820152604481019390935260009283929083906117cb81606481015b03601f1981018352826102a6565b51925af16117d761171c565b8161183e575b50156117e557565b60405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201526a1c9bdd994819985a5b195960aa1b6064820152608490fd5b8051801592508215611853575b5050386117dd565b611866925060208091830101910161176a565b388061184b565b60405163a9059cbb60e01b602082019081526001600160a01b039093166024820152604481019390935260009283929083906118ac81606481016117bd565b51925af16118b861171c565b81611921575b50156118c657565b60405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b6064820152608490fd5b8051801592508215611936575b5050386118be565b611949925060208091830101910161176a565b388061192e565b600080929181926040519183602084019380851067ffffffffffffffff8611176119f7575b84604052525af161198461171c565b501561198c57565b60405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527f20455448207472616e73666572206661696c65640000000000000000000000006064820152608490fd5b6119ff61026e565b61197556fea2646970667358221220fb9993a6f9bb207274183b86115eba8a32408068ee7eb8c939ad00b4e76357fa64736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8357,
        "contract": "contracts/vault/VaultProxy.sol:VaultProxy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 25183,
        "contract": "contracts/vault/VaultProxy.sol:VaultProxy",
        "label": "swapRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IUniswapV2Router01)8117"
      },
      {
        "astId": 25186,
        "contract": "contracts/vault/VaultProxy.sol:VaultProxy",
        "label": "targetVault",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Vault)25170"
      },
      {
        "astId": 25188,
        "contract": "contracts/vault/VaultProxy.sol:VaultProxy",
        "label": "balanceName",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 25191,
        "contract": "contracts/vault/VaultProxy.sol:VaultProxy",
        "label": "tokensIn",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 25195,
        "contract": "contracts/vault/VaultProxy.sol:VaultProxy",
        "label": "tokenInToOut",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(IUniswapV2Router01)8117": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router01",
        "numberOfBytes": "20"
      },
      "t_contract(Vault)25170": {
        "encoding": "inplace",
        "label": "contract Vault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}