{
  "address": "0x4332039cb1dE0d08a96930c541d8703eE8376e3E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nend",
          "type": "address"
        },
        {
          "internalType": "contract Vault",
          "name": "_lendingPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "details",
          "type": "string"
        }
      ],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ILendingPoolStaking.EscrowStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "EscrowStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8[3]",
          "name": "allocations",
          "type": "uint8[3]"
        }
      ],
      "name": "RewardAllocationsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "stakeIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "rewardsAllocated",
          "type": "uint256[]"
        }
      ],
      "name": "RewardsAllocated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ILendingPoolStaking.StakeStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "StakeStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "start",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "end",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "rewardAllocationId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "parentIds",
          "type": "uint256[]"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activeStakeTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakeToken",
          "type": "address"
        }
      ],
      "name": "addStakeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "authorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "claimEscrowedReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_durationId",
          "type": "uint8"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inflationReward",
          "type": "uint256"
        }
      ],
      "name": "distributeInflationRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeNonInflationRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrowLockPeriod",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "inflationRollOver",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "issueEAB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingPool",
      "outputs": [
        {
          "internalType": "contract Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nend",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ongoingStakeCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakeToken",
          "type": "address"
        }
      ],
      "name": "removeStakeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardAllocations",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[3]",
          "name": "_rewardAllocations",
          "type": "uint8[3]"
        }
      ],
      "name": "setRewardAllocations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_testing",
          "type": "bool"
        }
      ],
      "name": "setTesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakeDurations",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "stakeEscrowedReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakeTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "start",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "end",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "rewardAllocated",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "rewardAllocationId",
          "type": "uint8"
        },
        {
          "internalType": "enum ILendingPoolStaking.EscrowStatus",
          "name": "escrowStatus",
          "type": "uint8"
        },
        {
          "internalType": "enum ILendingPoolStaking.StakeStatus",
          "name": "stakeStatus",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testEscrowLockPeriod",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "testStakeDurations",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "totalStakedByToken_Duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "totalStakedByUser_Token_Duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf46cd4816dd1c23a004ba06d62d934d24f06f663406c2d691b223eb3a62fa838",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x2F358B80eD2d296C09560d2b9F70a7f81d57e352",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "4577332",
    "logsBloom": "0x
    "blockHash": "0xd18ba86cf572aedfefe83a321bb237843da295243fad7c6dd95a2f0b3650a1ba",
    "transactionHash": "0xf46cd4816dd1c23a004ba06d62d934d24f06f663406c2d691b223eb3a62fa838",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 22,
        "transactionHash": "0xf46cd4816dd1c23a004ba06d62d934d24f06f663406c2d691b223eb3a62fa838",
        "address": "0x4332039cb1dE0d08a96930c541d8703eE8376e3E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002f358b80ed2d296c09560d2b9f70a7f81d57e352"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd18ba86cf572aedfefe83a321bb237843da295243fad7c6dd95a2f0b3650a1ba"
      }
    ],
    "blockNumber": 22,
    "cumulativeGasUsed": "4577332",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE1e80b525Aafb72800a85d35CbbC43E2b2d05872",
    "0x4BA4f6B089A151a7B5F738caCdBFE055d0336821"
  ],
  "numDeployments": 1,
  "solcInputHash": "91942d0bfd6efcf2f85da000c34c69e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nend\",\"type\":\"address\"},{\"internalType\":\"contract Vault\",\"name\":\"_lendingPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ILendingPoolStaking.EscrowStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"EscrowStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8[3]\",\"name\":\"allocations\",\"type\":\"uint8[3]\"}],\"name\":\"RewardAllocationsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"stakeIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardsAllocated\",\"type\":\"uint256[]\"}],\"name\":\"RewardsAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ILendingPoolStaking.StakeStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StakeStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"end\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"rewardAllocationId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"parentIds\",\"type\":\"uint256[]\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeStakeTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"addStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"claimEscrowedReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_durationId\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inflationReward\",\"type\":\"uint256\"}],\"name\":\"distributeInflationRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeNonInflationRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrowLockPeriod\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inflationRollOver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"issueEAB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ongoingStakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"removeStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardAllocations\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"_rewardAllocations\",\"type\":\"uint8[3]\"}],\"name\":\"setRewardAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_testing\",\"type\":\"bool\"}],\"name\":\"setTesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeDurations\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"stakeEscrowedReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"end\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"rewardAllocated\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"rewardAllocationId\",\"type\":\"uint8\"},{\"internalType\":\"enum ILendingPoolStaking.EscrowStatus\",\"name\":\"escrowStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum ILendingPoolStaking.StakeStatus\",\"name\":\"stakeStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testEscrowLockPeriod\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"testStakeDurations\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"totalStakedByToken_Duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"totalStakedByUser_Token_Duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/LendingPoolStaking.sol\":\"LendingPoolStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/access/MWOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract MWOwnable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(0x2F358B80eD2d296C09560d2b9F70a7f81d57e352);\\r\\n        // _transferOwnership(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier \\r\\n    onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x74bdfa3e963b95404e1b54bad52ae3f45163684fe644cd84b6b4054817cbff86\",\"license\":\"MIT\"},\"contracts/access/SimpleRoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract SimpleRoleAccess is MWOwnable {\\r\\n    mapping(address => mapping(string => bool)) public hasRole;\\r\\n\\r\\n    function authorize(\\r\\n        address operator,\\r\\n        string memory role,\\r\\n        bool authorized // onlyOwner\\r\\n    ) public {\\r\\n        hasRole[operator][role] = authorized;\\r\\n    }\\r\\n\\r\\n    modifier onlyRole(string memory _role) {\\r\\n        // require(\\r\\n        //     msg.sender == owner() || hasRole[msg.sender][_role],\\r\\n        //     \\\"Not authorized\\\"\\r\\n        // );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasAllRoles(string[] memory _roles) {\\r\\n        // for (uint256 i = 0; i < _roles.length; i++) {\\r\\n        //     require(hasRole[msg.sender][_roles[i]], \\\"Not authorized\\\");\\r\\n        // }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasSomeRoles(string[] memory _roles) {\\r\\n        // bool _hasRole;\\r\\n        // for (uint256 i = 0; i < _roles.length; i++) {\\r\\n        //     if (hasRole[msg.sender][_roles[i]]) {\\r\\n        //         _hasRole = true;\\r\\n        //         break;\\r\\n        //     }\\r\\n        // }\\r\\n        // require(_hasRole, \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfa22c01bc01559b14a4c692d1c7ca3ccd71541fbf54ecebefcf0b5a5e46da466\",\"license\":\"UNLICENSED\"},\"contracts/staking/LendingPoolStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"../vault/Vault.sol\\\";\\r\\nimport \\\"../vault/BalanceNames.sol\\\";\\r\\nimport \\\"./interfaces/ILendingPoolStaking.sol\\\";\\r\\nimport \\\"../test/Testing.sol\\\";\\r\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\ncontract LendingPoolStaking is\\r\\n    ILendingPoolStaking,\\r\\n    ERC721URIStorage,\\r\\n    BalanceNames,\\r\\n    Testing,\\r\\n    SimpleRoleAccess\\r\\n{\\r\\n    address public nend;\\r\\n    Vault public lendingPool;\\r\\n    mapping(address => bool) public activeStakeTokens;\\r\\n    mapping(address => uint256) public inflationRollOver;\\r\\n    address[] public stakeTokens;\\r\\n    uint48 public escrowLockPeriod = 30 weeks;\\r\\n    uint48 public testEscrowLockPeriod = 3 minutes;\\r\\n    // Active stake token count\\r\\n    uint256 public stakeTokenCount;\\r\\n    // Active stake count\\r\\n    uint256 public ongoingStakeCount;\\r\\n    mapping(address => uint256) internal ifpTokenToAmount;\\r\\n    // User address to this week's escrowed reward stake id\\r\\n    mapping(address => mapping(uint48 => uint256)) userToTimeToEscrowId;\\r\\n    // Token add => duration id => whether there is any stake receiving inflation reward with given duration and token\\r\\n    mapping(address => mapping(uint8 => bool)) tokenRewardAllocationToActive;\\r\\n    Stake[] public stakes;\\r\\n    uint48[3] public stakeDurations = [1 hours, 4 hours, 12 hours];\\r\\n    uint48[3] public testStakeDurations = [1 minutes, 4 minutes, 12 minutes];\\r\\n    // Token address => duration id => amount\\r\\n    mapping(address => mapping(uint8 => uint256))\\r\\n        public totalStakedByToken_Duration;\\r\\n    // User address => token address => duration id => amount\\r\\n    mapping(address => mapping(address => mapping(uint8 => uint256)))\\r\\n        public totalStakedByUser_Token_Duration;\\r\\n    uint8[3] public rewardAllocations = [25, 35, 40];\\r\\n\\r\\n    function setRewardAllocations(uint8[3] memory _rewardAllocations)\\r\\n        external\\r\\n        onlyRole(\\\"admin\\\")\\r\\n    {\\r\\n        if (\\r\\n            _rewardAllocations[0] +\\r\\n                _rewardAllocations[1] +\\r\\n                _rewardAllocations[2] !=\\r\\n            100\\r\\n        ) {\\r\\n            revert InvalidArgument(\\\"Must sum up to 100\\\");\\r\\n        }\\r\\n        rewardAllocations = _rewardAllocations;\\r\\n        emit RewardAllocationsChanged(_rewardAllocations);\\r\\n    }\\r\\n\\r\\n    constructor(address _nend, Vault _lendingPool)\\r\\n        ERC721(\\\"Escrowed Asset Bond\\\", \\\"EAB\\\")\\r\\n    {\\r\\n        nend = _nend;\\r\\n        lendingPool = _lendingPool;\\r\\n        // Add native token\\r\\n        activeStakeTokens[address(0)] = true;\\r\\n        stakeTokens.push(address(0));\\r\\n        stakeTokenCount++;\\r\\n\\r\\n        // Add nend\\r\\n        activeStakeTokens[_nend] = true;\\r\\n        stakeTokens.push(_nend);\\r\\n        stakeTokenCount++;\\r\\n    }\\r\\n\\r\\n    function deposit(\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        uint8 _durationId\\r\\n    ) external payable override {\\r\\n        if (_amount == 0) {\\r\\n            revert InvalidArgument(\\\"Amount cannot be zero\\\");\\r\\n        }\\r\\n        if (!activeStakeTokens[_token]) {\\r\\n            revert InvalidArgument(\\\"Invalid stake token\\\");\\r\\n        }\\r\\n\\r\\n        bool isNativeCoin = _token == address(0);\\r\\n\\r\\n        if (isNativeCoin) {\\r\\n            if (msg.sender.balance < _amount) {\\r\\n                revert InsufficientBalance();\\r\\n            }\\r\\n        } else {\\r\\n            if (IERC20(_token).balanceOf(msg.sender) < _amount) {\\r\\n                revert InsufficientBalance();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (isNativeCoin) {\\r\\n            if (msg.value != _amount) {\\r\\n                revert InvalidArgument(\\\"Incorrect native coin stake amount\\\");\\r\\n            }\\r\\n            payable(address(lendingPool)).transfer(_amount);\\r\\n        } else {\\r\\n            IERC20(_token).transferFrom(\\r\\n                msg.sender,\\r\\n                address(lendingPool),\\r\\n                _amount\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256[3] memory _amounts;\\r\\n        _amounts[_durationId] = _amount;\\r\\n\\r\\n        stakes.push(\\r\\n            Stake(\\r\\n                msg.sender,\\r\\n                _token,\\r\\n                uint48(block.timestamp),\\r\\n                uint48(block.timestamp) +\\r\\n                    (\\r\\n                        testing\\r\\n                            ? testStakeDurations[_durationId]\\r\\n                            : stakeDurations[_durationId]\\r\\n                    ),\\r\\n                _amounts,\\r\\n                0,\\r\\n                _durationId,\\r\\n                new uint256[](0),\\r\\n                new uint256[](0),\\r\\n                EscrowStatus.DEFAULT,\\r\\n                StakeStatus.STAKED\\r\\n            )\\r\\n        );\\r\\n\\r\\n        totalStakedByUser_Token_Duration[msg.sender][_token][\\r\\n            _durationId\\r\\n        ] += _amount;\\r\\n        totalStakedByToken_Duration[_token][_durationId] += _amount;\\r\\n        ongoingStakeCount++;\\r\\n\\r\\n        _emitStaked(stakes.length);\\r\\n    }\\r\\n\\r\\n    function stakeEscrowedReward(uint256 _stakeId) external override {\\r\\n        Stake storage _stake = stakes[_stakeId - 1];\\r\\n        if (_stake.staker != msg.sender) {\\r\\n            revert Unauthorized();\\r\\n        }\\r\\n\\r\\n        // Stake is not escrow or is already staked\\r\\n        if (\\r\\n            _stake.parentIds.length == 0 ||\\r\\n            _stake.stakeStatus != StakeStatus.DEFAULT\\r\\n        ) {\\r\\n            revert InvalidState();\\r\\n        }\\r\\n\\r\\n        _stake.stakeStatus = StakeStatus.STAKED;\\r\\n        ongoingStakeCount++;\\r\\n\\r\\n        for (uint8 i = 0; i < 3; i++) {\\r\\n            totalStakedByUser_Token_Duration[_stake.staker][_stake.token][\\r\\n                _stake.rewardAllocationId\\r\\n            ] += _stake.amountsPerDuration[i];\\r\\n            totalStakedByToken_Duration[_stake.token][\\r\\n                _stake.rewardAllocationId\\r\\n            ] += _stake.amountsPerDuration[i];\\r\\n        }\\r\\n\\r\\n        emit StakeStatusChanged(_stakeId, _stake.stakeStatus);\\r\\n    }\\r\\n\\r\\n    function _compoundEscrow(uint256 _stakeId, uint256 _inflationReward)\\r\\n        internal\\r\\n    {\\r\\n        Stake storage _stake = stakes[_stakeId - 1];\\r\\n\\r\\n        if (userToTimeToEscrowId[_stake.staker][uint48(block.timestamp)] == 0) {\\r\\n            uint256[3] memory _amounts;\\r\\n            stakes.push(\\r\\n                Stake(\\r\\n                    _stake.staker,\\r\\n                    nend,\\r\\n                    uint48(block.timestamp),\\r\\n                    uint48(block.timestamp) +\\r\\n                        (testing ? testEscrowLockPeriod : escrowLockPeriod),\\r\\n                    _amounts,\\r\\n                    0,\\r\\n                    2,\\r\\n                    new uint256[](0),\\r\\n                    new uint256[](0),\\r\\n                    EscrowStatus.DEFAULT,\\r\\n                    StakeStatus.DEFAULT\\r\\n                )\\r\\n            );\\r\\n            userToTimeToEscrowId[_stake.staker][\\r\\n                uint48(block.timestamp)\\r\\n            ] = stakes.length;\\r\\n        }\\r\\n\\r\\n        _stake.childIds.push(\\r\\n            userToTimeToEscrowId[_stake.staker][uint48(block.timestamp)]\\r\\n        );\\r\\n        Stake storage _escrow = stakes[\\r\\n            userToTimeToEscrowId[_stake.staker][uint48(block.timestamp)] - 1\\r\\n        ];\\r\\n        _escrow.parentIds.push(_stakeId);\\r\\n\\r\\n        uint256 reward = _calculateReward(\\r\\n            _stake.token,\\r\\n            _stake.staker,\\r\\n            _stake.rewardAllocationId,\\r\\n            _inflationReward / stakeTokenCount + inflationRollOver[_stake.token]\\r\\n        );\\r\\n\\r\\n        _escrow.amountsPerDuration[_stake.rewardAllocationId] += reward;\\r\\n        tokenRewardAllocationToActive[_stake.token][\\r\\n            _stake.rewardAllocationId\\r\\n        ] = true;\\r\\n    }\\r\\n\\r\\n    function _accrueNonInflationReward(\\r\\n        uint256 _stakeId,\\r\\n        uint256 _nonInflationReward\\r\\n    ) internal {\\r\\n        Stake storage _stake = stakes[_stakeId - 1];\\r\\n\\r\\n        uint256 reward = _calculateReward(\\r\\n            _stake.token,\\r\\n            _stake.staker,\\r\\n            _stake.rewardAllocationId,\\r\\n            _nonInflationReward\\r\\n        );\\r\\n\\r\\n        _stake.rewardAllocated += reward;\\r\\n    }\\r\\n\\r\\n    function distributeInflationRewards(uint256 _inflationReward)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        if (msg.sender != nend) {\\r\\n            revert Unauthorized();\\r\\n        }\\r\\n\\r\\n        // Deal with list being modified during loop\\r\\n        uint256 _stakeCount = stakes.length;\\r\\n\\r\\n        for (uint256 i = 0; i < _stakeCount; i++) {\\r\\n            Stake storage _stake = stakes[i];\\r\\n\\r\\n            if (\\r\\n                _stake.parentIds.length != 0 ||\\r\\n                _stake.stakeStatus != StakeStatus.STAKED\\r\\n            ) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            _compoundEscrow(i + 1, _inflationReward);\\r\\n        }\\r\\n\\r\\n        for (uint256 i = _stakeCount; i < stakes.length; i++) {\\r\\n            _emitStaked(i + 1);\\r\\n        }\\r\\n\\r\\n        // Calculate rollover\\r\\n        for (uint8 i = 0; i < stakeTokens.length; i++) {\\r\\n            address _stakeToken = stakeTokens[i];\\r\\n            uint256 rollOver = inflationRollOver[_stakeToken];\\r\\n            inflationRollOver[_stakeToken] = 0;\\r\\n            for (uint8 j = 0; j < 3; j++) {\\r\\n                if (!tokenRewardAllocationToActive[_stakeToken][j]) {\\r\\n                    inflationRollOver[_stakeToken] +=\\r\\n                        ((_inflationReward / stakeTokenCount + rollOver) *\\r\\n                            rewardAllocations[j]) /\\r\\n                        100;\\r\\n                }\\r\\n                delete tokenRewardAllocationToActive[_stakeToken][j];\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function distributeNonInflationRewards() external override onlyOwner {\\r\\n        for (uint256 i = 0; i < stakeTokens.length; i++) {\\r\\n            ifpTokenToAmount[stakeTokens[i]] = lendingPool.getNamedBalance(\\r\\n                interestForPoolBalanceName,\\r\\n                stakeTokens[i]\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256[] memory stakeIds = new uint256[](ongoingStakeCount);\\r\\n        uint256[] memory rewardsAllocated = new uint256[](ongoingStakeCount);\\r\\n        uint256 idx;\\r\\n\\r\\n        for (uint256 i = 0; i < stakes.length; i++) {\\r\\n            Stake storage _stake = stakes[i];\\r\\n\\r\\n            if (_stake.stakeStatus != StakeStatus.STAKED) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            _accrueNonInflationReward(i + 1, ifpTokenToAmount[_stake.token]);\\r\\n\\r\\n            stakeIds[idx] = i + 1;\\r\\n            rewardsAllocated[idx] = _stake.rewardAllocated;\\r\\n\\r\\n            idx++;\\r\\n        }\\r\\n\\r\\n        emit RewardsAllocated(stakeIds, rewardsAllocated);\\r\\n    }\\r\\n\\r\\n    function issueEAB(uint256 _stakeId) external {\\r\\n        Stake storage _stake = stakes[_stakeId - 1];\\r\\n        if (_stake.staker != msg.sender) {\\r\\n            revert Unauthorized();\\r\\n        }\\r\\n        if (_stake.escrowStatus != EscrowStatus.DEFAULT) {\\r\\n            revert InvalidState();\\r\\n        }\\r\\n        for (uint8 i = 0; i < _stake.parentIds.length; i++) {\\r\\n            // Parent eab already issued\\r\\n            if (\\r\\n                stakes[_stake.parentIds[i] - 1].escrowStatus !=\\r\\n                EscrowStatus.DEFAULT\\r\\n            ) {\\r\\n                {\\r\\n                    revert InvalidState();\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        for (uint8 i = 0; i < _stake.childIds.length; i++) {\\r\\n            // Child eab already issued\\r\\n            if (\\r\\n                stakes[_stake.childIds[i] - 1].escrowStatus !=\\r\\n                EscrowStatus.DEFAULT\\r\\n            ) {\\r\\n                {\\r\\n                    revert InvalidState();\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        _stake.escrowStatus = EscrowStatus.ISSUED;\\r\\n        _mint(msg.sender, _stakeId);\\r\\n\\r\\n        emit EscrowStatusChanged(_stakeId, EscrowStatus.ISSUED);\\r\\n    }\\r\\n\\r\\n    function claimEscrowedReward(uint256 _stakeId) external override {\\r\\n        Stake storage _stake = stakes[_stakeId - 1];\\r\\n        if (_stake.parentIds.length == 0 || _stake.escrowStatus == EscrowStatus.CLAIMED || _stake.escrowStatus == EscrowStatus.CANCELED || _stake.end > block.timestamp) {\\r\\n            revert InvalidState();\\r\\n        }\\r\\n        if (_stake.staker != msg.sender) {\\r\\n            revert Unauthorized();\\r\\n        }\\r\\n\\r\\n        _stake.escrowStatus = EscrowStatus.CLAIMED;\\r\\n\\r\\n        if (_stake.stakeStatus == StakeStatus.STAKED) {\\r\\n            _unstake(_stakeId, StakeStatus.FULFILLED);\\r\\n        }\\r\\n\\r\\n        if (_exists(_stakeId)) {\\r\\n            _burn(_stakeId);\\r\\n        }\\r\\n\\r\\n        IERC20(nend).transfer(\\r\\n            msg.sender,\\r\\n            _stake.amountsPerDuration[0] +\\r\\n                _stake.amountsPerDuration[1] +\\r\\n                _stake.amountsPerDuration[2]\\r\\n        );\\r\\n\\r\\n        emit EscrowStatusChanged(_stakeId, EscrowStatus.CLAIMED);\\r\\n    }\\r\\n\\r\\n    function unstake(uint256 _stakeId) external override {\\r\\n        Stake storage _stake = stakes[_stakeId - 1];\\r\\n        if (_stake.staker != msg.sender) {\\r\\n            revert Unauthorized();\\r\\n        }\\r\\n        if (_stake.stakeStatus != StakeStatus.STAKED) {\\r\\n            revert InvalidState();\\r\\n        }\\r\\n        for (uint8 i = 0; i < _stake.childIds.length; i++) {\\r\\n            // Child eab sold\\r\\n            if (stakes[_stake.childIds[i] - 1].staker != _stake.staker) {\\r\\n                {\\r\\n                    revert InvalidState();\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 _amount = _stake.amountsPerDuration[0] +\\r\\n            _stake.amountsPerDuration[1] +\\r\\n            _stake.amountsPerDuration[2];\\r\\n\\r\\n        if (_stake.token != address(0)) {\\r\\n            if (\\r\\n                IERC20(_stake.token).balanceOf(address(lendingPool)) < _amount\\r\\n            ) {\\r\\n                revert InsufficientBalance();\\r\\n            }\\r\\n        } else {\\r\\n            if (address(lendingPool).balance >= _amount) {\\r\\n                revert InsufficientBalance();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _lendingPoolTransfer(_stake.token, msg.sender, _amount);\\r\\n\\r\\n        if (block.timestamp > _stake.end) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < _stake.childIds.length; i++) {\\r\\n            Stake storage _childStake = stakes[_stake.childIds[i] - 1];\\r\\n            if (_exists(_stake.childIds[i])) {\\r\\n                _burn(_stake.childIds[i]);\\r\\n            }\\r\\n\\r\\n            if (_childStake.stakeStatus == StakeStatus.STAKED) {\\r\\n                _unstake(_stake.childIds[i], StakeStatus.CANCELED);\\r\\n            }\\r\\n\\r\\n            _lendingPoolTransfer(\\r\\n                nend,\\r\\n                owner(),\\r\\n                _amount\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _unstake(_stakeId, StakeStatus.CANCELED);\\r\\n    }\\r\\n\\r\\n    function _unstake(uint256 _stakeId, StakeStatus _status) internal {\\r\\n        Stake storage _stake = stakes[_stakeId - 1];\\r\\n\\r\\n        _stake.stakeStatus = _status;\\r\\n        ongoingStakeCount--;\\r\\n\\r\\n        for (uint8 i = 0; i < 3; i++) {\\r\\n            totalStakedByUser_Token_Duration[_stake.staker][_stake.token][\\r\\n                _stake.rewardAllocationId\\r\\n            ] -= _stake.amountsPerDuration[i];\\r\\n            totalStakedByToken_Duration[_stake.token][\\r\\n                _stake.rewardAllocationId\\r\\n            ] -= _stake.amountsPerDuration[i];\\r\\n        }\\r\\n\\r\\n        emit StakeStatusChanged(_stakeId, _status);\\r\\n\\r\\n        if (\\r\\n            _status == StakeStatus.CANCELED &&\\r\\n            _stake.escrowStatus == EscrowStatus.ISSUED\\r\\n        ) {\\r\\n            _stake.escrowStatus = EscrowStatus.CANCELED;\\r\\n            emit EscrowStatusChanged(_stakeId, EscrowStatus.CANCELED);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addStakeToken(address _stakeToken)\\r\\n        external\\r\\n        override\\r\\n        onlyRole(\\\"admin\\\")\\r\\n    {\\r\\n        if (!activeStakeTokens[_stakeToken]) {\\r\\n            stakeTokenCount++;\\r\\n            activeStakeTokens[_stakeToken] = true;\\r\\n        }\\r\\n\\r\\n        for (uint8 i = 0; i < stakeTokens.length; i++) {\\r\\n            if (stakeTokens[i] == _stakeToken) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        stakeTokens.push(_stakeToken);\\r\\n    }\\r\\n\\r\\n    function removeStakeToken(address _stakeToken)\\r\\n        external\\r\\n        override\\r\\n        onlyRole(\\\"admin\\\")\\r\\n    {\\r\\n        if (activeStakeTokens[_stakeToken]) {\\r\\n            stakeTokenCount--;\\r\\n            activeStakeTokens[_stakeToken] = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setTokenURI(uint256 _tokenId, string memory _tokenURI)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        _setTokenURI(_tokenId, _tokenURI);\\r\\n    }\\r\\n\\r\\n    function _lendingPoolTransfer(\\r\\n        address _token,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        bool isNativeCoin = _token == address(0);\\r\\n\\r\\n        if (isNativeCoin) {\\r\\n            if (address(lendingPool).balance < _amount) {\\r\\n                revert InsufficientBalance();\\r\\n            }\\r\\n            lendingPool.transferNative(payable(_to), _amount);\\r\\n        } else {\\r\\n            if (IERC20(_token).balanceOf(address(lendingPool)) < _amount) {\\r\\n                revert InsufficientBalance();\\r\\n            }\\r\\n            lendingPool.transferERC20(_token, _to, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _calculateReward(\\r\\n        address _stakeToken,\\r\\n        address _staker,\\r\\n        uint8 _rewardAllocationId,\\r\\n        uint256 _reward\\r\\n    ) internal view returns (uint256) {\\r\\n        return\\r\\n            (_reward *\\r\\n                rewardAllocations[_rewardAllocationId] *\\r\\n                totalStakedByUser_Token_Duration[_staker][_stakeToken][\\r\\n                    _rewardAllocationId\\r\\n                ]) /\\r\\n            100 /\\r\\n            totalStakedByToken_Duration[_stakeToken][_rewardAllocationId];\\r\\n    }\\r\\n\\r\\n    function _emitStaked(uint256 _stakeId) internal {\\r\\n        Stake memory _stake = stakes[_stakeId - 1];\\r\\n        emit Staked(\\r\\n            _stakeId,\\r\\n            _stake.staker,\\r\\n            _stake.token,\\r\\n            _stake.start,\\r\\n            _stake.end,\\r\\n            _stake.amountsPerDuration[0] +\\r\\n                _stake.amountsPerDuration[1] +\\r\\n                _stake.amountsPerDuration[2],\\r\\n            _stake.rewardAllocationId,\\r\\n            _stake.parentIds\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d38ed741c14a1f9d77ac5b8ce4b03c1ec6ceb9e5d4637d8b2bedd495e2a8157\",\"license\":\"UNLICENSED\"},\"contracts/staking/interfaces/ILendingPoolStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILendingPoolStaking {\\r\\n    error InsufficientBalance();\\r\\n    error InvalidArgument(string details);\\r\\n    error InvalidState();\\r\\n    error Unauthorized();\\r\\n\\r\\n    enum StakeStatus {\\r\\n        DEFAULT, // Not staked, only applicable to escrowed reward\\r\\n        STAKED, // Stake ongoing\\r\\n        FULFILLED, // Stake ended gracefully\\r\\n        CANCELED // Stake ended because of early unstake by user\\r\\n    }\\r\\n\\r\\n    enum EscrowStatus {\\r\\n        DEFAULT, // Not issued\\r\\n        ISSUED,\\r\\n        CLAIMED,\\r\\n        CANCELED // Canceled due to early unstake by user\\r\\n    }\\r\\n\\r\\n    struct Stake {\\r\\n        // Staker address\\r\\n        address staker;\\r\\n        // Stake token address\\r\\n        address token;\\r\\n        // The time of deposit\\r\\n        uint48 start;\\r\\n        // The time of withdrawal\\r\\n        uint48 end;\\r\\n        // The amount staked by each stake duration\\r\\n        uint256[3] amountsPerDuration;\\r\\n        // The amount of stake token that will be rewarded upon finishing the stake duration\\r\\n        uint256 rewardAllocated;\\r\\n        // The idx of reward allocation to this stake\\r\\n        uint8 rewardAllocationId;\\r\\n        // Ids of child escrows\\r\\n        uint256[] childIds;\\r\\n        // Stake ids that created this stake as escrowed reward\\r\\n        uint256[] parentIds;\\r\\n        // Status of eab\\r\\n        EscrowStatus escrowStatus;\\r\\n        // Status of stake\\r\\n        StakeStatus stakeStatus;\\r\\n    }\\r\\n\\r\\n    event Staked(\\r\\n        uint256 stakeId,\\r\\n        address staker,\\r\\n        address token,\\r\\n        uint48 start,\\r\\n        uint48 end,\\r\\n        uint256 amount,\\r\\n        uint8 rewardAllocationId,\\r\\n        uint256[] parentIds\\r\\n    );\\r\\n    event RewardsAllocated(uint256[] stakeIds, uint256[] rewardsAllocated);\\r\\n    event StakeStatusChanged(uint256 stakeId, StakeStatus status);\\r\\n    event EscrowStatusChanged(uint256 stakeId, EscrowStatus status);\\r\\n    event RewardAllocationsChanged(uint8[3] allocations);\\r\\n\\r\\n    function deposit(\\r\\n        address _stakeToken,\\r\\n        uint256 _amount,\\r\\n        uint8 _durationId\\r\\n    ) external payable;\\r\\n\\r\\n    function stakeEscrowedReward(uint256 _stakeId) external ;\\r\\n\\r\\n    function distributeInflationRewards(uint256 _inflationReward) external;\\r\\n\\r\\n    function distributeNonInflationRewards() external;\\r\\n\\r\\n    function claimEscrowedReward(uint256 _stakeId) external;\\r\\n\\r\\n    function unstake(uint256 _stakeId) external;\\r\\n\\r\\n    function addStakeToken(address _stakeToken) external;\\r\\n\\r\\n    function removeStakeToken(address _stakeToken) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xab4953c1d21aec5478db1a4daee407d8ac39243258dbe119c5f802e8c3a4f78d\",\"license\":\"UNLICENSED\"},\"contracts/test/Testing.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract Testing is MWOwnable {\\r\\n    bool public testing = true;\\r\\n\\r\\n    function setTesting(bool _testing) external onlyOwner {\\r\\n        testing = _testing;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3dfdc5be3d00ff111ce1b7835a3c371fb86282a0d915f3613716d25eee946ce9\",\"license\":\"Unlicense\"},\"contracts/vault/BalanceNames.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract BalanceNames {\\r\\n    string internal interestForPoolBalanceName = \\\"ifp\\\";\\r\\n    string internal interestForLenderBalanceName = \\\"ifl\\\";\\r\\n    string internal tradeCommissionBalanceName = \\\"tc\\\";\\r\\n    string internal bondingCommissionBalanceName = \\\"bc\\\";\\r\\n}\\r\\n\",\"keccak256\":\"0xd6ce3f7eb90d05e918d705b7afea89d3ee88aaab98be74a8b8ac6522a277743d\",\"license\":\"MIT\"},\"contracts/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\r\\n\\r\\ncontract Vault is SimpleRoleAccess {\\r\\n    bytes4 private ERC1155_INTERFACE_ID = 0xd9b67a26;\\r\\n    string public name;\\r\\n\\r\\n    mapping(address => bool) public authorizedOperators;\\r\\n    mapping(address => bool) public authorizedSpenders;\\r\\n    // Balance name => token => amount\\r\\n    mapping(string => mapping(address => uint256)) public namedBalances;\\r\\n\\r\\n    constructor(string memory _name) {\\r\\n        name = _name;\\r\\n    }\\r\\n\\r\\n    function approveERC20Transfer(\\r\\n        address _tokenAddress,\\r\\n        address _spender,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.approve(_spender, _amount);\\r\\n    }\\r\\n\\r\\n    function transferERC20(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.transfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function setERC721ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function transferERC721(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.transferFrom(address(this), _to, _tokenId);\\r\\n    }\\r\\n\\r\\n    function transferERC1155(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeTransferFrom(address(this), _to, _id, _value, _data);\\r\\n    }\\r\\n\\r\\n    function transferERC1155Batch(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeBatchTransferFrom(address(this), _to, _ids, _values, _data);\\r\\n    }\\r\\n\\r\\n    function setERC1155ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function getNativeBalance() external view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function transferNative(address payable _to, uint256 _amount)\\r\\n        public\\r\\n        payable\\r\\n        onlyRole(\\\"spender\\\")\\r\\n    {\\r\\n        (bool sent, ) = _to.call{ value: _amount }(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n\\r\\n    function burn(address _token, uint256 _amount)\\r\\n        public\\r\\n        onlyRole(\\\"spender\\\")\\r\\n    {\\r\\n        ERC20Burnable(_token).burn(_amount);\\r\\n    }\\r\\n\\r\\n    function namedBalanceReceive(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        namedBalances[_name][_token] += _amount;\\r\\n    }\\r\\n\\r\\n    function namedBalanceSpend(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        require(\\r\\n            namedBalances[_name][_token] >= _amount,\\r\\n            \\\"Insufficient balance\\\"\\r\\n        );\\r\\n        namedBalances[_name][_token] -= _amount;\\r\\n    }\\r\\n\\r\\n    function getNamedBalance(string memory _name, address _token)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 balance = namedBalances[_name][_token];\\r\\n        uint256 actualBalance = IERC20(_token).balanceOf(address(this));\\r\\n\\r\\n        return balance <= actualBalance ? balance : actualBalance;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x7672753c5a5fc18ca172629386e8b21426b0eade7e9676cbb91d56e2cbbceb63\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6040608081523462000206576200542f818138039182620000208162000271565b938492833981010312620002065780620001626020620001e7935192620000478462000297565b0151620000548162000297565b6200007362000062620002a9565b6200006c620002e0565b9062000556565b6200008e630114db0065ffffffffffff196012541617601255565b620000b266b40000000000006bffffffffffff000000000000196012541617601255565b620000da620000c062000222565b610e108152613840602082015261a8c08188015262000316565b62000100620000e862000222565b603c815260f060208201526102d08188015262000380565b620001256200010e62000222565b6019815260236020820152602881880152620003eb565b600d80546001600160a01b0319166001600160a01b038516179055600e80546001600160a01b0319166001600160a01b0392909216919091179055565b60008052600f6020526200019e7ff4803e074bd026baaf6ed2e288c9515f68c72fb7216eebdd7cae1718a53ec3755b805460ff19166001179055565b620001a862000453565b620001be620001b960135462000530565b601355565b6001600160a01b0381166000908152600f60205260409020620001e19062000191565b620004c5565b620001f8620001b960135462000530565b51614992908162000a7d8239f35b600080fd5b50634e487b7160e01b600052604160045260246000fd5b60405190606082016001600160401b038111838210176200024257604052565b6200024c6200020b565b604052565b60408051919082016001600160401b038111838210176200024257604052565b6040519190601f01601f191682016001600160401b038111838210176200024257604052565b6001600160a01b038116036200020657565b620002b362000251565b90601382527f457363726f77656420417373657420426f6e64000000000000000000000000006020830152565b620002ea62000251565b90600382526222a0a160e91b6020830152565b81811062000309575050565b60008155600101620002fd565b601960009182905b600382106200032d5750505050565b8051835465ffffffffffff600387901b90811b801990921661ffff93909316901b16178355600690602001930190601a821162000370575b60010190926200031e565b6001909201916000915062000365565b601a8060009283905b6003821062000399575050505050565b8051845465ffffffffffff600388901b90811b801990921661ffff93909316901b16178455600690602001940190828211620003db575b600101909362000389565b60019093019260009150620003d0565b90601d60009081935b6003808610156200044b579060209160ff908183511691868654921b90811b9283911b169119161783550193600180930192601f84116200043b575b5060010193620003f4565b6000935090910190600162000430565b505050509050565b60115468010000000000000000811015620004b5575b60018101806011558110156200049f5760116000526000805160206200540f8339815191520180546001600160a01b0319169055565b634e487b7160e01b600052603260045260246000fd5b620004bf6200020b565b62000469565b6011546801000000000000000081101562000520575b60018101806011558110156200049f5760116000526000805160206200540f8339815191520180546001600160a01b0319166001600160a01b03909216919091179055565b6200052a6200020b565b620004db565b6000198114620005405760010190565b634e487b7160e01b600052601160045260246000fd5b8051909291906001600160401b038111620006a4575b6000906200058681620005808454620006b4565b620006f1565b602080601f83116001146200061557508190620005c09596849262000609575b50508160011b916000199060031b1c19161790556200091a565b620005ca62000778565b620005d4620007e1565b620005de6200084a565b620005e8620008b2565b620005f262000a1c565b600b805460ff60a01b1916600160a01b179055565b565b015190503880620005a6565b60008052601f198316967f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563929185905b8982106200068b57505090839291600194620005c098991062000671575b505050811b0190556200091a565b015160001960f88460031b161c1916905538808062000663565b8060018596829496860151815501950193019062000645565b620006ae6200020b565b6200056c565b90600182811c92168015620006e6575b6020831014620006d057565b634e487b7160e01b600052602260045260246000fd5b91607f1691620006c4565b90601f8211620006ff575050565b6200060791600080526020600020906020601f840160051c830193106200072f575b601f0160051c0190620002fd565b909150819062000721565b90601f821162000748575050565b620006079160016000526020600020906020601f840160051c830193106200072f57601f0160051c0190620002fd565b62000785600754620006b4565b601f81116200079f575b5060066206966760ec1b01600755565b6007600052620007da90601f0160051c7fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68890810190620002fd565b386200078f565b620007ee600854620006b4565b601f811162000808575b506006621a599b60ea1b01600855565b60086000526200084390601f0160051c7ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee390810190620002fd565b38620007f8565b62000857600954620006b4565b601f811162000870575b50600461746360f01b01600955565b6009600052620008ab90601f0160051c7f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90810190620002fd565b3862000861565b620008bf600a54620006b4565b601f8111620008d8575b50600461626360f01b01600a55565b600a6000526200091390601f0160051c7fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890810190620002fd565b38620008c9565b80519091906001600160401b03811162000a0c575b6001906200094981620009438454620006b4565b6200073a565b602080601f8311600114620009875750819293946000926200097b575b5050600019600383901b1c191690821b179055565b01519050388062000966565b6001600052601f198316959091907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b888210620009f45750508385969710620009da575b505050811b019055565b015160001960f88460031b161c19169055388080620009d0565b808785968294968601518155019501930190620009bb565b62000a166200020b565b6200092f565b600b8054732f358b80ed2d296c09560d2b9f70a7f81d57e3526001600160a01b0319821681179092556040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a356fe60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a7146103ab57806306fdde03146103a2578063081812fc1461039957806308ed8d1614610390578063095ea7b31461038757806310062f171461037e578063125cc42f14610375578063162094c41461036c578063166866c7146103635780631fecb71a1461035a578063217fe6c61461035157806323b872dd146103485780632e17de781461033f5780633587e1611461033657806338934a6a1461032d57806339d2525f146103245780633c661b8b1461031b5780633de15c12146103125780633df725611461030957806342842e0e14610300578063455addac146102f7578063528a9e4d146102ee5780636352211e146102e557806370a08231146102dc578063715018a6146102d357806372a4db4a146102ca5780637547c7a3146102c157806382952200146102b8578063848778b4146102af5780638d03b102146102a65780638da5cb5b1461029d57806395d89b41146102945780639b45d0241461028b5780639db5fa6514610282578063a22cb46514610279578063a59a997314610270578063b88d4fde14610267578063bad7edab1461025e578063c87b56dd14610255578063d5a44f861461024c578063de3e3eff14610243578063e25b7d821461023a578063e985e9c514610231578063ef7bd7f314610228578063f19ed6be1461021f5763f2fde38b1461021757600080fd5b61000e6124aa565b5061000e61209a565b5061000e61207b565b5061000e612018565b5061000e611ff1565b5061000e611fae565b5061000e611f2f565b5061000e611e30565b5061000e611c9c565b5061000e611c3b565b5061000e611c13565b5061000e611b25565b5061000e611acf565b5061000e611ab0565b5061000e611a0a565b5061000e6119e2565b5061000e6119bb565b5061000e611980565b5061000e611958565b5061000e6118fd565b5061000e611835565b5061000e6117d5565b5061000e611732565b5061000e611713565b5061000e611555565b5061000e61130a565b5061000e6112c2565b5061000e611259565b5061000e610fe9565b5061000e610fae565b5061000e610ef6565b5061000e610eb3565b5061000e610c45565b5061000e610c28565b5061000e610bfe565b5061000e610b3e565b5061000e610afc565b5061000e610a93565b5061000e6108df565b5061000e610753565b5061000e610729565b5061000e610634565b5061000e6105c3565b5061000e610589565b5061000e6104ae565b5061000e6103c6565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e5760206004356103e6816103b4565b63ffffffff60e01b166380ac58cd60e01b8114908115610424575b8115610413575b506040519015158152f35b6301ffc9a760e01b14905038610408565b635b5e139f60e01b81149150610401565b600091031261000e57565b918091926000905b828210610460575011610459575050565b6000910152565b91508060209183015181860152018291610448565b9060209161048e81518092818552858086019101610440565b601f01601f1916010190565b9060206104ab928181520190610475565b90565b503461000e5760008060031936011261058657604051908080546104d1816125eb565b80855291600191808316908115610565575060011461050b575b610507856104fb8187038261081f565b6040519182918261049a565b0390f35b80809450527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b82841061054d5750505081016020016104fb826105076104eb565b80546020858701810191909152909301928101610532565b60ff1916602087015250506040840192506104fb91508390506105076104eb565b80fd5b503461000e57602036600319011261000e5760206105a8600435612739565b6001600160a01b0360405191168152f35b8015150361000e57565b503461000e57602036600319011261000e576004356105e1816105b9565b6105e9613121565b600b805460ff60a01b191691151560a01b60ff60a01b16919091179055005b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57604036600319011261000e5761064e610608565b60243561065a81612574565b916001600160a01b0380841680918316146106da5761068c9361068791331490811561068e575b506126c7565b612c2f565b005b6106d491506106cd906106b533916001600160a01b03166000526005602052604060002090565b906001600160a01b0316600052602052604060002090565b5460ff1690565b38610681565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b503461000e57600036600319011261000e57602065ffffffffffff60125460301c16604051908152f35b503461000e57602036600319011261000e576001600160a01b03610775610608565b16600052600f602052602060ff604060002054166040519015158152f35b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116107be57604052565b6107c6610793565b604052565b6060810190811067ffffffffffffffff8211176107be57604052565b6020810190811067ffffffffffffffff8211176107be57604052565b6040810190811067ffffffffffffffff8211176107be57604052565b90601f8019910116810190811067ffffffffffffffff8211176107be57604052565b60405190610160820182811067ffffffffffffffff8211176107be57604052565b60209067ffffffffffffffff8111610880575b601f01601f19160190565b610888610793565b610875565b92919261089982610862565b916108a7604051938461081f565b82948184528183011161000e578281602093846000960137010152565b9080601f8301121561000e578160206104ab9335910161088d565b503461000e57604036600319011261000e5767ffffffffffffffff60043560243582811161000e576109159036906004016108c4565b9161091e613121565b61093e8260005260026020526001600160a01b0360406000205416151590565b15610a285760009182526020906006825260408320918451918211610a1b575b6109728261096c85546125eb565b85614439565b80601f83116001146109ae57508394829394926109a3575b50508160011b916000199060031b1c1916179055604051f35b01519050388061098a565b90601f198316956109c485600052602060002090565b9286905b888210610a03575050836001959697106109ea575b505050811b019055604051f35b015160001960f88460031b161c191690553880806109dd565b806001859682949686015181550195019301906109c8565b610a23610793565b61095e565b60405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201527f6578697374656e7420746f6b656e0000000000000000000000000000000000006064820152608490fd5b503461000e57602036600319011261000e576001600160a01b03610ab5610608565b610abd613179565b501680600052600f60205260ff60406000205416610ad757005b610ae2601354614125565b601355600052600f602052604060002060ff198154169055005b503461000e57602036600319011261000e5761068c610b19610608565b610b21613179565b50614395565b90610b3a60209282815194859201610440565b0190565b503461000e57604036600319011261000e57610b58610608565b60243567ffffffffffffffff811161000e57610bac6020610507936001600160a01b03610b8b60ff9536906004016108c4565b9116600052600c825260406000208260405194838680955193849201610440565b820190815203019020546040519116151581529081906020820190565b606090600319011261000e576001600160a01b0390600435828116810361000e5791602435908116810361000e579060443590565b503461000e5761068c610c1036610bc9565b91610c23610c1e84336128e2565b6127d2565b612aa1565b503461000e57602036600319011261000e5761068c600435613e64565b503461000e5760008060031936011261058657610c60613121565b805b601154811015610d5457610d1590610cd2610c94610c88600e546001600160a01b031690565b6001600160a01b031690565b610cb3610ca084611892565b90546001600160a01b039160031b1c1690565b6040518092630530fa2160e01b82528180602096879560048301613a8e565b03915afa918215610d47575b8592610d1a575b5050610d0f610cf6610ca084611892565b6001600160a01b03166000526015602052604060002090565b55612ff1565b610c62565b610d399250803d10610d40575b610d31818361081f565b810190613363565b3880610ce5565b503d610d27565b610d4f612cd9565b610cde565b50601454610d6a610d64826133f1565b916133f1565b9082805b601854821015610e1157610d8182611e64565b50600981015460081c60ff16610d9681611ead565b6001809103610e0557916005610df992610dd3610dff95610dcc610cf6610dbc8a612a7d565b928501546001600160a01b031690565b5490613bd2565b610ddc86612a7d565b610de68489613b57565b520154610df38288613b57565b52612ff1565b91612ff1565b90610d6e565b505090610dff90612ff1565b847f7928e1fcdff3f83ff90268a0d0206ceb76b7c128cf419793bc2f1593f3c067858585610e4460405192839283613bad565b0390a1604051f35b50634e487b7160e01b600052603260045260246000fd5b906003821015610e7e575b6006600580840460190193060290565b610e86610e4c565b610e6e565b906003821015610ea6575b60066005808404601a0193060290565b610eae610e4c565b610e96565b503461000e57602036600319011261000e57600435600381101561000e578065ffffffffffff600560209304601a01546006600560405194060260031b1c168152f35b503461000e57606036600319011261000e57610f10610608565b6024359067ffffffffffffffff821161000e57610f6e6020610f3961068c9436906004016108c4565b6001600160a01b0360443594610f4e866105b9565b16600052600c825260406000208260405194838680955193849201610440565b8201908152030190209060ff801983541691151516179055565b906003821015610fa1575b601f8260051c601d01921690565b610fa9610e4c565b610f93565b503461000e57602036600319011261000e57600435600381101561000e578060ff60209260051c601d015460f86040519360031b161c168152f35b503461000e57602036600319011261000e57600435611013610c88600d546001600160a01b031690565b330361122a5760185460005b8181106111d25750601854905b8181106111b3578260005b60115460ff90818316101561068c57611052610ca083611892565b61106f816001600160a01b03166000526010602052604060002090565b54600061108f836001600160a01b03166000526010602052604060002090565b5560005b6003848216106110af57505050506110aa906136d4565b611037565b61112e816110f66110f26106cd6003956110e0899a9b9c996001600160a01b03166000526017602052604060002090565b9060ff16600052602052604060002090565b1590565b61113a575b61112961111f826110e0896001600160a01b03166000526017602052604060002090565b805460ff19169055565b6136d4565b90509493929194611093565b61118461117d611155866111506013548a613001565b612a95565b61117761117161116486610f88565b905460ff9160031b1c1690565b60ff1690565b906132fc565b6064900490565b6111ac6111a4886001600160a01b03166000526010602052604060002090565b918254612a95565b90556110fb565b806111c86111c36111cd93612a7d565b614876565b612ff1565b61102c565b806111df61120692611e64565b506008810154159081159161120b575b506111c8576111c88461120183612a7d565b613765565b61101f565b600901546001915060081c60ff1661122281611ead565b1415386111ef565b6040516282b42960e81b8152600490fd5b6044359060ff8216820361000e57565b359060ff8216820361000e57565b503461000e57606036600319011261000e5760206112b9611278610608565b6110e061128361061e565b6001600160a01b0361129361123b565b9316600052601c85526040600020906001600160a01b0316600052602052604060002090565b54604051908152f35b503461000e5761068c6112d436610bc9565b90604051926020840184811067ffffffffffffffff8211176112fd575b60405260008452612857565b611305610793565b6112f1565b503461000e57602036600319011261000e5760043561133061132b82612a49565b611e64565b506008810154158015611535575b8015611515575b80156114fc575b6114ea578054336001600160a01b039091160361122a577f855f5f4ea7c8c6a92f173fbc35c24d01139c2a49e9bcc085f03620cb6a1c651391600060206114668460016113b4600961148e98016113aa81600260ff19825416179055565b5460081c60ff1690565b6113bd81611ead565b146114dc575b6113e38560005260026020526001600160a01b0360406000205416151590565b6114ce575b61143c6002611405610c88610c88600d546001600160a01b031690565b920161142c611422611432835461142c6114228660010190600090565b90549060031b1c90565b90612a95565b9260020190600090565b60405163a9059cbb60e01b8152336004820152602481019190915293849283919082906044820190565b03925af180156114c1575b611493575b50604080519182526002602083015290918291820190565b0390a1005b6114b39060203d81116114ba575b6114ab818361081f565b810190613372565b5038611476565b503d6114a1565b6114c9612cd9565b611471565b6114d785613d57565b6113e8565b6114e585614132565b6113c3565b60405163baf3f0f760e01b8152600490fd5b50600181015460d01c65ffffffffffff4291161161134c565b506003611526600983015460ff1690565b61152f81611ead565b14611345565b506002611546600983015460ff1690565b61154f81611ead565b1461133e565b503461000e57602036600319011261000e5760043561157661132b82612a49565b509061158982546001600160a01b031690565b6001600160a01b033391160361122a5760088201541580156116f7575b6114ea5760098201805461ff001916610100178155916115cf6115ca601454612ff1565b601455565b60018101600682016002830160005b600360ff82161061162a577fab7e44c17ad2a7b4de0e42ab0bc824366a946f184a1133f0b5528347e4ccbd298661161a895460ff9060081c1690565b9061148e60405192839283613704565b8061163b6114226116f293856136e6565b6116a96111a46116936116716116588b546001600160a01b031690565b6001600160a01b0316600052601c602052604060002090565b89546001600160a01b03166001600160a01b0316600052602052604060002090565b875460ff1660ff16600052602052604060002090565b90556116b861142282856136e6565b6116eb6111a46116936116d289546001600160a01b031690565b6001600160a01b0316600052601b602052604060002090565b90556136d4565b6115de565b50600982015460081c60ff1661170c81611ead565b15156115a6565b503461000e57602036600319011261000e5760206105a8600435612574565b503461000e57602036600319011261000e576001600160a01b03611754610608565b16801561177d576000526003602052610507604060002054604051918291829190602083019252565b60405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608490fd5b503461000e57600080600319360112610586576117f0613121565b600b546001600160a01b03198116600b55816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e57606036600319011261000e57366023121561000e5760405161185c816107cb565b60648136821161000e576004905b82821061187a5761068c8461319a565b602080916118878461124b565b81520191019061186a565b6011548110156118ca575b60116000527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680190600090565b6118d2610e4c565b61189d565b80548210156118f0575b60005260206000200190600090565b6118f8610e4c565b6118e1565b503461000e57602036600319011261000e5760043560115481101561000e576001600160a01b0360209160116000527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68015416604051908152f35b503461000e57600036600319011261000e5760206001600160a01b03600d5416604051908152f35b503461000e57602036600319011261000e576001600160a01b036119a2610608565b1660005260106020526020604060002054604051908152f35b503461000e57600036600319011261000e57602060ff600b5460a01c166040519015158152f35b503461000e57600036600319011261000e5760206001600160a01b03600b5416604051908152f35b503461000e576000806003193601126105865760405190806001805491611a30836125eb565b808652928281169081156105655750600114611a5657610507856104fb8187038261081f565b92508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b828410611a985750505081016020016104fb826105076104eb565b80546020858701810191909152909301928101611a7d565b503461000e57600036600319011261000e576020601454604051908152f35b503461000e57604036600319011261000e57611ae9610608565b6024359060ff8216820361000e576020916001600160a01b036112b99216600052601b835260406000209060ff16600052602052604060002090565b503461000e57604036600319011261000e57611b3f610608565b602435611b4b816105b9565b6001600160a01b03821691823314611bce5781611b8b611b9c923360005260056020526040600020906001600160a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b503461000e57600036600319011261000e5760206001600160a01b03600e5416604051908152f35b503461000e57608036600319011261000e57611c55610608565b611c5d61061e565b6064359167ffffffffffffffff831161000e573660238401121561000e57611c9261068c93369060248160040135910161088d565b9160443591612857565b503461000e57602036600319011261000e576004803590611cbf61132b83612a49565b5090611cd282546001600160a01b031690565b6001600160a01b0333911603611e225760099182810192611cf4845460ff1690565b611cfd81611ead565b611e11576000600883018054915b8260ff821610611dce575050506007600092018054925b8360ff821610611d7d57855460ff191660011786557f855f5f4ea7c8c6a92f173fbc35c24d01139c2a49e9bcc085f03620cb6a1c651361148e88611d668133613c2e565b604080519182526001602083015290918291820190565b611da283611d9961132b611d9461142286886118d7565b612a49565b50015460ff1690565b611dab81611ead565b611dbd57611db8906136d4565b611d22565b60405163baf3f0f760e01b81528590fd5b611de584611d9961132b611d9461142286886118d7565b611dee81611ead565b611e0057611dfb906136d4565b611d0b565b60405163baf3f0f760e01b81528690fd5b60405163baf3f0f760e01b81528390fd5b6040516282b42960e81b8152fd5b503461000e57602036600319011261000e57610507611e50600435612e20565b604051918291602083526020830190610475565b600a90601854811015611ea0575b6018600052027fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e0190600090565b611ea8610e4c565b611e72565b60041115611eb757565b634e487b7160e01b600052602160045260246000fd5b94909260e096929998979460ff9461010088019b6001600160a01b03809216895216602088015265ffffffffffff809216604088015216606086015260808501521660a0830152611f1d81611ead565b60c0820152611f2b83611ead565b0152565b503461000e57602036600319011261000e5760043560185481101561000e57611f5790611e64565b506001600160a01b03906105078282541691600181015492600582015491600960ff6006830154169101549260405196879660ff808760081c169616948160d01c9265ffffffffffff8360a01c1692169089611ecd565b503461000e57602036600319011261000e57600435600381101561000e578065ffffffffffff600560209304601901546006600560405194060260031b1c168152f35b503461000e57600036600319011261000e57602065ffffffffffff60125416604051908152f35b503461000e57604036600319011261000e57602060ff61206f612039610608565b6001600160a01b0361204961061e565b9116600052600584526040600020906001600160a01b0316600052602052604060002090565b54166040519015158152f35b503461000e57600036600319011261000e576020601354604051908152f35b50606036600319011261000e576120af610608565b602435906120bb61123b565b908215612464576120e56110f26106cd836001600160a01b0316600052600f602052604060002090565b61241e576001600160a01b03811680159081156123b857843331106123a65784915b15612300575034036122af57612273916110e06111a49260008080808961213f610c88610c88610c88600e546001600160a01b031690565b82f1156122a2575b612228612152613387565b8761216060ff8716836132b0565b52600b544265ffffffffffff16919060a01c60ff161561228e576121a161219b61218988610e8b565b905465ffffffffffff9160031b1c1690565b8361339b565b906121aa6133d7565b906121f36121b66133d7565b936121e46121c2610841565b338152966001600160a01b038a16602089015265ffffffffffff166040880152565b65ffffffffffff166060860152565b6080840152600060a084015260ff871660c084015260e08301526101008201526000610120820152600161014082015261350a565b61224d836110e0836106b5336001600160a01b0316600052601c602052604060002090565b612258878254612a95565b90556001600160a01b0316600052601b602052604060002090565b90556122836115ca601454612ff1565b61068c601854614876565b6121a161229d61218988610e63565b61219b565b6122aa612cd9565b612147565b604051631fff1b3b60e21b815260206004820152602260248201527f496e636f7272656374206e617469766520636f696e207374616b6520616d6f756044820152611b9d60f21b6064820152608490fd5b6111a492612365602061227396946110e094612327610c88600e546001600160a01b031690565b6040516323b872dd60e01b81523360048201526001600160a01b03909116602482015260448101929092529092839190829060009082906064820190565b03925af18015612399575b61237b575b50612147565b6123929060203d81116114ba576114ab818361081f565b5038612375565b6123a1612cd9565b612370565b604051631e9acf1760e31b8152600490fd5b6040516370a0823160e01b81523360048201528590602081602481865afa908115612411575b6000916123f3575b50106123a6578491612107565b61240b915060203d8111610d4057610d31818361081f565b386123e6565b612419612cd9565b6123de565b604051631fff1b3b60e21b815260206004820152601360248201527f496e76616c6964207374616b6520746f6b656e000000000000000000000000006044820152606490fd5b604051631fff1b3b60e21b815260206004820152601560248201527f416d6f756e742063616e6e6f74206265207a65726f00000000000000000000006044820152606490fd5b503461000e57602036600319011261000e576124c4610608565b6124cc613121565b6001600160a01b0380911690811561252057600091600b5491816001600160a01b0319841617600b5560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b60005260026020526001600160a01b036040600020541680156125945790565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608490fd5b90600182811c9216801561261b575b602083101461260557565b634e487b7160e01b600052602260045260246000fd5b91607f16916125fa565b9060405191826000825492612639846125eb565b9081845260019485811690816000146126a85750600114612665575b50506126639250038361081f565b565b9093915060005260209081600020936000915b81831061269057505061266393508201013880612655565b85548884018501529485019487945091830191612678565b9550505050505060ff1916602083015261266382604081013880612655565b156126ce57565b60405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608490fd5b6127598160005260026020526001600160a01b0360406000205416151590565b156127785760005260046020526001600160a01b036040600020541690565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b156127d957565b60405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608490fd5b60405190612851826107e7565b60008252565b9061287b93929161286b610c1e84336128e2565b612876838383612aa1565b612d16565b1561288257565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b6129028260005260026020526001600160a01b0360406000205416151590565b156129805761291082612574565b916001600160a01b0390818316928285168414948515612950575b5050831561293a575b50505090565b61294691929350612739565b1614388080612934565b60ff929550906106b5612976926001600160a01b03166000526005602052604060002090565b541692388061292b565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b156129e157565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b60018110612a59575b6000190190565b612a61612a32565b612a52565b818110612a71570390565b612a79612a32565b0390565b6001906001198111612a8d570190565b610b3a612a32565b81198111612a8d570190565b90612aab83612574565b6001600160a01b039182918285169384911603612b8657612af9612b5d92821694612ad78615156129da565b612ae087612bd9565b6001600160a01b03166000526003602052604060002090565b612b038154612a49565b9055612b22816001600160a01b03166000526003602052604060002090565b612b2c8154612a7d565b9055612b42856000526002602052604060002090565b906001600160a01b03166001600160a01b0319825416179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b600081815260046020526040812080546001600160a01b03191690556001600160a01b03612c0683612574565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92582604051a4565b600082815260046020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b0380612c6884612574565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b9081602091031261000e57516104ab816103b4565b90926104ab94936080936001600160a01b03809216845216602083015260408201528160608201520190610475565b506040513d6000823e3d90fd5b3d15612d11573d90612cf782610862565b91612d05604051938461081f565b82523d6000602084013e565b606090565b92909190823b15612e1757612d519260209260006001600160a01b03604051809781968295630a85bd0160e11b9b8c85523360048601612caa565b0393165af160009181612de7575b50612dd957612d6c612ce6565b80519081612dd45760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b602001fd5b6001600160e01b0319161490565b612e0991925060203d8111612e10575b612e01818361081f565b810190612c95565b9038612d5f565b503d612df7565b50505050600190565b612e408160005260026020526001600160a01b0360406000205416151590565b15612eb757612e61612e5c826000526006602052604060002090565b612625565b90612e6a612844565b805115612eb2578251612e8257506104ab9150612f22565b6104ab9150612ea4612e9e936040519485936020850190610b27565b90610b27565b03601f19810183528261081f565b505090565b60405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f722060448201527f6e6f6e6578697374656e7420746f6b656e0000000000000000000000000000006064820152608490fd5b612f428160005260026020526001600160a01b0360406000205416151590565b15612f8657612f4f612844565b805190919015612f7c57612e9e91612ea4612f6c6104ab93613040565b6040519485936020850190610b27565b50506104ab612844565b60405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608490fd5b6001906000198114612a8d570190565b811561300b570490565b634e487b7160e01b600052601260045260246000fd5b90602091805182101561303357010190565b61303b610e4c565b010190565b801561310357806000908282935b6130ef575061305c83610862565b9261306a604051948561081f565b80845281601f1961307a83610862565b013660208701375b61308c5750505090565b61309590612a49565b90600a906030828206801982116130e2575b0160f81b7fff0000000000000000000000000000000000000000000000000000000000000016841a6130d98487613021565b53049081613082565b6130ea612a32565b6130a7565b926130fb600a91612ff1565b93048061304e565b5060405161311081610803565b60018152600360fc1b602082015290565b6001600160a01b03600b5416330361313557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6040519061318682610803565b600582526430b236b4b760d91b6020830152565b6131a2613179565b5060ff808251166064826131ce6131c1602094838689015116906132cf565b82604088015116906132cf565b160361326b578290601d9160009384915b60038084101561322e579084918382511690888854911b85811b9283911b169119161786550191600180960195601f871161321f575b50600101916131df565b60009650909401936001613215565b505050505050506132667f201257788e5fd5cbd0485c8150d2a1426c7b9024669f7931decee52d0be5814a9160405191829182613332565b0390a1565b60649060405190631fff1b3b60e21b82526004820152601260248201527f4d7573742073756d20757020746f2031303000000000000000000000000000006044820152fd5b9060038110156132c2575b60051b0190565b6132ca610e4c565b6132bb565b60ff8091169116908160ff038111612a8d570190565b50634e487b7160e01b600052600060045260246000fd5b806000190482118115151661330f570290565b613317612a32565b0290565b818110613326575050565b6000815560010161331b565b6060810192916000915b6003831061334957505050565b60019060ff8351168152602080910192019201919061333c565b9081602091031261000e575190565b9081602091031261000e57516104ab816105b9565b60405190613394826107cb565b6060368337565b9065ffffffffffff8080931691168092038111612a8d570190565b60209067ffffffffffffffff81116133cf5760051b0190565b6132ca610793565b604051906133e4826107e7565b6000808352366020840137565b906133fb826133b6565b613408604051918261081f565b8281528092613419601f19916133b6565b0190602036910137565b61342c82611ead565b52565b906000905b6003821061344157505050565b6001602082829351865501930191019091613434565b815191600160401b83116134c6575b81548383558084106134a8575b50602080910191600052806000206000925b848410613493575050505050565b60018382829351855501920193019290613485565b6134c09083600052846020600020918201910161331b565b38613473565b6134ce610793565b613466565b906134dd81611ead565b60ff80198354169116179055565b906134f581611ead565b61ff0082549160081b169061ff001916179055565b612663906101406009613532601854600160401b8110156136c7575b60018101601855611e64565b6136ba575b61356761354b85516001600160a01b031690565b82546001600160a01b0319166001600160a01b03909116178255565b61362d6001820161358561354b60208801516001600160a01b031690565b6135d561359b604088015165ffffffffffff1690565b82547fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b65ffffffffffff60a01b16178255565b606086015165ffffffffffff16815479ffffffffffffffffffffffffffffffffffffffffffffffffffff1660d09190911b7fffffffffffff000000000000000000000000000000000000000000000000000016179055565b61363e60808501516002830161342f565b60a0840151600582015561366c61365960c086015160ff1690565b600683019060ff1660ff19825416179055565b61367d60e085015160078301613457565b61368f61010085015160088301613457565b01916136a96101208201516136a381611ead565b846134d3565b0151906136b582611ead565b6134eb565b6136c26132e5565b613537565b6136cf610793565b613526565b60ff6001911660ff8114612a8d570190565b60038210156136f7575b0190600090565b6136ff610e4c565b6136f0565b90815260408101929190602090611f2b83611ead565b9061373d61266392805490600160401b821015613758575b6001820181556118d7565b90919082549060031b600019811b9283911b16911916179055565b613760610793565b613732565b9061377261132b83612a49565b509161378583546001600160a01b031690565b6137a2816001600160a01b03166000526016602052604060002090565b906137c865ffffffffffff421680939065ffffffffffff16600052602052604060002090565b5415613953575b5083546001600160a01b0316600090815260166020526040902081613805919065ffffffffffff16600052602052604060002090565b54613813906007860161371a565b83546001600160a01b0316600090815260166020526040902090613848919065ffffffffffff16600052602052604060002090565b5461385290612a49565b61385b90611e64565b509061386a906008830161371a565b60018301918254613881906001600160a01b031690565b84546001600160a01b03169460060194855461389d9060ff1690565b80936013546138ab91613001565b6138c8846001600160a01b03166000526010602052604060002090565b546138d291612a95565b916138dc9361460d565b91600201906138ea916136e6565b815491929091600383901b1c9061390091612a95565b9061391f92919082549060031b600019811b9283911b16911916179055565b546001600160a01b03166000908152601760209081526040808320935460ff168352929052205b805460ff19166001179055565b613a239061395f613387565b600d546001600160a01b03169061397c600b5460ff9060a01c1690565b15613a755760125461399a9060301c65ffffffffffff165b8661339b565b906139f06139a66133d7565b926139dd6139b26133d7565b956139cd6139be610841565b6001600160a01b039099168952565b6001600160a01b03166020880152565b65ffffffffffff881660408701526121e4565b6080840152600060a0840152600260c084015260e08301526101008201526000610120820152600061014082015261350a565b601854613a6e82613a57613a3e88546001600160a01b031690565b6001600160a01b03166000526016602052604060002090565b9065ffffffffffff16600052602052604060002090565b55386137cf565b61399a613a8960125465ffffffffffff1690565b613994565b919091604081526000600754613aa3816125eb565b908160408501526001908181169081600014613b355750600114613ad6575b50506001600160a01b036020919416910152565b6007600090815292507fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6885b828410613b1f5750505081016060016001600160a01b036020613ac2565b8054606085870101526020909301928101613b01565b60ff1916606086015250506080830191506001600160a01b0390506020613ac2565b6020918151811015613b6c575b60051b010190565b613b74610e4c565b613b64565b90815180825260208080930193019160005b828110613b99575050505090565b835185529381019392810192600101613b8b565b9091613bc46104ab93604084526040840190613b79565b916020818403910152613b79565b6005613c13613bf0613c1d9360018110613c21575b60001901611e64565b50936001600160a01b03806001870154169086541660ff6006880154169161460d565b9201918254612a95565b9055565b613c29612a32565b613be7565b6001600160a01b038116908115613d1357613c5f8360005260026020526001600160a01b0360406000205416151590565b613cce5780613c84613ca4926001600160a01b03166000526003602052604060002090565b613c8e8154612a7d565b9055612b42846000526002602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a4565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b6001600160a01b03613d6882612574565b613d7183612bd9565b16908060008381948252600360205260408220805460018110613e57575b6000190190558282526002602052604082206001600160a01b031981541690557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef82604051a4613df2613dec826000526006602052604060002090565b546125eb565b613dfa575050565b613e0e906000526006602052604060002090565b613e1881546125eb565b80613e2257505050565b601f8111600114613e31575055565b81835260208320613e4d91601f0160051c81019060010161331b565b8160208120915555565b613e5f612a32565b613d8f565b613e7061132b82612a49565b506001600160a01b0380613e8b83546001600160a01b031690565b1633810361122a5760098381015460081c60ff1692613ea984611ead565b60018094036114ea57600060078601938454915b8260ff8216106140ea5750505083613eed6002870161142c611422611432835461142c6114228660010190600090565b95019085613f0283546001600160a01b031690565b91821680156140bc576020613f5291613f26610c88600e546001600160a01b031690565b6040516370a0823160e01b81526001600160a01b03909116600482015292839190829081906024820190565b03915afa9081156140af575b600091614091575b50106123a657613f9291613f8087613f87935b339061447e565b5460d01c90565b65ffffffffffff1690565b421161408a576000835b613faf575b50505050506126639061421c565b8254811015614085579061404a828561401384613fd661132b611d94611422869a8c6118d7565b50614003613fe7611422878c6118d7565b60005260026020526001600160a01b0360406000205416151590565b61406b575b015460081c60ff1690565b61401c81611ead565b14614051575b6111c887614038600d546001600160a01b031690565b600b546001600160a01b03169061447e565b9091613f9c565b61406661406161142283886118d7565b61421c565b614022565b61408061407b611422878c6118d7565b613d57565b614008565b613fa1565b5050505050565b6140a9915060203d8111610d4057610d31818361081f565b38613f66565b6140b7612cd9565b613f5e565b506140d2610c88600e546001600160a01b031690565b3110156123a657613f9291613f8087613f8793613f79565b81614112610c8861410461132b611d94611422878d6118d7565b50546001600160a01b031690565b036114ea57614120906136d4565b613ebd565b8015612a59576000190190565b61413e61132b82612a49565b5060098101805461ff00191661020017905561415e6115ca601454614125565b60018101600682016002830160005b600360ff8216106141b857505060408051948552600260208601527fab7e44c17ad2a7b4de0e42ab0bc824366a946f184a1133f0b5528347e4ccbd2994935083925082019050613266565b806141c961142261421793856136e6565b6141ee6141e66116936116716116588b546001600160a01b031690565b918254612a66565b90556141fd61142282856136e6565b6116eb6141e66116936116d289546001600160a01b031690565b61416d565b61422861132b82612a49565b5060098101805461ff001916610300178155906142496115ca601454614125565b60018101600682016002830160005b600360ff82161061430357505060408051868152600360208201527fab7e44c17ad2a7b4de0e42ab0bc824366a946f184a1133f0b5528347e4ccbd2994509092509050a160016142a9825460ff1690565b6142b281611ead565b146142bb575050565b805460ff191660031790557f855f5f4ea7c8c6a92f173fbc35c24d01139c2a49e9bcc085f03620cb6a1c65139061326690604080519182526003602083015290918291820190565b806141c961142261431493856136e6565b614258565b6001600160a01b03601154600160401b811015614388575b600181018060115581101561437b575b60116000527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680191166001600160a01b0319825416179055565b614383610e4c565b614341565b614390610793565b614331565b6001600160a01b039081811680600052600f60205260ff92836040600020541615614406575b60115460005b81868216106143d857505050506126639150614319565b83836143e383611892565b90549060031b1c16146143fe576143f9906136d4565b6143c1565b505050505050565b614411601354612ff1565b601355614434613946846001600160a01b0316600052600f602052604060002090565b6143bb565b9190601f811161444857505050565b612663926000526020600020906020601f840160051c83019310614474575b601f0160051c019061331b565b9091508190614467565b6001600160a01b03929083811690816145195750506144a8610c88600e546001600160a01b031690565b818131106123a657803b1561000e57604051633e97486160e11b8152939092166001600160a01b03166004840152602483015260009082908183816044810103925af1801561450c575b6144f95750565b80614506612663926107aa565b80610435565b614514612cd9565b6144f2565b91909350614532610c88600e546001600160a01b031690565b6040516370a0823160e01b81526001600160a01b03821660048201526020958391908790829060249082905afa908115614600575b6000916145e3575b50106123a65760405163276d76f960e21b81526001600160a01b03938416600482015293909216602484015260448301528290829060649082906000905af180156145d6575b6145bd575050565b816145d392903d106114ba576114ab818361081f565b50565b6145de612cd9565b6145b5565b6145fa9150873d8911610d4057610d31818361081f565b3861456f565b614608612cd9565b614567565b916110e0606461468261469d946001600160a01b0361464c6104ab9960038810156146a4575b60ff8860051c601d015460f88a60031b161c16906132fc565b9116600052601c60205261467b856110e0896040600020906001600160a01b0316600052602052604060002090565b54906132fc565b04936001600160a01b0316600052601b602052604060002090565b5490613001565b6146ac610e4c565b614633565b60405191906000835b600382106146e1575050506060820182811067ffffffffffffffff8211176107be57604052565b60016020819285548152019301910190916146ba565b9060405191828154918282526020928383019160005283600020936000905b82821061472c575050506126639250038361081f565b855484526001958601958895509381019390910190614716565b9061266360ff6009614756610841565b9461477861476b82546001600160a01b031690565b6001600160a01b03168752565b60018101546001600160a01b038116602088015265ffffffffffff60a082901c16604088015260d01c60608701526147b2600282016146b1565b6080870152600581015460a08701526147dc6147d2600683015460ff1690565b60ff1660c0880152565b6147e8600782016146f7565b60e08701526147f9600882016146f7565b61010087015201546148118282166101208701613423565b60081c166101408401613423565b9592916104ab9897949260ff969288526001600160a01b03809216602089015216604087015265ffffffffffff809216606087015216608085015260a08401521660c0820152610100908160e08201520190613b79565b7f502036e72ba38bf7ed380b81a9c3913dd638dd50b9f7fbcf82c0a0d271d81a80906001811061494f575b6148b76148b16000198301611e64565b50614746565b906132666148cc83516001600160a01b031690565b926148e160208201516001600160a01b031690565b906148f5604082015165ffffffffffff1690565b606082015165ffffffffffff1661492d6080840161492661491e82516020815191015190612a95565b915160400190565b5190612a95565b9161010061493f60c086015160ff1690565b940151946040519889988961481f565b614957612a32565b6148a156fea2646970667358221220e5590467f273c4d1903f459cf4610750630ba645e831c271a67c798d3b5d51c864736f6c634300080e003331ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a7146103ab57806306fdde03146103a2578063081812fc1461039957806308ed8d1614610390578063095ea7b31461038757806310062f171461037e578063125cc42f14610375578063162094c41461036c578063166866c7146103635780631fecb71a1461035a578063217fe6c61461035157806323b872dd146103485780632e17de781461033f5780633587e1611461033657806338934a6a1461032d57806339d2525f146103245780633c661b8b1461031b5780633de15c12146103125780633df725611461030957806342842e0e14610300578063455addac146102f7578063528a9e4d146102ee5780636352211e146102e557806370a08231146102dc578063715018a6146102d357806372a4db4a146102ca5780637547c7a3146102c157806382952200146102b8578063848778b4146102af5780638d03b102146102a65780638da5cb5b1461029d57806395d89b41146102945780639b45d0241461028b5780639db5fa6514610282578063a22cb46514610279578063a59a997314610270578063b88d4fde14610267578063bad7edab1461025e578063c87b56dd14610255578063d5a44f861461024c578063de3e3eff14610243578063e25b7d821461023a578063e985e9c514610231578063ef7bd7f314610228578063f19ed6be1461021f5763f2fde38b1461021757600080fd5b61000e6124aa565b5061000e61209a565b5061000e61207b565b5061000e612018565b5061000e611ff1565b5061000e611fae565b5061000e611f2f565b5061000e611e30565b5061000e611c9c565b5061000e611c3b565b5061000e611c13565b5061000e611b25565b5061000e611acf565b5061000e611ab0565b5061000e611a0a565b5061000e6119e2565b5061000e6119bb565b5061000e611980565b5061000e611958565b5061000e6118fd565b5061000e611835565b5061000e6117d5565b5061000e611732565b5061000e611713565b5061000e611555565b5061000e61130a565b5061000e6112c2565b5061000e611259565b5061000e610fe9565b5061000e610fae565b5061000e610ef6565b5061000e610eb3565b5061000e610c45565b5061000e610c28565b5061000e610bfe565b5061000e610b3e565b5061000e610afc565b5061000e610a93565b5061000e6108df565b5061000e610753565b5061000e610729565b5061000e610634565b5061000e6105c3565b5061000e610589565b5061000e6104ae565b5061000e6103c6565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e5760206004356103e6816103b4565b63ffffffff60e01b166380ac58cd60e01b8114908115610424575b8115610413575b506040519015158152f35b6301ffc9a760e01b14905038610408565b635b5e139f60e01b81149150610401565b600091031261000e57565b918091926000905b828210610460575011610459575050565b6000910152565b91508060209183015181860152018291610448565b9060209161048e81518092818552858086019101610440565b601f01601f1916010190565b9060206104ab928181520190610475565b90565b503461000e5760008060031936011261058657604051908080546104d1816125eb565b80855291600191808316908115610565575060011461050b575b610507856104fb8187038261081f565b6040519182918261049a565b0390f35b80809450527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b82841061054d5750505081016020016104fb826105076104eb565b80546020858701810191909152909301928101610532565b60ff1916602087015250506040840192506104fb91508390506105076104eb565b80fd5b503461000e57602036600319011261000e5760206105a8600435612739565b6001600160a01b0360405191168152f35b8015150361000e57565b503461000e57602036600319011261000e576004356105e1816105b9565b6105e9613121565b600b805460ff60a01b191691151560a01b60ff60a01b16919091179055005b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57604036600319011261000e5761064e610608565b60243561065a81612574565b916001600160a01b0380841680918316146106da5761068c9361068791331490811561068e575b506126c7565b612c2f565b005b6106d491506106cd906106b533916001600160a01b03166000526005602052604060002090565b906001600160a01b0316600052602052604060002090565b5460ff1690565b38610681565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b503461000e57600036600319011261000e57602065ffffffffffff60125460301c16604051908152f35b503461000e57602036600319011261000e576001600160a01b03610775610608565b16600052600f602052602060ff604060002054166040519015158152f35b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116107be57604052565b6107c6610793565b604052565b6060810190811067ffffffffffffffff8211176107be57604052565b6020810190811067ffffffffffffffff8211176107be57604052565b6040810190811067ffffffffffffffff8211176107be57604052565b90601f8019910116810190811067ffffffffffffffff8211176107be57604052565b60405190610160820182811067ffffffffffffffff8211176107be57604052565b60209067ffffffffffffffff8111610880575b601f01601f19160190565b610888610793565b610875565b92919261089982610862565b916108a7604051938461081f565b82948184528183011161000e578281602093846000960137010152565b9080601f8301121561000e578160206104ab9335910161088d565b503461000e57604036600319011261000e5767ffffffffffffffff60043560243582811161000e576109159036906004016108c4565b9161091e613121565b61093e8260005260026020526001600160a01b0360406000205416151590565b15610a285760009182526020906006825260408320918451918211610a1b575b6109728261096c85546125eb565b85614439565b80601f83116001146109ae57508394829394926109a3575b50508160011b916000199060031b1c1916179055604051f35b01519050388061098a565b90601f198316956109c485600052602060002090565b9286905b888210610a03575050836001959697106109ea575b505050811b019055604051f35b015160001960f88460031b161c191690553880806109dd565b806001859682949686015181550195019301906109c8565b610a23610793565b61095e565b60405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201527f6578697374656e7420746f6b656e0000000000000000000000000000000000006064820152608490fd5b503461000e57602036600319011261000e576001600160a01b03610ab5610608565b610abd613179565b501680600052600f60205260ff60406000205416610ad757005b610ae2601354614125565b601355600052600f602052604060002060ff198154169055005b503461000e57602036600319011261000e5761068c610b19610608565b610b21613179565b50614395565b90610b3a60209282815194859201610440565b0190565b503461000e57604036600319011261000e57610b58610608565b60243567ffffffffffffffff811161000e57610bac6020610507936001600160a01b03610b8b60ff9536906004016108c4565b9116600052600c825260406000208260405194838680955193849201610440565b820190815203019020546040519116151581529081906020820190565b606090600319011261000e576001600160a01b0390600435828116810361000e5791602435908116810361000e579060443590565b503461000e5761068c610c1036610bc9565b91610c23610c1e84336128e2565b6127d2565b612aa1565b503461000e57602036600319011261000e5761068c600435613e64565b503461000e5760008060031936011261058657610c60613121565b805b601154811015610d5457610d1590610cd2610c94610c88600e546001600160a01b031690565b6001600160a01b031690565b610cb3610ca084611892565b90546001600160a01b039160031b1c1690565b6040518092630530fa2160e01b82528180602096879560048301613a8e565b03915afa918215610d47575b8592610d1a575b5050610d0f610cf6610ca084611892565b6001600160a01b03166000526015602052604060002090565b55612ff1565b610c62565b610d399250803d10610d40575b610d31818361081f565b810190613363565b3880610ce5565b503d610d27565b610d4f612cd9565b610cde565b50601454610d6a610d64826133f1565b916133f1565b9082805b601854821015610e1157610d8182611e64565b50600981015460081c60ff16610d9681611ead565b6001809103610e0557916005610df992610dd3610dff95610dcc610cf6610dbc8a612a7d565b928501546001600160a01b031690565b5490613bd2565b610ddc86612a7d565b610de68489613b57565b520154610df38288613b57565b52612ff1565b91612ff1565b90610d6e565b505090610dff90612ff1565b847f7928e1fcdff3f83ff90268a0d0206ceb76b7c128cf419793bc2f1593f3c067858585610e4460405192839283613bad565b0390a1604051f35b50634e487b7160e01b600052603260045260246000fd5b906003821015610e7e575b6006600580840460190193060290565b610e86610e4c565b610e6e565b906003821015610ea6575b60066005808404601a0193060290565b610eae610e4c565b610e96565b503461000e57602036600319011261000e57600435600381101561000e578065ffffffffffff600560209304601a01546006600560405194060260031b1c168152f35b503461000e57606036600319011261000e57610f10610608565b6024359067ffffffffffffffff821161000e57610f6e6020610f3961068c9436906004016108c4565b6001600160a01b0360443594610f4e866105b9565b16600052600c825260406000208260405194838680955193849201610440565b8201908152030190209060ff801983541691151516179055565b906003821015610fa1575b601f8260051c601d01921690565b610fa9610e4c565b610f93565b503461000e57602036600319011261000e57600435600381101561000e578060ff60209260051c601d015460f86040519360031b161c168152f35b503461000e57602036600319011261000e57600435611013610c88600d546001600160a01b031690565b330361122a5760185460005b8181106111d25750601854905b8181106111b3578260005b60115460ff90818316101561068c57611052610ca083611892565b61106f816001600160a01b03166000526010602052604060002090565b54600061108f836001600160a01b03166000526010602052604060002090565b5560005b6003848216106110af57505050506110aa906136d4565b611037565b61112e816110f66110f26106cd6003956110e0899a9b9c996001600160a01b03166000526017602052604060002090565b9060ff16600052602052604060002090565b1590565b61113a575b61112961111f826110e0896001600160a01b03166000526017602052604060002090565b805460ff19169055565b6136d4565b90509493929194611093565b61118461117d611155866111506013548a613001565b612a95565b61117761117161116486610f88565b905460ff9160031b1c1690565b60ff1690565b906132fc565b6064900490565b6111ac6111a4886001600160a01b03166000526010602052604060002090565b918254612a95565b90556110fb565b806111c86111c36111cd93612a7d565b614876565b612ff1565b61102c565b806111df61120692611e64565b506008810154159081159161120b575b506111c8576111c88461120183612a7d565b613765565b61101f565b600901546001915060081c60ff1661122281611ead565b1415386111ef565b6040516282b42960e81b8152600490fd5b6044359060ff8216820361000e57565b359060ff8216820361000e57565b503461000e57606036600319011261000e5760206112b9611278610608565b6110e061128361061e565b6001600160a01b0361129361123b565b9316600052601c85526040600020906001600160a01b0316600052602052604060002090565b54604051908152f35b503461000e5761068c6112d436610bc9565b90604051926020840184811067ffffffffffffffff8211176112fd575b60405260008452612857565b611305610793565b6112f1565b503461000e57602036600319011261000e5760043561133061132b82612a49565b611e64565b506008810154158015611535575b8015611515575b80156114fc575b6114ea578054336001600160a01b039091160361122a577f855f5f4ea7c8c6a92f173fbc35c24d01139c2a49e9bcc085f03620cb6a1c651391600060206114668460016113b4600961148e98016113aa81600260ff19825416179055565b5460081c60ff1690565b6113bd81611ead565b146114dc575b6113e38560005260026020526001600160a01b0360406000205416151590565b6114ce575b61143c6002611405610c88610c88600d546001600160a01b031690565b920161142c611422611432835461142c6114228660010190600090565b90549060031b1c90565b90612a95565b9260020190600090565b60405163a9059cbb60e01b8152336004820152602481019190915293849283919082906044820190565b03925af180156114c1575b611493575b50604080519182526002602083015290918291820190565b0390a1005b6114b39060203d81116114ba575b6114ab818361081f565b810190613372565b5038611476565b503d6114a1565b6114c9612cd9565b611471565b6114d785613d57565b6113e8565b6114e585614132565b6113c3565b60405163baf3f0f760e01b8152600490fd5b50600181015460d01c65ffffffffffff4291161161134c565b506003611526600983015460ff1690565b61152f81611ead565b14611345565b506002611546600983015460ff1690565b61154f81611ead565b1461133e565b503461000e57602036600319011261000e5760043561157661132b82612a49565b509061158982546001600160a01b031690565b6001600160a01b033391160361122a5760088201541580156116f7575b6114ea5760098201805461ff001916610100178155916115cf6115ca601454612ff1565b601455565b60018101600682016002830160005b600360ff82161061162a577fab7e44c17ad2a7b4de0e42ab0bc824366a946f184a1133f0b5528347e4ccbd298661161a895460ff9060081c1690565b9061148e60405192839283613704565b8061163b6114226116f293856136e6565b6116a96111a46116936116716116588b546001600160a01b031690565b6001600160a01b0316600052601c602052604060002090565b89546001600160a01b03166001600160a01b0316600052602052604060002090565b875460ff1660ff16600052602052604060002090565b90556116b861142282856136e6565b6116eb6111a46116936116d289546001600160a01b031690565b6001600160a01b0316600052601b602052604060002090565b90556136d4565b6115de565b50600982015460081c60ff1661170c81611ead565b15156115a6565b503461000e57602036600319011261000e5760206105a8600435612574565b503461000e57602036600319011261000e576001600160a01b03611754610608565b16801561177d576000526003602052610507604060002054604051918291829190602083019252565b60405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608490fd5b503461000e57600080600319360112610586576117f0613121565b600b546001600160a01b03198116600b55816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e57606036600319011261000e57366023121561000e5760405161185c816107cb565b60648136821161000e576004905b82821061187a5761068c8461319a565b602080916118878461124b565b81520191019061186a565b6011548110156118ca575b60116000527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680190600090565b6118d2610e4c565b61189d565b80548210156118f0575b60005260206000200190600090565b6118f8610e4c565b6118e1565b503461000e57602036600319011261000e5760043560115481101561000e576001600160a01b0360209160116000527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68015416604051908152f35b503461000e57600036600319011261000e5760206001600160a01b03600d5416604051908152f35b503461000e57602036600319011261000e576001600160a01b036119a2610608565b1660005260106020526020604060002054604051908152f35b503461000e57600036600319011261000e57602060ff600b5460a01c166040519015158152f35b503461000e57600036600319011261000e5760206001600160a01b03600b5416604051908152f35b503461000e576000806003193601126105865760405190806001805491611a30836125eb565b808652928281169081156105655750600114611a5657610507856104fb8187038261081f565b92508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b828410611a985750505081016020016104fb826105076104eb565b80546020858701810191909152909301928101611a7d565b503461000e57600036600319011261000e576020601454604051908152f35b503461000e57604036600319011261000e57611ae9610608565b6024359060ff8216820361000e576020916001600160a01b036112b99216600052601b835260406000209060ff16600052602052604060002090565b503461000e57604036600319011261000e57611b3f610608565b602435611b4b816105b9565b6001600160a01b03821691823314611bce5781611b8b611b9c923360005260056020526040600020906001600160a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b503461000e57600036600319011261000e5760206001600160a01b03600e5416604051908152f35b503461000e57608036600319011261000e57611c55610608565b611c5d61061e565b6064359167ffffffffffffffff831161000e573660238401121561000e57611c9261068c93369060248160040135910161088d565b9160443591612857565b503461000e57602036600319011261000e576004803590611cbf61132b83612a49565b5090611cd282546001600160a01b031690565b6001600160a01b0333911603611e225760099182810192611cf4845460ff1690565b611cfd81611ead565b611e11576000600883018054915b8260ff821610611dce575050506007600092018054925b8360ff821610611d7d57855460ff191660011786557f855f5f4ea7c8c6a92f173fbc35c24d01139c2a49e9bcc085f03620cb6a1c651361148e88611d668133613c2e565b604080519182526001602083015290918291820190565b611da283611d9961132b611d9461142286886118d7565b612a49565b50015460ff1690565b611dab81611ead565b611dbd57611db8906136d4565b611d22565b60405163baf3f0f760e01b81528590fd5b611de584611d9961132b611d9461142286886118d7565b611dee81611ead565b611e0057611dfb906136d4565b611d0b565b60405163baf3f0f760e01b81528690fd5b60405163baf3f0f760e01b81528390fd5b6040516282b42960e81b8152fd5b503461000e57602036600319011261000e57610507611e50600435612e20565b604051918291602083526020830190610475565b600a90601854811015611ea0575b6018600052027fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e0190600090565b611ea8610e4c565b611e72565b60041115611eb757565b634e487b7160e01b600052602160045260246000fd5b94909260e096929998979460ff9461010088019b6001600160a01b03809216895216602088015265ffffffffffff809216604088015216606086015260808501521660a0830152611f1d81611ead565b60c0820152611f2b83611ead565b0152565b503461000e57602036600319011261000e5760043560185481101561000e57611f5790611e64565b506001600160a01b03906105078282541691600181015492600582015491600960ff6006830154169101549260405196879660ff808760081c169616948160d01c9265ffffffffffff8360a01c1692169089611ecd565b503461000e57602036600319011261000e57600435600381101561000e578065ffffffffffff600560209304601901546006600560405194060260031b1c168152f35b503461000e57600036600319011261000e57602065ffffffffffff60125416604051908152f35b503461000e57604036600319011261000e57602060ff61206f612039610608565b6001600160a01b0361204961061e565b9116600052600584526040600020906001600160a01b0316600052602052604060002090565b54166040519015158152f35b503461000e57600036600319011261000e576020601354604051908152f35b50606036600319011261000e576120af610608565b602435906120bb61123b565b908215612464576120e56110f26106cd836001600160a01b0316600052600f602052604060002090565b61241e576001600160a01b03811680159081156123b857843331106123a65784915b15612300575034036122af57612273916110e06111a49260008080808961213f610c88610c88610c88600e546001600160a01b031690565b82f1156122a2575b612228612152613387565b8761216060ff8716836132b0565b52600b544265ffffffffffff16919060a01c60ff161561228e576121a161219b61218988610e8b565b905465ffffffffffff9160031b1c1690565b8361339b565b906121aa6133d7565b906121f36121b66133d7565b936121e46121c2610841565b338152966001600160a01b038a16602089015265ffffffffffff166040880152565b65ffffffffffff166060860152565b6080840152600060a084015260ff871660c084015260e08301526101008201526000610120820152600161014082015261350a565b61224d836110e0836106b5336001600160a01b0316600052601c602052604060002090565b612258878254612a95565b90556001600160a01b0316600052601b602052604060002090565b90556122836115ca601454612ff1565b61068c601854614876565b6121a161229d61218988610e63565b61219b565b6122aa612cd9565b612147565b604051631fff1b3b60e21b815260206004820152602260248201527f496e636f7272656374206e617469766520636f696e207374616b6520616d6f756044820152611b9d60f21b6064820152608490fd5b6111a492612365602061227396946110e094612327610c88600e546001600160a01b031690565b6040516323b872dd60e01b81523360048201526001600160a01b03909116602482015260448101929092529092839190829060009082906064820190565b03925af18015612399575b61237b575b50612147565b6123929060203d81116114ba576114ab818361081f565b5038612375565b6123a1612cd9565b612370565b604051631e9acf1760e31b8152600490fd5b6040516370a0823160e01b81523360048201528590602081602481865afa908115612411575b6000916123f3575b50106123a6578491612107565b61240b915060203d8111610d4057610d31818361081f565b386123e6565b612419612cd9565b6123de565b604051631fff1b3b60e21b815260206004820152601360248201527f496e76616c6964207374616b6520746f6b656e000000000000000000000000006044820152606490fd5b604051631fff1b3b60e21b815260206004820152601560248201527f416d6f756e742063616e6e6f74206265207a65726f00000000000000000000006044820152606490fd5b503461000e57602036600319011261000e576124c4610608565b6124cc613121565b6001600160a01b0380911690811561252057600091600b5491816001600160a01b0319841617600b5560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b60005260026020526001600160a01b036040600020541680156125945790565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608490fd5b90600182811c9216801561261b575b602083101461260557565b634e487b7160e01b600052602260045260246000fd5b91607f16916125fa565b9060405191826000825492612639846125eb565b9081845260019485811690816000146126a85750600114612665575b50506126639250038361081f565b565b9093915060005260209081600020936000915b81831061269057505061266393508201013880612655565b85548884018501529485019487945091830191612678565b9550505050505060ff1916602083015261266382604081013880612655565b156126ce57565b60405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608490fd5b6127598160005260026020526001600160a01b0360406000205416151590565b156127785760005260046020526001600160a01b036040600020541690565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b156127d957565b60405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608490fd5b60405190612851826107e7565b60008252565b9061287b93929161286b610c1e84336128e2565b612876838383612aa1565b612d16565b1561288257565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b6129028260005260026020526001600160a01b0360406000205416151590565b156129805761291082612574565b916001600160a01b0390818316928285168414948515612950575b5050831561293a575b50505090565b61294691929350612739565b1614388080612934565b60ff929550906106b5612976926001600160a01b03166000526005602052604060002090565b541692388061292b565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b156129e157565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b60018110612a59575b6000190190565b612a61612a32565b612a52565b818110612a71570390565b612a79612a32565b0390565b6001906001198111612a8d570190565b610b3a612a32565b81198111612a8d570190565b90612aab83612574565b6001600160a01b039182918285169384911603612b8657612af9612b5d92821694612ad78615156129da565b612ae087612bd9565b6001600160a01b03166000526003602052604060002090565b612b038154612a49565b9055612b22816001600160a01b03166000526003602052604060002090565b612b2c8154612a7d565b9055612b42856000526002602052604060002090565b906001600160a01b03166001600160a01b0319825416179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b600081815260046020526040812080546001600160a01b03191690556001600160a01b03612c0683612574565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92582604051a4565b600082815260046020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b0380612c6884612574565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b9081602091031261000e57516104ab816103b4565b90926104ab94936080936001600160a01b03809216845216602083015260408201528160608201520190610475565b506040513d6000823e3d90fd5b3d15612d11573d90612cf782610862565b91612d05604051938461081f565b82523d6000602084013e565b606090565b92909190823b15612e1757612d519260209260006001600160a01b03604051809781968295630a85bd0160e11b9b8c85523360048601612caa565b0393165af160009181612de7575b50612dd957612d6c612ce6565b80519081612dd45760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b602001fd5b6001600160e01b0319161490565b612e0991925060203d8111612e10575b612e01818361081f565b810190612c95565b9038612d5f565b503d612df7565b50505050600190565b612e408160005260026020526001600160a01b0360406000205416151590565b15612eb757612e61612e5c826000526006602052604060002090565b612625565b90612e6a612844565b805115612eb2578251612e8257506104ab9150612f22565b6104ab9150612ea4612e9e936040519485936020850190610b27565b90610b27565b03601f19810183528261081f565b505090565b60405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f722060448201527f6e6f6e6578697374656e7420746f6b656e0000000000000000000000000000006064820152608490fd5b612f428160005260026020526001600160a01b0360406000205416151590565b15612f8657612f4f612844565b805190919015612f7c57612e9e91612ea4612f6c6104ab93613040565b6040519485936020850190610b27565b50506104ab612844565b60405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608490fd5b6001906000198114612a8d570190565b811561300b570490565b634e487b7160e01b600052601260045260246000fd5b90602091805182101561303357010190565b61303b610e4c565b010190565b801561310357806000908282935b6130ef575061305c83610862565b9261306a604051948561081f565b80845281601f1961307a83610862565b013660208701375b61308c5750505090565b61309590612a49565b90600a906030828206801982116130e2575b0160f81b7fff0000000000000000000000000000000000000000000000000000000000000016841a6130d98487613021565b53049081613082565b6130ea612a32565b6130a7565b926130fb600a91612ff1565b93048061304e565b5060405161311081610803565b60018152600360fc1b602082015290565b6001600160a01b03600b5416330361313557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6040519061318682610803565b600582526430b236b4b760d91b6020830152565b6131a2613179565b5060ff808251166064826131ce6131c1602094838689015116906132cf565b82604088015116906132cf565b160361326b578290601d9160009384915b60038084101561322e579084918382511690888854911b85811b9283911b169119161786550191600180960195601f871161321f575b50600101916131df565b60009650909401936001613215565b505050505050506132667f201257788e5fd5cbd0485c8150d2a1426c7b9024669f7931decee52d0be5814a9160405191829182613332565b0390a1565b60649060405190631fff1b3b60e21b82526004820152601260248201527f4d7573742073756d20757020746f2031303000000000000000000000000000006044820152fd5b9060038110156132c2575b60051b0190565b6132ca610e4c565b6132bb565b60ff8091169116908160ff038111612a8d570190565b50634e487b7160e01b600052600060045260246000fd5b806000190482118115151661330f570290565b613317612a32565b0290565b818110613326575050565b6000815560010161331b565b6060810192916000915b6003831061334957505050565b60019060ff8351168152602080910192019201919061333c565b9081602091031261000e575190565b9081602091031261000e57516104ab816105b9565b60405190613394826107cb565b6060368337565b9065ffffffffffff8080931691168092038111612a8d570190565b60209067ffffffffffffffff81116133cf5760051b0190565b6132ca610793565b604051906133e4826107e7565b6000808352366020840137565b906133fb826133b6565b613408604051918261081f565b8281528092613419601f19916133b6565b0190602036910137565b61342c82611ead565b52565b906000905b6003821061344157505050565b6001602082829351865501930191019091613434565b815191600160401b83116134c6575b81548383558084106134a8575b50602080910191600052806000206000925b848410613493575050505050565b60018382829351855501920193019290613485565b6134c09083600052846020600020918201910161331b565b38613473565b6134ce610793565b613466565b906134dd81611ead565b60ff80198354169116179055565b906134f581611ead565b61ff0082549160081b169061ff001916179055565b612663906101406009613532601854600160401b8110156136c7575b60018101601855611e64565b6136ba575b61356761354b85516001600160a01b031690565b82546001600160a01b0319166001600160a01b03909116178255565b61362d6001820161358561354b60208801516001600160a01b031690565b6135d561359b604088015165ffffffffffff1690565b82547fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b65ffffffffffff60a01b16178255565b606086015165ffffffffffff16815479ffffffffffffffffffffffffffffffffffffffffffffffffffff1660d09190911b7fffffffffffff000000000000000000000000000000000000000000000000000016179055565b61363e60808501516002830161342f565b60a0840151600582015561366c61365960c086015160ff1690565b600683019060ff1660ff19825416179055565b61367d60e085015160078301613457565b61368f61010085015160088301613457565b01916136a96101208201516136a381611ead565b846134d3565b0151906136b582611ead565b6134eb565b6136c26132e5565b613537565b6136cf610793565b613526565b60ff6001911660ff8114612a8d570190565b60038210156136f7575b0190600090565b6136ff610e4c565b6136f0565b90815260408101929190602090611f2b83611ead565b9061373d61266392805490600160401b821015613758575b6001820181556118d7565b90919082549060031b600019811b9283911b16911916179055565b613760610793565b613732565b9061377261132b83612a49565b509161378583546001600160a01b031690565b6137a2816001600160a01b03166000526016602052604060002090565b906137c865ffffffffffff421680939065ffffffffffff16600052602052604060002090565b5415613953575b5083546001600160a01b0316600090815260166020526040902081613805919065ffffffffffff16600052602052604060002090565b54613813906007860161371a565b83546001600160a01b0316600090815260166020526040902090613848919065ffffffffffff16600052602052604060002090565b5461385290612a49565b61385b90611e64565b509061386a906008830161371a565b60018301918254613881906001600160a01b031690565b84546001600160a01b03169460060194855461389d9060ff1690565b80936013546138ab91613001565b6138c8846001600160a01b03166000526010602052604060002090565b546138d291612a95565b916138dc9361460d565b91600201906138ea916136e6565b815491929091600383901b1c9061390091612a95565b9061391f92919082549060031b600019811b9283911b16911916179055565b546001600160a01b03166000908152601760209081526040808320935460ff168352929052205b805460ff19166001179055565b613a239061395f613387565b600d546001600160a01b03169061397c600b5460ff9060a01c1690565b15613a755760125461399a9060301c65ffffffffffff165b8661339b565b906139f06139a66133d7565b926139dd6139b26133d7565b956139cd6139be610841565b6001600160a01b039099168952565b6001600160a01b03166020880152565b65ffffffffffff881660408701526121e4565b6080840152600060a0840152600260c084015260e08301526101008201526000610120820152600061014082015261350a565b601854613a6e82613a57613a3e88546001600160a01b031690565b6001600160a01b03166000526016602052604060002090565b9065ffffffffffff16600052602052604060002090565b55386137cf565b61399a613a8960125465ffffffffffff1690565b613994565b919091604081526000600754613aa3816125eb565b908160408501526001908181169081600014613b355750600114613ad6575b50506001600160a01b036020919416910152565b6007600090815292507fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6885b828410613b1f5750505081016060016001600160a01b036020613ac2565b8054606085870101526020909301928101613b01565b60ff1916606086015250506080830191506001600160a01b0390506020613ac2565b6020918151811015613b6c575b60051b010190565b613b74610e4c565b613b64565b90815180825260208080930193019160005b828110613b99575050505090565b835185529381019392810192600101613b8b565b9091613bc46104ab93604084526040840190613b79565b916020818403910152613b79565b6005613c13613bf0613c1d9360018110613c21575b60001901611e64565b50936001600160a01b03806001870154169086541660ff6006880154169161460d565b9201918254612a95565b9055565b613c29612a32565b613be7565b6001600160a01b038116908115613d1357613c5f8360005260026020526001600160a01b0360406000205416151590565b613cce5780613c84613ca4926001600160a01b03166000526003602052604060002090565b613c8e8154612a7d565b9055612b42846000526002602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a4565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b6001600160a01b03613d6882612574565b613d7183612bd9565b16908060008381948252600360205260408220805460018110613e57575b6000190190558282526002602052604082206001600160a01b031981541690557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef82604051a4613df2613dec826000526006602052604060002090565b546125eb565b613dfa575050565b613e0e906000526006602052604060002090565b613e1881546125eb565b80613e2257505050565b601f8111600114613e31575055565b81835260208320613e4d91601f0160051c81019060010161331b565b8160208120915555565b613e5f612a32565b613d8f565b613e7061132b82612a49565b506001600160a01b0380613e8b83546001600160a01b031690565b1633810361122a5760098381015460081c60ff1692613ea984611ead565b60018094036114ea57600060078601938454915b8260ff8216106140ea5750505083613eed6002870161142c611422611432835461142c6114228660010190600090565b95019085613f0283546001600160a01b031690565b91821680156140bc576020613f5291613f26610c88600e546001600160a01b031690565b6040516370a0823160e01b81526001600160a01b03909116600482015292839190829081906024820190565b03915afa9081156140af575b600091614091575b50106123a657613f9291613f8087613f87935b339061447e565b5460d01c90565b65ffffffffffff1690565b421161408a576000835b613faf575b50505050506126639061421c565b8254811015614085579061404a828561401384613fd661132b611d94611422869a8c6118d7565b50614003613fe7611422878c6118d7565b60005260026020526001600160a01b0360406000205416151590565b61406b575b015460081c60ff1690565b61401c81611ead565b14614051575b6111c887614038600d546001600160a01b031690565b600b546001600160a01b03169061447e565b9091613f9c565b61406661406161142283886118d7565b61421c565b614022565b61408061407b611422878c6118d7565b613d57565b614008565b613fa1565b5050505050565b6140a9915060203d8111610d4057610d31818361081f565b38613f66565b6140b7612cd9565b613f5e565b506140d2610c88600e546001600160a01b031690565b3110156123a657613f9291613f8087613f8793613f79565b81614112610c8861410461132b611d94611422878d6118d7565b50546001600160a01b031690565b036114ea57614120906136d4565b613ebd565b8015612a59576000190190565b61413e61132b82612a49565b5060098101805461ff00191661020017905561415e6115ca601454614125565b60018101600682016002830160005b600360ff8216106141b857505060408051948552600260208601527fab7e44c17ad2a7b4de0e42ab0bc824366a946f184a1133f0b5528347e4ccbd2994935083925082019050613266565b806141c961142261421793856136e6565b6141ee6141e66116936116716116588b546001600160a01b031690565b918254612a66565b90556141fd61142282856136e6565b6116eb6141e66116936116d289546001600160a01b031690565b61416d565b61422861132b82612a49565b5060098101805461ff001916610300178155906142496115ca601454614125565b60018101600682016002830160005b600360ff82161061430357505060408051868152600360208201527fab7e44c17ad2a7b4de0e42ab0bc824366a946f184a1133f0b5528347e4ccbd2994509092509050a160016142a9825460ff1690565b6142b281611ead565b146142bb575050565b805460ff191660031790557f855f5f4ea7c8c6a92f173fbc35c24d01139c2a49e9bcc085f03620cb6a1c65139061326690604080519182526003602083015290918291820190565b806141c961142261431493856136e6565b614258565b6001600160a01b03601154600160401b811015614388575b600181018060115581101561437b575b60116000527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680191166001600160a01b0319825416179055565b614383610e4c565b614341565b614390610793565b614331565b6001600160a01b039081811680600052600f60205260ff92836040600020541615614406575b60115460005b81868216106143d857505050506126639150614319565b83836143e383611892565b90549060031b1c16146143fe576143f9906136d4565b6143c1565b505050505050565b614411601354612ff1565b601355614434613946846001600160a01b0316600052600f602052604060002090565b6143bb565b9190601f811161444857505050565b612663926000526020600020906020601f840160051c83019310614474575b601f0160051c019061331b565b9091508190614467565b6001600160a01b03929083811690816145195750506144a8610c88600e546001600160a01b031690565b818131106123a657803b1561000e57604051633e97486160e11b8152939092166001600160a01b03166004840152602483015260009082908183816044810103925af1801561450c575b6144f95750565b80614506612663926107aa565b80610435565b614514612cd9565b6144f2565b91909350614532610c88600e546001600160a01b031690565b6040516370a0823160e01b81526001600160a01b03821660048201526020958391908790829060249082905afa908115614600575b6000916145e3575b50106123a65760405163276d76f960e21b81526001600160a01b03938416600482015293909216602484015260448301528290829060649082906000905af180156145d6575b6145bd575050565b816145d392903d106114ba576114ab818361081f565b50565b6145de612cd9565b6145b5565b6145fa9150873d8911610d4057610d31818361081f565b3861456f565b614608612cd9565b614567565b916110e0606461468261469d946001600160a01b0361464c6104ab9960038810156146a4575b60ff8860051c601d015460f88a60031b161c16906132fc565b9116600052601c60205261467b856110e0896040600020906001600160a01b0316600052602052604060002090565b54906132fc565b04936001600160a01b0316600052601b602052604060002090565b5490613001565b6146ac610e4c565b614633565b60405191906000835b600382106146e1575050506060820182811067ffffffffffffffff8211176107be57604052565b60016020819285548152019301910190916146ba565b9060405191828154918282526020928383019160005283600020936000905b82821061472c575050506126639250038361081f565b855484526001958601958895509381019390910190614716565b9061266360ff6009614756610841565b9461477861476b82546001600160a01b031690565b6001600160a01b03168752565b60018101546001600160a01b038116602088015265ffffffffffff60a082901c16604088015260d01c60608701526147b2600282016146b1565b6080870152600581015460a08701526147dc6147d2600683015460ff1690565b60ff1660c0880152565b6147e8600782016146f7565b60e08701526147f9600882016146f7565b61010087015201546148118282166101208701613423565b60081c166101408401613423565b9592916104ab9897949260ff969288526001600160a01b03809216602089015216604087015265ffffffffffff809216606087015216608085015260a08401521660c0820152610100908160e08201520190613b79565b7f502036e72ba38bf7ed380b81a9c3913dd638dd50b9f7fbcf82c0a0d271d81a80906001811061494f575b6148b76148b16000198301611e64565b50614746565b906132666148cc83516001600160a01b031690565b926148e160208201516001600160a01b031690565b906148f5604082015165ffffffffffff1690565b606082015165ffffffffffff1661492d6080840161492661491e82516020815191015190612a95565b915160400190565b5190612a95565b9161010061493f60c086015160ff1690565b940151946040519889988961481f565b614957612a32565b6148a156fea2646970667358221220e5590467f273c4d1903f459cf4610750630ba645e831c271a67c798d3b5d51c864736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5141,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 5143,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 5147,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5151,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5155,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5161,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6158,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 24572,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "interestForPoolBalanceName",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 24575,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "interestForLenderBalanceName",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 24578,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "tradeCommissionBalanceName",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 24581,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "bondingCommissionBalanceName",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 8357,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 23950,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "testing",
        "offset": 20,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 8472,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "hasRole",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))"
      },
      {
        "astId": 21368,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "nend",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 21371,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "lendingPool",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(Vault)25170"
      },
      {
        "astId": 21375,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "activeStakeTokens",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 21379,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "inflationRollOver",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21382,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "stakeTokens",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 21385,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "escrowLockPeriod",
        "offset": 0,
        "slot": "18",
        "type": "t_uint48"
      },
      {
        "astId": 21388,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "testEscrowLockPeriod",
        "offset": 6,
        "slot": "18",
        "type": "t_uint48"
      },
      {
        "astId": 21390,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "stakeTokenCount",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 21392,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "ongoingStakeCount",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 21396,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "ifpTokenToAmount",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21402,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "userToTimeToEscrowId",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_mapping(t_uint48,t_uint256))"
      },
      {
        "astId": 21408,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "tokenRewardAllocationToActive",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))"
      },
      {
        "astId": 21412,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "stakes",
        "offset": 0,
        "slot": "24",
        "type": "t_array(t_struct(Stake)23607_storage)dyn_storage"
      },
      {
        "astId": 21420,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "stakeDurations",
        "offset": 0,
        "slot": "25",
        "type": "t_array(t_uint48)3_storage"
      },
      {
        "astId": 21428,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "testStakeDurations",
        "offset": 0,
        "slot": "26",
        "type": "t_array(t_uint48)3_storage"
      },
      {
        "astId": 21434,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "totalStakedByToken_Duration",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 21442,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "totalStakedByUser_Token_Duration",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint8,t_uint256)))"
      },
      {
        "astId": 21450,
        "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
        "label": "rewardAllocations",
        "offset": 0,
        "slot": "29",
        "type": "t_array(t_uint8)3_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Stake)23607_storage)dyn_storage": {
        "base": "t_struct(Stake)23607_storage",
        "encoding": "dynamic_array",
        "label": "struct ILendingPoolStaking.Stake[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint48)3_storage": {
        "base": "t_uint48",
        "encoding": "inplace",
        "label": "uint48[3]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)3_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[3]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Vault)25170": {
        "encoding": "inplace",
        "label": "contract Vault",
        "numberOfBytes": "20"
      },
      "t_enum(EscrowStatus)23578": {
        "encoding": "inplace",
        "label": "enum ILendingPoolStaking.EscrowStatus",
        "numberOfBytes": "1"
      },
      "t_enum(StakeStatus)23573": {
        "encoding": "inplace",
        "label": "enum ILendingPoolStaking.StakeStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint8,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint8 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint48,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint48 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint48,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint48,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint48",
        "label": "mapping(uint48 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Stake)23607_storage": {
        "encoding": "inplace",
        "label": "struct ILendingPoolStaking.Stake",
        "members": [
          {
            "astId": 23580,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "staker",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 23582,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 23584,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "start",
            "offset": 20,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 23586,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "end",
            "offset": 26,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 23590,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "amountsPerDuration",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)3_storage"
          },
          {
            "astId": 23592,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "rewardAllocated",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 23594,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "rewardAllocationId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 23597,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "childIds",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 23600,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "parentIds",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 23603,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "escrowStatus",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(EscrowStatus)23578"
          },
          {
            "astId": 23606,
            "contract": "contracts/staking/LendingPoolStaking.sol:LendingPoolStaking",
            "label": "stakeStatus",
            "offset": 1,
            "slot": "9",
            "type": "t_enum(StakeStatus)23573"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}