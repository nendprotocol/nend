{
  "language": "Solidity",
  "sources": {
    "contracts/loan/PeriFiLoan.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\n// import \"./PeriFiLoanAdmin.sol\";\r\nimport \"../PeriFiAdmin.sol\";\r\nimport \"./TrustDeed.sol\";\r\nimport \"../PeriFiAdmin.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"../interfaces/INonStandardERC721Transfer.sol\";\r\nimport \"./LoanAuction.sol\";\r\nimport \"./LoanRepaymentCalculator.sol\";\r\nimport \"../vault/LendingPool.sol\";\r\n\r\nenum LiquidationTrigger {\r\n    OverDue,\r\n    LowHealthFactor\r\n}\r\n\r\nenum LiquidationMethod {\r\n    Auction,\r\n    TransferredToLender\r\n}\r\n\r\n// contract PeriFiLoan is PeriFiLoanAdmin, ERC721, ERC721URIStorage {\r\ncontract PeriFiLoan is ERC721, ERC721URIStorage, MWOwnable, Pausable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using ECDSA for bytes32;\r\n\r\n    struct Loan {\r\n        // A unique identifier for this particular loan, sourced from the\r\n        // continuously increasing parameter totalNumLoans.\r\n        uint256 index;\r\n\r\n        // The original sum of money transferred from lender to borrower at the\r\n        // beginning of the loan, measured in paymentToken's smallest\r\n        // units.\r\n        uint256 loanAmount;\r\n\r\n        // The original sum of money transferred from leverage pool to borrower\r\n        // at the beginnig of the loan, measured in paymentToken's \r\n        // smallest units.\r\n        uint256 loanLeveragedAmount;\r\n\r\n        // The maximum amount of money that the borrower would be required to\r\n        // repay retrieve their collateral, measured in paymentToken's\r\n        // smallest units. If interestIsProRated is set to false, then the\r\n        // borrower will always have to pay this amount to retrieve their\r\n        // collateral, regardless of whether they repay early.\r\n        uint256 repaymentAmount;\r\n        // The ID within the tokenAddress for the NFT being used as\r\n        // collateral for this loan. The NFT is stored within this contract\r\n        // during the duration of the loan.\r\n        uint256 tokenId;\r\n\r\n        // The block.timestamp when the loan first began (measured in seconds).\r\n        uint64 loanStartTime;\r\n\r\n        // The amount of time (measured in seconds) that can elapse before the\r\n        // lender can liquidate the loan and seize the underlying collateral.\r\n        uint32 loanDuration;\r\n\r\n        uint32 commissionBasisPoints;\r\n        // The ERC721 contract of the NFT collateral\r\n        address tokenAddress;\r\n\r\n        // The ERC20 contract of the currency being used as principal/interest\r\n        // for this loan.\r\n        address paymentToken;\r\n\r\n        // The address of the borrower.\r\n        address borrower;\r\n\r\n        bool liquidateViaAuction;\r\n    }\r\n\r\n    event LoanStarted(\r\n        uint256 loanIndex,\r\n        address borrower,\r\n        address lender,\r\n        uint256 loanAmount,\r\n        uint256 loanLeveragedAmount,\r\n        uint256 repaymentAmount,\r\n        uint256 tokenId,\r\n        uint256 loanStartTime,\r\n        uint256 loanDuration,\r\n        address tokenAddress,\r\n        address paymentToken,\r\n        bool    liquidateViaAuction\r\n    );\r\n\r\n    event LoanTrustDeedIssued(uint256 loanIndex);\r\n\r\n    event LoanRepaid(\r\n        uint256 loanIndex,\r\n        address borrower,\r\n        address lender,\r\n        uint256 loanAmount,\r\n        uint256 tokenId,\r\n        uint256 amountPaidToLender,\r\n        uint256 interestForIV,\r\n        address tokenAddress,\r\n        address paymentToken\r\n    );\r\n\r\n    event LoanLiquidated(\r\n        uint256 loanIndex,\r\n        address borrower,\r\n        address lender,\r\n        uint256 loanAmount,\r\n        uint256 tokenId,\r\n        uint256 loanMaturityDate,\r\n        uint256 loanLiquidationDate,\r\n        address tokenAddress,\r\n        LiquidationTrigger trigger,\r\n        LiquidationMethod method\r\n    );\r\n\r\n    address public periFiAdminAddr;\r\n\r\n    address public loanRepaymentAddr;\r\n\r\n    address public trustDeedAddr;\r\n\r\n    address public auctionAddr;\r\n\r\n    uint256 public totalNumLoans = 0;\r\n\r\n    uint256 public totalActiveLoans = 0;\r\n\r\n    mapping (uint256 => Loan) public indexToLoan;\r\n\r\n    mapping (uint256 => bool) public loanRepaidOrLiquidated;\r\n\r\n    mapping (address => mapping (uint256 => bool)) private _nonceHasBeenUsedForUser;\r\n\r\n    constructor(address _periFiAdminAddr, address _loanRepaymentAddr, address _auctionAddr, address _trustDeedAddr) \r\n        // PeriFiLoanAdmin(_periFiAdminAddr)\r\n        ERC721(\"PeriFi Loan Promissory Note\", \"PPN\") {\r\n            periFiAdminAddr = _periFiAdminAddr;\r\n            auctionAddr = _auctionAddr;\r\n            trustDeedAddr = _trustDeedAddr;\r\n            loanRepaymentAddr = _loanRepaymentAddr;\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\r\n        super._burn(tokenId);\r\n    }\r\n\r\n    function setTokenURI(uint256 tokenId, string memory uri) external {\r\n        super._setTokenURI(tokenId, uri);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721URIStorage)\r\n        returns (string memory)\r\n    {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n\r\n    function beginLoan(\r\n        uint256 _loanAmount,\r\n        uint256 _loanLeveragedAmount,\r\n        uint256 _repaymentAmount,\r\n        uint256 _tokenId,\r\n        uint256 _loanDuration,\r\n        uint256 _commissionBasisPoints,\r\n        uint256[2] memory _borrowerAndLenderNonces,\r\n        address _tokenAddress,\r\n        address _paymentToken,\r\n        address _lender,\r\n        bytes memory _borrowerSignature,\r\n        bytes memory _lenderSignature,\r\n        bool _liquidateViaAuction\r\n    ) public whenNotPaused nonReentrant {\r\n\r\n        // Save loan details to a struct in memory first, to save on gas if any\r\n        // of the below checks fail, and to avoid the \"Stack Too Deep\" error by\r\n        // clumping the parameters together into one struct held in memory.\r\n        Loan memory loan = Loan({\r\n            index: totalNumLoans, //currentloanIndex,\r\n            loanAmount: _loanAmount,\r\n            loanLeveragedAmount: _loanLeveragedAmount,\r\n            repaymentAmount: _repaymentAmount,\r\n            tokenId: _tokenId,\r\n            loanStartTime: uint64(block.timestamp), //_loanStartTime\r\n            loanDuration: uint32(_loanDuration),\r\n            // loanInterestRateForDurationInBasisPoints: uint32(_loanInterestRateForDurationInBasisPoints),\r\n            commissionBasisPoints: uint32(_commissionBasisPoints),\r\n            tokenAddress: _tokenAddress,\r\n            paymentToken: _paymentToken,\r\n            borrower: msg.sender, //borrower\r\n            // interestIsProRated: (_loanInterestRateForDurationInBasisPoints != ~(uint32(0))),\r\n            liquidateViaAuction: _liquidateViaAuction\r\n        });\r\n\r\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\r\n        // Sanity check loan values.\r\n        require(loan.repaymentAmount >= loan.loanAmount, 'Negative interest rate loans are not allowed.');\r\n        require(uint256(loan.loanDuration) <= periFiAdmin.maximumLoanDuration(), 'Loan duration exceeds maximum loan duration');\r\n        require(uint256(loan.loanDuration) != 0, 'Loan duration cannot be zero');\r\n        // require(uint256(loan.commissionBasisPoints) == periFiAdmin.commissionForIFL(), 'The admin fee has changed since this order was signed.');\r\n\r\n        require(loan.loanAmount > loan.loanLeveragedAmount, 'Leveraged value exceeds total loan amount');\r\n        // Check that both the collateral and the principal come from supported\r\n        // contracts.\r\n\r\n        // require(periFiAdmin.erc20CurrencyIsWhitelisted(loan.paymentToken), 'Currency denomination is not whitelisted to be used by this contract');\r\n        // require(PeriFiAdmin(perifiAdmin).nftContractIsWhitelisted(loan.tokenAddress), 'NFT collateral contract is not whitelisted to be used by this contract');\r\n\r\n        // Check loan nonces. These are different from Ethereum account nonces.\r\n        // Here, these are uint256 numbers that should uniquely identify\r\n        // each signature for each user (i.e. each user should only create one\r\n        // off-chain signature for each nonce, with a nonce being any arbitrary\r\n        // uint256 value that they have not used yet for an off-chain\r\n        // signature).\r\n        require(!_nonceHasBeenUsedForUser[msg.sender][_borrowerAndLenderNonces[0]], 'Borrower nonce invalid, borrower has either cancelled/begun this loan, or reused this nonce when signing');\r\n        _nonceHasBeenUsedForUser[msg.sender][_borrowerAndLenderNonces[0]] = true;\r\n        require(!_nonceHasBeenUsedForUser[_lender][_borrowerAndLenderNonces[1]], 'Lender nonce invalid, lender has either cancelled/begun this loan, or reused this nonce when signing');\r\n        _nonceHasBeenUsedForUser[_lender][_borrowerAndLenderNonces[1]] = true;\r\n\r\n        // Check that both signatures are valid.\r\n        require(isValidBorrowerSignature(\r\n            loan.tokenId,\r\n            _borrowerAndLenderNonces[0],//_borrowerNonce,\r\n            loan.tokenAddress,\r\n            msg.sender,      //borrower,\r\n            _borrowerSignature\r\n        ), 'Borrower signature is invalid');\r\n\r\n        require(isValidLenderSignature(\r\n            loan.loanAmount,\r\n            loan.loanLeveragedAmount,\r\n            loan.repaymentAmount,\r\n            loan.tokenId,\r\n            loan.loanDuration,\r\n            // loan.loanInterestRateForDurationInBasisPoints,\r\n            loan.commissionBasisPoints,\r\n            _borrowerAndLenderNonces[1],//_lenderNonce,\r\n            loan.tokenAddress,\r\n            loan.paymentToken,\r\n            _lender,\r\n            loan.liquidateViaAuction,\r\n            // loan.interestIsProRated,\r\n            _lenderSignature\r\n        ), 'Lender signature is invalid');\r\n\r\n        // Add the loan to storage before moving collateral/principal to follow\r\n        // the Checks-Effects-Interactions pattern.\r\n        indexToLoan[totalNumLoans] = loan;\r\n        totalNumLoans = totalNumLoans.add(1);\r\n\r\n        // Update number of active loans.\r\n        totalActiveLoans = totalActiveLoans.add(1);\r\n        require(totalActiveLoans <= periFiAdmin.maximumNumberOfActiveLoans(), 'Contract has reached the maximum number of active loans allowed by admins');\r\n\r\n        // Transfer collateral from borrower to this contract to be held until\r\n        // loan completion.liquidateOverdueLoan\r\n        IERC721(loan.tokenAddress).transferFrom(msg.sender, address(this), loan.tokenId);\r\n\r\n        uint256 lenderAllowance = IERC20(loan.paymentToken).allowance(_lender, address(this));\r\n        if (loan.loanLeveragedAmount > 0)\r\n        {\r\n            uint256 loanFromLender = loan.loanAmount - loan.loanLeveragedAmount;\r\n            // Transfer principal from lender to borrower.\r\n            // uint256 poolAllowance = IERC20(loan.paymentToken).allowance(lendingPoolAddr, address(this));\r\n            require(lenderAllowance >= loanFromLender, 'ERC20 allowance is not set by lender or not enough balance');\r\n            // require(poolAllowance >= loan.loanLeveragedAmount, 'ERC20 allowance is not set by lender or not enough balance');\r\n            IERC20(loan.paymentToken).transferFrom(_lender, msg.sender, loanFromLender);\r\n            LoanRepaymentCalculator calculator = LoanRepaymentCalculator(loanRepaymentAddr);\r\n            address lendingPoolAddr = calculator.lendingPoolAddress();\r\n            LendingPool(payable(lendingPoolAddr)).leverageLoan(\r\n                loan.index, loan.paymentToken, loan.loanLeveragedAmount, msg.sender);\r\n            // IERC20(loan.paymentToken).transferFrom(lendingPoolAddr, msg.sender, loan.loanLeveragedAmount);\r\n        }\r\n        else\r\n        {\r\n            require(lenderAllowance >= loan.loanAmount, 'ERC20 allowance is not set by lender or not enough balance');\r\n            IERC20(loan.paymentToken).transferFrom(_lender, msg.sender, loan.loanAmount);\r\n        }\r\n\r\n        // Issue an ERC721 promissory note to the lender that gives them the\r\n        // right to either the principal-plus-interest or the collateral.\r\n        _mint(_lender, loan.index);\r\n\r\n        // Emit an event with all relevant details from this transaction.\r\n        emit LoanStarted(\r\n            loan.index,\r\n            msg.sender,      //borrower,\r\n            _lender,\r\n            loan.loanAmount,\r\n            loan.loanLeveragedAmount,\r\n            loan.repaymentAmount,\r\n            loan.tokenId,\r\n            block.timestamp,             //_loanStartTime\r\n            loan.loanDuration,\r\n            // loan.loanInterestRateForDurationInBasisPoints,\r\n            loan.tokenAddress,\r\n            loan.paymentToken,\r\n            loan.liquidateViaAuction\r\n            // loan.interestIsProRated\r\n        );\r\n    }\r\n\r\n    function issueTrustDeed(uint256 _loanIndex) external nonReentrant {\r\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have\r\n        // never been called on this loanIndex. Depending on how the rest of the\r\n        // code turns out, this check may be unnecessary.\r\n        require(!loanRepaidOrLiquidated[_loanIndex], 'Loan has already been repaid or liquidated');\r\n\r\n        require(trustDeedAddr != address(0), \"Trust Deed contract hasn't bee set up\");\r\n\r\n        // Fetch loan details from storage, but store them in memory for the\r\n        // sake of saving gas.\r\n        Loan memory loan = indexToLoan[_loanIndex];\r\n\r\n        // Check that the borrower is the caller, only the borrower is entitled\r\n        // to the collateral.\r\n        require(msg.sender == loan.borrower, 'Only the borrower can pay back a loan and reclaim the underlying NFT');\r\n        \r\n        TrustDeed trustDeedContract = TrustDeed(trustDeedAddr);\r\n        trustDeedContract.safeMint(msg.sender, _loanIndex);\r\n        emit LoanTrustDeedIssued(_loanIndex);\r\n    }\r\n\r\n    function payBackLoan(uint256 _loanIndex) external nonReentrant {\r\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have\r\n        // never been called on this loanIndex. Depending on how the rest of the\r\n        // code turns out, this check may be unnecessary.\r\n        require(!loanRepaidOrLiquidated[_loanIndex], 'Loan has already been repaid or liquidated');\r\n\r\n        // Fetch loan details from storage, but store them in memory for the\r\n        // sake of saving gas.\r\n        Loan memory loan = indexToLoan[_loanIndex];\r\n\r\n        // Check that the borrower is the caller, only the borrower is entitled\r\n        // to the collateral.\r\n        address currentBorrower = borrower(_loanIndex);\r\n        require(msg.sender == currentBorrower, 'Only the borrower can pay back a loan and reclaim the underlying NFT');\r\n\r\n        // Fetch current owner of loan promissory note.\r\n        address lender = ownerOf(_loanIndex);\r\n\r\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(loanRepaymentAddr);\r\n        Repayment[] memory repayments = calculator.getDestinations(\r\n            _loanIndex, \r\n            loan.repaymentAmount,\r\n            loan.loanAmount,\r\n            lender);\r\n        IERC20 erc20 = IERC20(loan.paymentToken);\r\n        uint repaymentLength = repayments.length;\r\n        for (uint idx = 0; idx < repaymentLength; idx++) {\r\n            Repayment memory repayment = repayments[idx];\r\n            erc20.transferFrom(currentBorrower, repayment.targetAddress, repayment.value);\r\n        }\r\n\r\n        // Record the ifp amount in lending pool\r\n        Vault(payable(calculator.lendingPoolAddress())).namedBalanceReceive(\r\n            \"ifp\",\r\n            loan.paymentToken,\r\n            repayments[1].value\r\n        );\r\n\r\n        // // Calculate amounts to send to lender and admins\r\n        // uint256 interestDue = (loan.repaymentAmount).sub(loan.loanAmount);\r\n        // if(loan.interestIsProRated == true){\r\n        //     interestDue = _computeInterestDue(\r\n        //         loan.loanAmount,\r\n        //         loan.repaymentAmount,\r\n        //         block.timestamp.sub(uint256(loan.loanStartTime)),\r\n        //         uint256(loan.loanDuration),\r\n        //         uint256(loan.loanInterestRateForDurationInBasisPoints)\r\n        //     );\r\n        // }\r\n        // uint256 iv = _computeInterestForIV(interestDue, uint256(loan.interestForIVInBasisPoints));\r\n        // uint256 interestForLender = computeInterestDistributionForLender(loan.loanAmount, loan.loanLeveragedAmount, interestDue);\r\n\r\n        // uint256 payoffAmount = (loan.loanAmount.sub(loan.loanLeveragedAmount)).add(interestForLender);\r\n        // uint256 poolPayoffAmount = (loan.loanLeveragedAmount).add(interestDue.sub(iv).sub(interestForLender));\r\n        // uint256 payoffAmount = ((loan.loanAmount).add(interestDue)).sub(iv);\r\n\r\n        // Mark loan as repaid before doing any external transfers to follow\r\n        // the Checks-Effects-Interactions design pattern.\r\n        loanRepaidOrLiquidated[_loanIndex] = true;\r\n\r\n        // Update number of active loans.\r\n        totalActiveLoans = totalActiveLoans.sub(1);\r\n\r\n        // use suggested calculation for leverage\r\n        // Transfer principal-plus-interest from borrower to lender\r\n        // IERC20(loan.paymentToken).transferFrom(currentBorrower, lender, payoffAmount);\r\n\r\n        // Transfer principal-plus-interest from borrower to leverage pool\r\n\r\n        // IERC20(loan.paymentToken).transferFrom(currentBorrower, lendingPoolAddr, poolPayoffAmount);\r\n\r\n        // Transfer fees from borrower to insurance vault\r\n        // IERC20(loan.paymentToken).transferFrom(currentBorrower, insuranceVaultAddr, iv);\r\n\r\n\r\n        // Transfer collateral from this contract to borrower.\r\n        require(_transferNftToAddress(\r\n            loan.tokenAddress,\r\n            loan.tokenId,\r\n            currentBorrower\r\n        ), 'NFT was not successfully transferred');\r\n\r\n        // Destroy the lender's promissory note.\r\n        _burn(_loanIndex);\r\n        _burnTrustDeed(_loanIndex);\r\n        // Emit an event with all relevant details from this transaction.\r\n        emit LoanRepaid(\r\n            _loanIndex,\r\n            currentBorrower,\r\n            lender,\r\n            loan.loanAmount,\r\n            loan.tokenId,\r\n            loan.repaymentAmount,\r\n            loan.commissionBasisPoints,\r\n            loan.tokenAddress,\r\n            loan.paymentToken\r\n        );\r\n\r\n        // Delete the loan from storage in order to achieve a substantial gas\r\n        // savings and to lessen the burden of storage on Ethereum nodes, since\r\n        // we will never access this loan's details again, and the details are\r\n        // still available through event data.\r\n        delete indexToLoan[_loanIndex];\r\n    }\r\n\r\n    function liquidateLowHealthFactorLoanViaAuction(uint256 _loanIndex) external onlyOwner nonReentrant {\r\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have\r\n        // never been called on this loanIndex. Depending on how the rest of the\r\n        // code turns out, this check may be unnecessary.\r\n        require(!loanRepaidOrLiquidated[_loanIndex], 'Loan has already been repaid or liquidated');\r\n\r\n        // Fetch loan details from storage, but store them in memory for the\r\n        // sake of saving gas.\r\n        Loan memory loan = indexToLoan[_loanIndex];\r\n\r\n        uint256 loanMaturityDate = (uint256(loan.loanStartTime))\r\n                .add(uint256(loan.loanDuration));\r\n                \r\n        require(block.timestamp < loanMaturityDate, 'Loan is overdue');\r\n        \r\n        address lender = ownerOf(_loanIndex);\r\n\r\n        // Mark loan as liquidated before doing any external transfers to\r\n        // follow the Checks-Effects-Interactions design pattern.\r\n        loanRepaidOrLiquidated[_loanIndex] = true;\r\n\r\n        // Update number of active loans.\r\n        totalActiveLoans = totalActiveLoans.sub(1);\r\n\r\n        require(_transferNftToAddress(\r\n            loan.tokenAddress,\r\n            loan.tokenId,\r\n            auctionAddr\r\n        ), 'NFT was not successfully transferred');\r\n\r\n        address currentBorrower = borrower(_loanIndex);\r\n        _burn(_loanIndex);\r\n        _burnTrustDeed(_loanIndex);\r\n        // Emit an event with all relevant details from this transaction.\r\n        emit LoanLiquidated(\r\n            _loanIndex,\r\n            currentBorrower,\r\n            lender,\r\n            loan.loanAmount,\r\n            loan.tokenId,\r\n            loanMaturityDate,\r\n            block.timestamp,\r\n            loan.tokenAddress,\r\n            LiquidationTrigger.LowHealthFactor,\r\n            LiquidationMethod.Auction\r\n        );\r\n\r\n        // Delete the loan from storage in order to achieve a substantial gas\r\n        // savings and to lessen the burden of storage on Ethereum nodes, since\r\n        // we will never access this loan's details again, and the details are\r\n        // still available through event data.\r\n        delete indexToLoan[_loanIndex];\r\n    }\r\n\r\n    function liquidateOverdueLoanViaAuction(uint256 _loanIndex) external nonReentrant {\r\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have\r\n        // never been called on this loanIndex. Depending on how the rest of the\r\n        // code turns out, this check may be unnecessary.\r\n        require(!loanRepaidOrLiquidated[_loanIndex], 'Loan has already been repaid or liquidated');\r\n\r\n        // Fetch loan details from storage, but store them in memory for the\r\n        // sake of saving gas.\r\n        Loan memory loan = indexToLoan[_loanIndex];\r\n\r\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\r\n        uint256 loanMaturityDate;\r\n        if (loan.liquidateViaAuction){\r\n            loanMaturityDate = (uint256(loan.loanStartTime))\r\n                .add(uint256(loan.loanDuration))\r\n                .add(periFiAdmin.preLiquidationDuration());\r\n        } else {\r\n            // check extra 24 hours for the lender to claim\r\n            loanMaturityDate = (uint256(loan.loanStartTime))\r\n                .add(uint256(loan.loanDuration))\r\n                .add(periFiAdmin.preLiquidationDuration())\r\n                .add(periFiAdmin.claimCollateralDuration());\r\n        }\r\n        require(block.timestamp > loanMaturityDate, 'Loan is not overdue yet');\r\n        \r\n        address lender = ownerOf(_loanIndex);\r\n\r\n        // Mark loan as liquidated before doing any external transfers to\r\n        // follow the Checks-Effects-Interactions design pattern.\r\n        loanRepaidOrLiquidated[_loanIndex] = true;\r\n\r\n        // Update number of active loans.\r\n        totalActiveLoans = totalActiveLoans.sub(1);\r\n\r\n        require(_transferNftToAddress(\r\n            loan.tokenAddress,\r\n            loan.tokenId,\r\n            auctionAddr\r\n        ), 'NFT was not successfully transferred');\r\n\r\n        address currentBorrower = borrower(_loanIndex);\r\n        _burn(_loanIndex);\r\n        _burnTrustDeed(_loanIndex);\r\n        // Emit an event with all relevant details from this transaction.\r\n        emit LoanLiquidated(\r\n            _loanIndex,\r\n            currentBorrower,\r\n            lender,\r\n            loan.loanAmount,\r\n            loan.tokenId,\r\n            loanMaturityDate,\r\n            block.timestamp,\r\n            loan.tokenAddress,\r\n            LiquidationTrigger.OverDue,\r\n            LiquidationMethod.Auction\r\n        );\r\n\r\n        // Delete the loan from storage in order to achieve a substantial gas\r\n        // savings and to lessen the burden of storage on Ethereum nodes, since\r\n        // we will never access this loan's details again, and the details are\r\n        // still available through event data.\r\n        delete indexToLoan[_loanIndex];\r\n    }\r\n\r\n    function liquidateOverdueLoan(uint256 _loanIndex) external nonReentrant {\r\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have\r\n        // never been called on this loanIndex. Depending on how the rest of the\r\n        // code turns out, this check may be unnecessary.\r\n        require(!loanRepaidOrLiquidated[_loanIndex], 'Loan has already been repaid or liquidated');\r\n\r\n        // Fetch loan details from storage, but store them in memory for the\r\n        // sake of saving gas.\r\n        Loan memory loan = indexToLoan[_loanIndex];\r\n\r\n        PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddr);\r\n\r\n        require(!loan.liquidateViaAuction, 'Loan is configured to be liquidated only via auction');\r\n        // Ensure that the loan is indeed overdue, since we can only liquidate\r\n        // overdue loans.\r\n        \r\n        uint256 loanMaturityDate = (uint256(loan.loanStartTime))\r\n            .add(uint256(loan.loanDuration))\r\n            .add(periFiAdmin.preLiquidationDuration());\r\n        require(block.timestamp > loanMaturityDate, 'Loan is not overdue yet');\r\n\r\n        // Fetch the current lender of the promissory note corresponding to\r\n        // this overdue loan.\r\n\r\n        address lender = ownerOf(_loanIndex);\r\n        // If the loan is leveraged, the lender must pay for the leverage and its interest.\r\n        if (loan.loanLeveragedAmount > 0)\r\n        {\r\n            require(msg.sender == lender, 'Only the lender can pay for the leverage and liquidate the underlying NFT');\r\n            LoanRepaymentCalculator calculator = LoanRepaymentCalculator(loanRepaymentAddr);\r\n            Repayment[] memory repayments = calculator.getDestinations(\r\n                _loanIndex, \r\n                loan.repaymentAmount,\r\n                loan.loanAmount,\r\n                lender);\r\n            IERC20 erc20 = IERC20(loan.paymentToken);\r\n            uint repaymentLength = repayments.length;\r\n            for (uint idx = 0; idx < repaymentLength; idx++) {\r\n                Repayment memory repayment = repayments[idx];\r\n                if (msg.sender == repayment.targetAddress) {\r\n                    continue;\r\n                }\r\n                erc20.transferFrom(msg.sender, repayment.targetAddress, repayment.value);\r\n            }\r\n\r\n            // uint256 interestDue = (loan.repaymentAmount).sub(loan.loanAmount);\r\n            // uint256 iv = _computeInterestForIV(interestDue, uint256(loan.interestForIVInBasisPoints));\r\n            // uint256 lenderToPay = _computePriceOfLenderToPay(\r\n            //     loan.loanAmount,\r\n            //     loan.loanLeveragedAmount,\r\n            //     loan.repaymentAmount);\r\n            // uint256 poolAmount = lenderToPay.sub(iv);\r\n            \r\n            // IERC20(loan.paymentToken).transferFrom(lender, lendingPoolAddr, poolAmount);\r\n            // IERC20(loan.paymentToken).transferFrom(lender, insuranceVaultAddr, iv);\r\n        }\r\n\r\n        // Mark loan as liquidated before doing any external transfers to\r\n        // follow the Checks-Effects-Interactions design pattern.\r\n        loanRepaidOrLiquidated[_loanIndex] = true;\r\n\r\n        // Update number of active loans.\r\n        totalActiveLoans = totalActiveLoans.sub(1);\r\n\r\n        // Transfer collateral from this contract to the lender, since the\r\n        // lender is seizing collateral for an overdue loan.\r\n        require(_transferNftToAddress(\r\n            loan.tokenAddress,\r\n            loan.tokenId,\r\n            lender\r\n        ), 'NFT was not successfully transferred');\r\n\r\n        address currentBorrower = borrower(_loanIndex);\r\n        // Destroy the lender's promissory note for this loan, since by seizing\r\n        // the collateral, the lender has forfeit the rights to the loan\r\n        // principal-plus-interest.\r\n        _burn(_loanIndex);\r\n        _burnTrustDeed(_loanIndex);\r\n        // Emit an event with all relevant details from this transaction.\r\n        emit LoanLiquidated(\r\n            _loanIndex,\r\n            currentBorrower,\r\n            lender,\r\n            loan.loanAmount,\r\n            loan.tokenId,\r\n            loanMaturityDate,\r\n            block.timestamp,\r\n            loan.tokenAddress,\r\n            LiquidationTrigger.OverDue,\r\n            LiquidationMethod.TransferredToLender\r\n        );\r\n\r\n        // Delete the loan from storage in order to achieve a substantial gas\r\n        // savings and to lessen the burden of storage on Ethereum nodes, since\r\n        // we will never access this loan's details again, and the details are\r\n        // still available through event data.\r\n        delete indexToLoan[_loanIndex];\r\n    }\r\n\r\n    function cancelLoanCommitmentBeforeLoanHasBegun(uint256 _nonce) external {\r\n        require(!_nonceHasBeenUsedForUser[msg.sender][_nonce], 'Nonce invalid, user has either cancelled/begun this loan, or reused a nonce when signing');\r\n        _nonceHasBeenUsedForUser[msg.sender][_nonce] = true;\r\n    }\r\n\r\n    /* ******************* */\r\n    /* READ-ONLY FUNCTIONS */\r\n    /* ******************* */\r\n\r\n    function getPayoffAmount(uint256 _loanIndex) public view returns (uint256) {\r\n        Loan storage loan = indexToLoan[_loanIndex];\r\n        // if(loan.interestIsProRated == false){\r\n        //     return loan.repaymentAmount;\r\n        // } else {\r\n        //     uint256 loanDurationSoFarInSeconds = block.timestamp.sub(uint256(loan.loanStartTime));\r\n        //     uint256 interestDue = _computeInterestDue(loan.loanAmount, loan.repaymentAmount, loanDurationSoFarInSeconds, uint256(loan.loanDuration), uint256(loan.loanInterestRateForDurationInBasisPoints));\r\n        //     return (loan.loanAmount).add(interestDue);\r\n        // }\r\n        \r\n        return loan.repaymentAmount;\r\n    }\r\n\r\n    function getWhetherNonceHasBeenUsedForUser(address _user, uint256 _nonce) public view returns (bool) {\r\n        return _nonceHasBeenUsedForUser[_user][_nonce];\r\n    }\r\n\r\n    // function _computeInterestDue(uint256 _loanAmount, uint256 _repaymentAmount, uint256 _loanDurationSoFarInSeconds, uint256 _loanTotalDurationAgreedTo, uint256 _loanInterestRateForDurationInBasisPoints) internal pure returns (uint256) {\r\n    //     uint256 interestDueAfterEntireDuration = (_loanAmount.mul(_loanInterestRateForDurationInBasisPoints)).div(uint256(10000));\r\n    //     uint256 interestDueAfterElapsedDuration = (interestDueAfterEntireDuration.mul(_loanDurationSoFarInSeconds)).div(_loanTotalDurationAgreedTo);\r\n    //     if(_loanAmount.add(interestDueAfterElapsedDuration) > _repaymentAmount){\r\n    //         return _repaymentAmount.sub(_loanAmount);\r\n    //     } else {\r\n    //         return interestDueAfterElapsedDuration;\r\n    //     }\r\n    // }\r\n    // function _computeInterestForIV(uint256 _interestDue, uint256 _interestForIVInBasisPoints) internal pure returns (uint256) {\r\n    // \treturn (_interestDue.mul(_interestForIVInBasisPoints)).div(10000);\r\n    // }\r\n\r\n    function _transferNftToAddress(address _nftContract, uint256 _nftId, address _recipient) internal returns (bool) {\r\n        // Try to call transferFrom()\r\n        bool transferFromSucceeded = _attemptTransferFrom(_nftContract, _nftId, _recipient);\r\n        if(transferFromSucceeded){\r\n            return true;\r\n        } else {\r\n            // Try to call transfer()\r\n            bool transferSucceeded = _attemptTransfer(_nftContract, _nftId, _recipient);\r\n            return transferSucceeded;\r\n        }\r\n    }\r\n    function _attemptTransferFrom(address _nftContract, uint256 _nftId, address _recipient) internal returns (bool) {\r\n        // @notice Some NFT contracts will not allow you to approve an NFT that\r\n        //         you own, so we cannot simply call approve() here, we have to\r\n        //         try to call it in a manner that allows the call to fail.\r\n        (bool success, ) = _nftContract.call(abi.encodeWithSelector(IERC721(_nftContract).approve.selector, address(this), _nftId));\r\n\r\n        // @notice Some NFT contracts will not allow you to call transferFrom()\r\n        //         for an NFT that you own but that is not approved, so we\r\n        //         cannot simply call transferFrom() here, we have to try to\r\n        //         call it in a manner that allows the call to fail.\r\n        (success, ) = _nftContract.call(abi.encodeWithSelector(IERC721(_nftContract).transferFrom.selector, address(this), _recipient, _nftId));\r\n        return success;\r\n    }\r\n\r\n    function _attemptTransfer(address _nftContract, uint256 _nftId, address _recipient) internal returns (bool) {\r\n        // @notice Some NFT contracts do not implement transfer(), since it is\r\n        //         not a part of the official ERC721 standard, but many\r\n        //         prominent NFT projects do implement it (such as\r\n        //         Cryptokitties), so we cannot simply call transfer() here, we\r\n        //         have to try to call it in a manner that allows the call to\r\n        //         fail.\r\n        (bool success, ) = _nftContract.call(abi.encodeWithSelector(INonStandardERC721Transfer(_nftContract).transfer.selector, _recipient, _nftId));\r\n        return success;\r\n    }\r\n\r\n    /* ***************** */\r\n    /* FALLBACK FUNCTION */\r\n    /* ***************** */\r\n\r\n    // @notice By calling 'revert' in the fallback function, we prevent anyone\r\n    //         from accidentally sending funds directly to this contract.\r\n    fallback() external payable {\r\n        revert();\r\n    }\r\n    receive() external payable {\r\n        revert();\r\n    }\r\n\r\n        // @notice This function gets the current chain ID.\r\n    function getChainID() public view returns (uint256) {\r\n        uint256 id;\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        return id;\r\n    }\r\n    function isValidBorrowerSignature(\r\n        uint256 _tokenId,\r\n        uint256 _borrowerNonce,\r\n        address _tokenAddress,\r\n        address _borrower,\r\n        bytes memory _borrowerSignature\r\n    ) public view returns(bool) {\r\n        if(_borrower == address(0)){\r\n            return false;\r\n        } else {\r\n            uint256 chainId;\r\n            chainId = getChainID();\r\n            bytes32 message = keccak256(abi.encodePacked(\r\n                _tokenId,\r\n                _borrowerNonce,\r\n                _tokenAddress,\r\n                _borrower,\r\n                chainId\r\n            ));\r\n            \r\n            bytes32 messageWithEthSignPrefix = message.toEthSignedMessageHash();\r\n\r\n            return (messageWithEthSignPrefix.recover(_borrowerSignature) == _borrower);\r\n        }\r\n    }\r\n    function isValidLenderSignature(\r\n        uint256 _loanAmount,\r\n        uint256 _loanLeveragedAmount,\r\n        uint256 _repaymentAmount,\r\n        uint256 _tokenId,\r\n        uint256 _loanDuration,\r\n        // uint256 _loanInterestRateForDurationInBasisPoints,\r\n        uint256 _commissionBasisPoints,\r\n        uint256 _lenderNonce,\r\n        address _tokenAddress,\r\n        address _paymentToken,\r\n        address _lender,\r\n        bool _liquidateViaAuction,\r\n        // bool _interestIsProRated,\r\n        bytes memory _lenderSignature\r\n    ) public view returns(bool) {\r\n        if(_lender == address(0)){\r\n            return false;\r\n        } else {\r\n            uint256 chainId;\r\n            chainId = getChainID();\r\n            bytes32 message = keccak256(abi.encodePacked(\r\n                _loanAmount,\r\n                _loanLeveragedAmount,\r\n                _repaymentAmount,\r\n                _tokenId,\r\n                _loanDuration,\r\n                _commissionBasisPoints,\r\n                _lenderNonce,\r\n                _tokenAddress,\r\n                _paymentToken,\r\n                _lender,\r\n                _liquidateViaAuction,\r\n                chainId\r\n            ));\r\n\r\n            bytes32 messageWithEthSignPrefix = message.toEthSignedMessageHash();\r\n\r\n            return (messageWithEthSignPrefix.recover(_lenderSignature) == _lender);\r\n        }\r\n    }\r\n\r\n    // function computeInterestDistributionForLender(\r\n    //     uint256 _loanAmount, \r\n    //     uint256 _loanLeveragedAmount,\r\n    //     uint256 _interestDue\r\n    //     ) public pure returns(uint256) {\r\n    //         uint256 rate = 55;\r\n    //         if (_loanLeveragedAmount != 0) {\r\n    //             uint256 leveraged = (_loanAmount).div(_loanLeveragedAmount);\r\n    //             if (leveraged <= 30) {\r\n    //                 rate = 50;\r\n    //             }\r\n    //             else if (leveraged <= 50) {\r\n    //                 rate = 45;\r\n    //             }\r\n    //             else if (leveraged <= 60) {\r\n    //                 rate = 40;\r\n    //             }\r\n    //             else if (leveraged <= 70) {\r\n    //                 rate = 35;\r\n    //             }\r\n    //             else if (leveraged <= 80) {\r\n    //                 rate = 25;\r\n    //             }\r\n    //             else if (leveraged <= 90) {\r\n    //                 rate = 15;\r\n    //             }\r\n    //             else {\r\n    //                 rate = 5;\r\n    //             }\r\n    //         }\r\n    //         return (_interestDue).mul(rate).div(10000);\r\n    // }\r\n\r\n    // function _computePriceOfLenderToPay(uint256 loanAmount, uint256 leveragedAmount, uint256 repaymentAmount) internal pure returns(uint256) {\r\n    //     uint256 interestDue = (repaymentAmount).sub(loanAmount);\r\n    //         uint256 interestForLender = computeInterestDistributionForLender(\r\n    //             loanAmount,\r\n    //             leveragedAmount,\r\n    //             interestDue\r\n    //         );\r\n    //         return leveragedAmount.add(interestDue).sub(interestForLender);\r\n    // }\r\n\r\n\r\n    function computePriceOfLenderToPay(uint256 _loanIndex) external view returns(uint256) {\r\n        require(!loanRepaidOrLiquidated[_loanIndex], 'Loan has already been repaid or liquidated');\r\n        Loan memory loan = indexToLoan[_loanIndex];\r\n\r\n        address lender = ownerOf(_loanIndex);\r\n        \r\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(loanRepaymentAddr);\r\n        Repayment[] memory repayments = calculator.getDestinations(\r\n            _loanIndex, \r\n            loan.repaymentAmount,\r\n            loan.loanAmount,\r\n            lender);\r\n        // IERC20 erc20 = IERC20(loan.paymentToken);\r\n        uint repaymentLength = repayments.length;\r\n        uint256 lenderToPay = 0;\r\n        for (uint idx = 0; idx < repaymentLength; idx++) {\r\n            Repayment memory repayment = repayments[idx];\r\n            if (msg.sender == repayment.targetAddress) {\r\n                continue;\r\n            }\r\n            lenderToPay += repayment.value;\r\n        }\r\n        return lenderToPay;\r\n        // // Fetch loan details from storage, but store them in memory for the\r\n        // // sake of saving gas.\r\n        // return _computePriceOfLenderToPay(loan.loanAmount, loan.loanLeveragedAmount, loan.repaymentAmount);\r\n    }\r\n\r\n    function _burnTrustDeed(uint256 loanIndex) internal {\r\n        // check trust deed contract address is set\r\n        if (trustDeedAddr == address(0)){\r\n            return;\r\n        }\r\n        TrustDeed trustDeedContract = TrustDeed(trustDeedAddr);\r\n        trustDeedContract.safeBurn(loanIndex);\r\n    }\r\n\r\n    function borrower(uint256 loanIndex) public view returns (address) {\r\n        if (loanRepaidOrLiquidated[loanIndex]) {\r\n            return address(0);\r\n        }\r\n\r\n        // check trust deed contract address is set\r\n        if (trustDeedAddr != address(0)){\r\n            TrustDeed trustDeedContract = TrustDeed(trustDeedAddr);\r\n            // check whether the trust deed has been issued\r\n            try trustDeedContract.ownerOf(loanIndex) returns (address potentionBorrower) {\r\n                if (potentionBorrower != address(0)){\r\n                    return potentionBorrower;\r\n                }\r\n            } catch { }\r\n        }\r\n\r\n        // if no trust deed has been issued, return original borrower\r\n        Loan memory loan = indexToLoan[loanIndex];\r\n\r\n        return loan.borrower;\r\n    }\r\n}"
    },
    "contracts/PeriFiAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport \"./access/MWOwnable.sol\";\r\n\r\ncontract PeriFiAdmin is MWOwnable {\r\n    uint256 public maximumLoanDuration = 53 weeks;\r\n    uint256 public maximumNumberOfActiveLoans = 100;\r\n\r\n    uint256 public poolCommissionIFPUpTo20 = 4000;\r\n    uint256 public poolCommissionIFPUpTo30 = 4500;\r\n    uint256 public poolCommissionIFPUpTo40 = 5000;\r\n    uint256 public poolCommissionIFPUpTo50 = 5000;\r\n    uint256 public poolCommissionIFPUpTo60 = 5500;\r\n    uint256 public poolCommissionIFPUpTo70 = 6000;\r\n    uint256 public poolCommissionIFPUpTo80 = 7000;\r\n    uint256 public poolCommissionIFPUpTo90 = 8000;\r\n    uint256 public poolCommissionIFPUpTo100 = 9000;\r\n\r\n    uint256 public ivCommissionForIFP = 500; // 5%\r\n    uint256 public commissionForIFL = 500;\r\n    \r\n    // uint256 public loanCommissionInBasisPoints = 500; // 5%\r\n    uint256 public preLiquidationDuration = 24 hours;\r\n    uint256 public claimCollateralDuration = 24 hours;\r\n    uint256 public liquidateProtectionDuration = 48 hours;\r\n    \r\n    uint256 public liquidationThresholdInBasisPoints = 8000; // 80%\r\n    \r\n    function updateMaximumLoanDuration(uint256 _newMaximumLoanDuration) external onlyOwner {\r\n        require(_newMaximumLoanDuration <= uint256(~uint32(0)), 'loan duration cannot exceed space alotted in struct');\r\n        maximumLoanDuration = _newMaximumLoanDuration;\r\n    }\r\n\r\n    function updateMaximumNumberOfActiveLoans(uint256 _newMaximumNumberOfActiveLoans) external onlyOwner {\r\n        maximumNumberOfActiveLoans = _newMaximumNumberOfActiveLoans;\r\n    }\r\n    function updatePoolCommission(uint256 leveragePercent, uint256 poolCommissionInBasisPoint) external onlyOwner {\r\n        require(leveragePercent % 10 == 0, \"leveragePercent must be multiples of 10\");\r\n        require(leveragePercent >= 20, \"leveragePercent must be bigger than or equal to 20\");\r\n        require(leveragePercent <= 100, \"leveragePercent must be smaller than or equal to 100\");\r\n\r\n        if (leveragePercent == 20){\r\n            poolCommissionIFPUpTo20 = poolCommissionInBasisPoint;\r\n        } else if (leveragePercent == 30){\r\n            poolCommissionIFPUpTo30 = poolCommissionInBasisPoint;\r\n        } else if (leveragePercent == 40){\r\n            poolCommissionIFPUpTo40 = poolCommissionInBasisPoint;\r\n        } else if (leveragePercent == 50){\r\n            poolCommissionIFPUpTo50 = poolCommissionInBasisPoint;\r\n        } else if (leveragePercent == 60){\r\n            poolCommissionIFPUpTo60 = poolCommissionInBasisPoint;\r\n        } else if (leveragePercent == 70){\r\n            poolCommissionIFPUpTo70 = poolCommissionInBasisPoint;\r\n        } else if (leveragePercent == 80){\r\n            poolCommissionIFPUpTo80 = poolCommissionInBasisPoint;\r\n        } else if (leveragePercent == 90){\r\n            poolCommissionIFPUpTo90 = poolCommissionInBasisPoint;\r\n        } else if (leveragePercent == 100){\r\n            poolCommissionIFPUpTo100 = poolCommissionInBasisPoint;\r\n        }\r\n    }\r\n\r\n\r\n    function updateIVCommissionForIFP(uint256 _newIVCommissionForIFP) external onlyOwner {\r\n        require(_newIVCommissionForIFP <= 10000, 'By definition, basis points cannot exceed 10000');\r\n        ivCommissionForIFP = _newIVCommissionForIFP;\r\n        // emit InterestForIVUpdated(_newInterestForIVInBasisPoints);\r\n    }\r\n\r\n    function updateCommissionForIFL(uint256 _newCommissionForIFL) external onlyOwner {\r\n        require(_newCommissionForIFL <= 10000, 'By definition, basis points cannot exceed 10000');\r\n        commissionForIFL = _newCommissionForIFL;\r\n        // emit InterestForIVUpdated(_newInterestForIVInBasisPoints);\r\n    }\r\n    \r\n\r\n    function updateLiquidateProtectionDuration(uint256 _newLiquidateProtectionDuration) external onlyOwner {\r\n        liquidateProtectionDuration = _newLiquidateProtectionDuration;\r\n    }\r\n\r\n    function updatePreLiquidationDuration(uint256 _newPreLiquidationDuration) external onlyOwner {\r\n        preLiquidationDuration = _newPreLiquidationDuration;\r\n    }\r\n    function updateClaimCollateralDuration(uint256 _newClaimCollateralDuration) external onlyOwner {\r\n        claimCollateralDuration = _newClaimCollateralDuration;\r\n    }\r\n\r\n    function updateLiquidationThreshold(uint256 _newLiquidationThresholdInBasisPoints) external onlyOwner {\r\n        require(_newLiquidationThresholdInBasisPoints <= 10000, 'By definition, basis points cannot exceed 10000');\r\n        liquidationThresholdInBasisPoints = _newLiquidationThresholdInBasisPoints;\r\n        // emit InterestForIVUpdated(_newLiquidationThresholdInBasisPoints);\r\n    }\r\n\r\n    // function updateloanCommissionInBasisPoints(uint256 _newLoanCommissionInBasisPoints) external onlyOwner {\r\n    //     require(_newLoanCommissionInBasisPoints <= 10000, 'By definition, basis points cannot exceed 10000');\r\n    //     loanCommissionInBasisPoints = _newLoanCommissionInBasisPoints;\r\n    //     // emit LoanCommissionUpdated(_newLoanCommissionInBasisPoints);\r\n    // }\r\n}\r\n    // event InterestForIVUpdated(\r\n    //     uint256 basisPointValue\r\n    // );\r\n\r\n    // event LoanCommissionUpdated(\r\n    //     uint256 basisPointValue\r\n    // );\r\n\r\n    // event LiquidationThresholdUpdated(\r\n    //     uint256 basisPointValue\r\n    // );\r\n\r\n    // event ProtectionDurationUpdated(\r\n    //     uint256 durationInSeconds\r\n    // );\r\n\r\n    // event LiquidateDurationUpdated(\r\n    //     uint256 durationInSeconds\r\n    // );\r\n\r\n    // event ERC20WhiteListConfigured(\r\n    //     address erc20,\r\n    //     bool isWhitelisted\r\n    // );\r\n\r\n    // event CollectionLeverageConfigured(\r\n    //     address collection,\r\n    //     bool isAllowed\r\n    // );\r\n\r\n    // event CollectionHealthFactorConfigured(\r\n    //     address collection,\r\n    //     bool isTrakcked\r\n    // );\r\n\r\n    // @notice A mapping from from an ERC20 currency address to whether that\r\n    //         currency is whitelisted to be used by this contract.\r\n    // mapping (address => bool) public erc20CurrencyIsWhitelisted;\r\n\r\n    // mapping (address => bool) public leverageAvailableCollections;\r\n\r\n    // mapping (address => bool) public healthFactorEnabledCollection;\r\n    // @notice The percentage of interest earned by lenders on this platform\r\n    //         that is taken by the contract admin's as a fee, measured in\r\n    //         basis points (hundreths of a percent).\r\n    \r\n    // function whitelistERC20Currency(address _erc20Currency, bool _setAsWhitelisted) external onlyOwner {\r\n    //     erc20CurrencyIsWhitelisted[_erc20Currency] = _setAsWhitelisted;\r\n    //     emit ERC20WhiteListConfigured(_erc20Currency, _setAsWhitelisted);\r\n    // }\r\n\r\n    // function setLeverageOnCollection(address collection, bool allowed) external onlyOwner {\r\n    //     leverageAvailableCollections[collection] = allowed;\r\n    //     emit CollectionLeverageConfigured(collection, allowed);\r\n    // }\r\n\r\n    // function setHealthFactorOnCollection(address collection, bool tracked) external onlyOwner {\r\n    //     healthFactorEnabledCollection[collection] = tracked;\r\n    //     emit CollectionHealthFactorConfigured(collection, tracked);\r\n    // }\r\n"
    },
    "contracts/loan/TrustDeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"../access/SimpleRoleAccess.sol\";\r\n\r\ncontract TrustDeed is ERC721, ERC721URIStorage, ERC721Burnable, SimpleRoleAccess {\r\n    constructor() ERC721(\"PeriFi Loan Trust Deed\", \"PTD\") {}\r\n\r\n    function safeMint(address to, uint256 tokenId) public onlyRole(\"minter\") {\r\n        _safeMint(to, tokenId);\r\n    }\r\n\r\n    function safeBurn(uint256 tokenId) external onlyRole(\"minter\") {\r\n        if (_exists(tokenId)) {\r\n            _burn(tokenId);\r\n        }\r\n    }\r\n\r\n    function setTokenURI(uint256 tokenId, string memory uri) external {\r\n        super._setTokenURI(tokenId, uri);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721URIStorage)\r\n        returns (string memory)\r\n    {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\r\n        super._burn(tokenId);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "contracts/interfaces/INonStandardERC721Transfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\ninterface INonStandardERC721Transfer {\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n}"
    },
    "contracts/loan/LoanAuction.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport { AmountDeriver } from \"../lib/AmountDeriver.sol\";\r\nimport \"../PeriFiAdmin.sol\";\r\nimport \"./LoanAuctionEnums.sol\";\r\nimport \"./LoanAuctionEventsAndErrors.sol\";\r\nimport \"./LoanAuctionStructs.sol\";\r\nimport \"./LoanRepaymentCalculator.sol\";\r\nimport \"../vault/Vault.sol\";\r\nimport \"../access/MWOwnable.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract LoanAuction is MWOwnable, ReentrancyGuard, AmountDeriver, LoanAuctionEventsAndErrors {\r\n    uint256 public auctionCount = 0;\r\n    mapping(uint256 => Auction) public auctions;\r\n    mapping(uint256 => AuctionStatus) public status;\r\n    mapping(uint256 => uint256) public bidAmounts;\r\n    mapping(uint256 => address) public bidders;\r\n    address public periFiAdminAddr;\r\n    address public loanRepaymentAddr;\r\n\r\n    constructor(address _periFiAdminAddr, address _loanRepaymentAddr) {\r\n        periFiAdminAddr = _periFiAdminAddr;\r\n        loanRepaymentAddr = _loanRepaymentAddr;\r\n    }\r\n\r\n    // display current price\r\n\r\n    // display price for borrower\r\n\r\n    function beginAuction(\r\n        AuctionParameters calldata params\r\n    ) external onlyOwner nonReentrant {\r\n        Auction memory auction = Auction({\r\n            id: auctionCount,\r\n            protectedUntil: 0,\r\n            parameters: params\r\n        });\r\n        \r\n        address owner = IERC721(params.tokenAddress).ownerOf(params.tokenId);\r\n\r\n        // We will assume auction contract will hold the defaulted collateral for ease of use.\r\n        if (owner != address(this)) {\r\n            revert CollateralOwnershipNotTransferred();\r\n        }\r\n\r\n        if (params.startAmount <= params.endAmount) {\r\n            revert InvalidPriceRange(params.startAmount, params.endAmount);\r\n        }\r\n\r\n        if (params.startTime >= params.endTime) {\r\n            revert InvalidTimeRange(params.startTime, params.endTime);\r\n        }\r\n\r\n        if (block.timestamp >= params.endTime) {\r\n            revert InvalidTimeRange(params.startTime, params.endTime);\r\n        }\r\n\r\n        if (params.stepDownConfig.length != 0) {\r\n            validateStepDownConfig(params.startTime, params.endTime, params.stepDownConfig);\r\n        }\r\n\r\n        // set liquidation protection expiration\r\n        if (params.isProtected){\r\n            uint256 protection = PeriFiAdmin(periFiAdminAddr).liquidateProtectionDuration();\r\n            auction.protectedUntil = params.startTime + protection;\r\n        }\r\n\r\n        auctions[auctionCount] = auction;\r\n        status[auctionCount] = AuctionStatus.Registered;\r\n        auctionCount += 1;\r\n        emit LoanAuctionBegun(auction.id, params.loanId, params.tokenAddress, params.paymentToken,\r\n            params.loanBorrower, params.tokenId, params.startAmount, params.endAmount,\r\n            params.startTime, params.endTime, auction.protectedUntil, params.loanRepaymentAmount,\r\n            params.stepDownConfig);\r\n    }\r\n\r\n    function makeBid(uint256 auctionId) external nonReentrant returns (bool completed) {\r\n        if (status[auctionId] != AuctionStatus.Registered) {\r\n            revert AuctionInvalidStatus(auctionId, status[auctionId]);\r\n        }\r\n\r\n        uint256 currentPrice = currentBidPrice(auctionId);\r\n\r\n        Auction memory item = auctions[auctionId];\r\n        AuctionParameters memory params = item.parameters;\r\n\r\n        if (item.protectedUntil > block.timestamp) {\r\n            // hold the asset until the protection period is over\r\n            IERC20(params.paymentToken).transferFrom(msg.sender, address(this), currentPrice);\r\n            bidders[auctionId] = msg.sender;\r\n            status[auctionId] = AuctionStatus.Protected;\r\n            bidAmounts[auctionId] = currentPrice;\r\n            emit LoanAuctionSoldAndProtected(auctionId, msg.sender, params.loanBorrower, currentPrice);\r\n            return false;\r\n        }\r\n\r\n        IERC721(params.tokenAddress).transferFrom(address(this), msg.sender, params.tokenId);\r\n        \r\n        // transfer erc20 from this contract to all the recipients\r\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(loanRepaymentAddr);\r\n        Repayment[] memory repayments = calculator.getDestinations(\r\n            params.loanId, \r\n            params.loanRepaymentAmount,\r\n            params.loanAmount,\r\n            params.lender);\r\n        address insuranceVaultAddr = calculator.insuranceVaultAddress();\r\n        IERC20 erc20 = IERC20(params.paymentToken);\r\n        uint256 bidAmountLeft = currentPrice;\r\n        uint256 insuranceLeft = erc20.balanceOf(insuranceVaultAddr);\r\n        uint repaymentLength = repayments.length;\r\n        for (uint idx = 0; idx < repaymentLength; idx++) {\r\n            Repayment memory repaymentItem = repayments[idx];\r\n            uint256 paymentLeft = repaymentItem.value;\r\n\r\n            // cover the repayment from deposit amount from bid\r\n            if (bidAmountLeft > 0) {\r\n                if (bidAmountLeft >= paymentLeft) {\r\n                    console.log('sending from %s to %s, %s', msg.sender, repaymentItem.targetAddress, paymentLeft);\r\n                    erc20.transferFrom(msg.sender, repaymentItem.targetAddress, paymentLeft);\r\n                    bidAmountLeft -= paymentLeft;\r\n                    continue;\r\n                }\r\n                console.log('sending partial from %s to %s, %s', msg.sender,repaymentItem.targetAddress, bidAmountLeft);\r\n                erc20.transferFrom(msg.sender, repaymentItem.targetAddress, bidAmountLeft);\r\n                paymentLeft -= bidAmountLeft;\r\n                bidAmountLeft = 0;\r\n            }\r\n            if (insuranceVaultAddr == repaymentItem.targetAddress) {\r\n                    continue;\r\n            }\r\n            // if the repayment wasn't covered fully, send it from insurance\r\n            if (insuranceLeft >= paymentLeft) {\r\n                console.log('sending from IV to %s, %s',repaymentItem.targetAddress, paymentLeft);\r\n                \r\n                Vault(payable(insuranceVaultAddr)).transferERC20(params.paymentToken, repaymentItem.targetAddress, paymentLeft);\r\n                insuranceLeft -= paymentLeft;\r\n                continue;\r\n            }\r\n\r\n            if (insuranceLeft > 0){\r\n                console.log('sending partial from IV to %s, %s',repaymentItem.targetAddress, insuranceLeft);\r\n                Vault(payable(insuranceVaultAddr)).transferERC20(params.paymentToken, repaymentItem.targetAddress, insuranceLeft);\r\n            }\r\n            break;\r\n        }\r\n        if (bidAmountLeft > 0) {\r\n            console.log('sending from %s to %s, %s', msg.sender, params.loanBorrower, bidAmountLeft);\r\n            erc20.transferFrom(msg.sender, params.loanBorrower, bidAmountLeft);\r\n        }\r\n        emit LoanAuctionSoldToBidder(auctionId, msg.sender, currentPrice);\r\n        status[auctionId] = AuctionStatus.SoldToBidder;\r\n        return true;\r\n    }\r\n\r\n    function claim(uint256 auctionId) external nonReentrant {\r\n        if (status[auctionId] != AuctionStatus.Protected) {\r\n            revert AuctionInvalidStatus(auctionId, status[auctionId]);\r\n        }\r\n\r\n        Auction memory item = auctions[auctionId];\r\n\r\n        AuctionParameters memory params = item.parameters;\r\n        \r\n        if (block.timestamp < item.protectedUntil) {\r\n            revert ProtectionNotOver();\r\n        }\r\n\r\n        IERC721(params.tokenAddress).transferFrom(address(this), msg.sender, params.tokenId);\r\n        status[auctionId] = AuctionStatus.SoldToBidder;\r\n        uint256 bidAmount = bidAmounts[auctionId];\r\n        address bidder = bidders[auctionId];\r\n\r\n        // transfer erc20 from this contract to all the recipients\r\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(loanRepaymentAddr);\r\n        Repayment[] memory repayments = calculator.getDestinations(\r\n            params.loanId, \r\n            params.loanRepaymentAmount,\r\n            params.loanAmount,\r\n            params.lender);\r\n\r\n        address insuranceVaultAddr = calculator.insuranceVaultAddress();\r\n        IERC20 erc20 = IERC20(params.paymentToken);\r\n        uint256 bidAmountLeft = bidAmount;\r\n        uint256 insuranceLeft = erc20.balanceOf(insuranceVaultAddr);\r\n        uint repaymentLength = repayments.length;\r\n        for (uint idx = 0; idx < repaymentLength; idx++) {\r\n            Repayment memory repaymentItem = repayments[idx];\r\n            uint256 paymentLeft = repaymentItem.value;\r\n\r\n            // cover the repayment from deposit amount from bid\r\n            if (bidAmountLeft > 0) {\r\n                if (bidAmountLeft >= paymentLeft) {\r\n                    console.log('sending from %s to %s, %s', address(this), repaymentItem.targetAddress, paymentLeft);\r\n                    erc20.transfer(repaymentItem.targetAddress, paymentLeft);\r\n                    bidAmountLeft -= paymentLeft;\r\n                    continue;\r\n                }\r\n                console.log('sending partial from %s to %s, %s', address(this),repaymentItem.targetAddress, bidAmountLeft);\r\n                erc20.transfer(repaymentItem.targetAddress, bidAmountLeft);\r\n                paymentLeft -= bidAmountLeft;\r\n                bidAmountLeft = 0;\r\n            }\r\n            if (insuranceVaultAddr == repaymentItem.targetAddress) {\r\n                    continue;\r\n            }\r\n            // if the repayment wasn't covered fully, send it from insurance\r\n            if (insuranceLeft >= paymentLeft) {\r\n                console.log('sending from IV to %s, %s',repaymentItem.targetAddress, paymentLeft);\r\n                Vault(payable(insuranceVaultAddr)).transferERC20(params.paymentToken, repaymentItem.targetAddress, paymentLeft);\r\n                insuranceLeft -= paymentLeft;\r\n                continue;\r\n            }\r\n\r\n            if (insuranceLeft > 0){\r\n                console.log('sending partial from IV to %s, %s',repaymentItem.targetAddress, insuranceLeft);\r\n                Vault(payable(insuranceVaultAddr)).transferERC20(params.paymentToken, repaymentItem.targetAddress, insuranceLeft);\r\n            }\r\n            break;\r\n        }\r\n        if (bidAmountLeft > 0) {\r\n            console.log('sending from %s to %s, %s', address(this), params.loanBorrower, bidAmountLeft);\r\n            erc20.transfer(params.loanBorrower, bidAmountLeft);\r\n        }\r\n        emit LoanAuctionSoldToBidder(auctionId, bidder, bidAmount);\r\n    }\r\n    \r\n\r\n    function payout(uint256 auctionId) external nonReentrant {\r\n        AuctionStatus currentStatus = status[auctionId];\r\n        \r\n        if (currentStatus != AuctionStatus.Registered\r\n            && currentStatus != AuctionStatus.Protected) {\r\n            revert AuctionInvalidStatus(auctionId, currentStatus);\r\n        }\r\n\r\n        Auction memory item = auctions[auctionId];\r\n        AuctionParameters memory params = item.parameters;\r\n\r\n        if (msg.sender != params.loanBorrower) {\r\n            revert NotAuthorized();\r\n        }\r\n\r\n        // check auction's protection period has been expired\r\n        if (block.timestamp > item.protectedUntil) {\r\n            revert ProtectionOver();\r\n        }\r\n\r\n        uint256 repayment = params.loanRepaymentAmount;\r\n        uint256 penalty = 0;\r\n        if (currentStatus == AuctionStatus.Protected) {\r\n            uint bidAmount = bidAmounts[auctionId];\r\n            penalty = bidAmount * 5 / 100;\r\n            IERC20(params.paymentToken).transferFrom(msg.sender, bidders[auctionId], penalty);\r\n            IERC20(params.paymentToken).transfer(bidders[auctionId], bidAmount);\r\n            bidAmounts[auctionId] = 0;\r\n        }\r\n        uint256 fullRepayment = repayment + penalty;\r\n        IERC721(params.tokenAddress).transferFrom(address(this), msg.sender, params.tokenId);\r\n        \r\n        LoanRepaymentCalculator calculator = LoanRepaymentCalculator(loanRepaymentAddr);\r\n        Repayment[] memory repayments = calculator.getDestinations(\r\n            params.loanId, \r\n            params.loanRepaymentAmount,\r\n            params.loanAmount,\r\n            params.lender);\r\n        IERC20 erc20 = IERC20(params.paymentToken);\r\n        uint repaymentLength = repayments.length;\r\n        for (uint idx = 0; idx < repaymentLength; idx++) {\r\n            Repayment memory repaymentItem = repayments[idx];\r\n            erc20.transferFrom(msg.sender, repaymentItem.targetAddress, repaymentItem.value);\r\n        }\r\n        status[auctionId] = AuctionStatus.SoldToBorrower;\r\n        emit LoanAuctionCancelledByPayout(auctionId, msg.sender, fullRepayment);\r\n    }\r\n\r\n    function currentDebt(uint256 auctionId) public view returns (uint256 debt) {\r\n        AuctionStatus currentStatus = status[auctionId];\r\n        \r\n        if (currentStatus != AuctionStatus.Registered\r\n            && currentStatus != AuctionStatus.Protected) {\r\n            return 0;\r\n        }\r\n\r\n        Auction memory item = auctions[auctionId];\r\n        AuctionParameters memory params = item.parameters;\r\n\r\n        if (msg.sender != params.loanBorrower) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 repayment = params.loanRepaymentAmount;\r\n        uint256 penalty = 0;\r\n        if (currentStatus == AuctionStatus.Protected) {\r\n            uint bidAmount = bidAmounts[auctionId];\r\n            penalty = bidAmount * 5 / 100;\r\n        }\r\n        return repayment + penalty;\r\n    }\r\n    \r\n    function currentBidPrice(uint256 auctionId) public view returns (uint256 amount) {\r\n        if (status[auctionId] != AuctionStatus.Registered) {\r\n            return 0;\r\n        }\r\n\r\n        Auction memory item = auctions[auctionId];\r\n        AuctionParameters memory params = item.parameters;\r\n        if (params.stepDownConfig.length == 0) {\r\n            // no stepDown\r\n            return _locateCurrentAmount(\r\n                params.startAmount, \r\n                params.endAmount, \r\n                params.startTime, \r\n                params.endTime, \r\n                true\r\n            );\r\n        } \r\n\r\n        // stepDown\r\n        return _locateCurrentStepDownAmount(\r\n            params.startAmount,\r\n            params.endAmount,\r\n            params.startTime,\r\n            params.stepDownConfig,\r\n            true\r\n        );\r\n    }\r\n\r\n    function validateStepDownConfig(\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        bytes memory config\r\n    ) internal pure {\r\n        if (config.length <= 0) {\r\n            revert InvalidStepDownConfig();\r\n        }\r\n\r\n        uint accDecrement;\r\n        uint8 actualLength;\r\n        uint length = config.length;\r\n        for (uint idx = 0; idx < length; idx++){\r\n            uint8 decrement = uint8(config[idx]);\r\n            if (decrement == 255) {\r\n                break;\r\n            }\r\n            accDecrement += decrement;\r\n            actualLength++;\r\n        }\r\n\r\n        uint256 duration = endTime - startTime;\r\n        uint256 minDuration = uint256(actualLength * 1 days);\r\n        uint256 maxDuration = uint256((actualLength+2) * 1 days);\r\n        if (duration <= minDuration) {\r\n            revert StepDownConfigAndAuctionTimeMismatch();\r\n        }\r\n        if (duration >= maxDuration) {\r\n            revert StepDownConfigAndAuctionTimeMismatch();\r\n        }\r\n    }\r\n\r\n    function _locateCurrentStepDownAmount(\r\n        uint256 startAmount,\r\n        uint256 endAmount,\r\n        uint256 startTime,\r\n        bytes memory stepDownConfig,\r\n        bool roundUp\r\n    ) internal view returns (uint256 amount) {\r\n        // Only modify end amount if it doesn't already equal start amount.\r\n        if (startAmount != endAmount) {\r\n            // Declare variables to derive in the subsequent unchecked scope.\r\n            uint256 duration;\r\n            uint256 elapsed;\r\n            uint256 remaining;\r\n\r\n            uint256 elapsedTs;\r\n            uint accDecrement;\r\n            uint totalDecrement;\r\n            // Skip underflow checks as startTime <= block.timestamp < endTime.\r\n            unchecked {\r\n                // Derive the duration for the order and place it on the stack.\r\n                // duration = endTime - startTime;\r\n\r\n                // Derive time elapsed since the order started & place on stack.\r\n                elapsedTs = block.timestamp - startTime;\r\n\r\n                // Derive time remaining until order expires and place on stack.\r\n                // remaining = duration - elapsed;\r\n            }\r\n            uint256 daysPassed = elapsedTs / 1 days;\r\n            uint length = stepDownConfig.length;\r\n            for (uint idx = 0; idx < length; idx++){\r\n                uint8 decrement = uint8(stepDownConfig[idx]);\r\n                if (decrement == 255) {\r\n                    break;\r\n                }\r\n                if (idx < daysPassed) {\r\n                    accDecrement += decrement;\r\n                }\r\n                totalDecrement += decrement;\r\n            }\r\n            duration = totalDecrement;\r\n            elapsed = accDecrement;\r\n            remaining = duration - elapsed;\r\n            // Aggregate new amounts weighted by time with rounding factor.\r\n            uint256 totalBeforeDivision = ((startAmount * remaining) +\r\n                (endAmount * elapsed));\r\n\r\n            // Use assembly to combine operations and skip divide-by-zero check.\r\n            assembly {\r\n                // Multiply by iszero(iszero(totalBeforeDivision)) to ensure\r\n                // amount is set to zero if totalBeforeDivision is zero,\r\n                // as intermediate overflow can occur if it is zero.\r\n                amount := mul(\r\n                    iszero(iszero(totalBeforeDivision)),\r\n                    // Subtract 1 from the numerator and add 1 to the result if\r\n                    // roundUp is true to get the proper rounding direction.\r\n                    // Division is performed with no zero check as duration\r\n                    // cannot be zero as long as startTime < endTime.\r\n                    add(\r\n                        div(sub(totalBeforeDivision, roundUp), duration),\r\n                        roundUp\r\n                    )\r\n                )\r\n            }\r\n\r\n            // Return the current amount.\r\n            return amount;\r\n        }\r\n\r\n        // Return the original amount as startAmount == endAmount.\r\n        return endAmount;\r\n    }\r\n}"
    },
    "contracts/loan/LoanRepaymentCalculator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport \"../PeriFiAdmin.sol\";\r\nimport \"../vault/LendingPool.sol\";\r\n\r\nenum DestinationType {\r\n    Pool,\r\n    Lender,\r\n    InsuranceVault,\r\n    Commission,\r\n    CurationRewardPool\r\n}\r\n\r\nstruct Repayment {\r\n    address targetAddress;\r\n    uint256 value;\r\n}\r\n\r\n\r\ncontract LoanRepaymentCalculator {\r\n    address public insuranceVaultAddress;\r\n    address public lendingPoolAddress;\r\n    address public masterWalletAddress;\r\n    address public periFiAdminAddress;\r\n    address public curationRewardPoolAddress;\r\n\r\n    constructor(\r\n        address _insuranceVaultAddress,\r\n        address _lendingPoolAddress,\r\n        address _masterWalletAddress,\r\n        address _periFiAdminAddress,\r\n        address _curationRewardPoolAddress) {\r\n        insuranceVaultAddress = _insuranceVaultAddress;\r\n        lendingPoolAddress = _lendingPoolAddress;\r\n        masterWalletAddress = _masterWalletAddress;\r\n        periFiAdminAddress = _periFiAdminAddress;\r\n        curationRewardPoolAddress = _curationRewardPoolAddress;\r\n    }\r\n\r\n    function getDestinations(\r\n        uint256 loanId,\r\n        uint256 repaymentAmount, \r\n        uint256 loanAmount,\r\n        address lender\r\n    ) external view returns (Repayment[] memory results) {\r\n        uint256 interestDue = repaymentAmount - loanAmount;\r\n\r\n        LendingPool lendingPool = LendingPool(payable(lendingPoolAddress));\r\n        uint256 leverageAmount = lendingPool.loanToLeverage(loanId);\r\n\r\n        // if there is no interest\r\n        if (interestDue == 0) {\r\n            if (leverageAmount == 0){\r\n                results = new Repayment[](1);\r\n                results[0] = Repayment(lender, loanAmount);\r\n            } else {\r\n                results = new Repayment[](2);\r\n                results[0] = Repayment(lendingPoolAddress, leverageAmount);\r\n                results[1] = Repayment(lender, loanAmount - leverageAmount);\r\n            }\r\n            return results;\r\n        }\r\n\r\n        uint256 interestForPool = interestDue * leverageAmount / loanAmount;\r\n        uint256 interestForLender = interestDue - interestForPool;\r\n        uint256 loanAmountByLender = loanAmount - leverageAmount;\r\n\r\n        uint256 lenderForIFL;\r\n        uint256 commissionForIFL;\r\n        uint256 curationRewardForIFL;\r\n\r\n        (\r\n            lenderForIFL, \r\n            commissionForIFL, \r\n            curationRewardForIFL\r\n        ) = distributeIFL(interestForLender);\r\n\r\n        if (leverageAmount == 0) {\r\n            // no leverage Used, only need to get InterestForLender (IFL)\r\n            results = new Repayment[](3);\r\n            results[0] = Repayment(lender, loanAmountByLender + lenderForIFL);\r\n            results[1] = Repayment(masterWalletAddress, commissionForIFL);\r\n            results[2] = Repayment(curationRewardPoolAddress, curationRewardForIFL);\r\n        } else {\r\n            PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddress);\r\n\r\n            uint256 poolUsageInBasisPoints = lendingPool.loanToPoolUsageInBasisPoint(loanId);\r\n            uint256 ivCommissionForIFP = periFiAdmin.ivCommissionForIFP();\r\n\r\n            uint256 commissionBasisPoint = poolCommissionInBasisPointByPoolUsage(poolUsageInBasisPoints);\r\n            \r\n            uint256 poolForIFP = interestForPool * commissionBasisPoint / 10000;\r\n            uint256 insuranceVaultForIFP = interestForPool * ivCommissionForIFP / 10000;\r\n            uint256 lenderForIFP = interestForPool - (poolForIFP + insuranceVaultForIFP);\r\n\r\n            results = new Repayment[](6);\r\n            results[0] = Repayment(lendingPoolAddress, leverageAmount);\r\n            results[1] = Repayment(lendingPoolAddress, poolForIFP);\r\n            results[2] = Repayment(lender, loanAmountByLender + lenderForIFP + lenderForIFL);\r\n            results[3] = Repayment(insuranceVaultAddress, insuranceVaultForIFP);\r\n            results[4] = Repayment(masterWalletAddress, commissionForIFL);\r\n            results[5] = Repayment(curationRewardPoolAddress, curationRewardForIFL);\r\n        }\r\n    }\r\n\r\n    function distributeIFL(\r\n        uint256 interestForLender) internal view returns (\r\n            uint256 lenderForIFL,\r\n            uint256 commissionForIFL,\r\n            uint256 curationRewardForIFL\r\n        ) {\r\n            PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddress);\r\n            uint256 commissionInBasisPoints = periFiAdmin.commissionForIFL();\r\n            if (commissionInBasisPoints < 100) {\r\n                commissionInBasisPoints = 100; // to ensure curation reward commission\r\n            }\r\n            // no leverage Used, only need to get InterestForLender (IFL)\r\n            uint256 totalCommission = interestForLender * commissionInBasisPoints / 10000;\r\n            curationRewardForIFL = interestForLender / 100; // take 1%\r\n            commissionForIFL = totalCommission - curationRewardForIFL;\r\n            lenderForIFL = interestForLender - totalCommission;\r\n        }\r\n\r\n    function poolCommissionInBasisPointByPoolUsage(uint256 poolUsageInBasisPoints) internal view returns (uint256 basisPoint) {\r\n            PeriFiAdmin periFiAdmin = PeriFiAdmin(periFiAdminAddress);\r\n            if (poolUsageInBasisPoints <= 2000) {\r\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo20();\r\n            }\r\n            else if (poolUsageInBasisPoints <= 3000) {\r\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo30();\r\n            }\r\n            else if (poolUsageInBasisPoints <= 4000) {\r\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo40();\r\n            }\r\n            else if (poolUsageInBasisPoints <= 5000) {\r\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo50();\r\n            }\r\n            else if (poolUsageInBasisPoints <= 6000) {\r\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo60();\r\n            }\r\n            else if (poolUsageInBasisPoints <= 7000) {\r\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo70();\r\n            }\r\n            else if (poolUsageInBasisPoints <= 8000) {\r\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo80();\r\n            }\r\n            else if (poolUsageInBasisPoints <= 9000) {\r\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo90();\r\n            }\r\n            else {\r\n                basisPoint = periFiAdmin.poolCommissionIFPUpTo100();\r\n            }\r\n            return basisPoint;\r\n    }\r\n\r\n}"
    },
    "contracts/vault/LendingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport \"./Vault.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nerror NotSufficientBalanceInPool(uint256 loanId, uint256 balance, uint256 requested);\r\nerror IllegalLeverageAccess(address sender, uint256 loanId, uint256 requested);\r\nerror AlreadyLeveragedLoan(uint256 loanId);\r\ncontract LendingPool is Vault, ReentrancyGuard {\r\n\r\n    constructor(string memory name) Vault(name) {\r\n    }\r\n\r\n    address public loanAddress;\r\n\r\n    mapping (uint256 => bool) public leveragedLoan;\r\n\r\n    mapping (uint256 => uint256) public loanToLeverage;\r\n\r\n    mapping (uint256 => uint256) public loanToPoolUsageInBasisPoint;\r\n\r\n    function leverageLoan(\r\n        uint256 loanId, \r\n        address paymentToken, \r\n        uint256 leveragedAmount, \r\n        address borrower) external nonReentrant onlyRole(\"spender\") {\r\n        if (leveragedLoan[loanId]) {\r\n            revert AlreadyLeveragedLoan(loanId);\r\n        }\r\n\r\n        if (leveragedAmount == 0) {\r\n            leveragedLoan[loanId] = true;\r\n            return;\r\n        }\r\n\r\n        IERC20 erc20 = IERC20(paymentToken);\r\n        uint256 balance = erc20.balanceOf(address(this));\r\n\r\n        if (balance < leveragedAmount) {\r\n            revert NotSufficientBalanceInPool(loanId, balance, leveragedAmount);\r\n        }\r\n\r\n        erc20.transfer(borrower, leveragedAmount);\r\n        uint256 poolUsageInBasisPoint = (leveragedAmount * 10000) / balance;\r\n        loanToLeverage[loanId] = leveragedAmount;\r\n        loanToPoolUsageInBasisPoint[loanId] = poolUsageInBasisPoint;\r\n        leveragedLoan[loanId] = true;\r\n    }\r\n}"
    },
    "contracts/access/MWOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract MWOwnable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(0x2F358B80eD2d296C09560d2b9F70a7f81d57e352);\r\n        // _transferOwnership(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier \r\n    onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"
    },
    "contracts/access/SimpleRoleAccess.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../access/MWOwnable.sol\";\r\n\r\nabstract contract SimpleRoleAccess is MWOwnable {\r\n    mapping(address => mapping(string => bool)) public hasRole;\r\n\r\n    function authorize(\r\n        address operator,\r\n        string memory role,\r\n        bool authorized // onlyOwner\r\n    ) public {\r\n        hasRole[operator][role] = authorized;\r\n    }\r\n\r\n    modifier onlyRole(string memory _role) {\r\n        // require(\r\n        //     msg.sender == owner() || hasRole[msg.sender][_role],\r\n        //     \"Not authorized\"\r\n        // );\r\n        _;\r\n    }\r\n\r\n    modifier hasAllRoles(string[] memory _roles) {\r\n        // for (uint256 i = 0; i < _roles.length; i++) {\r\n        //     require(hasRole[msg.sender][_roles[i]], \"Not authorized\");\r\n        // }\r\n        _;\r\n    }\r\n\r\n    modifier hasSomeRoles(string[] memory _roles) {\r\n        // bool _hasRole;\r\n        // for (uint256 i = 0; i < _roles.length; i++) {\r\n        //     if (hasRole[msg.sender][_roles[i]]) {\r\n        //         _hasRole = true;\r\n        //         break;\r\n        //     }\r\n        // }\r\n        // require(_hasRole, \"Not authorized\");\r\n        _;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/lib/AmountDeriver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n\r\n// prettier-ignore\r\nimport {\r\n    AmountDerivationErrors\r\n} from \"../interfaces/AmountDerivationErrors.sol\";\r\n\r\nimport \"./ConsiderationConstants.sol\";\r\n\r\n/**\r\n * @title AmountDeriver\r\n * @author 0age\r\n * @notice AmountDeriver contains view and pure functions related to deriving\r\n *         item amounts based on partial fill quantity and on linear\r\n *         interpolation based on current time when the start amount and end\r\n *         amount differ.\r\n */\r\ncontract AmountDeriver is AmountDerivationErrors {\r\n\r\n    /**\r\n     * @dev Internal view function to derive the current amount of a given item\r\n     *      based on the current price, the starting price, and the ending\r\n     *      price. If the start and end prices differ, the current price will be\r\n     *      interpolated on a linear basis. Note that this function expects that\r\n     *      the startTime parameter of orderParameters is not greater than the\r\n     *      current block timestamp and that the endTime parameter is greater\r\n     *      than the current block timestamp. If this condition is not upheld,\r\n     *      duration / elapsed / remaining variables will underflow.\r\n     *\r\n     * @param startAmount The starting amount of the item.\r\n     * @param endAmount   The ending amount of the item.\r\n     * @param startTime   The starting time of the order.\r\n     * @param endTime     The end time of the order.\r\n     * @param roundUp     A boolean indicating whether the resultant amount\r\n     *                    should be rounded up or down.\r\n     *\r\n     * @return amount The current amount.\r\n     */\r\n    function _locateCurrentAmount(\r\n        uint256 startAmount,\r\n        uint256 endAmount,\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        bool roundUp\r\n    ) internal view returns (uint256 amount) {\r\n        // Only modify end amount if it doesn't already equal start amount.\r\n        if (startAmount != endAmount) {\r\n            // Declare variables to derive in the subsequent unchecked scope.\r\n            uint256 duration;\r\n            uint256 elapsed;\r\n            uint256 remaining;\r\n\r\n            // Skip underflow checks as startTime <= block.timestamp < endTime.\r\n            unchecked {\r\n                // Derive the duration for the order and place it on the stack.\r\n                duration = endTime - startTime;\r\n\r\n                // Derive time elapsed since the order started & place on stack.\r\n                elapsed = block.timestamp - startTime;\r\n\r\n                // Derive time remaining until order expires and place on stack.\r\n                remaining = duration - elapsed;\r\n            }\r\n\r\n            // Aggregate new amounts weighted by time with rounding factor.\r\n            uint256 totalBeforeDivision = ((startAmount * remaining) +\r\n                (endAmount * elapsed));\r\n\r\n            // Use assembly to combine operations and skip divide-by-zero check.\r\n            assembly {\r\n                // Multiply by iszero(iszero(totalBeforeDivision)) to ensure\r\n                // amount is set to zero if totalBeforeDivision is zero,\r\n                // as intermediate overflow can occur if it is zero.\r\n                amount := mul(\r\n                    iszero(iszero(totalBeforeDivision)),\r\n                    // Subtract 1 from the numerator and add 1 to the result if\r\n                    // roundUp is true to get the proper rounding direction.\r\n                    // Division is performed with no zero check as duration\r\n                    // cannot be zero as long as startTime < endTime.\r\n                    add(\r\n                        div(sub(totalBeforeDivision, roundUp), duration),\r\n                        roundUp\r\n                    )\r\n                )\r\n            }\r\n\r\n            // Return the current amount.\r\n            return amount;\r\n        }\r\n\r\n        // Return the original amount as startAmount == endAmount.\r\n        return endAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to return a fraction of a given value and to\r\n     *      ensure the resultant value does not have any fractional component.\r\n     *      Note that this function assumes that zero will never be supplied as\r\n     *      the denominator parameter; invalid / undefined behavior will result\r\n     *      should a denominator of zero be provided.\r\n     *\r\n     * @param numerator   A value indicating the portion of the order that\r\n     *                    should be filled.\r\n     * @param denominator A value indicating the total size of the order. Note\r\n     *                    that this value cannot be equal to zero.\r\n     * @param value       The value for which to compute the fraction.\r\n     *\r\n     * @return newValue The value after applying the fraction.\r\n     */\r\n    function _getFraction(\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 value\r\n    ) internal pure returns (uint256 newValue) {\r\n        // Return value early in cases where the fraction resolves to 1.\r\n        if (numerator == denominator) {\r\n            return value;\r\n        }\r\n\r\n        // Ensure fraction can be applied to the value with no remainder. Note\r\n        // that the denominator cannot be zero.\r\n        assembly {\r\n            // Ensure new value contains no remainder via mulmod operator.\r\n            // Credit to @hrkrshnn + @axic for proposing this optimal solution.\r\n            if mulmod(value, numerator, denominator) {\r\n                mstore(0, InexactFraction_error_signature)\r\n                revert(0, InexactFraction_error_len)\r\n            }\r\n        }\r\n\r\n        // Multiply the numerator by the value and ensure no overflow occurs.\r\n        uint256 valueTimesNumerator = value * numerator;\r\n\r\n        // Divide and check for remainder. Note that denominator cannot be zero.\r\n        assembly {\r\n            // Perform division without zero check.\r\n            newValue := div(valueTimesNumerator, denominator)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to apply a fraction to a consideration\r\n     * or offer item.\r\n     *\r\n     * @param startAmount     The starting amount of the item.\r\n     * @param endAmount       The ending amount of the item.\r\n     * @param numerator       A value indicating the portion of the order that\r\n     *                        should be filled.\r\n     * @param denominator     A value indicating the total size of the order.\r\n     * @param startTime       The starting time of the order.\r\n     * @param endTime         The end time of the order.\r\n     * @param roundUp         A boolean indicating whether the resultant\r\n     *                        amount should be rounded up or down.\r\n     *\r\n     * @return amount The received item to transfer with the final amount.\r\n     */\r\n    function _applyFraction(\r\n        uint256 startAmount,\r\n        uint256 endAmount,\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        bool roundUp\r\n    ) internal view returns (uint256 amount) {\r\n        // If start amount equals end amount, apply fraction to end amount.\r\n        if (startAmount == endAmount) {\r\n            // Apply fraction to end amount.\r\n            amount = _getFraction(numerator, denominator, endAmount);\r\n        } else {\r\n            // Otherwise, apply fraction to both and interpolated final amount.\r\n            amount = _locateCurrentAmount(\r\n                _getFraction(numerator, denominator, startAmount),\r\n                _getFraction(numerator, denominator, endAmount),\r\n                startTime,\r\n                endTime,\r\n                roundUp\r\n            );\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/loan/LoanAuctionEnums.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nenum AuctionStatus {\r\n    NotRegistered,\r\n    Registered,\r\n    Protected,\r\n    SoldToBidder,\r\n    SoldToBorrower\r\n}\r\n\r\nenum RecipientType {\r\n    LendingPool,\r\n    Lender,\r\n    Commission,\r\n    Borrower\r\n}"
    },
    "contracts/loan/LoanAuctionEventsAndErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport \"./LoanAuctionEnums.sol\";\r\n\r\ninterface LoanAuctionEventsAndErrors{\r\n    error InvalidStepDownConfig();\r\n    error StepDownConfigOverflow();\r\n    error IncompleteStepDownConfig();\r\n    error StepDownConfigAndAuctionTimeMismatch();\r\n    \r\n    error CollateralOwnershipNotTransferred();\r\n    error AuctionInvalidStatus(uint256 auctionId, AuctionStatus status);\r\n    error AuctionNotRegistered();\r\n    error ProtectionNotOver();\r\n    error ProtectionOver();\r\n    error InvalidPriceRange(uint256 startAmount, uint256 endAmount);\r\n    error InvalidTimeRange(uint256 startTime, uint256 endTime);\r\n    error NotAuthorized();\r\n\r\n    event LoanAuctionBegun(uint256 indexed auctionId, uint256 loanId, \r\n        address tokenAddr, address paymentToken, \r\n        address loanBorrower, uint256 tokenId, uint256 startAmount, uint256 endAmount,\r\n        uint256 startTime, uint256 endTime, uint256 protectedUntil, uint256 loanRepaymentAmount,\r\n        bytes stepDownConfig);\r\n    event LoanAuctionSoldAndProtected(uint256 indexed auctionId, address bidder, address borrower, uint256 bidAmount);\r\n    event LoanAuctionSoldToBidder(uint256 indexed auctionId, address bidder, uint256 bidAmount);\r\n    event LoanAuctionCancelledByPayout(uint256 indexed auctionId, address borrower, uint256 payout);\r\n}"
    },
    "contracts/loan/LoanAuctionStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport \"./LoanAuctionEnums.sol\";\r\n\r\nstruct AuctionParameters {\r\n    uint256 loanId;\r\n    address tokenAddress;\r\n    address paymentToken;\r\n    uint256 tokenId;\r\n    uint256 startAmount;\r\n    uint256 endAmount;\r\n    uint256 startTime;\r\n    uint256 endTime;\r\n    bytes stepDownConfig;\r\n    address loanBorrower;\r\n    uint256 loanAmount;\r\n    uint256 loanRepaymentAmount;\r\n    address lender;\r\n    bool isProtected;\r\n}\r\n\r\n\r\nstruct PaymentRecipients {\r\n    address recipient;\r\n    uint256 amount;\r\n    RecipientType recipientType;\r\n}\r\n\r\nstruct Auction {\r\n    uint256 id;\r\n    uint256 protectedUntil;\r\n    AuctionParameters parameters;\r\n}"
    },
    "contracts/vault/Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\r\nimport \"../access/SimpleRoleAccess.sol\";\r\n\r\ncontract Vault is SimpleRoleAccess {\r\n    bytes4 private ERC1155_INTERFACE_ID = 0xd9b67a26;\r\n    string public name;\r\n\r\n    mapping(address => bool) public authorizedOperators;\r\n    mapping(address => bool) public authorizedSpenders;\r\n    // Balance name => token => amount\r\n    mapping(string => mapping(address => uint256)) public namedBalances;\r\n\r\n    constructor(string memory _name) {\r\n        name = _name;\r\n    }\r\n\r\n    function approveERC20Transfer(\r\n        address _tokenAddress,\r\n        address _spender,\r\n        uint256 _amount\r\n    ) external onlyRole(\"spender\") returns (bool) {\r\n        IERC20 erc20 = IERC20(_tokenAddress);\r\n        return erc20.approve(_spender, _amount);\r\n    }\r\n\r\n    function transferERC20(\r\n        address _tokenAddress,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external onlyRole(\"spender\") returns (bool) {\r\n        IERC20 erc20 = IERC20(_tokenAddress);\r\n        return erc20.transfer(_to, _amount);\r\n    }\r\n\r\n    function setERC721ApprovalForAll(\r\n        address _tokenAddress,\r\n        address _operator,\r\n        bool _approved\r\n    ) external onlyRole(\"spender\") {\r\n        IERC721 erc721 = IERC721(_tokenAddress);\r\n        erc721.setApprovalForAll(_operator, _approved);\r\n    }\r\n\r\n    function transferERC721(\r\n        address _tokenAddress,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) external onlyRole(\"spender\") {\r\n        IERC721 erc721 = IERC721(_tokenAddress);\r\n        erc721.transferFrom(address(this), _to, _tokenId);\r\n    }\r\n\r\n    function transferERC1155(\r\n        address _tokenAddress,\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _value,\r\n        bytes calldata _data\r\n    ) external onlyRole(\"spender\") {\r\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\r\n        require(\r\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\r\n            \"given token address doesn't support ERC1155\"\r\n        );\r\n        erc1155.safeTransferFrom(address(this), _to, _id, _value, _data);\r\n    }\r\n\r\n    function transferERC1155Batch(\r\n        address _tokenAddress,\r\n        address _to,\r\n        uint256[] calldata _ids,\r\n        uint256[] calldata _values,\r\n        bytes calldata _data\r\n    ) external onlyRole(\"spender\") {\r\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\r\n        require(\r\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\r\n            \"given token address doesn't support ERC1155\"\r\n        );\r\n        erc1155.safeBatchTransferFrom(address(this), _to, _ids, _values, _data);\r\n    }\r\n\r\n    function setERC1155ApprovalForAll(\r\n        address _tokenAddress,\r\n        address _operator,\r\n        bool _approved\r\n    ) external onlyRole(\"spender\") {\r\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\r\n        require(\r\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\r\n            \"given token address doesn't support ERC1155\"\r\n        );\r\n        erc1155.setApprovalForAll(_operator, _approved);\r\n    }\r\n\r\n    function getNativeBalance() external view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function transferNative(address payable _to, uint256 _amount)\r\n        public\r\n        payable\r\n        onlyRole(\"spender\")\r\n    {\r\n        (bool sent, ) = _to.call{ value: _amount }(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n\r\n    function burn(address _token, uint256 _amount) public onlyRole(\"spender\") {\r\n        ERC20Burnable(_token).burn(_amount);\r\n    }\r\n\r\n    function namedBalanceReceive(\r\n        string memory _name,\r\n        address _token,\r\n        uint256 _amount\r\n    ) external onlyRole(\"spender\") {\r\n        namedBalances[_name][_token] += _amount;\r\n    }\r\n\r\n    function namedBalanceSpend(\r\n        string memory _name,\r\n        address _token,\r\n        uint256 _amount\r\n    ) external onlyRole(\"spender\") {\r\n        require(\r\n            namedBalances[_name][_token] >= _amount,\r\n            \"Insufficient balance\"\r\n        );\r\n        namedBalances[_name][_token] -= _amount;\r\n    }\r\n\r\n    function getNamedBalance(string memory _name, address _token)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 balance = namedBalances[_name][_token];\r\n        uint256 actualBalance = _token == address(0)\r\n            ? payable(this).balance\r\n            : IERC20(_token).balanceOf(address(this));\r\n\r\n        return balance <= actualBalance ? balance : actualBalance;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n}\r\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/interfaces/AmountDerivationErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\n/**\r\n * @title AmountDerivationErrors\r\n * @author 0age\r\n * @notice AmountDerivationErrors contains errors related to amount derivation.\r\n */\r\ninterface AmountDerivationErrors {\r\n    /**\r\n     * @dev Revert with an error when attempting to apply a fraction as part of\r\n     *      a partial fill that does not divide the target amount cleanly.\r\n     */\r\n    error InexactFraction();\r\n}\r\n"
    },
    "contracts/lib/ConsiderationConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\n/*\r\n * -------------------------- Disambiguation & Other Notes ---------------------\r\n *    - The term \"head\" is used as it is in the documentation for ABI encoding,\r\n *      but only in reference to dynamic types, i.e. it always refers to the\r\n *      offset or pointer to the body of a dynamic type. In calldata, the head\r\n *      is always an offset (relative to the parent object), while in memory,\r\n *      the head is always the pointer to the body. More information found here:\r\n *      https://docs.soliditylang.org/en/v0.8.14/abi-spec.html#argument-encoding\r\n *        - Note that the length of an array is separate from and precedes the\r\n *          head of the array.\r\n *\r\n *    - The term \"body\" is used in place of the term \"head\" used in the ABI\r\n *      documentation. It refers to the start of the data for a dynamic type,\r\n *      e.g. the first word of a struct or the first word of the first element\r\n *      in an array.\r\n *\r\n *    - The term \"pointer\" is used to describe the absolute position of a value\r\n *      and never an offset relative to another value.\r\n *        - The suffix \"_ptr\" refers to a memory pointer.\r\n *        - The suffix \"_cdPtr\" refers to a calldata pointer.\r\n *\r\n *    - The term \"offset\" is used to describe the position of a value relative\r\n *      to some parent value. For example, OrderParameters_conduit_offset is the\r\n *      offset to the \"conduit\" value in the OrderParameters struct relative to\r\n *      the start of the body.\r\n *        - Note: Offsets are used to derive pointers.\r\n *\r\n *    - Some structs have pointers defined for all of their fields in this file.\r\n *      Lines which are commented out are fields that are not used in the\r\n *      codebase but have been left in for readability.\r\n */\r\n\r\n// Declare constants for name, version, and reentrancy sentinel values.\r\n\r\n// Name is right padded, so it touches the length which is left padded. This\r\n// enables writing both values at once. Length goes at byte 95 in memory, and\r\n// name fills bytes 96-109, so both values can be written left-padded to 77.\r\nuint256 constant NameLengthPtr = 77;\r\nuint256 constant NameWithLength = 0x0d436F6E73696465726174696F6E;\r\n\r\nuint256 constant Version = 0x312e31;\r\nuint256 constant Version_length = 3;\r\nuint256 constant Version_shift = 0xe8;\r\n\r\nuint256 constant _NOT_ENTERED = 1;\r\nuint256 constant _ENTERED = 2;\r\n\r\n// Common Offsets\r\n// Offsets for identically positioned fields shared by:\r\n// OfferItem, ConsiderationItem, SpentItem, ReceivedItem\r\n\r\nuint256 constant Common_token_offset = 0x20;\r\nuint256 constant Common_identifier_offset = 0x40;\r\nuint256 constant Common_amount_offset = 0x60;\r\n\r\nuint256 constant ReceivedItem_size = 0xa0;\r\nuint256 constant ReceivedItem_amount_offset = 0x60;\r\nuint256 constant ReceivedItem_recipient_offset = 0x80;\r\n\r\nuint256 constant ReceivedItem_CommonParams_size = 0x60;\r\n\r\nuint256 constant ConsiderationItem_recipient_offset = 0xa0;\r\n// Store the same constant in an abbreviated format for a line length fix.\r\nuint256 constant ConsiderItem_recipient_offset = 0xa0;\r\n\r\nuint256 constant Execution_offerer_offset = 0x20;\r\nuint256 constant Execution_conduit_offset = 0x40;\r\n\r\nuint256 constant InvalidFulfillmentComponentData_error_signature = (\r\n    0x7fda727900000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant InvalidFulfillmentComponentData_error_len = 0x04;\r\n\r\nuint256 constant Panic_error_signature = (\r\n    0x4e487b7100000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant Panic_error_offset = 0x04;\r\nuint256 constant Panic_error_length = 0x24;\r\nuint256 constant Panic_arithmetic = 0x11;\r\n\r\nuint256 constant MissingItemAmount_error_signature = (\r\n    0x91b3e51400000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant MissingItemAmount_error_len = 0x04;\r\n\r\nuint256 constant OrderParameters_offer_head_offset = 0x40;\r\nuint256 constant OrderParameters_consideration_head_offset = 0x60;\r\nuint256 constant OrderParameters_conduit_offset = 0x120;\r\nuint256 constant OrderParameters_counter_offset = 0x140;\r\n\r\nuint256 constant Fulfillment_itemIndex_offset = 0x20;\r\n\r\nuint256 constant AdvancedOrder_numerator_offset = 0x20;\r\n\r\nuint256 constant AlmostOneWord = 0x1f;\r\nuint256 constant OneWord = 0x20;\r\nuint256 constant TwoWords = 0x40;\r\nuint256 constant ThreeWords = 0x60;\r\nuint256 constant FourWords = 0x80;\r\nuint256 constant FiveWords = 0xa0;\r\n\r\nuint256 constant FreeMemoryPointerSlot = 0x40;\r\nuint256 constant ZeroSlot = 0x60;\r\nuint256 constant DefaultFreeMemoryPointer = 0x80;\r\n\r\nuint256 constant Slot0x80 = 0x80;\r\nuint256 constant Slot0xA0 = 0xa0;\r\n\r\nuint256 constant BasicOrder_endAmount_cdPtr = 0x104;\r\nuint256 constant BasicOrder_common_params_size = 0xa0;\r\nuint256 constant BasicOrder_considerationHashesArray_ptr = 0x160;\r\n\r\nuint256 constant EIP712_Order_size = 0x180;\r\nuint256 constant EIP712_OfferItem_size = 0xc0;\r\nuint256 constant EIP712_ConsiderationItem_size = 0xe0;\r\nuint256 constant AdditionalRecipients_size = 0x40;\r\n\r\nuint256 constant EIP712_DomainSeparator_offset = 0x02;\r\nuint256 constant EIP712_OrderHash_offset = 0x22;\r\nuint256 constant EIP712_DigestPayload_size = 0x42;\r\n\r\nuint256 constant receivedItemsHash_ptr = 0x60;\r\n\r\n/*\r\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\r\n *  data for OrderFulfilled\r\n *\r\n *   event OrderFulfilled(\r\n *     bytes32 orderHash,\r\n *     address indexed offerer,\r\n *     address indexed zone,\r\n *     address fulfiller,\r\n *     SpentItem[] offer,\r\n *       > (itemType, token, id, amount)\r\n *     ReceivedItem[] consideration\r\n *       > (itemType, token, id, amount, recipient)\r\n *   )\r\n *\r\n *  - 0x00: orderHash\r\n *  - 0x20: fulfiller\r\n *  - 0x40: offer offset (0x80)\r\n *  - 0x60: consideration offset (0x120)\r\n *  - 0x80: offer.length (1)\r\n *  - 0xa0: offerItemType\r\n *  - 0xc0: offerToken\r\n *  - 0xe0: offerIdentifier\r\n *  - 0x100: offerAmount\r\n *  - 0x120: consideration.length (1 + additionalRecipients.length)\r\n *  - 0x140: considerationItemType\r\n *  - 0x160: considerationToken\r\n *  - 0x180: considerationIdentifier\r\n *  - 0x1a0: considerationAmount\r\n *  - 0x1c0: considerationRecipient\r\n *  - ...\r\n */\r\n\r\n// Minimum length of the OrderFulfilled event data.\r\n// Must be added to the size of the ReceivedItem array for additionalRecipients\r\n// (0xa0 * additionalRecipients.length) to calculate full size of the buffer.\r\nuint256 constant OrderFulfilled_baseSize = 0x1e0;\r\nuint256 constant OrderFulfilled_selector = (\r\n    0x9d9af8e38d66c62e2c12f0225249fd9d721c54b83f48d9352c97c6cacdcb6f31\r\n);\r\n\r\n// Minimum offset in memory to OrderFulfilled event data.\r\n// Must be added to the size of the EIP712 hash array for additionalRecipients\r\n// (32 * additionalRecipients.length) to calculate the pointer to event data.\r\nuint256 constant OrderFulfilled_baseOffset = 0x180;\r\nuint256 constant OrderFulfilled_consideration_length_baseOffset = 0x2a0;\r\nuint256 constant OrderFulfilled_offer_length_baseOffset = 0x200;\r\n\r\n// uint256 constant OrderFulfilled_orderHash_offset = 0x00;\r\nuint256 constant OrderFulfilled_fulfiller_offset = 0x20;\r\nuint256 constant OrderFulfilled_offer_head_offset = 0x40;\r\nuint256 constant OrderFulfilled_offer_body_offset = 0x80;\r\nuint256 constant OrderFulfilled_consideration_head_offset = 0x60;\r\nuint256 constant OrderFulfilled_consideration_body_offset = 0x120;\r\n\r\n// BasicOrderParameters\r\nuint256 constant BasicOrder_parameters_cdPtr = 0x04;\r\nuint256 constant BasicOrder_considerationToken_cdPtr = 0x24;\r\n// uint256 constant BasicOrder_considerationIdentifier_cdPtr = 0x44;\r\nuint256 constant BasicOrder_considerationAmount_cdPtr = 0x64;\r\nuint256 constant BasicOrder_offerer_cdPtr = 0x84;\r\nuint256 constant BasicOrder_zone_cdPtr = 0xa4;\r\nuint256 constant BasicOrder_offerToken_cdPtr = 0xc4;\r\n// uint256 constant BasicOrder_offerIdentifier_cdPtr = 0xe4;\r\nuint256 constant BasicOrder_offerAmount_cdPtr = 0x104;\r\nuint256 constant BasicOrder_basicOrderType_cdPtr = 0x124;\r\nuint256 constant BasicOrder_startTime_cdPtr = 0x144;\r\n// uint256 constant BasicOrder_endTime_cdPtr = 0x164;\r\n// uint256 constant BasicOrder_zoneHash_cdPtr = 0x184;\r\n// uint256 constant BasicOrder_salt_cdPtr = 0x1a4;\r\nuint256 constant BasicOrder_offererConduit_cdPtr = 0x1c4;\r\nuint256 constant BasicOrder_fulfillerConduit_cdPtr = 0x1e4;\r\nuint256 constant BasicOrder_totalOriginalAdditionalRecipients_cdPtr = 0x204;\r\nuint256 constant BasicOrder_additionalRecipients_head_cdPtr = 0x224;\r\nuint256 constant BasicOrder_signature_cdPtr = 0x244;\r\nuint256 constant BasicOrder_additionalRecipients_length_cdPtr = 0x264;\r\nuint256 constant BasicOrder_additionalRecipients_data_cdPtr = 0x284;\r\n\r\nuint256 constant BasicOrder_parameters_ptr = 0x20;\r\n\r\nuint256 constant BasicOrder_basicOrderType_range = 0x18; // 24 values\r\n\r\n/*\r\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\r\n *  EIP712 data for ConsiderationItem\r\n *   - 0x80: ConsiderationItem EIP-712 typehash (constant)\r\n *   - 0xa0: itemType\r\n *   - 0xc0: token\r\n *   - 0xe0: identifier\r\n *   - 0x100: startAmount\r\n *   - 0x120: endAmount\r\n *   - 0x140: recipient\r\n */\r\nuint256 constant BasicOrder_considerationItem_typeHash_ptr = 0x80; // memoryPtr\r\nuint256 constant BasicOrder_considerationItem_itemType_ptr = 0xa0;\r\nuint256 constant BasicOrder_considerationItem_token_ptr = 0xc0;\r\nuint256 constant BasicOrder_considerationItem_identifier_ptr = 0xe0;\r\nuint256 constant BasicOrder_considerationItem_startAmount_ptr = 0x100;\r\nuint256 constant BasicOrder_considerationItem_endAmount_ptr = 0x120;\r\n// uint256 constant BasicOrder_considerationItem_recipient_ptr = 0x140;\r\n\r\n/*\r\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\r\n *  EIP712 data for OfferItem\r\n *   - 0x80:  OfferItem EIP-712 typehash (constant)\r\n *   - 0xa0:  itemType\r\n *   - 0xc0:  token\r\n *   - 0xe0:  identifier (reused for offeredItemsHash)\r\n *   - 0x100: startAmount\r\n *   - 0x120: endAmount\r\n */\r\nuint256 constant BasicOrder_offerItem_typeHash_ptr = DefaultFreeMemoryPointer;\r\nuint256 constant BasicOrder_offerItem_itemType_ptr = 0xa0;\r\nuint256 constant BasicOrder_offerItem_token_ptr = 0xc0;\r\n// uint256 constant BasicOrder_offerItem_identifier_ptr = 0xe0;\r\n// uint256 constant BasicOrder_offerItem_startAmount_ptr = 0x100;\r\nuint256 constant BasicOrder_offerItem_endAmount_ptr = 0x120;\r\n\r\n/*\r\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\r\n *  EIP712 data for Order\r\n *   - 0x80:   Order EIP-712 typehash (constant)\r\n *   - 0xa0:   orderParameters.offerer\r\n *   - 0xc0:   orderParameters.zone\r\n *   - 0xe0:   keccak256(abi.encodePacked(offerHashes))\r\n *   - 0x100:  keccak256(abi.encodePacked(considerationHashes))\r\n *   - 0x120:  orderType\r\n *   - 0x140:  startTime\r\n *   - 0x160:  endTime\r\n *   - 0x180:  zoneHash\r\n *   - 0x1a0:  salt\r\n *   - 0x1c0:  conduit\r\n *   - 0x1e0:  _counters[orderParameters.offerer] (from storage)\r\n */\r\nuint256 constant BasicOrder_order_typeHash_ptr = 0x80;\r\nuint256 constant BasicOrder_order_offerer_ptr = 0xa0;\r\n// uint256 constant BasicOrder_order_zone_ptr = 0xc0;\r\nuint256 constant BasicOrder_order_offerHashes_ptr = 0xe0;\r\nuint256 constant BasicOrder_order_considerationHashes_ptr = 0x100;\r\nuint256 constant BasicOrder_order_orderType_ptr = 0x120;\r\nuint256 constant BasicOrder_order_startTime_ptr = 0x140;\r\n// uint256 constant BasicOrder_order_endTime_ptr = 0x160;\r\n// uint256 constant BasicOrder_order_zoneHash_ptr = 0x180;\r\n// uint256 constant BasicOrder_order_salt_ptr = 0x1a0;\r\n// uint256 constant BasicOrder_order_conduitKey_ptr = 0x1c0;\r\nuint256 constant BasicOrder_order_counter_ptr = 0x1e0;\r\nuint256 constant BasicOrder_additionalRecipients_head_ptr = 0x240;\r\nuint256 constant BasicOrder_signature_ptr = 0x260;\r\n\r\n// Signature-related\r\nbytes32 constant EIP2098_allButHighestBitMask = (\r\n    0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\r\n);\r\nbytes32 constant ECDSA_twentySeventhAndTwentyEighthBytesSet = (\r\n    0x0000000000000000000000000000000000000000000000000000000101000000\r\n);\r\nuint256 constant ECDSA_MaxLength = 65;\r\nuint256 constant ECDSA_signature_s_offset = 0x40;\r\nuint256 constant ECDSA_signature_v_offset = 0x60;\r\n\r\nbytes32 constant EIP1271_isValidSignature_selector = (\r\n    0x1626ba7e00000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant EIP1271_isValidSignature_signatureHead_negativeOffset = 0x20;\r\nuint256 constant EIP1271_isValidSignature_digest_negativeOffset = 0x40;\r\nuint256 constant EIP1271_isValidSignature_selector_negativeOffset = 0x44;\r\nuint256 constant EIP1271_isValidSignature_calldata_baseLength = 0x64;\r\n\r\nuint256 constant EIP1271_isValidSignature_signature_head_offset = 0x40;\r\n\r\n// abi.encodeWithSignature(\"NoContract(address)\")\r\nuint256 constant NoContract_error_signature = (\r\n    0x5f15d67200000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant NoContract_error_sig_ptr = 0x0;\r\nuint256 constant NoContract_error_token_ptr = 0x4;\r\nuint256 constant NoContract_error_length = 0x24; // 4 + 32 == 36\r\n\r\nuint256 constant EIP_712_PREFIX = (\r\n    0x1901000000000000000000000000000000000000000000000000000000000000\r\n);\r\n\r\nuint256 constant ExtraGasBuffer = 0x20;\r\nuint256 constant CostPerWord = 3;\r\nuint256 constant MemoryExpansionCoefficient = 0x200; // 512\r\n\r\nuint256 constant Create2AddressDerivation_ptr = 0x0b;\r\nuint256 constant Create2AddressDerivation_length = 0x55;\r\n\r\nuint256 constant MaskOverByteTwelve = (\r\n    0x0000000000000000000000ff0000000000000000000000000000000000000000\r\n);\r\n\r\nuint256 constant MaskOverLastTwentyBytes = (\r\n    0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff\r\n);\r\n\r\nuint256 constant MaskOverFirstFourBytes = (\r\n    0xffffffff00000000000000000000000000000000000000000000000000000000\r\n);\r\n\r\nuint256 constant Conduit_execute_signature = (\r\n    0x4ce34aa200000000000000000000000000000000000000000000000000000000\r\n);\r\n\r\nuint256 constant MaxUint8 = 0xff;\r\nuint256 constant MaxUint120 = 0xffffffffffffffffffffffffffffff;\r\n\r\nuint256 constant Conduit_execute_ConduitTransfer_ptr = 0x20;\r\nuint256 constant Conduit_execute_ConduitTransfer_length = 0x01;\r\n\r\nuint256 constant Conduit_execute_ConduitTransfer_offset_ptr = 0x04;\r\nuint256 constant Conduit_execute_ConduitTransfer_length_ptr = 0x24;\r\nuint256 constant Conduit_execute_transferItemType_ptr = 0x44;\r\nuint256 constant Conduit_execute_transferToken_ptr = 0x64;\r\nuint256 constant Conduit_execute_transferFrom_ptr = 0x84;\r\nuint256 constant Conduit_execute_transferTo_ptr = 0xa4;\r\nuint256 constant Conduit_execute_transferIdentifier_ptr = 0xc4;\r\nuint256 constant Conduit_execute_transferAmount_ptr = 0xe4;\r\n\r\nuint256 constant OneConduitExecute_size = 0x104;\r\n\r\n// Sentinel value to indicate that the conduit accumulator is not armed.\r\nuint256 constant AccumulatorDisarmed = 0x20;\r\nuint256 constant AccumulatorArmed = 0x40;\r\nuint256 constant Accumulator_conduitKey_ptr = 0x20;\r\nuint256 constant Accumulator_selector_ptr = 0x40;\r\nuint256 constant Accumulator_array_offset_ptr = 0x44;\r\nuint256 constant Accumulator_array_length_ptr = 0x64;\r\n\r\nuint256 constant Accumulator_itemSizeOffsetDifference = 0x3c;\r\n\r\nuint256 constant Accumulator_array_offset = 0x20;\r\nuint256 constant Conduit_transferItem_size = 0xc0;\r\nuint256 constant Conduit_transferItem_token_ptr = 0x20;\r\nuint256 constant Conduit_transferItem_from_ptr = 0x40;\r\nuint256 constant Conduit_transferItem_to_ptr = 0x60;\r\nuint256 constant Conduit_transferItem_identifier_ptr = 0x80;\r\nuint256 constant Conduit_transferItem_amount_ptr = 0xa0;\r\n\r\n// Declare constant for errors related to amount derivation.\r\n// error InexactFraction() @ AmountDerivationErrors.sol\r\nuint256 constant InexactFraction_error_signature = (\r\n    0xc63cf08900000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant InexactFraction_error_len = 0x04;\r\n\r\n// Declare constant for errors related to signature verification.\r\nuint256 constant Ecrecover_precompile = 1;\r\nuint256 constant Ecrecover_args_size = 0x80;\r\nuint256 constant Signature_lower_v = 27;\r\n\r\n// error BadSignatureV(uint8) @ SignatureVerificationErrors.sol\r\nuint256 constant BadSignatureV_error_signature = (\r\n    0x1f003d0a00000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant BadSignatureV_error_offset = 0x04;\r\nuint256 constant BadSignatureV_error_length = 0x24;\r\n\r\n// error InvalidSigner() @ SignatureVerificationErrors.sol\r\nuint256 constant InvalidSigner_error_signature = (\r\n    0x815e1d6400000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant InvalidSigner_error_length = 0x04;\r\n\r\n// error InvalidSignature() @ SignatureVerificationErrors.sol\r\nuint256 constant InvalidSignature_error_signature = (\r\n    0x8baa579f00000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant InvalidSignature_error_length = 0x04;\r\n\r\n// error BadContractSignature() @ SignatureVerificationErrors.sol\r\nuint256 constant BadContractSignature_error_signature = (\r\n    0x4f7fb80d00000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant BadContractSignature_error_length = 0x04;\r\n\r\nuint256 constant NumBitsAfterSelector = 0xe0;\r\n\r\n// 69 is the lowest modulus for which the remainder\r\n// of every selector other than the two match functions\r\n// is greater than those of the match functions.\r\nuint256 constant NonMatchSelector_MagicModulus = 69;\r\n// Of the two match function selectors, the highest\r\n// remainder modulo 69 is 29.\r\nuint256 constant NonMatchSelector_MagicRemainder = 0x1d;\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 500
    },
    "debug": {
      "debugInfo": []
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}