{
  "language": "Solidity",
  "sources": {
    "contracts/helpers/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport \"./TransferHelperStructs.sol\";\r\n\r\nimport { TokenTransferrer } from \"../lib/TokenTransferrer.sol\";\r\n\r\nimport { ConduitInterface } from \"../interfaces/ConduitInterface.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    ConduitControllerInterface\r\n} from \"../interfaces/ConduitControllerInterface.sol\";\r\n\r\nimport { Conduit } from \"../conduit/Conduit.sol\";\r\n\r\nimport { ConduitTransfer } from \"../conduit/lib/ConduitStructs.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    TransferHelperInterface\r\n} from \"../interfaces/TransferHelperInterface.sol\";\r\n\r\n/**\r\n * @title TransferHelper\r\n * @author stuckinaboot, stephankmin\r\n * @notice TransferHelper is a utility contract for transferring\r\n *         ERC20/ERC721/ERC1155 items in bulk to a specific recipient.\r\n */\r\ncontract TransferHelper is TransferHelperInterface, TokenTransferrer {\r\n    // Allow for interaction with the conduit controller.\r\n    ConduitControllerInterface internal immutable _CONDUIT_CONTROLLER;\r\n\r\n    // Cache the conduit creation hash used by the conduit controller.\r\n    bytes32 internal immutable _CONDUIT_CREATION_CODE_HASH;\r\n\r\n    /**\r\n     * @dev Set the supplied conduit controller and retrieve its\r\n     *      conduit creation code hash.\r\n     *\r\n     *\r\n     * @param conduitController A contract that deploys conduits, or proxies\r\n     *                          that may optionally be used to transfer approved\r\n     *                          ERC20/721/1155 tokens.\r\n     */\r\n    constructor(address conduitController) {\r\n        // Get the conduit creation code hash from the supplied conduit\r\n        // controller and set it as an immutable.\r\n        ConduitControllerInterface controller = ConduitControllerInterface(\r\n            conduitController\r\n        );\r\n        (_CONDUIT_CREATION_CODE_HASH, ) = controller.getConduitCodeHashes();\r\n\r\n        // Set the supplied conduit controller as an immutable.\r\n        _CONDUIT_CONTROLLER = controller;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer multiple items to a single recipient.\r\n     *\r\n     * @param items      The items to transfer.\r\n     * @param recipient  The address the items should be transferred to.\r\n     * @param conduitKey The key of the conduit through which the bulk transfer\r\n     *                   should occur.\r\n     *\r\n     * @return magicValue A value indicating that the transfers were successful.\r\n     */\r\n    function bulkTransfer(\r\n        TransferHelperItem[] calldata items,\r\n        address recipient,\r\n        bytes32 conduitKey\r\n    ) external override returns (bytes4 magicValue) {\r\n        // Retrieve total number of transfers and place on stack.\r\n        uint256 totalTransfers = items.length;\r\n\r\n        // If no conduitKey is given, use TokenTransferrer to perform transfers.\r\n        if (conduitKey == bytes32(0)) {\r\n            // Skip overflow checks: all for loops are indexed starting at zero.\r\n            unchecked {\r\n                // Iterate over each transfer.\r\n                for (uint256 i = 0; i < totalTransfers; ++i) {\r\n                    // Retrieve the transfer in question.\r\n                    TransferHelperItem calldata item = items[i];\r\n\r\n                    // Perform a transfer based on the transfer's item type.\r\n                    // Revert if item being transferred is a native token.\r\n                    if (item.itemType == ConduitItemType.NATIVE) {\r\n                        revert InvalidItemType();\r\n                    } else if (item.itemType == ConduitItemType.ERC20) {\r\n                        _performERC20Transfer(\r\n                            item.token,\r\n                            msg.sender,\r\n                            recipient,\r\n                            item.amount\r\n                        );\r\n                    } else if (item.itemType == ConduitItemType.ERC721) {\r\n                        _performERC721Transfer(\r\n                            item.token,\r\n                            msg.sender,\r\n                            recipient,\r\n                            item.identifier\r\n                        );\r\n                    } else {\r\n                        _performERC1155Transfer(\r\n                            item.token,\r\n                            msg.sender,\r\n                            recipient,\r\n                            item.identifier,\r\n                            item.amount\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Otherwise, a conduitKey was provided.\r\n        else {\r\n            // Derive the conduit address from the deployer, conduit key\r\n            // and creation code hash.\r\n            address conduit = address(\r\n                uint160(\r\n                    uint256(\r\n                        keccak256(\r\n                            abi.encodePacked(\r\n                                bytes1(0xff),\r\n                                address(_CONDUIT_CONTROLLER),\r\n                                conduitKey,\r\n                                _CONDUIT_CREATION_CODE_HASH\r\n                            )\r\n                        )\r\n                    )\r\n                )\r\n            );\r\n\r\n            // Declare a new array to populate with each token transfer.\r\n            ConduitTransfer[] memory conduitTransfers = new ConduitTransfer[](\r\n                totalTransfers\r\n            );\r\n\r\n            // Skip overflow checks: all for loops are indexed starting at zero.\r\n            unchecked {\r\n                // Iterate over each transfer.\r\n                for (uint256 i = 0; i < totalTransfers; ++i) {\r\n                    // Retrieve the transfer in question.\r\n                    TransferHelperItem calldata item = items[i];\r\n\r\n                    // Create a ConduitTransfer corresponding to each\r\n                    // TransferHelperItem.\r\n                    conduitTransfers[i] = ConduitTransfer(\r\n                        item.itemType,\r\n                        item.token,\r\n                        msg.sender,\r\n                        recipient,\r\n                        item.identifier,\r\n                        item.amount\r\n                    );\r\n                }\r\n            }\r\n\r\n            // Call the conduit and execute bulk transfers.\r\n            ConduitInterface(conduit).execute(conduitTransfers);\r\n        }\r\n\r\n        // Return a magic value indicating that the transfers were performed.\r\n        magicValue = this.bulkTransfer.selector;\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/TransferHelperStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport { ConduitItemType } from \"../conduit/lib/ConduitEnums.sol\";\r\n\r\nstruct TransferHelperItem {\r\n    ConduitItemType itemType;\r\n    address token;\r\n    uint256 identifier;\r\n    uint256 amount;\r\n}\r\n"
    },
    "contracts/lib/TokenTransferrer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport \"./TokenTransferrerConstants.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    TokenTransferrerErrors\r\n} from \"../interfaces/TokenTransferrerErrors.sol\";\r\n\r\nimport { ConduitBatch1155Transfer } from \"../conduit/lib/ConduitStructs.sol\";\r\n\r\n/**\r\n * @title TokenTransferrer\r\n * @author 0age\r\n * @custom:coauthor d1ll0n\r\n * @custom:coauthor transmissions11\r\n * @notice TokenTransferrer is a library for performing optimized ERC20, ERC721,\r\n *         ERC1155, and batch ERC1155 transfers, used by both Seaport as well as\r\n *         by conduits deployed by the ConduitController. Use great caution when\r\n *         considering these functions for use in other codebases, as there are\r\n *         significant side effects and edge cases that need to be thoroughly\r\n *         understood and carefully addressed.\r\n */\r\ncontract TokenTransferrer is TokenTransferrerErrors {\r\n    /**\r\n     * @dev Internal function to transfer ERC20 tokens from a given originator\r\n     *      to a given recipient. Sufficient approvals must be set on the\r\n     *      contract performing the transfer.\r\n     *\r\n     * @param token      The ERC20 token to transfer.\r\n     * @param from       The originator of the transfer.\r\n     * @param to         The recipient of the transfer.\r\n     * @param amount     The amount to transfer.\r\n     */\r\n    function _performERC20Transfer(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        // Utilize assembly to perform an optimized ERC20 token transfer.\r\n        assembly {\r\n            // The free memory pointer memory slot will be used when populating\r\n            // call data for the transfer; read the value and restore it later.\r\n            let memPointer := mload(FreeMemoryPointerSlot)\r\n\r\n            // Write call data into memory, starting with function selector.\r\n            mstore(ERC20_transferFrom_sig_ptr, ERC20_transferFrom_signature)\r\n            mstore(ERC20_transferFrom_from_ptr, from)\r\n            mstore(ERC20_transferFrom_to_ptr, to)\r\n            mstore(ERC20_transferFrom_amount_ptr, amount)\r\n\r\n            // Make call & copy up to 32 bytes of return data to scratch space.\r\n            // Scratch space does not need to be cleared ahead of time, as the\r\n            // subsequent check will ensure that either at least a full word of\r\n            // return data is received (in which case it will be overwritten) or\r\n            // that no data is received (in which case scratch space will be\r\n            // ignored) on a successful call to the given token.\r\n            let callStatus := call(\r\n                gas(),\r\n                token,\r\n                0,\r\n                ERC20_transferFrom_sig_ptr,\r\n                ERC20_transferFrom_length,\r\n                0,\r\n                OneWord\r\n            )\r\n\r\n            // Determine whether transfer was successful using status & result.\r\n            let success := and(\r\n                // Set success to whether the call reverted, if not check it\r\n                // either returned exactly 1 (can't just be non-zero data), or\r\n                // had no return data.\r\n                or(\r\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\r\n                    iszero(returndatasize())\r\n                ),\r\n                callStatus\r\n            )\r\n\r\n            // Handle cases where either the transfer failed or no data was\r\n            // returned. Group these, as most transfers will succeed with data.\r\n            // Equivalent to `or(iszero(success), iszero(returndatasize()))`\r\n            // but after it's inverted for JUMPI this expression is cheaper.\r\n            if iszero(and(success, iszero(iszero(returndatasize())))) {\r\n                // If the token has no code or the transfer failed: Equivalent\r\n                // to `or(iszero(success), iszero(extcodesize(token)))` but\r\n                // after it's inverted for JUMPI this expression is cheaper.\r\n                if iszero(and(iszero(iszero(extcodesize(token))), success)) {\r\n                    // If the transfer failed:\r\n                    if iszero(success) {\r\n                        // If it was due to a revert:\r\n                        if iszero(callStatus) {\r\n                            // If it returned a message, bubble it up as long as\r\n                            // sufficient gas remains to do so:\r\n                            if returndatasize() {\r\n                                // Ensure that sufficient gas is available to\r\n                                // copy returndata while expanding memory where\r\n                                // necessary. Start by computing the word size\r\n                                // of returndata and allocated memory. Round up\r\n                                // to the nearest full word.\r\n                                let returnDataWords := div(\r\n                                    add(returndatasize(), AlmostOneWord),\r\n                                    OneWord\r\n                                )\r\n\r\n                                // Note: use the free memory pointer in place of\r\n                                // msize() to work around a Yul warning that\r\n                                // prevents accessing msize directly when the IR\r\n                                // pipeline is activated.\r\n                                let msizeWords := div(memPointer, OneWord)\r\n\r\n                                // Next, compute the cost of the returndatacopy.\r\n                                let cost := mul(CostPerWord, returnDataWords)\r\n\r\n                                // Then, compute cost of new memory allocation.\r\n                                if gt(returnDataWords, msizeWords) {\r\n                                    cost := add(\r\n                                        cost,\r\n                                        add(\r\n                                            mul(\r\n                                                sub(\r\n                                                    returnDataWords,\r\n                                                    msizeWords\r\n                                                ),\r\n                                                CostPerWord\r\n                                            ),\r\n                                            div(\r\n                                                sub(\r\n                                                    mul(\r\n                                                        returnDataWords,\r\n                                                        returnDataWords\r\n                                                    ),\r\n                                                    mul(msizeWords, msizeWords)\r\n                                                ),\r\n                                                MemoryExpansionCoefficient\r\n                                            )\r\n                                        )\r\n                                    )\r\n                                }\r\n\r\n                                // Finally, add a small constant and compare to\r\n                                // gas remaining; bubble up the revert data if\r\n                                // enough gas is still available.\r\n                                if lt(add(cost, ExtraGasBuffer), gas()) {\r\n                                    // Copy returndata to memory; overwrite\r\n                                    // existing memory.\r\n                                    returndatacopy(0, 0, returndatasize())\r\n\r\n                                    // Revert, specifying memory region with\r\n                                    // copied returndata.\r\n                                    revert(0, returndatasize())\r\n                                }\r\n                            }\r\n\r\n                            // Otherwise revert with a generic error message.\r\n                            mstore(\r\n                                TokenTransferGenericFailure_error_sig_ptr,\r\n                                TokenTransferGenericFailure_error_signature\r\n                            )\r\n                            mstore(\r\n                                TokenTransferGenericFailure_error_token_ptr,\r\n                                token\r\n                            )\r\n                            mstore(\r\n                                TokenTransferGenericFailure_error_from_ptr,\r\n                                from\r\n                            )\r\n                            mstore(TokenTransferGenericFailure_error_to_ptr, to)\r\n                            mstore(TokenTransferGenericFailure_error_id_ptr, 0)\r\n                            mstore(\r\n                                TokenTransferGenericFailure_error_amount_ptr,\r\n                                amount\r\n                            )\r\n                            revert(\r\n                                TokenTransferGenericFailure_error_sig_ptr,\r\n                                TokenTransferGenericFailure_error_length\r\n                            )\r\n                        }\r\n\r\n                        // Otherwise revert with a message about the token\r\n                        // returning false or non-compliant return values.\r\n                        mstore(\r\n                            BadReturnValueFromERC20OnTransfer_error_sig_ptr,\r\n                            BadReturnValueFromERC20OnTransfer_error_signature\r\n                        )\r\n                        mstore(\r\n                            BadReturnValueFromERC20OnTransfer_error_token_ptr,\r\n                            token\r\n                        )\r\n                        mstore(\r\n                            BadReturnValueFromERC20OnTransfer_error_from_ptr,\r\n                            from\r\n                        )\r\n                        mstore(\r\n                            BadReturnValueFromERC20OnTransfer_error_to_ptr,\r\n                            to\r\n                        )\r\n                        mstore(\r\n                            BadReturnValueFromERC20OnTransfer_error_amount_ptr,\r\n                            amount\r\n                        )\r\n                        revert(\r\n                            BadReturnValueFromERC20OnTransfer_error_sig_ptr,\r\n                            BadReturnValueFromERC20OnTransfer_error_length\r\n                        )\r\n                    }\r\n\r\n                    // Otherwise, revert with error about token not having code:\r\n                    mstore(NoContract_error_sig_ptr, NoContract_error_signature)\r\n                    mstore(NoContract_error_token_ptr, token)\r\n                    revert(NoContract_error_sig_ptr, NoContract_error_length)\r\n                }\r\n\r\n                // Otherwise, the token just returned no data despite the call\r\n                // having succeeded; no need to optimize for this as it's not\r\n                // technically ERC20 compliant.\r\n            }\r\n\r\n            // Restore the original free memory pointer.\r\n            mstore(FreeMemoryPointerSlot, memPointer)\r\n\r\n            // Restore the zero slot to zero.\r\n            mstore(ZeroSlot, 0)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer an ERC721 token from a given\r\n     *      originator to a given recipient. Sufficient approvals must be set on\r\n     *      the contract performing the transfer. Note that this function does\r\n     *      not check whether the receiver can accept the ERC721 token (i.e. it\r\n     *      does not use `safeTransferFrom`).\r\n     *\r\n     * @param token      The ERC721 token to transfer.\r\n     * @param from       The originator of the transfer.\r\n     * @param to         The recipient of the transfer.\r\n     * @param identifier The tokenId to transfer.\r\n     */\r\n    function _performERC721Transfer(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 identifier\r\n    ) internal {\r\n        // Utilize assembly to perform an optimized ERC721 token transfer.\r\n        assembly {\r\n            // If the token has no code, revert.\r\n            if iszero(extcodesize(token)) {\r\n                mstore(NoContract_error_sig_ptr, NoContract_error_signature)\r\n                mstore(NoContract_error_token_ptr, token)\r\n                revert(NoContract_error_sig_ptr, NoContract_error_length)\r\n            }\r\n\r\n            // The free memory pointer memory slot will be used when populating\r\n            // call data for the transfer; read the value and restore it later.\r\n            let memPointer := mload(FreeMemoryPointerSlot)\r\n\r\n            // Write call data to memory starting with function selector.\r\n            mstore(ERC721_transferFrom_sig_ptr, ERC721_transferFrom_signature)\r\n            mstore(ERC721_transferFrom_from_ptr, from)\r\n            mstore(ERC721_transferFrom_to_ptr, to)\r\n            mstore(ERC721_transferFrom_id_ptr, identifier)\r\n\r\n            // Perform the call, ignoring return data.\r\n            let success := call(\r\n                gas(),\r\n                token,\r\n                0,\r\n                ERC721_transferFrom_sig_ptr,\r\n                ERC721_transferFrom_length,\r\n                0,\r\n                0\r\n            )\r\n\r\n            // If the transfer reverted:\r\n            if iszero(success) {\r\n                // If it returned a message, bubble it up as long as sufficient\r\n                // gas remains to do so:\r\n                if returndatasize() {\r\n                    // Ensure that sufficient gas is available to copy\r\n                    // returndata while expanding memory where necessary. Start\r\n                    // by computing word size of returndata & allocated memory.\r\n                    // Round up to the nearest full word.\r\n                    let returnDataWords := div(\r\n                        add(returndatasize(), AlmostOneWord),\r\n                        OneWord\r\n                    )\r\n\r\n                    // Note: use the free memory pointer in place of msize() to\r\n                    // work around a Yul warning that prevents accessing msize\r\n                    // directly when the IR pipeline is activated.\r\n                    let msizeWords := div(memPointer, OneWord)\r\n\r\n                    // Next, compute the cost of the returndatacopy.\r\n                    let cost := mul(CostPerWord, returnDataWords)\r\n\r\n                    // Then, compute cost of new memory allocation.\r\n                    if gt(returnDataWords, msizeWords) {\r\n                        cost := add(\r\n                            cost,\r\n                            add(\r\n                                mul(\r\n                                    sub(returnDataWords, msizeWords),\r\n                                    CostPerWord\r\n                                ),\r\n                                div(\r\n                                    sub(\r\n                                        mul(returnDataWords, returnDataWords),\r\n                                        mul(msizeWords, msizeWords)\r\n                                    ),\r\n                                    MemoryExpansionCoefficient\r\n                                )\r\n                            )\r\n                        )\r\n                    }\r\n\r\n                    // Finally, add a small constant and compare to gas\r\n                    // remaining; bubble up the revert data if enough gas is\r\n                    // still available.\r\n                    if lt(add(cost, ExtraGasBuffer), gas()) {\r\n                        // Copy returndata to memory; overwrite existing memory.\r\n                        returndatacopy(0, 0, returndatasize())\r\n\r\n                        // Revert, giving memory region with copied returndata.\r\n                        revert(0, returndatasize())\r\n                    }\r\n                }\r\n\r\n                // Otherwise revert with a generic error message.\r\n                mstore(\r\n                    TokenTransferGenericFailure_error_sig_ptr,\r\n                    TokenTransferGenericFailure_error_signature\r\n                )\r\n                mstore(TokenTransferGenericFailure_error_token_ptr, token)\r\n                mstore(TokenTransferGenericFailure_error_from_ptr, from)\r\n                mstore(TokenTransferGenericFailure_error_to_ptr, to)\r\n                mstore(TokenTransferGenericFailure_error_id_ptr, identifier)\r\n                mstore(TokenTransferGenericFailure_error_amount_ptr, 1)\r\n                revert(\r\n                    TokenTransferGenericFailure_error_sig_ptr,\r\n                    TokenTransferGenericFailure_error_length\r\n                )\r\n            }\r\n\r\n            // Restore the original free memory pointer.\r\n            mstore(FreeMemoryPointerSlot, memPointer)\r\n\r\n            // Restore the zero slot to zero.\r\n            mstore(ZeroSlot, 0)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer ERC1155 tokens from a given\r\n     *      originator to a given recipient. Sufficient approvals must be set on\r\n     *      the contract performing the transfer and contract recipients must\r\n     *      implement the ERC1155TokenReceiver interface to indicate that they\r\n     *      are willing to accept the transfer.\r\n     *\r\n     * @param token      The ERC1155 token to transfer.\r\n     * @param from       The originator of the transfer.\r\n     * @param to         The recipient of the transfer.\r\n     * @param identifier The id to transfer.\r\n     * @param amount     The amount to transfer.\r\n     */\r\n    function _performERC1155Transfer(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 identifier,\r\n        uint256 amount\r\n    ) internal {\r\n        // Utilize assembly to perform an optimized ERC1155 token transfer.\r\n        assembly {\r\n            // If the token has no code, revert.\r\n            if iszero(extcodesize(token)) {\r\n                mstore(NoContract_error_sig_ptr, NoContract_error_signature)\r\n                mstore(NoContract_error_token_ptr, token)\r\n                revert(NoContract_error_sig_ptr, NoContract_error_length)\r\n            }\r\n\r\n            // The following memory slots will be used when populating call data\r\n            // for the transfer; read the values and restore them later.\r\n            let memPointer := mload(FreeMemoryPointerSlot)\r\n            let slot0x80 := mload(Slot0x80)\r\n            let slot0xA0 := mload(Slot0xA0)\r\n            let slot0xC0 := mload(Slot0xC0)\r\n\r\n            // Write call data into memory, beginning with function selector.\r\n            mstore(\r\n                ERC1155_safeTransferFrom_sig_ptr,\r\n                ERC1155_safeTransferFrom_signature\r\n            )\r\n            mstore(ERC1155_safeTransferFrom_from_ptr, from)\r\n            mstore(ERC1155_safeTransferFrom_to_ptr, to)\r\n            mstore(ERC1155_safeTransferFrom_id_ptr, identifier)\r\n            mstore(ERC1155_safeTransferFrom_amount_ptr, amount)\r\n            mstore(\r\n                ERC1155_safeTransferFrom_data_offset_ptr,\r\n                ERC1155_safeTransferFrom_data_length_offset\r\n            )\r\n            mstore(ERC1155_safeTransferFrom_data_length_ptr, 0)\r\n\r\n            // Perform the call, ignoring return data.\r\n            let success := call(\r\n                gas(),\r\n                token,\r\n                0,\r\n                ERC1155_safeTransferFrom_sig_ptr,\r\n                ERC1155_safeTransferFrom_length,\r\n                0,\r\n                0\r\n            )\r\n\r\n            // If the transfer reverted:\r\n            if iszero(success) {\r\n                // If it returned a message, bubble it up as long as sufficient\r\n                // gas remains to do so:\r\n                if returndatasize() {\r\n                    // Ensure that sufficient gas is available to copy\r\n                    // returndata while expanding memory where necessary. Start\r\n                    // by computing word size of returndata & allocated memory.\r\n                    // Round up to the nearest full word.\r\n                    let returnDataWords := div(\r\n                        add(returndatasize(), AlmostOneWord),\r\n                        OneWord\r\n                    )\r\n\r\n                    // Note: use the free memory pointer in place of msize() to\r\n                    // work around a Yul warning that prevents accessing msize\r\n                    // directly when the IR pipeline is activated.\r\n                    let msizeWords := div(memPointer, OneWord)\r\n\r\n                    // Next, compute the cost of the returndatacopy.\r\n                    let cost := mul(CostPerWord, returnDataWords)\r\n\r\n                    // Then, compute cost of new memory allocation.\r\n                    if gt(returnDataWords, msizeWords) {\r\n                        cost := add(\r\n                            cost,\r\n                            add(\r\n                                mul(\r\n                                    sub(returnDataWords, msizeWords),\r\n                                    CostPerWord\r\n                                ),\r\n                                div(\r\n                                    sub(\r\n                                        mul(returnDataWords, returnDataWords),\r\n                                        mul(msizeWords, msizeWords)\r\n                                    ),\r\n                                    MemoryExpansionCoefficient\r\n                                )\r\n                            )\r\n                        )\r\n                    }\r\n\r\n                    // Finally, add a small constant and compare to gas\r\n                    // remaining; bubble up the revert data if enough gas is\r\n                    // still available.\r\n                    if lt(add(cost, ExtraGasBuffer), gas()) {\r\n                        // Copy returndata to memory; overwrite existing memory.\r\n                        returndatacopy(0, 0, returndatasize())\r\n\r\n                        // Revert, giving memory region with copied returndata.\r\n                        revert(0, returndatasize())\r\n                    }\r\n                }\r\n\r\n                // Otherwise revert with a generic error message.\r\n                mstore(\r\n                    TokenTransferGenericFailure_error_sig_ptr,\r\n                    TokenTransferGenericFailure_error_signature\r\n                )\r\n                mstore(TokenTransferGenericFailure_error_token_ptr, token)\r\n                mstore(TokenTransferGenericFailure_error_from_ptr, from)\r\n                mstore(TokenTransferGenericFailure_error_to_ptr, to)\r\n                mstore(TokenTransferGenericFailure_error_id_ptr, identifier)\r\n                mstore(TokenTransferGenericFailure_error_amount_ptr, amount)\r\n                revert(\r\n                    TokenTransferGenericFailure_error_sig_ptr,\r\n                    TokenTransferGenericFailure_error_length\r\n                )\r\n            }\r\n\r\n            mstore(Slot0x80, slot0x80) // Restore slot 0x80.\r\n            mstore(Slot0xA0, slot0xA0) // Restore slot 0xA0.\r\n            mstore(Slot0xC0, slot0xC0) // Restore slot 0xC0.\r\n\r\n            // Restore the original free memory pointer.\r\n            mstore(FreeMemoryPointerSlot, memPointer)\r\n\r\n            // Restore the zero slot to zero.\r\n            mstore(ZeroSlot, 0)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer ERC1155 tokens from a given\r\n     *      originator to a given recipient. Sufficient approvals must be set on\r\n     *      the contract performing the transfer and contract recipients must\r\n     *      implement the ERC1155TokenReceiver interface to indicate that they\r\n     *      are willing to accept the transfer. NOTE: this function is not\r\n     *      memory-safe; it will overwrite existing memory, restore the free\r\n     *      memory pointer to the default value, and overwrite the zero slot.\r\n     *      This function should only be called once memory is no longer\r\n     *      required and when uninitialized arrays are not utilized, and memory\r\n     *      should be considered fully corrupted (aside from the existence of a\r\n     *      default-value free memory pointer) after calling this function.\r\n     *\r\n     * @param batchTransfers The group of 1155 batch transfers to perform.\r\n     */\r\n    function _performERC1155BatchTransfers(\r\n        ConduitBatch1155Transfer[] calldata batchTransfers\r\n    ) internal {\r\n        // Utilize assembly to perform optimized batch 1155 transfers.\r\n        assembly {\r\n            let len := batchTransfers.length\r\n            // Pointer to first head in the array, which is offset to the struct\r\n            // at each index. This gets incremented after each loop to avoid\r\n            // multiplying by 32 to get the offset for each element.\r\n            let nextElementHeadPtr := batchTransfers.offset\r\n\r\n            // Pointer to beginning of the head of the array. This is the\r\n            // reference position each offset references. It's held static to\r\n            // let each loop calculate the data position for an element.\r\n            let arrayHeadPtr := nextElementHeadPtr\r\n\r\n            // Write the function selector, which will be reused for each call:\r\n            // safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\r\n            mstore(\r\n                ConduitBatch1155Transfer_from_offset,\r\n                ERC1155_safeBatchTransferFrom_signature\r\n            )\r\n\r\n            // Iterate over each batch transfer.\r\n            for {\r\n                let i := 0\r\n            } lt(i, len) {\r\n                i := add(i, 1)\r\n            } {\r\n                // Read the offset to the beginning of the element and add\r\n                // it to pointer to the beginning of the array head to get\r\n                // the absolute position of the element in calldata.\r\n                let elementPtr := add(\r\n                    arrayHeadPtr,\r\n                    calldataload(nextElementHeadPtr)\r\n                )\r\n\r\n                // Retrieve the token from calldata.\r\n                let token := calldataload(elementPtr)\r\n\r\n                // If the token has no code, revert.\r\n                if iszero(extcodesize(token)) {\r\n                    mstore(NoContract_error_sig_ptr, NoContract_error_signature)\r\n                    mstore(NoContract_error_token_ptr, token)\r\n                    revert(NoContract_error_sig_ptr, NoContract_error_length)\r\n                }\r\n\r\n                // Get the total number of supplied ids.\r\n                let idsLength := calldataload(\r\n                    add(elementPtr, ConduitBatch1155Transfer_ids_length_offset)\r\n                )\r\n\r\n                // Determine the expected offset for the amounts array.\r\n                let expectedAmountsOffset := add(\r\n                    ConduitBatch1155Transfer_amounts_length_baseOffset,\r\n                    mul(idsLength, OneWord)\r\n                )\r\n\r\n                // Validate struct encoding.\r\n                let invalidEncoding := iszero(\r\n                    and(\r\n                        // ids.length == amounts.length\r\n                        eq(\r\n                            idsLength,\r\n                            calldataload(add(elementPtr, expectedAmountsOffset))\r\n                        ),\r\n                        and(\r\n                            // ids_offset == 0xa0\r\n                            eq(\r\n                                calldataload(\r\n                                    add(\r\n                                        elementPtr,\r\n                                        ConduitBatch1155Transfer_ids_head_offset\r\n                                    )\r\n                                ),\r\n                                ConduitBatch1155Transfer_ids_length_offset\r\n                            ),\r\n                            // amounts_offset == 0xc0 + ids.length*32\r\n                            eq(\r\n                                calldataload(\r\n                                    add(\r\n                                        elementPtr,\r\n                                        ConduitBatchTransfer_amounts_head_offset\r\n                                    )\r\n                                ),\r\n                                expectedAmountsOffset\r\n                            )\r\n                        )\r\n                    )\r\n                )\r\n\r\n                // Revert with an error if the encoding is not valid.\r\n                if invalidEncoding {\r\n                    mstore(\r\n                        Invalid1155BatchTransferEncoding_ptr,\r\n                        Invalid1155BatchTransferEncoding_selector\r\n                    )\r\n                    revert(\r\n                        Invalid1155BatchTransferEncoding_ptr,\r\n                        Invalid1155BatchTransferEncoding_length\r\n                    )\r\n                }\r\n\r\n                // Update the offset position for the next loop\r\n                nextElementHeadPtr := add(nextElementHeadPtr, OneWord)\r\n\r\n                // Copy the first section of calldata (before dynamic values).\r\n                calldatacopy(\r\n                    BatchTransfer1155Params_ptr,\r\n                    add(elementPtr, ConduitBatch1155Transfer_from_offset),\r\n                    ConduitBatch1155Transfer_usable_head_size\r\n                )\r\n\r\n                // Determine size of calldata required for ids and amounts. Note\r\n                // that the size includes both lengths as well as the data.\r\n                let idsAndAmountsSize := add(TwoWords, mul(idsLength, TwoWords))\r\n\r\n                // Update the offset for the data array in memory.\r\n                mstore(\r\n                    BatchTransfer1155Params_data_head_ptr,\r\n                    add(\r\n                        BatchTransfer1155Params_ids_length_offset,\r\n                        idsAndAmountsSize\r\n                    )\r\n                )\r\n\r\n                // Set the length of the data array in memory to zero.\r\n                mstore(\r\n                    add(\r\n                        BatchTransfer1155Params_data_length_basePtr,\r\n                        idsAndAmountsSize\r\n                    ),\r\n                    0\r\n                )\r\n\r\n                // Determine the total calldata size for the call to transfer.\r\n                let transferDataSize := add(\r\n                    BatchTransfer1155Params_calldata_baseSize,\r\n                    idsAndAmountsSize\r\n                )\r\n\r\n                // Copy second section of calldata (including dynamic values).\r\n                calldatacopy(\r\n                    BatchTransfer1155Params_ids_length_ptr,\r\n                    add(elementPtr, ConduitBatch1155Transfer_ids_length_offset),\r\n                    idsAndAmountsSize\r\n                )\r\n\r\n                // Perform the call to transfer 1155 tokens.\r\n                let success := call(\r\n                    gas(),\r\n                    token,\r\n                    0,\r\n                    ConduitBatch1155Transfer_from_offset, // Data portion start.\r\n                    transferDataSize, // Location of the length of callData.\r\n                    0,\r\n                    0\r\n                )\r\n\r\n                // If the transfer reverted:\r\n                if iszero(success) {\r\n                    // If it returned a message, bubble it up as long as\r\n                    // sufficient gas remains to do so:\r\n                    if returndatasize() {\r\n                        // Ensure that sufficient gas is available to copy\r\n                        // returndata while expanding memory where necessary.\r\n                        // Start by computing word size of returndata and\r\n                        // allocated memory. Round up to the nearest full word.\r\n                        let returnDataWords := div(\r\n                            add(returndatasize(), AlmostOneWord),\r\n                            OneWord\r\n                        )\r\n\r\n                        // Note: use transferDataSize in place of msize() to\r\n                        // work around a Yul warning that prevents accessing\r\n                        // msize directly when the IR pipeline is activated.\r\n                        // The free memory pointer is not used here because\r\n                        // this function does almost all memory management\r\n                        // manually and does not update it, and transferDataSize\r\n                        // should be the largest memory value used (unless a\r\n                        // previous batch was larger).\r\n                        let msizeWords := div(transferDataSize, OneWord)\r\n\r\n                        // Next, compute the cost of the returndatacopy.\r\n                        let cost := mul(CostPerWord, returnDataWords)\r\n\r\n                        // Then, compute cost of new memory allocation.\r\n                        if gt(returnDataWords, msizeWords) {\r\n                            cost := add(\r\n                                cost,\r\n                                add(\r\n                                    mul(\r\n                                        sub(returnDataWords, msizeWords),\r\n                                        CostPerWord\r\n                                    ),\r\n                                    div(\r\n                                        sub(\r\n                                            mul(\r\n                                                returnDataWords,\r\n                                                returnDataWords\r\n                                            ),\r\n                                            mul(msizeWords, msizeWords)\r\n                                        ),\r\n                                        MemoryExpansionCoefficient\r\n                                    )\r\n                                )\r\n                            )\r\n                        }\r\n\r\n                        // Finally, add a small constant and compare to gas\r\n                        // remaining; bubble up the revert data if enough gas is\r\n                        // still available.\r\n                        if lt(add(cost, ExtraGasBuffer), gas()) {\r\n                            // Copy returndata to memory; overwrite existing.\r\n                            returndatacopy(0, 0, returndatasize())\r\n\r\n                            // Revert with memory region containing returndata.\r\n                            revert(0, returndatasize())\r\n                        }\r\n                    }\r\n\r\n                    // Set the error signature.\r\n                    mstore(\r\n                        0,\r\n                        ERC1155BatchTransferGenericFailure_error_signature\r\n                    )\r\n\r\n                    // Write the token.\r\n                    mstore(ERC1155BatchTransferGenericFailure_token_ptr, token)\r\n\r\n                    // Increase the offset to ids by 32.\r\n                    mstore(\r\n                        BatchTransfer1155Params_ids_head_ptr,\r\n                        ERC1155BatchTransferGenericFailure_ids_offset\r\n                    )\r\n\r\n                    // Increase the offset to amounts by 32.\r\n                    mstore(\r\n                        BatchTransfer1155Params_amounts_head_ptr,\r\n                        add(\r\n                            OneWord,\r\n                            mload(BatchTransfer1155Params_amounts_head_ptr)\r\n                        )\r\n                    )\r\n\r\n                    // Return modified region. The total size stays the same as\r\n                    // `token` uses the same number of bytes as `data.length`.\r\n                    revert(0, transferDataSize)\r\n                }\r\n            }\r\n\r\n            // Reset the free memory pointer to the default value; memory must\r\n            // be assumed to be dirtied and not reused from this point forward.\r\n            // Also note that the zero slot is not reset to zero, meaning empty\r\n            // arrays cannot be safely created or utilized until it is restored.\r\n            mstore(FreeMemoryPointerSlot, DefaultFreeMemoryPointer)\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ConduitInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\n// prettier-ignore\r\nimport {\r\n    ConduitTransfer,\r\n    ConduitBatch1155Transfer\r\n} from \"../conduit/lib/ConduitStructs.sol\";\r\n\r\n/**\r\n * @title ConduitInterface\r\n * @author 0age\r\n * @notice ConduitInterface contains all external function interfaces, events,\r\n *         and errors for conduit contracts.\r\n */\r\ninterface ConduitInterface {\r\n    /**\r\n     * @dev Revert with an error when attempting to execute transfers using a\r\n     *      caller that does not have an open channel.\r\n     */\r\n    error ChannelClosed(address channel);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to update a channel to the\r\n     *      current status of that channel.\r\n     */\r\n    error ChannelStatusAlreadySet(address channel, bool isOpen);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to execute a transfer for an\r\n     *      item that does not have an ERC20/721/1155 item type.\r\n     */\r\n    error InvalidItemType();\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to update the status of a\r\n     *      channel from a caller that is not the conduit controller.\r\n     */\r\n    error InvalidController();\r\n\r\n    /**\r\n     * @dev Emit an event whenever a channel is opened or closed.\r\n     *\r\n     * @param channel The channel that has been updated.\r\n     * @param open    A boolean indicating whether the conduit is open or not.\r\n     */\r\n    event ChannelUpdated(address indexed channel, bool open);\r\n\r\n    /**\r\n     * @notice Execute a sequence of ERC20/721/1155 transfers. Only a caller\r\n     *         with an open channel can call this function.\r\n     *\r\n     * @param transfers The ERC20/721/1155 transfers to perform.\r\n     *\r\n     * @return magicValue A magic value indicating that the transfers were\r\n     *                    performed successfully.\r\n     */\r\n    function execute(ConduitTransfer[] calldata transfers)\r\n        external\r\n        returns (bytes4 magicValue);\r\n\r\n    /**\r\n     * @notice Execute a sequence of batch 1155 transfers. Only a caller with an\r\n     *         open channel can call this function.\r\n     *\r\n     * @param batch1155Transfers The 1155 batch transfers to perform.\r\n     *\r\n     * @return magicValue A magic value indicating that the transfers were\r\n     *                    performed successfully.\r\n     */\r\n    function executeBatch1155(\r\n        ConduitBatch1155Transfer[] calldata batch1155Transfers\r\n    ) external returns (bytes4 magicValue);\r\n\r\n    /**\r\n     * @notice Execute a sequence of transfers, both single and batch 1155. Only\r\n     *         a caller with an open channel can call this function.\r\n     *\r\n     * @param standardTransfers  The ERC20/721/1155 transfers to perform.\r\n     * @param batch1155Transfers The 1155 batch transfers to perform.\r\n     *\r\n     * @return magicValue A magic value indicating that the transfers were\r\n     *                    performed successfully.\r\n     */\r\n    function executeWithBatch1155(\r\n        ConduitTransfer[] calldata standardTransfers,\r\n        ConduitBatch1155Transfer[] calldata batch1155Transfers\r\n    ) external returns (bytes4 magicValue);\r\n\r\n    /**\r\n     * @notice Open or close a given channel. Only callable by the controller.\r\n     *\r\n     * @param channel The channel to open or close.\r\n     * @param isOpen  The status of the channel (either open or closed).\r\n     */\r\n    function updateChannel(address channel, bool isOpen) external;\r\n}\r\n"
    },
    "contracts/interfaces/ConduitControllerInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\n/**\r\n * @title ConduitControllerInterface\r\n * @author 0age\r\n * @notice ConduitControllerInterface contains all external function interfaces,\r\n *         structs, events, and errors for the conduit controller.\r\n */\r\ninterface ConduitControllerInterface {\r\n    /**\r\n     * @dev Track the conduit key, current owner, new potential owner, and open\r\n     *      channels for each deployed conduit.\r\n     */\r\n    struct ConduitProperties {\r\n        bytes32 key;\r\n        address owner;\r\n        address potentialOwner;\r\n        address[] channels;\r\n        mapping(address => uint256) channelIndexesPlusOne;\r\n    }\r\n\r\n    /**\r\n     * @dev Emit an event whenever a new conduit is created.\r\n     *\r\n     * @param conduit    The newly created conduit.\r\n     * @param conduitKey The conduit key used to create the new conduit.\r\n     */\r\n    event NewConduit(address conduit, bytes32 conduitKey);\r\n\r\n    /**\r\n     * @dev Emit an event whenever conduit ownership is transferred.\r\n     *\r\n     * @param conduit       The conduit for which ownership has been\r\n     *                      transferred.\r\n     * @param previousOwner The previous owner of the conduit.\r\n     * @param newOwner      The new owner of the conduit.\r\n     */\r\n    event OwnershipTransferred(\r\n        address indexed conduit,\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Emit an event whenever a conduit owner registers a new potential\r\n     *      owner for that conduit.\r\n     *\r\n     * @param newPotentialOwner The new potential owner of the conduit.\r\n     */\r\n    event PotentialOwnerUpdated(address indexed newPotentialOwner);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to create a new conduit using a\r\n     *      conduit key where the first twenty bytes of the key do not match the\r\n     *      address of the caller.\r\n     */\r\n    error InvalidCreator();\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to create a new conduit when no\r\n     *      initial owner address is supplied.\r\n     */\r\n    error InvalidInitialOwner();\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to set a new potential owner\r\n     *      that is already set.\r\n     */\r\n    error NewPotentialOwnerAlreadySet(\r\n        address conduit,\r\n        address newPotentialOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to cancel ownership transfer\r\n     *      when no new potential owner is currently set.\r\n     */\r\n    error NoPotentialOwnerCurrentlySet(address conduit);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to interact with a conduit that\r\n     *      does not yet exist.\r\n     */\r\n    error NoConduit();\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to create a conduit that\r\n     *      already exists.\r\n     */\r\n    error ConduitAlreadyExists(address conduit);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to update channels or transfer\r\n     *      ownership of a conduit when the caller is not the owner of the\r\n     *      conduit in question.\r\n     */\r\n    error CallerIsNotOwner(address conduit);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to register a new potential\r\n     *      owner and supplying the null address.\r\n     */\r\n    error NewPotentialOwnerIsZeroAddress(address conduit);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to claim ownership of a conduit\r\n     *      with a caller that is not the current potential owner for the\r\n     *      conduit in question.\r\n     */\r\n    error CallerIsNotNewPotentialOwner(address conduit);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to retrieve a channel using an\r\n     *      index that is out of range.\r\n     */\r\n    error ChannelOutOfRange(address conduit);\r\n\r\n    /**\r\n     * @notice Deploy a new conduit using a supplied conduit key and assigning\r\n     *         an initial owner for the deployed conduit. Note that the first\r\n     *         twenty bytes of the supplied conduit key must match the caller\r\n     *         and that a new conduit cannot be created if one has already been\r\n     *         deployed using the same conduit key.\r\n     *\r\n     * @param conduitKey   The conduit key used to deploy the conduit. Note that\r\n     *                     the first twenty bytes of the conduit key must match\r\n     *                     the caller of this contract.\r\n     * @param initialOwner The initial owner to set for the new conduit.\r\n     *\r\n     * @return conduit The address of the newly deployed conduit.\r\n     */\r\n    function createConduit(bytes32 conduitKey, address initialOwner)\r\n        external\r\n        returns (address conduit);\r\n\r\n    /**\r\n     * @notice Open or close a channel on a given conduit, thereby allowing the\r\n     *         specified account to execute transfers against that conduit.\r\n     *         Extreme care must be taken when updating channels, as malicious\r\n     *         or vulnerable channels can transfer any ERC20, ERC721 and ERC1155\r\n     *         tokens where the token holder has granted the conduit approval.\r\n     *         Only the owner of the conduit in question may call this function.\r\n     *\r\n     * @param conduit The conduit for which to open or close the channel.\r\n     * @param channel The channel to open or close on the conduit.\r\n     * @param isOpen  A boolean indicating whether to open or close the channel.\r\n     */\r\n    function updateChannel(\r\n        address conduit,\r\n        address channel,\r\n        bool isOpen\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Initiate conduit ownership transfer by assigning a new potential\r\n     *         owner for the given conduit. Once set, the new potential owner\r\n     *         may call `acceptOwnership` to claim ownership of the conduit.\r\n     *         Only the owner of the conduit in question may call this function.\r\n     *\r\n     * @param conduit The conduit for which to initiate ownership transfer.\r\n     * @param newPotentialOwner The new potential owner of the conduit.\r\n     */\r\n    function transferOwnership(address conduit, address newPotentialOwner)\r\n        external;\r\n\r\n    /**\r\n     * @notice Clear the currently set potential owner, if any, from a conduit.\r\n     *         Only the owner of the conduit in question may call this function.\r\n     *\r\n     * @param conduit The conduit for which to cancel ownership transfer.\r\n     */\r\n    function cancelOwnershipTransfer(address conduit) external;\r\n\r\n    /**\r\n     * @notice Accept ownership of a supplied conduit. Only accounts that the\r\n     *         current owner has set as the new potential owner may call this\r\n     *         function.\r\n     *\r\n     * @param conduit The conduit for which to accept ownership.\r\n     */\r\n    function acceptOwnership(address conduit) external;\r\n\r\n    /**\r\n     * @notice Retrieve the current owner of a deployed conduit.\r\n     *\r\n     * @param conduit The conduit for which to retrieve the associated owner.\r\n     *\r\n     * @return owner The owner of the supplied conduit.\r\n     */\r\n    function ownerOf(address conduit) external view returns (address owner);\r\n\r\n    /**\r\n     * @notice Retrieve the conduit key for a deployed conduit via reverse\r\n     *         lookup.\r\n     *\r\n     * @param conduit The conduit for which to retrieve the associated conduit\r\n     *                key.\r\n     *\r\n     * @return conduitKey The conduit key used to deploy the supplied conduit.\r\n     */\r\n    function getKey(address conduit) external view returns (bytes32 conduitKey);\r\n\r\n    /**\r\n     * @notice Derive the conduit associated with a given conduit key and\r\n     *         determine whether that conduit exists (i.e. whether it has been\r\n     *         deployed).\r\n     *\r\n     * @param conduitKey The conduit key used to derive the conduit.\r\n     *\r\n     * @return conduit The derived address of the conduit.\r\n     * @return exists  A boolean indicating whether the derived conduit has been\r\n     *                 deployed or not.\r\n     */\r\n    function getConduit(bytes32 conduitKey)\r\n        external\r\n        view\r\n        returns (address conduit, bool exists);\r\n\r\n    /**\r\n     * @notice Retrieve the potential owner, if any, for a given conduit. The\r\n     *         current owner may set a new potential owner via\r\n     *         `transferOwnership` and that owner may then accept ownership of\r\n     *         the conduit in question via `acceptOwnership`.\r\n     *\r\n     * @param conduit The conduit for which to retrieve the potential owner.\r\n     *\r\n     * @return potentialOwner The potential owner, if any, for the conduit.\r\n     */\r\n    function getPotentialOwner(address conduit)\r\n        external\r\n        view\r\n        returns (address potentialOwner);\r\n\r\n    /**\r\n     * @notice Retrieve the status (either open or closed) of a given channel on\r\n     *         a conduit.\r\n     *\r\n     * @param conduit The conduit for which to retrieve the channel status.\r\n     * @param channel The channel for which to retrieve the status.\r\n     *\r\n     * @return isOpen The status of the channel on the given conduit.\r\n     */\r\n    function getChannelStatus(address conduit, address channel)\r\n        external\r\n        view\r\n        returns (bool isOpen);\r\n\r\n    /**\r\n     * @notice Retrieve the total number of open channels for a given conduit.\r\n     *\r\n     * @param conduit The conduit for which to retrieve the total channel count.\r\n     *\r\n     * @return totalChannels The total number of open channels for the conduit.\r\n     */\r\n    function getTotalChannels(address conduit)\r\n        external\r\n        view\r\n        returns (uint256 totalChannels);\r\n\r\n    /**\r\n     * @notice Retrieve an open channel at a specific index for a given conduit.\r\n     *         Note that the index of a channel can change as a result of other\r\n     *         channels being closed on the conduit.\r\n     *\r\n     * @param conduit      The conduit for which to retrieve the open channel.\r\n     * @param channelIndex The index of the channel in question.\r\n     *\r\n     * @return channel The open channel, if any, at the specified channel index.\r\n     */\r\n    function getChannel(address conduit, uint256 channelIndex)\r\n        external\r\n        view\r\n        returns (address channel);\r\n\r\n    /**\r\n     * @notice Retrieve all open channels for a given conduit. Note that calling\r\n     *         this function for a conduit with many channels will revert with\r\n     *         an out-of-gas error.\r\n     *\r\n     * @param conduit The conduit for which to retrieve open channels.\r\n     *\r\n     * @return channels An array of open channels on the given conduit.\r\n     */\r\n    function getChannels(address conduit)\r\n        external\r\n        view\r\n        returns (address[] memory channels);\r\n\r\n    /**\r\n     * @dev Retrieve the conduit creation code and runtime code hashes.\r\n     */\r\n    function getConduitCodeHashes()\r\n        external\r\n        view\r\n        returns (bytes32 creationCodeHash, bytes32 runtimeCodeHash);\r\n}\r\n"
    },
    "contracts/conduit/Conduit.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport { ConduitInterface } from \"../interfaces/ConduitInterface.sol\";\r\n\r\nimport { ConduitItemType } from \"./lib/ConduitEnums.sol\";\r\n\r\nimport { TokenTransferrer } from \"../lib/TokenTransferrer.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    ConduitTransfer,\r\n    ConduitBatch1155Transfer\r\n} from \"./lib/ConduitStructs.sol\";\r\n\r\nimport \"./lib/ConduitConstants.sol\";\r\n\r\n/**\r\n * @title Conduit\r\n * @author 0age\r\n * @notice This contract serves as an originator for \"proxied\" transfers. Each\r\n *         conduit is deployed and controlled by a \"conduit controller\" that can\r\n *         add and remove \"channels\" or contracts that can instruct the conduit\r\n *         to transfer approved ERC20/721/1155 tokens. *IMPORTANT NOTE: each\r\n *         conduit has an owner that can arbitrarily add or remove channels, and\r\n *         a malicious or negligent owner can add a channel that allows for any\r\n *         approved ERC20/721/1155 tokens to be taken immediately — be extremely\r\n *         cautious with what conduits you give token approvals to!*\r\n */\r\ncontract Conduit is ConduitInterface, TokenTransferrer {\r\n    // Set deployer as an immutable controller that can update channel statuses.\r\n    address private immutable _controller;\r\n\r\n    // Track the status of each channel.\r\n    mapping(address => bool) private _channels;\r\n\r\n    /**\r\n     * @notice Ensure that the caller is currently registered as an open channel\r\n     *         on the conduit.\r\n     */\r\n    modifier onlyOpenChannel() {\r\n        // Utilize assembly to access channel storage mapping directly.\r\n        assembly {\r\n            // Write the caller to scratch space.\r\n            mstore(ChannelKey_channel_ptr, caller())\r\n\r\n            // Write the storage slot for _channels to scratch space.\r\n            mstore(ChannelKey_slot_ptr, _channels.slot)\r\n\r\n            // Derive the position in storage of _channels[msg.sender]\r\n            // and check if the stored value is zero.\r\n            if iszero(\r\n                sload(keccak256(ChannelKey_channel_ptr, ChannelKey_length))\r\n            ) {\r\n                // The caller is not an open channel; revert with\r\n                // ChannelClosed(caller). First, set error signature in memory.\r\n                mstore(ChannelClosed_error_ptr, ChannelClosed_error_signature)\r\n\r\n                // Next, set the caller as the argument.\r\n                mstore(ChannelClosed_channel_ptr, caller())\r\n\r\n                // Finally, revert, returning full custom error with argument.\r\n                revert(ChannelClosed_error_ptr, ChannelClosed_error_length)\r\n            }\r\n        }\r\n\r\n        // Continue with function execution.\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice In the constructor, set the deployer as the controller.\r\n     */\r\n    constructor() {\r\n        // Set the deployer as the controller.\r\n        _controller = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @notice Execute a sequence of ERC20/721/1155 transfers. Only a caller\r\n     *         with an open channel can call this function. Note that channels\r\n     *         are expected to implement reentrancy protection if desired, and\r\n     *         that cross-channel reentrancy may be possible if the conduit has\r\n     *         multiple open channels at once. Also note that channels are\r\n     *         expected to implement checks against transferring any zero-amount\r\n     *         items if that constraint is desired.\r\n     *\r\n     * @param transfers The ERC20/721/1155 transfers to perform.\r\n     *\r\n     * @return magicValue A magic value indicating that the transfers were\r\n     *                    performed successfully.\r\n     */\r\n    function execute(ConduitTransfer[] calldata transfers)\r\n        external\r\n        override\r\n        onlyOpenChannel\r\n        returns (bytes4 magicValue)\r\n    {\r\n        // Retrieve the total number of transfers and place on the stack.\r\n        uint256 totalStandardTransfers = transfers.length;\r\n\r\n        // Iterate over each transfer.\r\n        for (uint256 i = 0; i < totalStandardTransfers; ) {\r\n            // Retrieve the transfer in question and perform the transfer.\r\n            _transfer(transfers[i]);\r\n\r\n            // Skip overflow check as for loop is indexed starting at zero.\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Return a magic value indicating that the transfers were performed.\r\n        magicValue = this.execute.selector;\r\n    }\r\n\r\n    /**\r\n     * @notice Execute a sequence of batch 1155 item transfers. Only a caller\r\n     *         with an open channel can call this function. Note that channels\r\n     *         are expected to implement reentrancy protection if desired, and\r\n     *         that cross-channel reentrancy may be possible if the conduit has\r\n     *         multiple open channels at once. Also note that channels are\r\n     *         expected to implement checks against transferring any zero-amount\r\n     *         items if that constraint is desired.\r\n     *\r\n     * @param batchTransfers The 1155 batch item transfers to perform.\r\n     *\r\n     * @return magicValue A magic value indicating that the item transfers were\r\n     *                    performed successfully.\r\n     */\r\n    function executeBatch1155(\r\n        ConduitBatch1155Transfer[] calldata batchTransfers\r\n    ) external override onlyOpenChannel returns (bytes4 magicValue) {\r\n        // Perform 1155 batch transfers. Note that memory should be considered\r\n        // entirely corrupted from this point forward.\r\n        _performERC1155BatchTransfers(batchTransfers);\r\n\r\n        // Return a magic value indicating that the transfers were performed.\r\n        magicValue = this.executeBatch1155.selector;\r\n    }\r\n\r\n    /**\r\n     * @notice Execute a sequence of transfers, both single ERC20/721/1155 item\r\n     *         transfers as well as batch 1155 item transfers. Only a caller\r\n     *         with an open channel can call this function. Note that channels\r\n     *         are expected to implement reentrancy protection if desired, and\r\n     *         that cross-channel reentrancy may be possible if the conduit has\r\n     *         multiple open channels at once. Also note that channels are\r\n     *         expected to implement checks against transferring any zero-amount\r\n     *         items if that constraint is desired.\r\n     *\r\n     * @param standardTransfers The ERC20/721/1155 item transfers to perform.\r\n     * @param batchTransfers    The 1155 batch item transfers to perform.\r\n     *\r\n     * @return magicValue A magic value indicating that the item transfers were\r\n     *                    performed successfully.\r\n     */\r\n    function executeWithBatch1155(\r\n        ConduitTransfer[] calldata standardTransfers,\r\n        ConduitBatch1155Transfer[] calldata batchTransfers\r\n    ) external override onlyOpenChannel returns (bytes4 magicValue) {\r\n        // Retrieve the total number of transfers and place on the stack.\r\n        uint256 totalStandardTransfers = standardTransfers.length;\r\n\r\n        // Iterate over each standard transfer.\r\n        for (uint256 i = 0; i < totalStandardTransfers; ) {\r\n            // Retrieve the transfer in question and perform the transfer.\r\n            _transfer(standardTransfers[i]);\r\n\r\n            // Skip overflow check as for loop is indexed starting at zero.\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Perform 1155 batch transfers. Note that memory should be considered\r\n        // entirely corrupted from this point forward aside from the free memory\r\n        // pointer having the default value.\r\n        _performERC1155BatchTransfers(batchTransfers);\r\n\r\n        // Return a magic value indicating that the transfers were performed.\r\n        magicValue = this.executeWithBatch1155.selector;\r\n    }\r\n\r\n    /**\r\n     * @notice Open or close a given channel. Only callable by the controller.\r\n     *\r\n     * @param channel The channel to open or close.\r\n     * @param isOpen  The status of the channel (either open or closed).\r\n     */\r\n    function updateChannel(address channel, bool isOpen) external override {\r\n        // Ensure that the caller is the controller of this contract.\r\n        if (msg.sender != _controller) {\r\n            revert InvalidController();\r\n        }\r\n\r\n        // Ensure that the channel does not already have the indicated status.\r\n        if (_channels[channel] == isOpen) {\r\n            revert ChannelStatusAlreadySet(channel, isOpen);\r\n        }\r\n\r\n        // Update the status of the channel.\r\n        _channels[channel] = isOpen;\r\n\r\n        // Emit a corresponding event.\r\n        emit ChannelUpdated(channel, isOpen);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer a given ERC20/721/1155 item. Note that\r\n     *      channels are expected to implement checks against transferring any\r\n     *      zero-amount items if that constraint is desired.\r\n     *\r\n     * @param item The ERC20/721/1155 item to transfer.\r\n     */\r\n    function _transfer(ConduitTransfer calldata item) internal {\r\n        // Determine the transfer method based on the respective item type.\r\n        if (item.itemType == ConduitItemType.ERC20) {\r\n            // Transfer ERC20 token. Note that item.identifier is ignored and\r\n            // therefore ERC20 transfer items are potentially malleable — this\r\n            // check should be performed by the calling channel if a constraint\r\n            // on item malleability is desired.\r\n            _performERC20Transfer(item.token, item.from, item.to, item.amount);\r\n        } else if (item.itemType == ConduitItemType.ERC721) {\r\n            // Ensure that exactly one 721 item is being transferred.\r\n            if (item.amount != 1) {\r\n                revert InvalidERC721TransferAmount();\r\n            }\r\n\r\n            // Transfer ERC721 token.\r\n            _performERC721Transfer(\r\n                item.token,\r\n                item.from,\r\n                item.to,\r\n                item.identifier\r\n            );\r\n        } else if (item.itemType == ConduitItemType.ERC1155) {\r\n            // Transfer ERC1155 token.\r\n            _performERC1155Transfer(\r\n                item.token,\r\n                item.from,\r\n                item.to,\r\n                item.identifier,\r\n                item.amount\r\n            );\r\n        } else {\r\n            // Throw with an error.\r\n            revert InvalidItemType();\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/conduit/lib/ConduitStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport { ConduitItemType } from \"./ConduitEnums.sol\";\r\n\r\nstruct ConduitTransfer {\r\n    ConduitItemType itemType;\r\n    address token;\r\n    address from;\r\n    address to;\r\n    uint256 identifier;\r\n    uint256 amount;\r\n}\r\n\r\nstruct ConduitBatch1155Transfer {\r\n    address token;\r\n    address from;\r\n    address to;\r\n    uint256[] ids;\r\n    uint256[] amounts;\r\n}\r\n"
    },
    "contracts/interfaces/TransferHelperInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport { TransferHelperItem } from \"../helpers/TransferHelperStructs.sol\";\r\n\r\ninterface TransferHelperInterface {\r\n    /**\r\n     * @dev Revert with an error when attempting to execute transfers with a\r\n     *      NATIVE itemType.\r\n     */\r\n    error InvalidItemType();\r\n\r\n    /**\r\n     * @notice Transfer multiple items to a single recipient.\r\n     *\r\n     * @param items The items to transfer.\r\n     * @param recipient  The address the items should be transferred to.\r\n     * @param conduitKey  The key of the conduit performing the bulk transfer.\r\n     */\r\n    function bulkTransfer(\r\n        TransferHelperItem[] calldata items,\r\n        address recipient,\r\n        bytes32 conduitKey\r\n    ) external returns (bytes4);\r\n}\r\n"
    },
    "contracts/conduit/lib/ConduitEnums.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nenum ConduitItemType {\r\n    NATIVE, // unused\r\n    ERC20,\r\n    ERC721,\r\n    ERC1155\r\n}\r\n"
    },
    "contracts/lib/TokenTransferrerConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\n/*\r\n * -------------------------- Disambiguation & Other Notes ---------------------\r\n *    - The term \"head\" is used as it is in the documentation for ABI encoding,\r\n *      but only in reference to dynamic types, i.e. it always refers to the\r\n *      offset or pointer to the body of a dynamic type. In calldata, the head\r\n *      is always an offset (relative to the parent object), while in memory,\r\n *      the head is always the pointer to the body. More information found here:\r\n *      https://docs.soliditylang.org/en/v0.8.14/abi-spec.html#argument-encoding\r\n *        - Note that the length of an array is separate from and precedes the\r\n *          head of the array.\r\n *\r\n *    - The term \"body\" is used in place of the term \"head\" used in the ABI\r\n *      documentation. It refers to the start of the data for a dynamic type,\r\n *      e.g. the first word of a struct or the first word of the first element\r\n *      in an array.\r\n *\r\n *    - The term \"pointer\" is used to describe the absolute position of a value\r\n *      and never an offset relative to another value.\r\n *        - The suffix \"_ptr\" refers to a memory pointer.\r\n *        - The suffix \"_cdPtr\" refers to a calldata pointer.\r\n *\r\n *    - The term \"offset\" is used to describe the position of a value relative\r\n *      to some parent value. For example, OrderParameters_conduit_offset is the\r\n *      offset to the \"conduit\" value in the OrderParameters struct relative to\r\n *      the start of the body.\r\n *        - Note: Offsets are used to derive pointers.\r\n *\r\n *    - Some structs have pointers defined for all of their fields in this file.\r\n *      Lines which are commented out are fields that are not used in the\r\n *      codebase but have been left in for readability.\r\n */\r\n\r\nuint256 constant AlmostOneWord = 0x1f;\r\nuint256 constant OneWord = 0x20;\r\nuint256 constant TwoWords = 0x40;\r\nuint256 constant ThreeWords = 0x60;\r\n\r\nuint256 constant FreeMemoryPointerSlot = 0x40;\r\nuint256 constant ZeroSlot = 0x60;\r\nuint256 constant DefaultFreeMemoryPointer = 0x80;\r\n\r\nuint256 constant Slot0x80 = 0x80;\r\nuint256 constant Slot0xA0 = 0xa0;\r\nuint256 constant Slot0xC0 = 0xc0;\r\n\r\n// abi.encodeWithSignature(\"transferFrom(address,address,uint256)\")\r\nuint256 constant ERC20_transferFrom_signature = (\r\n    0x23b872dd00000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant ERC20_transferFrom_sig_ptr = 0x0;\r\nuint256 constant ERC20_transferFrom_from_ptr = 0x04;\r\nuint256 constant ERC20_transferFrom_to_ptr = 0x24;\r\nuint256 constant ERC20_transferFrom_amount_ptr = 0x44;\r\nuint256 constant ERC20_transferFrom_length = 0x64; // 4 + 32 * 3 == 100\r\n\r\n// abi.encodeWithSignature(\r\n//     \"safeTransferFrom(address,address,uint256,uint256,bytes)\"\r\n// )\r\nuint256 constant ERC1155_safeTransferFrom_signature = (\r\n    0xf242432a00000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant ERC1155_safeTransferFrom_sig_ptr = 0x0;\r\nuint256 constant ERC1155_safeTransferFrom_from_ptr = 0x04;\r\nuint256 constant ERC1155_safeTransferFrom_to_ptr = 0x24;\r\nuint256 constant ERC1155_safeTransferFrom_id_ptr = 0x44;\r\nuint256 constant ERC1155_safeTransferFrom_amount_ptr = 0x64;\r\nuint256 constant ERC1155_safeTransferFrom_data_offset_ptr = 0x84;\r\nuint256 constant ERC1155_safeTransferFrom_data_length_ptr = 0xa4;\r\nuint256 constant ERC1155_safeTransferFrom_length = 0xc4; // 4 + 32 * 6 == 196\r\nuint256 constant ERC1155_safeTransferFrom_data_length_offset = 0xa0;\r\n\r\n// abi.encodeWithSignature(\r\n//     \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\"\r\n// )\r\nuint256 constant ERC1155_safeBatchTransferFrom_signature = (\r\n    0x2eb2c2d600000000000000000000000000000000000000000000000000000000\r\n);\r\n\r\nbytes4 constant ERC1155_safeBatchTransferFrom_selector = bytes4(\r\n    bytes32(ERC1155_safeBatchTransferFrom_signature)\r\n);\r\n\r\nuint256 constant ERC721_transferFrom_signature = ERC20_transferFrom_signature;\r\nuint256 constant ERC721_transferFrom_sig_ptr = 0x0;\r\nuint256 constant ERC721_transferFrom_from_ptr = 0x04;\r\nuint256 constant ERC721_transferFrom_to_ptr = 0x24;\r\nuint256 constant ERC721_transferFrom_id_ptr = 0x44;\r\nuint256 constant ERC721_transferFrom_length = 0x64; // 4 + 32 * 3 == 100\r\n\r\n// abi.encodeWithSignature(\"NoContract(address)\")\r\nuint256 constant NoContract_error_signature = (\r\n    0x5f15d67200000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant NoContract_error_sig_ptr = 0x0;\r\nuint256 constant NoContract_error_token_ptr = 0x4;\r\nuint256 constant NoContract_error_length = 0x24; // 4 + 32 == 36\r\n\r\n// abi.encodeWithSignature(\r\n//     \"TokenTransferGenericFailure(address,address,address,uint256,uint256)\"\r\n// )\r\nuint256 constant TokenTransferGenericFailure_error_signature = (\r\n    0xf486bc8700000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant TokenTransferGenericFailure_error_sig_ptr = 0x0;\r\nuint256 constant TokenTransferGenericFailure_error_token_ptr = 0x4;\r\nuint256 constant TokenTransferGenericFailure_error_from_ptr = 0x24;\r\nuint256 constant TokenTransferGenericFailure_error_to_ptr = 0x44;\r\nuint256 constant TokenTransferGenericFailure_error_id_ptr = 0x64;\r\nuint256 constant TokenTransferGenericFailure_error_amount_ptr = 0x84;\r\n\r\n// 4 + 32 * 5 == 164\r\nuint256 constant TokenTransferGenericFailure_error_length = 0xa4;\r\n\r\n// abi.encodeWithSignature(\r\n//     \"BadReturnValueFromERC20OnTransfer(address,address,address,uint256)\"\r\n// )\r\nuint256 constant BadReturnValueFromERC20OnTransfer_error_signature = (\r\n    0x9889192300000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant BadReturnValueFromERC20OnTransfer_error_sig_ptr = 0x0;\r\nuint256 constant BadReturnValueFromERC20OnTransfer_error_token_ptr = 0x4;\r\nuint256 constant BadReturnValueFromERC20OnTransfer_error_from_ptr = 0x24;\r\nuint256 constant BadReturnValueFromERC20OnTransfer_error_to_ptr = 0x44;\r\nuint256 constant BadReturnValueFromERC20OnTransfer_error_amount_ptr = 0x64;\r\n\r\n// 4 + 32 * 4 == 132\r\nuint256 constant BadReturnValueFromERC20OnTransfer_error_length = 0x84;\r\n\r\nuint256 constant ExtraGasBuffer = 0x20;\r\nuint256 constant CostPerWord = 3;\r\nuint256 constant MemoryExpansionCoefficient = 0x200;\r\n\r\n// Values are offset by 32 bytes in order to write the token to the beginning\r\n// in the event of a revert\r\nuint256 constant BatchTransfer1155Params_ptr = 0x24;\r\nuint256 constant BatchTransfer1155Params_ids_head_ptr = 0x64;\r\nuint256 constant BatchTransfer1155Params_amounts_head_ptr = 0x84;\r\nuint256 constant BatchTransfer1155Params_data_head_ptr = 0xa4;\r\nuint256 constant BatchTransfer1155Params_data_length_basePtr = 0xc4;\r\nuint256 constant BatchTransfer1155Params_calldata_baseSize = 0xc4;\r\n\r\nuint256 constant BatchTransfer1155Params_ids_length_ptr = 0xc4;\r\n\r\nuint256 constant BatchTransfer1155Params_ids_length_offset = 0xa0;\r\nuint256 constant BatchTransfer1155Params_amounts_length_baseOffset = 0xc0;\r\nuint256 constant BatchTransfer1155Params_data_length_baseOffset = 0xe0;\r\n\r\nuint256 constant ConduitBatch1155Transfer_usable_head_size = 0x80;\r\n\r\nuint256 constant ConduitBatch1155Transfer_from_offset = 0x20;\r\nuint256 constant ConduitBatch1155Transfer_ids_head_offset = 0x60;\r\nuint256 constant ConduitBatch1155Transfer_amounts_head_offset = 0x80;\r\nuint256 constant ConduitBatch1155Transfer_ids_length_offset = 0xa0;\r\nuint256 constant ConduitBatch1155Transfer_amounts_length_baseOffset = 0xc0;\r\nuint256 constant ConduitBatch1155Transfer_calldata_baseSize = 0xc0;\r\n\r\n// Note: abbreviated version of above constant to adhere to line length limit.\r\nuint256 constant ConduitBatchTransfer_amounts_head_offset = 0x80;\r\n\r\nuint256 constant Invalid1155BatchTransferEncoding_ptr = 0x00;\r\nuint256 constant Invalid1155BatchTransferEncoding_length = 0x04;\r\nuint256 constant Invalid1155BatchTransferEncoding_selector = (\r\n    0xeba2084c00000000000000000000000000000000000000000000000000000000\r\n);\r\n\r\nuint256 constant ERC1155BatchTransferGenericFailure_error_signature = (\r\n    0xafc445e200000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant ERC1155BatchTransferGenericFailure_token_ptr = 0x04;\r\nuint256 constant ERC1155BatchTransferGenericFailure_ids_offset = 0xc0;\r\n"
    },
    "contracts/interfaces/TokenTransferrerErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\n/**\r\n * @title TokenTransferrerErrors\r\n */\r\ninterface TokenTransferrerErrors {\r\n    /**\r\n     * @dev Revert with an error when an ERC721 transfer with amount other than\r\n     *      one is attempted.\r\n     */\r\n    error InvalidERC721TransferAmount();\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to fulfill an order where an\r\n     *      item has an amount of zero.\r\n     */\r\n    error MissingItemAmount();\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to fulfill an order where an\r\n     *      item has unused parameters. This includes both the token and the\r\n     *      identifier parameters for native transfers as well as the identifier\r\n     *      parameter for ERC20 transfers. Note that the conduit does not\r\n     *      perform this check, leaving it up to the calling channel to enforce\r\n     *      when desired.\r\n     */\r\n    error UnusedItemParameters();\r\n\r\n    /**\r\n     * @dev Revert with an error when an ERC20, ERC721, or ERC1155 token\r\n     *      transfer reverts.\r\n     *\r\n     * @param token      The token for which the transfer was attempted.\r\n     * @param from       The source of the attempted transfer.\r\n     * @param to         The recipient of the attempted transfer.\r\n     * @param identifier The identifier for the attempted transfer.\r\n     * @param amount     The amount for the attempted transfer.\r\n     */\r\n    error TokenTransferGenericFailure(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 identifier,\r\n        uint256 amount\r\n    );\r\n\r\n    /**\r\n     * @dev Revert with an error when a batch ERC1155 token transfer reverts.\r\n     *\r\n     * @param token       The token for which the transfer was attempted.\r\n     * @param from        The source of the attempted transfer.\r\n     * @param to          The recipient of the attempted transfer.\r\n     * @param identifiers The identifiers for the attempted transfer.\r\n     * @param amounts     The amounts for the attempted transfer.\r\n     */\r\n    error ERC1155BatchTransferGenericFailure(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256[] identifiers,\r\n        uint256[] amounts\r\n    );\r\n\r\n    /**\r\n     * @dev Revert with an error when an ERC20 token transfer returns a falsey\r\n     *      value.\r\n     *\r\n     * @param token      The token for which the ERC20 transfer was attempted.\r\n     * @param from       The source of the attempted ERC20 transfer.\r\n     * @param to         The recipient of the attempted ERC20 transfer.\r\n     * @param amount     The amount for the attempted ERC20 transfer.\r\n     */\r\n    error BadReturnValueFromERC20OnTransfer(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    );\r\n\r\n    /**\r\n     * @dev Revert with an error when an account being called as an assumed\r\n     *      contract does not have code and returns no data.\r\n     *\r\n     * @param account The account that should contain code.\r\n     */\r\n    error NoContract(address account);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to execute an 1155 batch\r\n     *      transfer using calldata not produced by default ABI encoding or with\r\n     *      different lengths for ids and amounts arrays.\r\n     */\r\n    error Invalid1155BatchTransferEncoding();\r\n}\r\n"
    },
    "contracts/conduit/lib/ConduitConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\n// error ChannelClosed(address channel)\r\nuint256 constant ChannelClosed_error_signature = (\r\n    0x93daadf200000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant ChannelClosed_error_ptr = 0x00;\r\nuint256 constant ChannelClosed_channel_ptr = 0x4;\r\nuint256 constant ChannelClosed_error_length = 0x24;\r\n\r\n// For the mapping:\r\n// mapping(address => bool) channels\r\n// The position in storage for a particular account is:\r\n// keccak256(abi.encode(account, channels.slot))\r\nuint256 constant ChannelKey_channel_ptr = 0x00;\r\nuint256 constant ChannelKey_slot_ptr = 0x20;\r\nuint256 constant ChannelKey_length = 0x40;\r\n"
    },
    "contracts/lib/Executor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n\r\nimport { ConduitInterface } from \"../interfaces/ConduitInterface.sol\";\r\n\r\nimport { ConduitItemType } from \"../conduit/lib/ConduitEnums.sol\";\r\n\r\nimport { ItemType } from \"./ConsiderationEnums.sol\";\r\n\r\nimport { ReceivedItem } from \"./ConsiderationStructs.sol\";\r\n\r\nimport { Verifiers } from \"./Verifiers.sol\";\r\n\r\nimport { TokenTransferrer } from \"./TokenTransferrer.sol\";\r\n\r\nimport \"./ConsiderationConstants.sol\";\r\n\r\n/**\r\n * @title Executor\r\n * @author 0age\r\n * @notice Executor contains functions related to processing executions (i.e.\r\n *         transferring items, either directly or via conduits).\r\n */\r\ncontract Executor is Verifiers, TokenTransferrer {\r\n    /**\r\n     * @dev Derive and set hashes, reference chainId, and associated domain\r\n     *      separator during deployment.\r\n     *\r\n     * @param conduitController A contract that deploys conduits, or proxies\r\n     *                          that may optionally be used to transfer approved\r\n     *                          ERC20/721/1155 tokens.\r\n     */\r\n    constructor(address conduitController) Verifiers(conduitController) {}\r\n\r\n    /**\r\n     * @dev Internal function to transfer a given item, either directly or via\r\n     *      a corresponding conduit.\r\n     *\r\n     * @param item        The item to transfer, including an amount and a\r\n     *                    recipient.\r\n     * @param from        The account supplying the item.\r\n     * @param conduitKey  A bytes32 value indicating what corresponding conduit,\r\n     *                    if any, to source token approvals from. The zero hash\r\n     *                    signifies that no conduit should be used, with direct\r\n     *                    approvals set on this contract.\r\n     * @param accumulator An open-ended array that collects transfers to execute\r\n     *                    against a given conduit in a single call.\r\n     */\r\n    function _transfer(\r\n        ReceivedItem memory item,\r\n        address from,\r\n        bytes32 conduitKey,\r\n        bytes memory accumulator\r\n    ) internal {\r\n        // If the item type indicates Ether or a native token...\r\n        if (item.itemType == ItemType.NATIVE) {\r\n            // Ensure neither the token nor the identifier parameters are set.\r\n            if ((uint160(item.token) | item.identifier) != 0) {\r\n                revert UnusedItemParameters();\r\n            }\r\n\r\n            // transfer the native tokens to the recipient.\r\n            _transferEth(item.recipient, item.amount);\r\n        } else if (item.itemType == ItemType.ERC20) {\r\n            // Ensure that no identifier is supplied.\r\n            if (item.identifier != 0) {\r\n                revert UnusedItemParameters();\r\n            }\r\n\r\n            // Transfer ERC20 tokens from the source to the recipient.\r\n            _transferERC20(\r\n                item.token,\r\n                from,\r\n                item.recipient,\r\n                item.amount,\r\n                conduitKey,\r\n                accumulator\r\n            );\r\n        } else if (item.itemType == ItemType.ERC721) {\r\n            // Transfer ERC721 token from the source to the recipient.\r\n            _transferERC721(\r\n                item.token,\r\n                from,\r\n                item.recipient,\r\n                item.identifier,\r\n                item.amount,\r\n                conduitKey,\r\n                accumulator\r\n            );\r\n        } else {\r\n            // Transfer ERC1155 token from the source to the recipient.\r\n            _transferERC1155(\r\n                item.token,\r\n                from,\r\n                item.recipient,\r\n                item.identifier,\r\n                item.amount,\r\n                conduitKey,\r\n                accumulator\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer an individual ERC721 or ERC1155 item\r\n     *      from a given originator to a given recipient. The accumulator will\r\n     *      be bypassed, meaning that this function should be utilized in cases\r\n     *      where multiple item transfers can be accumulated into a single\r\n     *      conduit call. Sufficient approvals must be set, either on the\r\n     *      respective conduit or on this contract itself.\r\n     *\r\n     * @param itemType   The type of item to transfer, either ERC721 or ERC1155.\r\n     * @param token      The token to transfer.\r\n     * @param from       The originator of the transfer.\r\n     * @param to         The recipient of the transfer.\r\n     * @param identifier The tokenId to transfer.\r\n     * @param amount     The amount to transfer.\r\n     * @param conduitKey A bytes32 value indicating what corresponding conduit,\r\n     *                   if any, to source token approvals from. The zero hash\r\n     *                   signifies that no conduit should be used, with direct\r\n     *                   approvals set on this contract.\r\n     */\r\n    function _transferIndividual721Or1155Item(\r\n        ItemType itemType,\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 identifier,\r\n        uint256 amount,\r\n        bytes32 conduitKey\r\n    ) internal {\r\n        // Determine if the transfer is to be performed via a conduit.\r\n        if (conduitKey != bytes32(0)) {\r\n            // Use free memory pointer as calldata offset for the conduit call.\r\n            uint256 callDataOffset;\r\n\r\n            // Utilize assembly to place each argument in free memory.\r\n            assembly {\r\n                // Retrieve the free memory pointer and use it as the offset.\r\n                callDataOffset := mload(FreeMemoryPointerSlot)\r\n\r\n                // Write ConduitInterface.execute.selector to memory.\r\n                mstore(callDataOffset, Conduit_execute_signature)\r\n\r\n                // Write the offset to the ConduitTransfer array in memory.\r\n                mstore(\r\n                    add(\r\n                        callDataOffset,\r\n                        Conduit_execute_ConduitTransfer_offset_ptr\r\n                    ),\r\n                    Conduit_execute_ConduitTransfer_ptr\r\n                )\r\n\r\n                // Write the length of the ConduitTransfer array to memory.\r\n                mstore(\r\n                    add(\r\n                        callDataOffset,\r\n                        Conduit_execute_ConduitTransfer_length_ptr\r\n                    ),\r\n                    Conduit_execute_ConduitTransfer_length\r\n                )\r\n\r\n                // Write the item type to memory.\r\n                mstore(\r\n                    add(callDataOffset, Conduit_execute_transferItemType_ptr),\r\n                    itemType\r\n                )\r\n\r\n                // Write the token to memory.\r\n                mstore(\r\n                    add(callDataOffset, Conduit_execute_transferToken_ptr),\r\n                    token\r\n                )\r\n\r\n                // Write the transfer source to memory.\r\n                mstore(\r\n                    add(callDataOffset, Conduit_execute_transferFrom_ptr),\r\n                    from\r\n                )\r\n\r\n                // Write the transfer recipient to memory.\r\n                mstore(add(callDataOffset, Conduit_execute_transferTo_ptr), to)\r\n\r\n                // Write the token identifier to memory.\r\n                mstore(\r\n                    add(callDataOffset, Conduit_execute_transferIdentifier_ptr),\r\n                    identifier\r\n                )\r\n\r\n                // Write the transfer amount to memory.\r\n                mstore(\r\n                    add(callDataOffset, Conduit_execute_transferAmount_ptr),\r\n                    amount\r\n                )\r\n            }\r\n\r\n            // Perform the call to the conduit.\r\n            _callConduitUsingOffsets(\r\n                conduitKey,\r\n                callDataOffset,\r\n                OneConduitExecute_size\r\n            );\r\n        } else {\r\n            // Otherwise, determine whether it is an ERC721 or ERC1155 item.\r\n            if (itemType == ItemType.ERC721) {\r\n                // Ensure that exactly one 721 item is being transferred.\r\n                if (amount != 1) {\r\n                    revert InvalidERC721TransferAmount();\r\n                }\r\n\r\n                // Perform transfer via the token contract directly.\r\n                _performERC721Transfer(token, from, to, identifier);\r\n            } else {\r\n                // Perform transfer via the token contract directly.\r\n                _performERC1155Transfer(token, from, to, identifier, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer Ether or other native tokens to a\r\n     *      given recipient.\r\n     *\r\n     * @param to     The recipient of the transfer.\r\n     * @param amount The amount to transfer.\r\n     */\r\n    function _transferEth(address payable to, uint256 amount) internal {\r\n        // Ensure that the supplied amount is non-zero.\r\n        _assertNonZeroAmount(amount);\r\n\r\n        // Declare a variable indicating whether the call was successful or not.\r\n        bool success;\r\n\r\n        assembly {\r\n            // Transfer the ETH and store if it succeeded or not.\r\n            success := call(gas(), to, amount, 0, 0, 0, 0)\r\n        }\r\n\r\n        // If the call fails...\r\n        if (!success) {\r\n            // Revert and pass the revert reason along if one was returned.\r\n            _revertWithReasonIfOneIsReturned();\r\n\r\n            // Otherwise, revert with a generic error message.\r\n            revert EtherTransferGenericFailure(to, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer ERC20 tokens from a given originator\r\n     *      to a given recipient using a given conduit if applicable. Sufficient\r\n     *      approvals must be set on this contract or on a respective conduit.\r\n     *\r\n     * @param token       The ERC20 token to transfer.\r\n     * @param from        The originator of the transfer.\r\n     * @param to          The recipient of the transfer.\r\n     * @param amount      The amount to transfer.\r\n     * @param conduitKey  A bytes32 value indicating what corresponding conduit,\r\n     *                    if any, to source token approvals from. The zero hash\r\n     *                    signifies that no conduit should be used, with direct\r\n     *                    approvals set on this contract.\r\n     * @param accumulator An open-ended array that collects transfers to execute\r\n     *                    against a given conduit in a single call.\r\n     */\r\n    function _transferERC20(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes32 conduitKey,\r\n        bytes memory accumulator\r\n    ) internal {\r\n        // Ensure that the supplied amount is non-zero.\r\n        _assertNonZeroAmount(amount);\r\n\r\n        // Trigger accumulated transfers if the conduits differ.\r\n        _triggerIfArmedAndNotAccumulatable(accumulator, conduitKey);\r\n\r\n        // If no conduit has been specified...\r\n        if (conduitKey == bytes32(0)) {\r\n            // Perform the token transfer directly.\r\n            _performERC20Transfer(token, from, to, amount);\r\n        } else {\r\n            // Insert the call to the conduit into the accumulator.\r\n            _insert(\r\n                conduitKey,\r\n                accumulator,\r\n                ConduitItemType.ERC20,\r\n                token,\r\n                from,\r\n                to,\r\n                uint256(0),\r\n                amount\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer a single ERC721 token from a given\r\n     *      originator to a given recipient. Sufficient approvals must be set,\r\n     *      either on the respective conduit or on this contract itself.\r\n     *\r\n     * @param token       The ERC721 token to transfer.\r\n     * @param from        The originator of the transfer.\r\n     * @param to          The recipient of the transfer.\r\n     * @param identifier  The tokenId to transfer (must be 1 for ERC721).\r\n     * @param amount      The amount to transfer.\r\n     * @param conduitKey  A bytes32 value indicating what corresponding conduit,\r\n     *                    if any, to source token approvals from. The zero hash\r\n     *                    signifies that no conduit should be used, with direct\r\n     *                    approvals set on this contract.\r\n     * @param accumulator An open-ended array that collects transfers to execute\r\n     *                    against a given conduit in a single call.\r\n     */\r\n    function _transferERC721(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 identifier,\r\n        uint256 amount,\r\n        bytes32 conduitKey,\r\n        bytes memory accumulator\r\n    ) internal {\r\n        // Trigger accumulated transfers if the conduits differ.\r\n        _triggerIfArmedAndNotAccumulatable(accumulator, conduitKey);\r\n\r\n        // If no conduit has been specified...\r\n        if (conduitKey == bytes32(0)) {\r\n            // Ensure that exactly one 721 item is being transferred.\r\n            if (amount != 1) {\r\n                revert InvalidERC721TransferAmount();\r\n            }\r\n\r\n            // Perform transfer via the token contract directly.\r\n            _performERC721Transfer(token, from, to, identifier);\r\n        } else {\r\n            // Insert the call to the conduit into the accumulator.\r\n            _insert(\r\n                conduitKey,\r\n                accumulator,\r\n                ConduitItemType.ERC721,\r\n                token,\r\n                from,\r\n                to,\r\n                identifier,\r\n                amount\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer ERC1155 tokens from a given originator\r\n     *      to a given recipient. Sufficient approvals must be set, either on\r\n     *      the respective conduit or on this contract itself.\r\n     *\r\n     * @param token       The ERC1155 token to transfer.\r\n     * @param from        The originator of the transfer.\r\n     * @param to          The recipient of the transfer.\r\n     * @param identifier  The id to transfer.\r\n     * @param amount      The amount to transfer.\r\n     * @param conduitKey  A bytes32 value indicating what corresponding conduit,\r\n     *                    if any, to source token approvals from. The zero hash\r\n     *                    signifies that no conduit should be used, with direct\r\n     *                    approvals set on this contract.\r\n     * @param accumulator An open-ended array that collects transfers to execute\r\n     *                    against a given conduit in a single call.\r\n     */\r\n    function _transferERC1155(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 identifier,\r\n        uint256 amount,\r\n        bytes32 conduitKey,\r\n        bytes memory accumulator\r\n    ) internal {\r\n        // Ensure that the supplied amount is non-zero.\r\n        _assertNonZeroAmount(amount);\r\n\r\n        // Trigger accumulated transfers if the conduits differ.\r\n        _triggerIfArmedAndNotAccumulatable(accumulator, conduitKey);\r\n\r\n        // If no conduit has been specified...\r\n        if (conduitKey == bytes32(0)) {\r\n            // Perform transfer via the token contract directly.\r\n            _performERC1155Transfer(token, from, to, identifier, amount);\r\n        } else {\r\n            // Insert the call to the conduit into the accumulator.\r\n            _insert(\r\n                conduitKey,\r\n                accumulator,\r\n                ConduitItemType.ERC1155,\r\n                token,\r\n                from,\r\n                to,\r\n                identifier,\r\n                amount\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to trigger a call to the conduit currently held by\r\n     *      the accumulator if the accumulator contains item transfers (i.e. it\r\n     *      is \"armed\") and the supplied conduit key does not match the key held\r\n     *      by the accumulator.\r\n     *\r\n     * @param accumulator An open-ended array that collects transfers to execute\r\n     *                    against a given conduit in a single call.\r\n     * @param conduitKey  A bytes32 value indicating what corresponding conduit,\r\n     *                    if any, to source token approvals from. The zero hash\r\n     *                    signifies that no conduit should be used, with direct\r\n     *                    approvals set on this contract.\r\n     */\r\n    function _triggerIfArmedAndNotAccumulatable(\r\n        bytes memory accumulator,\r\n        bytes32 conduitKey\r\n    ) internal {\r\n        // Retrieve the current conduit key from the accumulator.\r\n        bytes32 accumulatorConduitKey = _getAccumulatorConduitKey(accumulator);\r\n\r\n        // Perform conduit call if the set key does not match the supplied key.\r\n        if (accumulatorConduitKey != conduitKey) {\r\n            _triggerIfArmed(accumulator);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to trigger a call to the conduit currently held by\r\n     *      the accumulator if the accumulator contains item transfers (i.e. it\r\n     *      is \"armed\").\r\n     *\r\n     * @param accumulator An open-ended array that collects transfers to execute\r\n     *                    against a given conduit in a single call.\r\n     */\r\n    function _triggerIfArmed(bytes memory accumulator) internal {\r\n        // Exit if the accumulator is not \"armed\".\r\n        if (accumulator.length != AccumulatorArmed) {\r\n            return;\r\n        }\r\n\r\n        // Retrieve the current conduit key from the accumulator.\r\n        bytes32 accumulatorConduitKey = _getAccumulatorConduitKey(accumulator);\r\n\r\n        // Perform conduit call.\r\n        _trigger(accumulatorConduitKey, accumulator);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to trigger a call to the conduit corresponding to\r\n     *      a given conduit key, supplying all accumulated item transfers. The\r\n     *      accumulator will be \"disarmed\" and reset in the process.\r\n     *\r\n     * @param conduitKey  A bytes32 value indicating what corresponding conduit,\r\n     *                    if any, to source token approvals from. The zero hash\r\n     *                    signifies that no conduit should be used, with direct\r\n     *                    approvals set on this contract.\r\n     * @param accumulator An open-ended array that collects transfers to execute\r\n     *                    against a given conduit in a single call.\r\n     */\r\n    function _trigger(bytes32 conduitKey, bytes memory accumulator) internal {\r\n        // Declare variables for offset in memory & size of calldata to conduit.\r\n        uint256 callDataOffset;\r\n        uint256 callDataSize;\r\n\r\n        // Call the conduit with all the accumulated transfers.\r\n        assembly {\r\n            // Call begins at third word; the first is length or \"armed\" status,\r\n            // and the second is the current conduit key.\r\n            callDataOffset := add(accumulator, TwoWords)\r\n\r\n            // 68 + items * 192\r\n            callDataSize := add(\r\n                Accumulator_array_offset_ptr,\r\n                mul(\r\n                    mload(add(accumulator, Accumulator_array_length_ptr)),\r\n                    Conduit_transferItem_size\r\n                )\r\n            )\r\n        }\r\n\r\n        // Call conduit derived from conduit key & supply accumulated transfers.\r\n        _callConduitUsingOffsets(conduitKey, callDataOffset, callDataSize);\r\n\r\n        // Reset accumulator length to signal that it is now \"disarmed\".\r\n        assembly {\r\n            mstore(accumulator, AccumulatorDisarmed)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to perform a call to the conduit corresponding to\r\n     *      a given conduit key based on the offset and size of the calldata in\r\n     *      question in memory.\r\n     *\r\n     * @param conduitKey     A bytes32 value indicating what corresponding\r\n     *                       conduit, if any, to source token approvals from.\r\n     *                       The zero hash signifies that no conduit should be\r\n     *                       used, with direct approvals set on this contract.\r\n     * @param callDataOffset The memory pointer where calldata is contained.\r\n     * @param callDataSize   The size of calldata in memory.\r\n     */\r\n    function _callConduitUsingOffsets(\r\n        bytes32 conduitKey,\r\n        uint256 callDataOffset,\r\n        uint256 callDataSize\r\n    ) internal {\r\n        // Derive the address of the conduit using the conduit key.\r\n        address conduit = _deriveConduit(conduitKey);\r\n\r\n        bool success;\r\n        bytes4 result;\r\n\r\n        // call the conduit.\r\n        assembly {\r\n            // Ensure first word of scratch space is empty.\r\n            mstore(0, 0)\r\n\r\n            // Perform call, placing first word of return data in scratch space.\r\n            success := call(\r\n                gas(),\r\n                conduit,\r\n                0,\r\n                callDataOffset,\r\n                callDataSize,\r\n                0,\r\n                OneWord\r\n            )\r\n\r\n            // Take value from scratch space and place it on the stack.\r\n            result := mload(0)\r\n        }\r\n\r\n        // If the call failed...\r\n        if (!success) {\r\n            // Pass along whatever revert reason was given by the conduit.\r\n            _revertWithReasonIfOneIsReturned();\r\n\r\n            // Otherwise, revert with a generic error.\r\n            revert InvalidCallToConduit(conduit);\r\n        }\r\n\r\n        // Ensure result was extracted and matches EIP-1271 magic value.\r\n        if (result != ConduitInterface.execute.selector) {\r\n            revert InvalidConduit(conduitKey, conduit);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to retrieve the current conduit key set for\r\n     *      the accumulator.\r\n     *\r\n     * @param accumulator An open-ended array that collects transfers to execute\r\n     *                    against a given conduit in a single call.\r\n     *\r\n     * @return accumulatorConduitKey The conduit key currently set for the\r\n     *                               accumulator.\r\n     */\r\n    function _getAccumulatorConduitKey(bytes memory accumulator)\r\n        internal\r\n        pure\r\n        returns (bytes32 accumulatorConduitKey)\r\n    {\r\n        // Retrieve the current conduit key from the accumulator.\r\n        assembly {\r\n            accumulatorConduitKey := mload(\r\n                add(accumulator, Accumulator_conduitKey_ptr)\r\n            )\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to place an item transfer into an accumulator\r\n     *      that collects a series of transfers to execute against a given\r\n     *      conduit in a single call.\r\n     *\r\n     * @param conduitKey  A bytes32 value indicating what corresponding conduit,\r\n     *                    if any, to source token approvals from. The zero hash\r\n     *                    signifies that no conduit should be used, with direct\r\n     *                    approvals set on this contract.\r\n     * @param accumulator An open-ended array that collects transfers to execute\r\n     *                    against a given conduit in a single call.\r\n     * @param itemType    The type of the item to transfer.\r\n     * @param token       The token to transfer.\r\n     * @param from        The originator of the transfer.\r\n     * @param to          The recipient of the transfer.\r\n     * @param identifier  The tokenId to transfer.\r\n     * @param amount      The amount to transfer.\r\n     */\r\n    function _insert(\r\n        bytes32 conduitKey,\r\n        bytes memory accumulator,\r\n        ConduitItemType itemType,\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 identifier,\r\n        uint256 amount\r\n    ) internal pure {\r\n        uint256 elements;\r\n        // \"Arm\" and prime accumulator if it's not already armed. The sentinel\r\n        // value is held in the length of the accumulator array.\r\n        if (accumulator.length == AccumulatorDisarmed) {\r\n            elements = 1;\r\n            bytes4 selector = ConduitInterface.execute.selector;\r\n            assembly {\r\n                mstore(accumulator, AccumulatorArmed) // \"arm\" the accumulator.\r\n                mstore(add(accumulator, Accumulator_conduitKey_ptr), conduitKey)\r\n                mstore(add(accumulator, Accumulator_selector_ptr), selector)\r\n                mstore(\r\n                    add(accumulator, Accumulator_array_offset_ptr),\r\n                    Accumulator_array_offset\r\n                )\r\n                mstore(add(accumulator, Accumulator_array_length_ptr), elements)\r\n            }\r\n        } else {\r\n            // Otherwise, increase the number of elements by one.\r\n            assembly {\r\n                elements := add(\r\n                    mload(add(accumulator, Accumulator_array_length_ptr)),\r\n                    1\r\n                )\r\n                mstore(add(accumulator, Accumulator_array_length_ptr), elements)\r\n            }\r\n        }\r\n\r\n        // Insert the item.\r\n        assembly {\r\n            let itemPointer := sub(\r\n                add(accumulator, mul(elements, Conduit_transferItem_size)),\r\n                Accumulator_itemSizeOffsetDifference\r\n            )\r\n            mstore(itemPointer, itemType)\r\n            mstore(add(itemPointer, Conduit_transferItem_token_ptr), token)\r\n            mstore(add(itemPointer, Conduit_transferItem_from_ptr), from)\r\n            mstore(add(itemPointer, Conduit_transferItem_to_ptr), to)\r\n            mstore(\r\n                add(itemPointer, Conduit_transferItem_identifier_ptr),\r\n                identifier\r\n            )\r\n            mstore(add(itemPointer, Conduit_transferItem_amount_ptr), amount)\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/lib/ConsiderationEnums.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\n// prettier-ignore\r\nenum OrderType {\r\n    // 0: no partial fills, anyone can execute\r\n    FULL_OPEN,\r\n\r\n    // 1: partial fills supported, anyone can execute\r\n    PARTIAL_OPEN,\r\n\r\n    // 2: no partial fills, only offerer or zone can execute\r\n    FULL_RESTRICTED,\r\n\r\n    // 3: partial fills supported, only offerer or zone can execute\r\n    PARTIAL_RESTRICTED\r\n}\r\n\r\n// prettier-ignore\r\nenum BasicOrderType {\r\n    // 0: no partial fills, anyone can execute\r\n    ETH_TO_ERC721_FULL_OPEN,\r\n\r\n    // 1: partial fills supported, anyone can execute\r\n    ETH_TO_ERC721_PARTIAL_OPEN,\r\n\r\n    // 2: no partial fills, only offerer or zone can execute\r\n    ETH_TO_ERC721_FULL_RESTRICTED,\r\n\r\n    // 3: partial fills supported, only offerer or zone can execute\r\n    ETH_TO_ERC721_PARTIAL_RESTRICTED,\r\n\r\n    // 4: no partial fills, anyone can execute\r\n    ETH_TO_ERC1155_FULL_OPEN,\r\n\r\n    // 5: partial fills supported, anyone can execute\r\n    ETH_TO_ERC1155_PARTIAL_OPEN,\r\n\r\n    // 6: no partial fills, only offerer or zone can execute\r\n    ETH_TO_ERC1155_FULL_RESTRICTED,\r\n\r\n    // 7: partial fills supported, only offerer or zone can execute\r\n    ETH_TO_ERC1155_PARTIAL_RESTRICTED,\r\n\r\n    // 8: no partial fills, anyone can execute\r\n    ERC20_TO_ERC721_FULL_OPEN,\r\n\r\n    // 9: partial fills supported, anyone can execute\r\n    ERC20_TO_ERC721_PARTIAL_OPEN,\r\n\r\n    // 10: no partial fills, only offerer or zone can execute\r\n    ERC20_TO_ERC721_FULL_RESTRICTED,\r\n\r\n    // 11: partial fills supported, only offerer or zone can execute\r\n    ERC20_TO_ERC721_PARTIAL_RESTRICTED,\r\n\r\n    // 12: no partial fills, anyone can execute\r\n    ERC20_TO_ERC1155_FULL_OPEN,\r\n\r\n    // 13: partial fills supported, anyone can execute\r\n    ERC20_TO_ERC1155_PARTIAL_OPEN,\r\n\r\n    // 14: no partial fills, only offerer or zone can execute\r\n    ERC20_TO_ERC1155_FULL_RESTRICTED,\r\n\r\n    // 15: partial fills supported, only offerer or zone can execute\r\n    ERC20_TO_ERC1155_PARTIAL_RESTRICTED,\r\n\r\n    // 16: no partial fills, anyone can execute\r\n    ERC721_TO_ERC20_FULL_OPEN,\r\n\r\n    // 17: partial fills supported, anyone can execute\r\n    ERC721_TO_ERC20_PARTIAL_OPEN,\r\n\r\n    // 18: no partial fills, only offerer or zone can execute\r\n    ERC721_TO_ERC20_FULL_RESTRICTED,\r\n\r\n    // 19: partial fills supported, only offerer or zone can execute\r\n    ERC721_TO_ERC20_PARTIAL_RESTRICTED,\r\n\r\n    // 20: no partial fills, anyone can execute\r\n    ERC1155_TO_ERC20_FULL_OPEN,\r\n\r\n    // 21: partial fills supported, anyone can execute\r\n    ERC1155_TO_ERC20_PARTIAL_OPEN,\r\n\r\n    // 22: no partial fills, only offerer or zone can execute\r\n    ERC1155_TO_ERC20_FULL_RESTRICTED,\r\n\r\n    // 23: partial fills supported, only offerer or zone can execute\r\n    ERC1155_TO_ERC20_PARTIAL_RESTRICTED\r\n}\r\n\r\n// prettier-ignore\r\nenum BasicOrderRouteType {\r\n    // 0: provide Ether (or other native token) to receive offered ERC721 item.\r\n    ETH_TO_ERC721,\r\n\r\n    // 1: provide Ether (or other native token) to receive offered ERC1155 item.\r\n    ETH_TO_ERC1155,\r\n\r\n    // 2: provide ERC20 item to receive offered ERC721 item.\r\n    ERC20_TO_ERC721,\r\n\r\n    // 3: provide ERC20 item to receive offered ERC1155 item.\r\n    ERC20_TO_ERC1155,\r\n\r\n    // 4: provide ERC721 item to receive offered ERC20 item.\r\n    ERC721_TO_ERC20,\r\n\r\n    // 5: provide ERC1155 item to receive offered ERC20 item.\r\n    ERC1155_TO_ERC20\r\n}\r\n\r\n// prettier-ignore\r\nenum ItemType {\r\n    // 0: ETH on mainnet, MATIC on polygon, etc.\r\n    NATIVE,\r\n\r\n    // 1: ERC20 items (ERC777 and ERC20 analogues could also technically work)\r\n    ERC20,\r\n\r\n    // 2: ERC721 items\r\n    ERC721,\r\n\r\n    // 3: ERC1155 items\r\n    ERC1155,\r\n\r\n    // 4: ERC721 items where a number of tokenIds are supported\r\n    ERC721_WITH_CRITERIA,\r\n\r\n    // 5: ERC1155 items where a number of ids are supported\r\n    ERC1155_WITH_CRITERIA\r\n}\r\n\r\n// prettier-ignore\r\nenum Side {\r\n    // 0: Items that can be spent\r\n    OFFER,\r\n\r\n    // 1: Items that must be received\r\n    CONSIDERATION\r\n}\r\n"
    },
    "contracts/lib/ConsiderationStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\n// prettier-ignore\r\nimport {\r\n    OrderType,\r\n    BasicOrderType,\r\n    ItemType,\r\n    Side\r\n} from \"./ConsiderationEnums.sol\";\r\n\r\n/**\r\n * @dev An order contains eleven components: an offerer, a zone (or account that\r\n *      can cancel the order or restrict who can fulfill the order depending on\r\n *      the type), the order type (specifying partial fill support as well as\r\n *      restricted order status), the start and end time, a hash that will be\r\n *      provided to the zone when validating restricted orders, a salt, a key\r\n *      corresponding to a given conduit, a counter, and an arbitrary number of\r\n *      offer items that can be spent along with consideration items that must\r\n *      be received by their respective recipient.\r\n */\r\nstruct OrderComponents {\r\n    address offerer;\r\n    address zone;\r\n    OfferItem[] offer;\r\n    ConsiderationItem[] consideration;\r\n    OrderType orderType;\r\n    uint256 startTime;\r\n    uint256 endTime;\r\n    bytes32 zoneHash;\r\n    uint256 salt;\r\n    bytes32 conduitKey;\r\n    uint256 counter;\r\n}\r\n\r\n/**\r\n * @dev An offer item has five components: an item type (ETH or other native\r\n *      tokens, ERC20, ERC721, and ERC1155, as well as criteria-based ERC721 and\r\n *      ERC1155), a token address, a dual-purpose \"identifierOrCriteria\"\r\n *      component that will either represent a tokenId or a merkle root\r\n *      depending on the item type, and a start and end amount that support\r\n *      increasing or decreasing amounts over the duration of the respective\r\n *      order.\r\n */\r\nstruct OfferItem {\r\n    ItemType itemType;\r\n    address token;\r\n    uint256 identifierOrCriteria;\r\n    uint256 startAmount;\r\n    uint256 endAmount;\r\n}\r\n\r\n/**\r\n * @dev A consideration item has the same five components as an offer item and\r\n *      an additional sixth component designating the required recipient of the\r\n *      item.\r\n */\r\nstruct ConsiderationItem {\r\n    ItemType itemType;\r\n    address token;\r\n    uint256 identifierOrCriteria;\r\n    uint256 startAmount;\r\n    uint256 endAmount;\r\n    address payable recipient;\r\n}\r\n\r\n/**\r\n * @dev A spent item is translated from a utilized offer item and has four\r\n *      components: an item type (ETH or other native tokens, ERC20, ERC721, and\r\n *      ERC1155), a token address, a tokenId, and an amount.\r\n */\r\nstruct SpentItem {\r\n    ItemType itemType;\r\n    address token;\r\n    uint256 identifier;\r\n    uint256 amount;\r\n}\r\n\r\n/**\r\n * @dev A received item is translated from a utilized consideration item and has\r\n *      the same four components as a spent item, as well as an additional fifth\r\n *      component designating the required recipient of the item.\r\n */\r\nstruct ReceivedItem {\r\n    ItemType itemType;\r\n    address token;\r\n    uint256 identifier;\r\n    uint256 amount;\r\n    address payable recipient;\r\n}\r\n\r\n/**\r\n * @dev For basic orders involving ETH / native / ERC20 <=> ERC721 / ERC1155\r\n *      matching, a group of six functions may be called that only requires a\r\n *      subset of the usual order arguments. Note the use of a \"basicOrderType\"\r\n *      enum; this represents both the usual order type as well as the \"route\"\r\n *      of the basic order (a simple derivation function for the basic order\r\n *      type is `basicOrderType = orderType + (4 * basicOrderRoute)`.)\r\n */\r\nstruct BasicOrderParameters {\r\n    // calldata offset\r\n    address considerationToken; // 0x24\r\n    uint256 considerationIdentifier; // 0x44\r\n    uint256 considerationAmount; // 0x64\r\n    address payable offerer; // 0x84\r\n    address zone; // 0xa4\r\n    address offerToken; // 0xc4\r\n    uint256 offerIdentifier; // 0xe4\r\n    uint256 offerAmount; // 0x104\r\n    BasicOrderType basicOrderType; // 0x124\r\n    uint256 startTime; // 0x144\r\n    uint256 endTime; // 0x164\r\n    bytes32 zoneHash; // 0x184\r\n    uint256 salt; // 0x1a4\r\n    bytes32 offererConduitKey; // 0x1c4\r\n    bytes32 fulfillerConduitKey; // 0x1e4\r\n    uint256 totalOriginalAdditionalRecipients; // 0x204\r\n    AdditionalRecipient[] additionalRecipients; // 0x224\r\n    bytes signature; // 0x244\r\n    // Total length, excluding dynamic array data: 0x264 (580)\r\n}\r\n\r\n/**\r\n * @dev Basic orders can supply any number of additional recipients, with the\r\n *      implied assumption that they are supplied from the offered ETH (or other\r\n *      native token) or ERC20 token for the order.\r\n */\r\nstruct AdditionalRecipient {\r\n    uint256 amount;\r\n    address payable recipient;\r\n}\r\n\r\n/**\r\n * @dev The full set of order components, with the exception of the counter,\r\n *      must be supplied when fulfilling more sophisticated orders or groups of\r\n *      orders. The total number of original consideration items must also be\r\n *      supplied, as the caller may specify additional consideration items.\r\n */\r\nstruct OrderParameters {\r\n    address offerer; // 0x00\r\n    address zone; // 0x20\r\n    OfferItem[] offer; // 0x40\r\n    ConsiderationItem[] consideration; // 0x60\r\n    OrderType orderType; // 0x80\r\n    uint256 startTime; // 0xa0\r\n    uint256 endTime; // 0xc0\r\n    bytes32 zoneHash; // 0xe0\r\n    uint256 salt; // 0x100\r\n    bytes32 conduitKey; // 0x120\r\n    uint256 totalOriginalConsiderationItems; // 0x140\r\n    // offer.length                          // 0x160\r\n}\r\n\r\n/**\r\n * @dev Orders require a signature in addition to the other order parameters.\r\n */\r\nstruct Order {\r\n    OrderParameters parameters;\r\n    bytes signature;\r\n}\r\n\r\n/**\r\n * @dev Advanced orders include a numerator (i.e. a fraction to attempt to fill)\r\n *      and a denominator (the total size of the order) in addition to the\r\n *      signature and other order parameters. It also supports an optional field\r\n *      for supplying extra data; this data will be included in a staticcall to\r\n *      `isValidOrderIncludingExtraData` on the zone for the order if the order\r\n *      type is restricted and the offerer or zone are not the caller.\r\n */\r\nstruct AdvancedOrder {\r\n    OrderParameters parameters;\r\n    uint120 numerator;\r\n    uint120 denominator;\r\n    bytes signature;\r\n    bytes extraData;\r\n}\r\n\r\n/**\r\n * @dev Orders can be validated (either explicitly via `validate`, or as a\r\n *      consequence of a full or partial fill), specifically cancelled (they can\r\n *      also be cancelled in bulk via incrementing a per-zone counter), and\r\n *      partially or fully filled (with the fraction filled represented by a\r\n *      numerator and denominator).\r\n */\r\nstruct OrderStatus {\r\n    bool isValidated;\r\n    bool isCancelled;\r\n    uint120 numerator;\r\n    uint120 denominator;\r\n}\r\n\r\n/**\r\n * @dev A criteria resolver specifies an order, side (offer vs. consideration),\r\n *      and item index. It then provides a chosen identifier (i.e. tokenId)\r\n *      alongside a merkle proof demonstrating the identifier meets the required\r\n *      criteria.\r\n */\r\nstruct CriteriaResolver {\r\n    uint256 orderIndex;\r\n    Side side;\r\n    uint256 index;\r\n    uint256 identifier;\r\n    bytes32[] criteriaProof;\r\n}\r\n\r\n/**\r\n * @dev A fulfillment is applied to a group of orders. It decrements a series of\r\n *      offer and consideration items, then generates a single execution\r\n *      element. A given fulfillment can be applied to as many offer and\r\n *      consideration items as desired, but must contain at least one offer and\r\n *      at least one consideration that match. The fulfillment must also remain\r\n *      consistent on all key parameters across all offer items (same offerer,\r\n *      token, type, tokenId, and conduit preference) as well as across all\r\n *      consideration items (token, type, tokenId, and recipient).\r\n */\r\nstruct Fulfillment {\r\n    FulfillmentComponent[] offerComponents;\r\n    FulfillmentComponent[] considerationComponents;\r\n}\r\n\r\n/**\r\n * @dev Each fulfillment component contains one index referencing a specific\r\n *      order and another referencing a specific offer or consideration item.\r\n */\r\nstruct FulfillmentComponent {\r\n    uint256 orderIndex;\r\n    uint256 itemIndex;\r\n}\r\n\r\n/**\r\n * @dev An execution is triggered once all consideration items have been zeroed\r\n *      out. It sends the item in question from the offerer to the item's\r\n *      recipient, optionally sourcing approvals from either this contract\r\n *      directly or from the offerer's chosen conduit if one is specified. An\r\n *      execution is not provided as an argument, but rather is derived via\r\n *      orders, criteria resolvers, and fulfillments (where the total number of\r\n *      executions will be less than or equal to the total number of indicated\r\n *      fulfillments) and returned as part of `matchOrders`.\r\n */\r\nstruct Execution {\r\n    ReceivedItem item;\r\n    address offerer;\r\n    bytes32 conduitKey;\r\n}\r\n"
    },
    "contracts/lib/Verifiers.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n\r\nimport { OrderStatus } from \"./ConsiderationStructs.sol\";\r\n\r\nimport { Assertions } from \"./Assertions.sol\";\r\n\r\nimport { SignatureVerification } from \"./SignatureVerification.sol\";\r\n\r\n/**\r\n * @title Verifiers\r\n * @author 0age\r\n * @notice Verifiers contains functions for performing verifications.\r\n */\r\ncontract Verifiers is Assertions, SignatureVerification {\r\n    /**\r\n     * @dev Derive and set hashes, reference chainId, and associated domain\r\n     *      separator during deployment.\r\n     *\r\n     * @param conduitController A contract that deploys conduits, or proxies\r\n     *                          that may optionally be used to transfer approved\r\n     *                          ERC20/721/1155 tokens.\r\n     */\r\n    constructor(address conduitController) Assertions(conduitController) {}\r\n\r\n    /**\r\n     * @dev Internal view function to ensure that the current time falls within\r\n     *      an order's valid timespan.\r\n     *\r\n     * @param startTime       The time at which the order becomes active.\r\n     * @param endTime         The time at which the order becomes inactive.\r\n     * @param revertOnInvalid A boolean indicating whether to revert if the\r\n     *                        order is not active.\r\n     *\r\n     * @return valid A boolean indicating whether the order is active.\r\n     */\r\n    function _verifyTime(\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        bool revertOnInvalid\r\n    ) internal view returns (bool valid) {\r\n        // Revert if order's timespan hasn't started yet or has already ended.\r\n        if (startTime > block.timestamp || endTime <= block.timestamp) {\r\n            // Only revert if revertOnInvalid has been supplied as true.\r\n            if (revertOnInvalid) {\r\n                revert InvalidTime();\r\n            }\r\n\r\n            // Return false as the order is invalid.\r\n            return false;\r\n        }\r\n\r\n        // Return true as the order time is valid.\r\n        valid = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to verify the signature of an order. An\r\n     *      ERC-1271 fallback will be attempted if either the signature length\r\n     *      is not 32 or 33 bytes or if the recovered signer does not match the\r\n     *      supplied offerer. Note that in cases where a 32 or 33 byte signature\r\n     *      is supplied, only standard ECDSA signatures that recover to a\r\n     *      non-zero address are supported.\r\n     *\r\n     * @param offerer   The offerer for the order.\r\n     * @param orderHash The order hash.\r\n     * @param signature A signature from the offerer indicating that the order\r\n     *                  has been approved.\r\n     */\r\n    function _verifySignature(\r\n        address offerer,\r\n        bytes32 orderHash,\r\n        bytes memory signature\r\n    ) internal view {\r\n        // Skip signature verification if the offerer is the caller.\r\n        if (offerer == msg.sender) {\r\n            return;\r\n        }\r\n\r\n        // Derive EIP-712 digest using the domain separator and the order hash.\r\n        bytes32 digest = _deriveEIP712Digest(_domainSeparator(), orderHash);\r\n\r\n        // Ensure that the signature for the digest is valid for the offerer.\r\n        _assertValidSignature(offerer, digest, signature);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to validate that a given order is fillable\r\n     *      and not cancelled based on the order status.\r\n     *\r\n     * @param orderHash       The order hash.\r\n     * @param orderStatus     The status of the order, including whether it has\r\n     *                        been cancelled and the fraction filled.\r\n     * @param onlyAllowUnused A boolean flag indicating whether partial fills\r\n     *                        are supported by the calling function.\r\n     * @param revertOnInvalid A boolean indicating whether to revert if the\r\n     *                        order has been cancelled or filled beyond the\r\n     *                        allowable amount.\r\n     *\r\n     * @return valid A boolean indicating whether the order is valid.\r\n     */\r\n    function _verifyOrderStatus(\r\n        bytes32 orderHash,\r\n        OrderStatus storage orderStatus,\r\n        bool onlyAllowUnused,\r\n        bool revertOnInvalid\r\n    ) internal view returns (bool valid) {\r\n        // Ensure that the order has not been cancelled.\r\n        if (orderStatus.isCancelled) {\r\n            // Only revert if revertOnInvalid has been supplied as true.\r\n            if (revertOnInvalid) {\r\n                revert OrderIsCancelled(orderHash);\r\n            }\r\n\r\n            // Return false as the order status is invalid.\r\n            return false;\r\n        }\r\n\r\n        // Read order status numerator from storage and place on stack.\r\n        uint256 orderStatusNumerator = orderStatus.numerator;\r\n\r\n        // If the order is not entirely unused...\r\n        if (orderStatusNumerator != 0) {\r\n            // ensure the order has not been partially filled when not allowed.\r\n            if (onlyAllowUnused) {\r\n                // Always revert on partial fills when onlyAllowUnused is true.\r\n                revert OrderPartiallyFilled(orderHash);\r\n            }\r\n            // Otherwise, ensure that order has not been entirely filled.\r\n            else if (orderStatusNumerator >= orderStatus.denominator) {\r\n                // Only revert if revertOnInvalid has been supplied as true.\r\n                if (revertOnInvalid) {\r\n                    revert OrderAlreadyFilled(orderHash);\r\n                }\r\n\r\n                // Return false as the order status is invalid.\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // Return true as the order status is valid.\r\n        valid = true;\r\n    }\r\n}\r\n"
    },
    "contracts/lib/ConsiderationConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\n/*\r\n * -------------------------- Disambiguation & Other Notes ---------------------\r\n *    - The term \"head\" is used as it is in the documentation for ABI encoding,\r\n *      but only in reference to dynamic types, i.e. it always refers to the\r\n *      offset or pointer to the body of a dynamic type. In calldata, the head\r\n *      is always an offset (relative to the parent object), while in memory,\r\n *      the head is always the pointer to the body. More information found here:\r\n *      https://docs.soliditylang.org/en/v0.8.14/abi-spec.html#argument-encoding\r\n *        - Note that the length of an array is separate from and precedes the\r\n *          head of the array.\r\n *\r\n *    - The term \"body\" is used in place of the term \"head\" used in the ABI\r\n *      documentation. It refers to the start of the data for a dynamic type,\r\n *      e.g. the first word of a struct or the first word of the first element\r\n *      in an array.\r\n *\r\n *    - The term \"pointer\" is used to describe the absolute position of a value\r\n *      and never an offset relative to another value.\r\n *        - The suffix \"_ptr\" refers to a memory pointer.\r\n *        - The suffix \"_cdPtr\" refers to a calldata pointer.\r\n *\r\n *    - The term \"offset\" is used to describe the position of a value relative\r\n *      to some parent value. For example, OrderParameters_conduit_offset is the\r\n *      offset to the \"conduit\" value in the OrderParameters struct relative to\r\n *      the start of the body.\r\n *        - Note: Offsets are used to derive pointers.\r\n *\r\n *    - Some structs have pointers defined for all of their fields in this file.\r\n *      Lines which are commented out are fields that are not used in the\r\n *      codebase but have been left in for readability.\r\n */\r\n\r\n// Declare constants for name, version, and reentrancy sentinel values.\r\n\r\n// Name is right padded, so it touches the length which is left padded. This\r\n// enables writing both values at once. Length goes at byte 95 in memory, and\r\n// name fills bytes 96-109, so both values can be written left-padded to 77.\r\nuint256 constant NameLengthPtr = 77;\r\nuint256 constant NameWithLength = 0x0d436F6E73696465726174696F6E;\r\n\r\nuint256 constant Version = 0x312e31;\r\nuint256 constant Version_length = 3;\r\nuint256 constant Version_shift = 0xe8;\r\n\r\nuint256 constant _NOT_ENTERED = 1;\r\nuint256 constant _ENTERED = 2;\r\n\r\n// Common Offsets\r\n// Offsets for identically positioned fields shared by:\r\n// OfferItem, ConsiderationItem, SpentItem, ReceivedItem\r\n\r\nuint256 constant Common_token_offset = 0x20;\r\nuint256 constant Common_identifier_offset = 0x40;\r\nuint256 constant Common_amount_offset = 0x60;\r\n\r\nuint256 constant ReceivedItem_size = 0xa0;\r\nuint256 constant ReceivedItem_amount_offset = 0x60;\r\nuint256 constant ReceivedItem_recipient_offset = 0x80;\r\n\r\nuint256 constant ReceivedItem_CommonParams_size = 0x60;\r\n\r\nuint256 constant ConsiderationItem_recipient_offset = 0xa0;\r\n// Store the same constant in an abbreviated format for a line length fix.\r\nuint256 constant ConsiderItem_recipient_offset = 0xa0;\r\n\r\nuint256 constant Execution_offerer_offset = 0x20;\r\nuint256 constant Execution_conduit_offset = 0x40;\r\n\r\nuint256 constant InvalidFulfillmentComponentData_error_signature = (\r\n    0x7fda727900000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant InvalidFulfillmentComponentData_error_len = 0x04;\r\n\r\nuint256 constant Panic_error_signature = (\r\n    0x4e487b7100000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant Panic_error_offset = 0x04;\r\nuint256 constant Panic_error_length = 0x24;\r\nuint256 constant Panic_arithmetic = 0x11;\r\n\r\nuint256 constant MissingItemAmount_error_signature = (\r\n    0x91b3e51400000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant MissingItemAmount_error_len = 0x04;\r\n\r\nuint256 constant OrderParameters_offer_head_offset = 0x40;\r\nuint256 constant OrderParameters_consideration_head_offset = 0x60;\r\nuint256 constant OrderParameters_conduit_offset = 0x120;\r\nuint256 constant OrderParameters_counter_offset = 0x140;\r\n\r\nuint256 constant Fulfillment_itemIndex_offset = 0x20;\r\n\r\nuint256 constant AdvancedOrder_numerator_offset = 0x20;\r\n\r\nuint256 constant AlmostOneWord = 0x1f;\r\nuint256 constant OneWord = 0x20;\r\nuint256 constant TwoWords = 0x40;\r\nuint256 constant ThreeWords = 0x60;\r\nuint256 constant FourWords = 0x80;\r\nuint256 constant FiveWords = 0xa0;\r\n\r\nuint256 constant FreeMemoryPointerSlot = 0x40;\r\nuint256 constant ZeroSlot = 0x60;\r\nuint256 constant DefaultFreeMemoryPointer = 0x80;\r\n\r\nuint256 constant Slot0x80 = 0x80;\r\nuint256 constant Slot0xA0 = 0xa0;\r\n\r\nuint256 constant BasicOrder_endAmount_cdPtr = 0x104;\r\nuint256 constant BasicOrder_common_params_size = 0xa0;\r\nuint256 constant BasicOrder_considerationHashesArray_ptr = 0x160;\r\n\r\nuint256 constant EIP712_Order_size = 0x180;\r\nuint256 constant EIP712_OfferItem_size = 0xc0;\r\nuint256 constant EIP712_ConsiderationItem_size = 0xe0;\r\nuint256 constant AdditionalRecipients_size = 0x40;\r\n\r\nuint256 constant EIP712_DomainSeparator_offset = 0x02;\r\nuint256 constant EIP712_OrderHash_offset = 0x22;\r\nuint256 constant EIP712_DigestPayload_size = 0x42;\r\n\r\nuint256 constant receivedItemsHash_ptr = 0x60;\r\n\r\n/*\r\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\r\n *  data for OrderFulfilled\r\n *\r\n *   event OrderFulfilled(\r\n *     bytes32 orderHash,\r\n *     address indexed offerer,\r\n *     address indexed zone,\r\n *     address fulfiller,\r\n *     SpentItem[] offer,\r\n *       > (itemType, token, id, amount)\r\n *     ReceivedItem[] consideration\r\n *       > (itemType, token, id, amount, recipient)\r\n *   )\r\n *\r\n *  - 0x00: orderHash\r\n *  - 0x20: fulfiller\r\n *  - 0x40: offer offset (0x80)\r\n *  - 0x60: consideration offset (0x120)\r\n *  - 0x80: offer.length (1)\r\n *  - 0xa0: offerItemType\r\n *  - 0xc0: offerToken\r\n *  - 0xe0: offerIdentifier\r\n *  - 0x100: offerAmount\r\n *  - 0x120: consideration.length (1 + additionalRecipients.length)\r\n *  - 0x140: considerationItemType\r\n *  - 0x160: considerationToken\r\n *  - 0x180: considerationIdentifier\r\n *  - 0x1a0: considerationAmount\r\n *  - 0x1c0: considerationRecipient\r\n *  - ...\r\n */\r\n\r\n// Minimum length of the OrderFulfilled event data.\r\n// Must be added to the size of the ReceivedItem array for additionalRecipients\r\n// (0xa0 * additionalRecipients.length) to calculate full size of the buffer.\r\nuint256 constant OrderFulfilled_baseSize = 0x1e0;\r\nuint256 constant OrderFulfilled_selector = (\r\n    0x9d9af8e38d66c62e2c12f0225249fd9d721c54b83f48d9352c97c6cacdcb6f31\r\n);\r\n\r\n// Minimum offset in memory to OrderFulfilled event data.\r\n// Must be added to the size of the EIP712 hash array for additionalRecipients\r\n// (32 * additionalRecipients.length) to calculate the pointer to event data.\r\nuint256 constant OrderFulfilled_baseOffset = 0x180;\r\nuint256 constant OrderFulfilled_consideration_length_baseOffset = 0x2a0;\r\nuint256 constant OrderFulfilled_offer_length_baseOffset = 0x200;\r\n\r\n// uint256 constant OrderFulfilled_orderHash_offset = 0x00;\r\nuint256 constant OrderFulfilled_fulfiller_offset = 0x20;\r\nuint256 constant OrderFulfilled_offer_head_offset = 0x40;\r\nuint256 constant OrderFulfilled_offer_body_offset = 0x80;\r\nuint256 constant OrderFulfilled_consideration_head_offset = 0x60;\r\nuint256 constant OrderFulfilled_consideration_body_offset = 0x120;\r\n\r\n// BasicOrderParameters\r\nuint256 constant BasicOrder_parameters_cdPtr = 0x04;\r\nuint256 constant BasicOrder_considerationToken_cdPtr = 0x24;\r\n// uint256 constant BasicOrder_considerationIdentifier_cdPtr = 0x44;\r\nuint256 constant BasicOrder_considerationAmount_cdPtr = 0x64;\r\nuint256 constant BasicOrder_offerer_cdPtr = 0x84;\r\nuint256 constant BasicOrder_zone_cdPtr = 0xa4;\r\nuint256 constant BasicOrder_offerToken_cdPtr = 0xc4;\r\n// uint256 constant BasicOrder_offerIdentifier_cdPtr = 0xe4;\r\nuint256 constant BasicOrder_offerAmount_cdPtr = 0x104;\r\nuint256 constant BasicOrder_basicOrderType_cdPtr = 0x124;\r\nuint256 constant BasicOrder_startTime_cdPtr = 0x144;\r\n// uint256 constant BasicOrder_endTime_cdPtr = 0x164;\r\n// uint256 constant BasicOrder_zoneHash_cdPtr = 0x184;\r\n// uint256 constant BasicOrder_salt_cdPtr = 0x1a4;\r\nuint256 constant BasicOrder_offererConduit_cdPtr = 0x1c4;\r\nuint256 constant BasicOrder_fulfillerConduit_cdPtr = 0x1e4;\r\nuint256 constant BasicOrder_totalOriginalAdditionalRecipients_cdPtr = 0x204;\r\nuint256 constant BasicOrder_additionalRecipients_head_cdPtr = 0x224;\r\nuint256 constant BasicOrder_signature_cdPtr = 0x244;\r\nuint256 constant BasicOrder_additionalRecipients_length_cdPtr = 0x264;\r\nuint256 constant BasicOrder_additionalRecipients_data_cdPtr = 0x284;\r\n\r\nuint256 constant BasicOrder_parameters_ptr = 0x20;\r\n\r\nuint256 constant BasicOrder_basicOrderType_range = 0x18; // 24 values\r\n\r\n/*\r\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\r\n *  EIP712 data for ConsiderationItem\r\n *   - 0x80: ConsiderationItem EIP-712 typehash (constant)\r\n *   - 0xa0: itemType\r\n *   - 0xc0: token\r\n *   - 0xe0: identifier\r\n *   - 0x100: startAmount\r\n *   - 0x120: endAmount\r\n *   - 0x140: recipient\r\n */\r\nuint256 constant BasicOrder_considerationItem_typeHash_ptr = 0x80; // memoryPtr\r\nuint256 constant BasicOrder_considerationItem_itemType_ptr = 0xa0;\r\nuint256 constant BasicOrder_considerationItem_token_ptr = 0xc0;\r\nuint256 constant BasicOrder_considerationItem_identifier_ptr = 0xe0;\r\nuint256 constant BasicOrder_considerationItem_startAmount_ptr = 0x100;\r\nuint256 constant BasicOrder_considerationItem_endAmount_ptr = 0x120;\r\n// uint256 constant BasicOrder_considerationItem_recipient_ptr = 0x140;\r\n\r\n/*\r\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\r\n *  EIP712 data for OfferItem\r\n *   - 0x80:  OfferItem EIP-712 typehash (constant)\r\n *   - 0xa0:  itemType\r\n *   - 0xc0:  token\r\n *   - 0xe0:  identifier (reused for offeredItemsHash)\r\n *   - 0x100: startAmount\r\n *   - 0x120: endAmount\r\n */\r\nuint256 constant BasicOrder_offerItem_typeHash_ptr = DefaultFreeMemoryPointer;\r\nuint256 constant BasicOrder_offerItem_itemType_ptr = 0xa0;\r\nuint256 constant BasicOrder_offerItem_token_ptr = 0xc0;\r\n// uint256 constant BasicOrder_offerItem_identifier_ptr = 0xe0;\r\n// uint256 constant BasicOrder_offerItem_startAmount_ptr = 0x100;\r\nuint256 constant BasicOrder_offerItem_endAmount_ptr = 0x120;\r\n\r\n/*\r\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\r\n *  EIP712 data for Order\r\n *   - 0x80:   Order EIP-712 typehash (constant)\r\n *   - 0xa0:   orderParameters.offerer\r\n *   - 0xc0:   orderParameters.zone\r\n *   - 0xe0:   keccak256(abi.encodePacked(offerHashes))\r\n *   - 0x100:  keccak256(abi.encodePacked(considerationHashes))\r\n *   - 0x120:  orderType\r\n *   - 0x140:  startTime\r\n *   - 0x160:  endTime\r\n *   - 0x180:  zoneHash\r\n *   - 0x1a0:  salt\r\n *   - 0x1c0:  conduit\r\n *   - 0x1e0:  _counters[orderParameters.offerer] (from storage)\r\n */\r\nuint256 constant BasicOrder_order_typeHash_ptr = 0x80;\r\nuint256 constant BasicOrder_order_offerer_ptr = 0xa0;\r\n// uint256 constant BasicOrder_order_zone_ptr = 0xc0;\r\nuint256 constant BasicOrder_order_offerHashes_ptr = 0xe0;\r\nuint256 constant BasicOrder_order_considerationHashes_ptr = 0x100;\r\nuint256 constant BasicOrder_order_orderType_ptr = 0x120;\r\nuint256 constant BasicOrder_order_startTime_ptr = 0x140;\r\n// uint256 constant BasicOrder_order_endTime_ptr = 0x160;\r\n// uint256 constant BasicOrder_order_zoneHash_ptr = 0x180;\r\n// uint256 constant BasicOrder_order_salt_ptr = 0x1a0;\r\n// uint256 constant BasicOrder_order_conduitKey_ptr = 0x1c0;\r\nuint256 constant BasicOrder_order_counter_ptr = 0x1e0;\r\nuint256 constant BasicOrder_additionalRecipients_head_ptr = 0x240;\r\nuint256 constant BasicOrder_signature_ptr = 0x260;\r\n\r\n// Signature-related\r\nbytes32 constant EIP2098_allButHighestBitMask = (\r\n    0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\r\n);\r\nbytes32 constant ECDSA_twentySeventhAndTwentyEighthBytesSet = (\r\n    0x0000000000000000000000000000000000000000000000000000000101000000\r\n);\r\nuint256 constant ECDSA_MaxLength = 65;\r\nuint256 constant ECDSA_signature_s_offset = 0x40;\r\nuint256 constant ECDSA_signature_v_offset = 0x60;\r\n\r\nbytes32 constant EIP1271_isValidSignature_selector = (\r\n    0x1626ba7e00000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant EIP1271_isValidSignature_signatureHead_negativeOffset = 0x20;\r\nuint256 constant EIP1271_isValidSignature_digest_negativeOffset = 0x40;\r\nuint256 constant EIP1271_isValidSignature_selector_negativeOffset = 0x44;\r\nuint256 constant EIP1271_isValidSignature_calldata_baseLength = 0x64;\r\n\r\nuint256 constant EIP1271_isValidSignature_signature_head_offset = 0x40;\r\n\r\n// abi.encodeWithSignature(\"NoContract(address)\")\r\nuint256 constant NoContract_error_signature = (\r\n    0x5f15d67200000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant NoContract_error_sig_ptr = 0x0;\r\nuint256 constant NoContract_error_token_ptr = 0x4;\r\nuint256 constant NoContract_error_length = 0x24; // 4 + 32 == 36\r\n\r\nuint256 constant EIP_712_PREFIX = (\r\n    0x1901000000000000000000000000000000000000000000000000000000000000\r\n);\r\n\r\nuint256 constant ExtraGasBuffer = 0x20;\r\nuint256 constant CostPerWord = 3;\r\nuint256 constant MemoryExpansionCoefficient = 0x200; // 512\r\n\r\nuint256 constant Create2AddressDerivation_ptr = 0x0b;\r\nuint256 constant Create2AddressDerivation_length = 0x55;\r\n\r\nuint256 constant MaskOverByteTwelve = (\r\n    0x0000000000000000000000ff0000000000000000000000000000000000000000\r\n);\r\n\r\nuint256 constant MaskOverLastTwentyBytes = (\r\n    0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff\r\n);\r\n\r\nuint256 constant MaskOverFirstFourBytes = (\r\n    0xffffffff00000000000000000000000000000000000000000000000000000000\r\n);\r\n\r\nuint256 constant Conduit_execute_signature = (\r\n    0x4ce34aa200000000000000000000000000000000000000000000000000000000\r\n);\r\n\r\nuint256 constant MaxUint8 = 0xff;\r\nuint256 constant MaxUint120 = 0xffffffffffffffffffffffffffffff;\r\n\r\nuint256 constant Conduit_execute_ConduitTransfer_ptr = 0x20;\r\nuint256 constant Conduit_execute_ConduitTransfer_length = 0x01;\r\n\r\nuint256 constant Conduit_execute_ConduitTransfer_offset_ptr = 0x04;\r\nuint256 constant Conduit_execute_ConduitTransfer_length_ptr = 0x24;\r\nuint256 constant Conduit_execute_transferItemType_ptr = 0x44;\r\nuint256 constant Conduit_execute_transferToken_ptr = 0x64;\r\nuint256 constant Conduit_execute_transferFrom_ptr = 0x84;\r\nuint256 constant Conduit_execute_transferTo_ptr = 0xa4;\r\nuint256 constant Conduit_execute_transferIdentifier_ptr = 0xc4;\r\nuint256 constant Conduit_execute_transferAmount_ptr = 0xe4;\r\n\r\nuint256 constant OneConduitExecute_size = 0x104;\r\n\r\n// Sentinel value to indicate that the conduit accumulator is not armed.\r\nuint256 constant AccumulatorDisarmed = 0x20;\r\nuint256 constant AccumulatorArmed = 0x40;\r\nuint256 constant Accumulator_conduitKey_ptr = 0x20;\r\nuint256 constant Accumulator_selector_ptr = 0x40;\r\nuint256 constant Accumulator_array_offset_ptr = 0x44;\r\nuint256 constant Accumulator_array_length_ptr = 0x64;\r\n\r\nuint256 constant Accumulator_itemSizeOffsetDifference = 0x3c;\r\n\r\nuint256 constant Accumulator_array_offset = 0x20;\r\nuint256 constant Conduit_transferItem_size = 0xc0;\r\nuint256 constant Conduit_transferItem_token_ptr = 0x20;\r\nuint256 constant Conduit_transferItem_from_ptr = 0x40;\r\nuint256 constant Conduit_transferItem_to_ptr = 0x60;\r\nuint256 constant Conduit_transferItem_identifier_ptr = 0x80;\r\nuint256 constant Conduit_transferItem_amount_ptr = 0xa0;\r\n\r\n// Declare constant for errors related to amount derivation.\r\n// error InexactFraction() @ AmountDerivationErrors.sol\r\nuint256 constant InexactFraction_error_signature = (\r\n    0xc63cf08900000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant InexactFraction_error_len = 0x04;\r\n\r\n// Declare constant for errors related to signature verification.\r\nuint256 constant Ecrecover_precompile = 1;\r\nuint256 constant Ecrecover_args_size = 0x80;\r\nuint256 constant Signature_lower_v = 27;\r\n\r\n// error BadSignatureV(uint8) @ SignatureVerificationErrors.sol\r\nuint256 constant BadSignatureV_error_signature = (\r\n    0x1f003d0a00000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant BadSignatureV_error_offset = 0x04;\r\nuint256 constant BadSignatureV_error_length = 0x24;\r\n\r\n// error InvalidSigner() @ SignatureVerificationErrors.sol\r\nuint256 constant InvalidSigner_error_signature = (\r\n    0x815e1d6400000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant InvalidSigner_error_length = 0x04;\r\n\r\n// error InvalidSignature() @ SignatureVerificationErrors.sol\r\nuint256 constant InvalidSignature_error_signature = (\r\n    0x8baa579f00000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant InvalidSignature_error_length = 0x04;\r\n\r\n// error BadContractSignature() @ SignatureVerificationErrors.sol\r\nuint256 constant BadContractSignature_error_signature = (\r\n    0x4f7fb80d00000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant BadContractSignature_error_length = 0x04;\r\n\r\nuint256 constant NumBitsAfterSelector = 0xe0;\r\n\r\n// 69 is the lowest modulus for which the remainder\r\n// of every selector other than the two match functions\r\n// is greater than those of the match functions.\r\nuint256 constant NonMatchSelector_MagicModulus = 69;\r\n// Of the two match function selectors, the highest\r\n// remainder modulo 69 is 29.\r\nuint256 constant NonMatchSelector_MagicRemainder = 0x1d;\r\n"
    },
    "contracts/lib/Assertions.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n\r\nimport { OrderParameters } from \"./ConsiderationStructs.sol\";\r\n\r\nimport { GettersAndDerivers } from \"./GettersAndDerivers.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    TokenTransferrerErrors\r\n} from \"../interfaces/TokenTransferrerErrors.sol\";\r\n\r\nimport { CounterManager } from \"./CounterManager.sol\";\r\n\r\nimport \"./ConsiderationConstants.sol\";\r\n\r\n/**\r\n * @title Assertions\r\n * @author 0age\r\n * @notice Assertions contains logic for making various assertions that do not\r\n *         fit neatly within a dedicated semantic scope.\r\n */\r\ncontract Assertions is\r\n    GettersAndDerivers,\r\n    CounterManager,\r\n    TokenTransferrerErrors\r\n{\r\n    /**\r\n     * @dev Derive and set hashes, reference chainId, and associated domain\r\n     *      separator during deployment.\r\n     *\r\n     * @param conduitController A contract that deploys conduits, or proxies\r\n     *                          that may optionally be used to transfer approved\r\n     *                          ERC20/721/1155 tokens.\r\n     */\r\n    constructor(address conduitController)\r\n        GettersAndDerivers(conduitController)\r\n    {}\r\n\r\n    /**\r\n     * @dev Internal view function to ensure that the supplied consideration\r\n     *      array length on a given set of order parameters is not less than the\r\n     *      original consideration array length for that order and to retrieve\r\n     *      the current counter for a given order's offerer and zone and use it\r\n     *      to derive the order hash.\r\n     *\r\n     * @param orderParameters The parameters of the order to hash.\r\n     *\r\n     * @return The hash.\r\n     */\r\n    function _assertConsiderationLengthAndGetOrderHash(\r\n        OrderParameters memory orderParameters\r\n    ) internal view returns (bytes32) {\r\n        // Ensure supplied consideration array length is not less than original.\r\n        _assertConsiderationLengthIsNotLessThanOriginalConsiderationLength(\r\n            orderParameters.consideration.length,\r\n            orderParameters.totalOriginalConsiderationItems\r\n        );\r\n\r\n        // Derive and return order hash using current counter for the offerer.\r\n        return\r\n            _deriveOrderHash(\r\n                orderParameters,\r\n                _getCounter(orderParameters.offerer)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to ensure that the supplied consideration\r\n     *      array length for an order to be fulfilled is not less than the\r\n     *      original consideration array length for that order.\r\n     *\r\n     * @param suppliedConsiderationItemTotal The number of consideration items\r\n     *                                       supplied when fulfilling the order.\r\n     * @param originalConsiderationItemTotal The number of consideration items\r\n     *                                       supplied on initial order creation.\r\n     */\r\n    function _assertConsiderationLengthIsNotLessThanOriginalConsiderationLength(\r\n        uint256 suppliedConsiderationItemTotal,\r\n        uint256 originalConsiderationItemTotal\r\n    ) internal pure {\r\n        // Ensure supplied consideration array length is not less than original.\r\n        if (suppliedConsiderationItemTotal < originalConsiderationItemTotal) {\r\n            revert MissingOriginalConsiderationItems();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to ensure that a given item amount is not\r\n     *      zero.\r\n     *\r\n     * @param amount The amount to check.\r\n     */\r\n    function _assertNonZeroAmount(uint256 amount) internal pure {\r\n        // Revert if the supplied amount is equal to zero.\r\n        if (amount == 0) {\r\n            revert MissingItemAmount();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to validate calldata offsets for dynamic\r\n     *      types in BasicOrderParameters and other parameters. This ensures\r\n     *      that functions using the calldata object normally will be using the\r\n     *      same data as the assembly functions and that values that are bound\r\n     *      to a given range are within that range. Note that no parameters are\r\n     *      supplied as all basic order functions use the same calldata\r\n     *      encoding.\r\n     */\r\n    function _assertValidBasicOrderParameters() internal pure {\r\n        // Declare a boolean designating basic order parameter offset validity.\r\n        bool validOffsets;\r\n\r\n        // Utilize assembly in order to read offset data directly from calldata.\r\n        assembly {\r\n            /*\r\n             * Checks:\r\n             * 1. Order parameters struct offset == 0x20\r\n             * 2. Additional recipients arr offset == 0x240\r\n             * 3. Signature offset == 0x260 + (recipients.length * 0x40)\r\n             * 4. BasicOrderType between 0 and 23 (i.e. < 24)\r\n             */\r\n            validOffsets := and(\r\n                // Order parameters at calldata 0x04 must have offset of 0x20.\r\n                eq(\r\n                    calldataload(BasicOrder_parameters_cdPtr),\r\n                    BasicOrder_parameters_ptr\r\n                ),\r\n                // Additional recipients at cd 0x224 must have offset of 0x240.\r\n                eq(\r\n                    calldataload(BasicOrder_additionalRecipients_head_cdPtr),\r\n                    BasicOrder_additionalRecipients_head_ptr\r\n                )\r\n            )\r\n\r\n            validOffsets := and(\r\n                validOffsets,\r\n                eq(\r\n                    // Load signature offset from calldata 0x244.\r\n                    calldataload(BasicOrder_signature_cdPtr),\r\n                    // Derive expected offset as start of recipients + len * 64.\r\n                    add(\r\n                        BasicOrder_signature_ptr,\r\n                        mul(\r\n                            // Additional recipients length at calldata 0x264.\r\n                            calldataload(\r\n                                BasicOrder_additionalRecipients_length_cdPtr\r\n                            ),\r\n                            // Each additional recipient has a length of 0x40.\r\n                            AdditionalRecipients_size\r\n                        )\r\n                    )\r\n                )\r\n            )\r\n\r\n            validOffsets := and(\r\n                validOffsets,\r\n                lt(\r\n                    // BasicOrderType parameter at calldata offset 0x124.\r\n                    calldataload(BasicOrder_basicOrderType_cdPtr),\r\n                    // Value should be less than 24.\r\n                    BasicOrder_basicOrderType_range\r\n                )\r\n            )\r\n        }\r\n\r\n        // Revert with an error if basic order parameter offsets are invalid.\r\n        if (!validOffsets) {\r\n            revert InvalidBasicOrderParameterEncoding();\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/lib/SignatureVerification.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n\r\nimport { EIP1271Interface } from \"../interfaces/EIP1271Interface.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    SignatureVerificationErrors\r\n} from \"../interfaces/SignatureVerificationErrors.sol\";\r\n\r\nimport { LowLevelHelpers } from \"./LowLevelHelpers.sol\";\r\n\r\nimport \"./ConsiderationConstants.sol\";\r\n\r\n/**\r\n * @title SignatureVerification\r\n * @author 0age\r\n * @notice SignatureVerification contains logic for verifying signatures.\r\n */\r\ncontract SignatureVerification is SignatureVerificationErrors, LowLevelHelpers {\r\n    /**\r\n     * @dev Internal view function to verify the signature of an order. An\r\n     *      ERC-1271 fallback will be attempted if either the signature length\r\n     *      is not 64 or 65 bytes or if the recovered signer does not match the\r\n     *      supplied signer.\r\n     *\r\n     * @param signer    The signer for the order.\r\n     * @param digest    The digest to verify the signature against.\r\n     * @param signature A signature from the signer indicating that the order\r\n     *                  has been approved.\r\n     */\r\n    function _assertValidSignature(\r\n        address signer,\r\n        bytes32 digest,\r\n        bytes memory signature\r\n    ) internal view {\r\n        // Declare value for ecrecover equality or 1271 call success status.\r\n        bool success;\r\n\r\n        // Utilize assembly to perform optimized signature verification check.\r\n        assembly {\r\n            // Ensure that first word of scratch space is empty.\r\n            mstore(0, 0)\r\n\r\n            // Declare value for v signature parameter.\r\n            let v\r\n\r\n            // Get the length of the signature.\r\n            let signatureLength := mload(signature)\r\n\r\n            // Get the pointer to the value preceding the signature length.\r\n            // This will be used for temporary memory overrides - either the\r\n            // signature head for isValidSignature or the digest for ecrecover.\r\n            let wordBeforeSignaturePtr := sub(signature, OneWord)\r\n\r\n            // Cache the current value behind the signature to restore it later.\r\n            let cachedWordBeforeSignature := mload(wordBeforeSignaturePtr)\r\n\r\n            // Declare lenDiff + recoveredSigner scope to manage stack pressure.\r\n            {\r\n                // Take the difference between the max ECDSA signature length\r\n                // and the actual signature length. Overflow desired for any\r\n                // values > 65. If the diff is not 0 or 1, it is not a valid\r\n                // ECDSA signature - move on to EIP1271 check.\r\n                let lenDiff := sub(ECDSA_MaxLength, signatureLength)\r\n\r\n                // Declare variable for recovered signer.\r\n                let recoveredSigner\r\n\r\n                // If diff is 0 or 1, it may be an ECDSA signature.\r\n                // Try to recover signer.\r\n                if iszero(gt(lenDiff, 1)) {\r\n                    // Read the signature `s` value.\r\n                    let originalSignatureS := mload(\r\n                        add(signature, ECDSA_signature_s_offset)\r\n                    )\r\n\r\n                    // Read the first byte of the word after `s`. If the\r\n                    // signature is 65 bytes, this will be the real `v` value.\r\n                    // If not, it will need to be modified - doing it this way\r\n                    // saves an extra condition.\r\n                    v := byte(\r\n                        0,\r\n                        mload(add(signature, ECDSA_signature_v_offset))\r\n                    )\r\n\r\n                    // If lenDiff is 1, parse 64-byte signature as ECDSA.\r\n                    if lenDiff {\r\n                        // Extract yParity from highest bit of vs and add 27 to\r\n                        // get v.\r\n                        v := add(\r\n                            shr(MaxUint8, originalSignatureS),\r\n                            Signature_lower_v\r\n                        )\r\n\r\n                        // Extract canonical s from vs, all but the highest bit.\r\n                        // Temporarily overwrite the original `s` value in the\r\n                        // signature.\r\n                        mstore(\r\n                            add(signature, ECDSA_signature_s_offset),\r\n                            and(\r\n                                originalSignatureS,\r\n                                EIP2098_allButHighestBitMask\r\n                            )\r\n                        )\r\n                    }\r\n                    // Temporarily overwrite the signature length with `v` to\r\n                    // conform to the expected input for ecrecover.\r\n                    mstore(signature, v)\r\n\r\n                    // Temporarily overwrite the word before the length with\r\n                    // `digest` to conform to the expected input for ecrecover.\r\n                    mstore(wordBeforeSignaturePtr, digest)\r\n\r\n                    // Attempt to recover the signer for the given signature. Do\r\n                    // not check the call status as ecrecover will return a null\r\n                    // address if the signature is invalid.\r\n                    pop(\r\n                        staticcall(\r\n                            gas(),\r\n                            Ecrecover_precompile, // Call ecrecover precompile.\r\n                            wordBeforeSignaturePtr, // Use data memory location.\r\n                            Ecrecover_args_size, // Size of digest, v, r, and s.\r\n                            0, // Write result to scratch space.\r\n                            OneWord // Provide size of returned result.\r\n                        )\r\n                    )\r\n\r\n                    // Restore cached word before signature.\r\n                    mstore(wordBeforeSignaturePtr, cachedWordBeforeSignature)\r\n\r\n                    // Restore cached signature length.\r\n                    mstore(signature, signatureLength)\r\n\r\n                    // Restore cached signature `s` value.\r\n                    mstore(\r\n                        add(signature, ECDSA_signature_s_offset),\r\n                        originalSignatureS\r\n                    )\r\n\r\n                    // Read the recovered signer from the buffer given as return\r\n                    // space for ecrecover.\r\n                    recoveredSigner := mload(0)\r\n                }\r\n\r\n                // Set success to true if the signature provided was a valid\r\n                // ECDSA signature and the signer is not the null address. Use\r\n                // gt instead of direct as success is used outside of assembly.\r\n                success := and(eq(signer, recoveredSigner), gt(signer, 0))\r\n            }\r\n\r\n            // If the signature was not verified with ecrecover, try EIP1271.\r\n            if iszero(success) {\r\n                // Temporarily overwrite the word before the signature length\r\n                // and use it as the head of the signature input to\r\n                // `isValidSignature`, which has a value of 64.\r\n                mstore(\r\n                    wordBeforeSignaturePtr,\r\n                    EIP1271_isValidSignature_signature_head_offset\r\n                )\r\n\r\n                // Get pointer to use for the selector of `isValidSignature`.\r\n                let selectorPtr := sub(\r\n                    signature,\r\n                    EIP1271_isValidSignature_selector_negativeOffset\r\n                )\r\n\r\n                // Cache the value currently stored at the selector pointer.\r\n                let cachedWordOverwrittenBySelector := mload(selectorPtr)\r\n\r\n                // Get pointer to use for `digest` input to `isValidSignature`.\r\n                let digestPtr := sub(\r\n                    signature,\r\n                    EIP1271_isValidSignature_digest_negativeOffset\r\n                )\r\n\r\n                // Cache the value currently stored at the digest pointer.\r\n                let cachedWordOverwrittenByDigest := mload(digestPtr)\r\n\r\n                // Write the selector first, since it overlaps the digest.\r\n                mstore(selectorPtr, EIP1271_isValidSignature_selector)\r\n\r\n                // Next, write the digest.\r\n                mstore(digestPtr, digest)\r\n\r\n                // Call signer with `isValidSignature` to validate signature.\r\n                success := staticcall(\r\n                    gas(),\r\n                    signer,\r\n                    selectorPtr,\r\n                    add(\r\n                        signatureLength,\r\n                        EIP1271_isValidSignature_calldata_baseLength\r\n                    ),\r\n                    0,\r\n                    OneWord\r\n                )\r\n\r\n                // Determine if the signature is valid on successful calls.\r\n                if success {\r\n                    // If first word of scratch space does not contain EIP-1271\r\n                    // signature selector, revert.\r\n                    if iszero(eq(mload(0), EIP1271_isValidSignature_selector)) {\r\n                        // Revert with bad 1271 signature if signer has code.\r\n                        if extcodesize(signer) {\r\n                            // Bad contract signature.\r\n                            mstore(0, BadContractSignature_error_signature)\r\n                            revert(0, BadContractSignature_error_length)\r\n                        }\r\n\r\n                        // Check if signature length was invalid.\r\n                        if gt(sub(ECDSA_MaxLength, signatureLength), 1) {\r\n                            // Revert with generic invalid signature error.\r\n                            mstore(0, InvalidSignature_error_signature)\r\n                            revert(0, InvalidSignature_error_length)\r\n                        }\r\n\r\n                        // Check if v was invalid.\r\n                        if iszero(\r\n                            byte(v, ECDSA_twentySeventhAndTwentyEighthBytesSet)\r\n                        ) {\r\n                            // Revert with invalid v value.\r\n                            mstore(0, BadSignatureV_error_signature)\r\n                            mstore(BadSignatureV_error_offset, v)\r\n                            revert(0, BadSignatureV_error_length)\r\n                        }\r\n\r\n                        // Revert with generic invalid signer error message.\r\n                        mstore(0, InvalidSigner_error_signature)\r\n                        revert(0, InvalidSigner_error_length)\r\n                    }\r\n                }\r\n\r\n                // Restore the cached values overwritten by selector, digest and\r\n                // signature head.\r\n                mstore(wordBeforeSignaturePtr, cachedWordBeforeSignature)\r\n                mstore(selectorPtr, cachedWordOverwrittenBySelector)\r\n                mstore(digestPtr, cachedWordOverwrittenByDigest)\r\n            }\r\n        }\r\n\r\n        // If the call failed...\r\n        if (!success) {\r\n            // Revert and pass reason along if one was returned.\r\n            _revertWithReasonIfOneIsReturned();\r\n\r\n            // Otherwise, revert with error indicating bad contract signature.\r\n            assembly {\r\n                mstore(0, BadContractSignature_error_signature)\r\n                revert(0, BadContractSignature_error_length)\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/lib/GettersAndDerivers.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n\r\nimport { OrderParameters } from \"./ConsiderationStructs.sol\";\r\n\r\nimport { ConsiderationBase } from \"./ConsiderationBase.sol\";\r\n\r\nimport \"./ConsiderationConstants.sol\";\r\n\r\n/**\r\n * @title GettersAndDerivers\r\n * @author 0age\r\n * @notice ConsiderationInternal contains pure and internal view functions\r\n *         related to getting or deriving various values.\r\n */\r\ncontract GettersAndDerivers is ConsiderationBase {\r\n    /**\r\n     * @dev Derive and set hashes, reference chainId, and associated domain\r\n     *      separator during deployment.\r\n     *\r\n     * @param conduitController A contract that deploys conduits, or proxies\r\n     *                          that may optionally be used to transfer approved\r\n     *                          ERC20/721/1155 tokens.\r\n     */\r\n    constructor(address conduitController)\r\n        ConsiderationBase(conduitController)\r\n    {}\r\n\r\n    /**\r\n     * @dev Internal view function to derive the order hash for a given order.\r\n     *      Note that only the original consideration items are included in the\r\n     *      order hash, as additional consideration items may be supplied by the\r\n     *      caller.\r\n     *\r\n     * @param orderParameters The parameters of the order to hash.\r\n     * @param counter           The counter of the order to hash.\r\n     *\r\n     * @return orderHash The hash.\r\n     */\r\n    function _deriveOrderHash(\r\n        OrderParameters memory orderParameters,\r\n        uint256 counter\r\n    ) internal view returns (bytes32 orderHash) {\r\n        // Get length of original consideration array and place it on the stack.\r\n        uint256 originalConsiderationLength = (\r\n            orderParameters.totalOriginalConsiderationItems\r\n        );\r\n\r\n        /*\r\n         * Memory layout for an array of structs (dynamic or not) is similar\r\n         * to ABI encoding of dynamic types, with a head segment followed by\r\n         * a data segment. The main difference is that the head of an element\r\n         * is a memory pointer rather than an offset.\r\n         */\r\n\r\n        // Declare a variable for the derived hash of the offer array.\r\n        bytes32 offerHash;\r\n\r\n        // Read offer item EIP-712 typehash from runtime code & place on stack.\r\n        bytes32 typeHash = _OFFER_ITEM_TYPEHASH;\r\n\r\n        // Utilize assembly so that memory regions can be reused across hashes.\r\n        assembly {\r\n            // Retrieve the free memory pointer and place on the stack.\r\n            let hashArrPtr := mload(FreeMemoryPointerSlot)\r\n\r\n            // Get the pointer to the offers array.\r\n            let offerArrPtr := mload(\r\n                add(orderParameters, OrderParameters_offer_head_offset)\r\n            )\r\n\r\n            // Load the length.\r\n            let offerLength := mload(offerArrPtr)\r\n\r\n            // Set the pointer to the first offer's head.\r\n            offerArrPtr := add(offerArrPtr, OneWord)\r\n\r\n            // Iterate over the offer items.\r\n            // prettier-ignore\r\n            for { let i := 0 } lt(i, offerLength) {\r\n                i := add(i, 1)\r\n            } {\r\n                // Read the pointer to the offer data and subtract one word\r\n                // to get typeHash pointer.\r\n                let ptr := sub(mload(offerArrPtr), OneWord)\r\n\r\n                // Read the current value before the offer data.\r\n                let value := mload(ptr)\r\n\r\n                // Write the type hash to the previous word.\r\n                mstore(ptr, typeHash)\r\n\r\n                // Take the EIP712 hash and store it in the hash array.\r\n                mstore(hashArrPtr, keccak256(ptr, EIP712_OfferItem_size))\r\n\r\n                // Restore the previous word.\r\n                mstore(ptr, value)\r\n\r\n                // Increment the array pointers by one word.\r\n                offerArrPtr := add(offerArrPtr, OneWord)\r\n                hashArrPtr := add(hashArrPtr, OneWord)\r\n            }\r\n\r\n            // Derive the offer hash using the hashes of each item.\r\n            offerHash := keccak256(\r\n                mload(FreeMemoryPointerSlot),\r\n                mul(offerLength, OneWord)\r\n            )\r\n        }\r\n\r\n        // Declare a variable for the derived hash of the consideration array.\r\n        bytes32 considerationHash;\r\n\r\n        // Read consideration item typehash from runtime code & place on stack.\r\n        typeHash = _CONSIDERATION_ITEM_TYPEHASH;\r\n\r\n        // Utilize assembly so that memory regions can be reused across hashes.\r\n        assembly {\r\n            // Retrieve the free memory pointer and place on the stack.\r\n            let hashArrPtr := mload(FreeMemoryPointerSlot)\r\n\r\n            // Get the pointer to the consideration array.\r\n            let considerationArrPtr := add(\r\n                mload(\r\n                    add(\r\n                        orderParameters,\r\n                        OrderParameters_consideration_head_offset\r\n                    )\r\n                ),\r\n                OneWord\r\n            )\r\n\r\n            // Iterate over the consideration items (not including tips).\r\n            // prettier-ignore\r\n            for { let i := 0 } lt(i, originalConsiderationLength) {\r\n                i := add(i, 1)\r\n            } {\r\n                // Read the pointer to the consideration data and subtract one\r\n                // word to get typeHash pointer.\r\n                let ptr := sub(mload(considerationArrPtr), OneWord)\r\n\r\n                // Read the current value before the consideration data.\r\n                let value := mload(ptr)\r\n\r\n                // Write the type hash to the previous word.\r\n                mstore(ptr, typeHash)\r\n\r\n                // Take the EIP712 hash and store it in the hash array.\r\n                mstore(\r\n                    hashArrPtr,\r\n                    keccak256(ptr, EIP712_ConsiderationItem_size)\r\n                )\r\n\r\n                // Restore the previous word.\r\n                mstore(ptr, value)\r\n\r\n                // Increment the array pointers by one word.\r\n                considerationArrPtr := add(considerationArrPtr, OneWord)\r\n                hashArrPtr := add(hashArrPtr, OneWord)\r\n            }\r\n\r\n            // Derive the consideration hash using the hashes of each item.\r\n            considerationHash := keccak256(\r\n                mload(FreeMemoryPointerSlot),\r\n                mul(originalConsiderationLength, OneWord)\r\n            )\r\n        }\r\n\r\n        // Read order item EIP-712 typehash from runtime code & place on stack.\r\n        typeHash = _ORDER_TYPEHASH;\r\n\r\n        // Utilize assembly to access derived hashes & other arguments directly.\r\n        assembly {\r\n            // Retrieve pointer to the region located just behind parameters.\r\n            let typeHashPtr := sub(orderParameters, OneWord)\r\n\r\n            // Store the value at that pointer location to restore later.\r\n            let previousValue := mload(typeHashPtr)\r\n\r\n            // Store the order item EIP-712 typehash at the typehash location.\r\n            mstore(typeHashPtr, typeHash)\r\n\r\n            // Retrieve the pointer for the offer array head.\r\n            let offerHeadPtr := add(\r\n                orderParameters,\r\n                OrderParameters_offer_head_offset\r\n            )\r\n\r\n            // Retrieve the data pointer referenced by the offer head.\r\n            let offerDataPtr := mload(offerHeadPtr)\r\n\r\n            // Store the offer hash at the retrieved memory location.\r\n            mstore(offerHeadPtr, offerHash)\r\n\r\n            // Retrieve the pointer for the consideration array head.\r\n            let considerationHeadPtr := add(\r\n                orderParameters,\r\n                OrderParameters_consideration_head_offset\r\n            )\r\n\r\n            // Retrieve the data pointer referenced by the consideration head.\r\n            let considerationDataPtr := mload(considerationHeadPtr)\r\n\r\n            // Store the consideration hash at the retrieved memory location.\r\n            mstore(considerationHeadPtr, considerationHash)\r\n\r\n            // Retrieve the pointer for the counter.\r\n            let counterPtr := add(\r\n                orderParameters,\r\n                OrderParameters_counter_offset\r\n            )\r\n\r\n            // Store the counter at the retrieved memory location.\r\n            mstore(counterPtr, counter)\r\n\r\n            // Derive the order hash using the full range of order parameters.\r\n            orderHash := keccak256(typeHashPtr, EIP712_Order_size)\r\n\r\n            // Restore the value previously held at typehash pointer location.\r\n            mstore(typeHashPtr, previousValue)\r\n\r\n            // Restore offer data pointer at the offer head pointer location.\r\n            mstore(offerHeadPtr, offerDataPtr)\r\n\r\n            // Restore consideration data pointer at the consideration head ptr.\r\n            mstore(considerationHeadPtr, considerationDataPtr)\r\n\r\n            // Restore consideration item length at the counter pointer.\r\n            mstore(counterPtr, originalConsiderationLength)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to derive the address of a given conduit\r\n     *      using a corresponding conduit key.\r\n     *\r\n     * @param conduitKey A bytes32 value indicating what corresponding conduit,\r\n     *                   if any, to source token approvals from. This value is\r\n     *                   the \"salt\" parameter supplied by the deployer (i.e. the\r\n     *                   conduit controller) when deploying the given conduit.\r\n     *\r\n     * @return conduit The address of the conduit associated with the given\r\n     *                 conduit key.\r\n     */\r\n    function _deriveConduit(bytes32 conduitKey)\r\n        internal\r\n        view\r\n        returns (address conduit)\r\n    {\r\n        // Read conduit controller address from runtime and place on the stack.\r\n        address conduitController = address(_CONDUIT_CONTROLLER);\r\n\r\n        // Read conduit creation code hash from runtime and place on the stack.\r\n        bytes32 conduitCreationCodeHash = _CONDUIT_CREATION_CODE_HASH;\r\n\r\n        // Leverage scratch space to perform an efficient hash.\r\n        assembly {\r\n            // Retrieve the free memory pointer; it will be replaced afterwards.\r\n            let freeMemoryPointer := mload(FreeMemoryPointerSlot)\r\n\r\n            // Place the control character and the conduit controller in scratch\r\n            // space; note that eleven bytes at the beginning are left unused.\r\n            mstore(0, or(MaskOverByteTwelve, conduitController))\r\n\r\n            // Place the conduit key in the next region of scratch space.\r\n            mstore(OneWord, conduitKey)\r\n\r\n            // Place conduit creation code hash in free memory pointer location.\r\n            mstore(TwoWords, conduitCreationCodeHash)\r\n\r\n            // Derive conduit by hashing and applying a mask over last 20 bytes.\r\n            conduit := and(\r\n                // Hash the relevant region.\r\n                keccak256(\r\n                    // The region starts at memory pointer 11.\r\n                    Create2AddressDerivation_ptr,\r\n                    // The region is 85 bytes long (1 + 20 + 32 + 32).\r\n                    Create2AddressDerivation_length\r\n                ),\r\n                // The address equals the last twenty bytes of the hash.\r\n                MaskOverLastTwentyBytes\r\n            )\r\n\r\n            // Restore the free memory pointer.\r\n            mstore(FreeMemoryPointerSlot, freeMemoryPointer)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to get the EIP-712 domain separator. If the\r\n     *      chainId matches the chainId set on deployment, the cached domain\r\n     *      separator will be returned; otherwise, it will be derived from\r\n     *      scratch.\r\n     *\r\n     * @return The domain separator.\r\n     */\r\n    function _domainSeparator() internal view returns (bytes32) {\r\n        // prettier-ignore\r\n        return block.chainid == _CHAIN_ID\r\n            ? _DOMAIN_SEPARATOR\r\n            : _deriveDomainSeparator();\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to retrieve configuration information for\r\n     *      this contract.\r\n     *\r\n     * @return version           The contract version.\r\n     * @return domainSeparator   The domain separator for this contract.\r\n     * @return conduitController The conduit Controller set for this contract.\r\n     */\r\n    function _information()\r\n        internal\r\n        view\r\n        returns (\r\n            string memory version,\r\n            bytes32 domainSeparator,\r\n            address conduitController\r\n        )\r\n    {\r\n        // Derive the domain separator.\r\n        domainSeparator = _domainSeparator();\r\n\r\n        // Declare variable as immutables cannot be accessed within assembly.\r\n        conduitController = address(_CONDUIT_CONTROLLER);\r\n\r\n        // Allocate a string with the intended length.\r\n        version = new string(Version_length);\r\n\r\n        // Set the version as data on the newly allocated string.\r\n        assembly {\r\n            mstore(add(version, OneWord), shl(Version_shift, Version))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to efficiently derive an digest to sign for\r\n     *      an order in accordance with EIP-712.\r\n     *\r\n     * @param domainSeparator The domain separator.\r\n     * @param orderHash       The order hash.\r\n     *\r\n     * @return value The hash.\r\n     */\r\n    function _deriveEIP712Digest(bytes32 domainSeparator, bytes32 orderHash)\r\n        internal\r\n        pure\r\n        returns (bytes32 value)\r\n    {\r\n        // Leverage scratch space to perform an efficient hash.\r\n        assembly {\r\n            // Place the EIP-712 prefix at the start of scratch space.\r\n            mstore(0, EIP_712_PREFIX)\r\n\r\n            // Place the domain separator in the next region of scratch space.\r\n            mstore(EIP712_DomainSeparator_offset, domainSeparator)\r\n\r\n            // Place the order hash in scratch space, spilling into the first\r\n            // two bytes of the free memory pointer — this should never be set\r\n            // as memory cannot be expanded to that size, and will be zeroed out\r\n            // after the hash is performed.\r\n            mstore(EIP712_OrderHash_offset, orderHash)\r\n\r\n            // Hash the relevant region (65 bytes).\r\n            value := keccak256(0, EIP712_DigestPayload_size)\r\n\r\n            // Clear out the dirtied bits in the memory pointer.\r\n            mstore(EIP712_OrderHash_offset, 0)\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/lib/CounterManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n\r\n// prettier-ignore\r\nimport {\r\n    ConsiderationEventsAndErrors\r\n} from \"../interfaces/ConsiderationEventsAndErrors.sol\";\r\n\r\nimport { ReentrancyGuard } from \"./ReentrancyGuard.sol\";\r\n\r\n/**\r\n * @title CounterManager\r\n * @author 0age\r\n * @notice CounterManager contains a storage mapping and related functionality\r\n *         for retrieving and incrementing a per-offerer counter.\r\n */\r\ncontract CounterManager is ConsiderationEventsAndErrors, ReentrancyGuard {\r\n    // Only orders signed using an offerer's current counter are fulfillable.\r\n    mapping(address => uint256) private _counters;\r\n\r\n    /**\r\n     * @dev Internal function to cancel all orders from a given offerer with a\r\n     *      given zone in bulk by incrementing a counter. Note that only the\r\n     *      offerer may increment the counter.\r\n     *\r\n     * @return newCounter The new counter.\r\n     */\r\n    function _incrementCounter() internal returns (uint256 newCounter) {\r\n        // Ensure that the reentrancy guard is not currently set.\r\n        _assertNonReentrant();\r\n\r\n        // Skip overflow check as counter cannot be incremented that far.\r\n        unchecked {\r\n            // Increment current counter for the supplied offerer.\r\n            newCounter = ++_counters[msg.sender];\r\n        }\r\n\r\n        // Emit an event containing the new counter.\r\n        emit CounterIncremented(newCounter, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to retrieve the current counter for a given\r\n     *      offerer.\r\n     *\r\n     * @param offerer The offerer in question.\r\n     *\r\n     * @return currentCounter The current counter.\r\n     */\r\n    function _getCounter(address offerer)\r\n        internal\r\n        view\r\n        returns (uint256 currentCounter)\r\n    {\r\n        // Return the counter for the supplied offerer.\r\n        currentCounter = _counters[offerer];\r\n    }\r\n}\r\n"
    },
    "contracts/lib/ConsiderationBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n\r\n// prettier-ignore\r\nimport {\r\n    ConduitControllerInterface\r\n} from \"../interfaces/ConduitControllerInterface.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    ConsiderationEventsAndErrors\r\n} from \"../interfaces/ConsiderationEventsAndErrors.sol\";\r\n\r\nimport \"./ConsiderationConstants.sol\";\r\n\r\n/**\r\n * @title ConsiderationBase\r\n * @author 0age\r\n * @notice ConsiderationBase contains immutable constants and constructor logic.\r\n */\r\ncontract ConsiderationBase is ConsiderationEventsAndErrors {\r\n    // Precompute hashes, original chainId, and domain separator on deployment.\r\n    bytes32 internal immutable _NAME_HASH;\r\n    bytes32 internal immutable _VERSION_HASH;\r\n    bytes32 internal immutable _EIP_712_DOMAIN_TYPEHASH;\r\n    bytes32 internal immutable _OFFER_ITEM_TYPEHASH;\r\n    bytes32 internal immutable _CONSIDERATION_ITEM_TYPEHASH;\r\n    bytes32 internal immutable _ORDER_TYPEHASH;\r\n    uint256 internal immutable _CHAIN_ID;\r\n    bytes32 internal immutable _DOMAIN_SEPARATOR;\r\n\r\n    // Allow for interaction with the conduit controller.\r\n    ConduitControllerInterface internal immutable _CONDUIT_CONTROLLER;\r\n\r\n    // Cache the conduit creation code hash used by the conduit controller.\r\n    bytes32 internal immutable _CONDUIT_CREATION_CODE_HASH;\r\n\r\n    /**\r\n     * @dev Derive and set hashes, reference chainId, and associated domain\r\n     *      separator during deployment.\r\n     *\r\n     * @param conduitController A contract that deploys conduits, or proxies\r\n     *                          that may optionally be used to transfer approved\r\n     *                          ERC20/721/1155 tokens.\r\n     */\r\n    constructor(address conduitController) {\r\n        // Derive name and version hashes alongside required EIP-712 typehashes.\r\n        (\r\n            _NAME_HASH,\r\n            _VERSION_HASH,\r\n            _EIP_712_DOMAIN_TYPEHASH,\r\n            _OFFER_ITEM_TYPEHASH,\r\n            _CONSIDERATION_ITEM_TYPEHASH,\r\n            _ORDER_TYPEHASH\r\n        ) = _deriveTypehashes();\r\n\r\n        // Store the current chainId and derive the current domain separator.\r\n        _CHAIN_ID = block.chainid;\r\n        _DOMAIN_SEPARATOR = _deriveDomainSeparator();\r\n\r\n        // Set the supplied conduit controller.\r\n        _CONDUIT_CONTROLLER = ConduitControllerInterface(conduitController);\r\n\r\n        // Retrieve the conduit creation code hash from the supplied controller.\r\n        (_CONDUIT_CREATION_CODE_HASH, ) = (\r\n            _CONDUIT_CONTROLLER.getConduitCodeHashes()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to derive the EIP-712 domain separator.\r\n     *\r\n     * @return The derived domain separator.\r\n     */\r\n    function _deriveDomainSeparator() internal view returns (bytes32) {\r\n        // prettier-ignore\r\n        return keccak256(\r\n            abi.encode(\r\n                _EIP_712_DOMAIN_TYPEHASH,\r\n                _NAME_HASH,\r\n                _VERSION_HASH,\r\n                block.chainid,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to retrieve the default name of this\r\n     *      contract and return.\r\n     *\r\n     * @return The name of this contract.\r\n     */\r\n    function _name() internal pure virtual returns (string memory) {\r\n        // Return the name of the contract.\r\n        assembly {\r\n            // First element is the offset for the returned string. Offset the\r\n            // value in memory by one word so that the free memory pointer will\r\n            // be overwritten by the next write.\r\n            mstore(OneWord, OneWord)\r\n\r\n            // Name is right padded, so it touches the length which is left\r\n            // padded. This enables writing both values at once. The free memory\r\n            // pointer will be overwritten in the process.\r\n            mstore(NameLengthPtr, NameWithLength)\r\n\r\n            // Standard ABI encoding pads returned data to the nearest word. Use\r\n            // the already empty zero slot memory region for this purpose and\r\n            // return the final name string, offset by the original single word.\r\n            return(OneWord, ThreeWords)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to retrieve the default name of this contract\r\n     *      as a string that can be used internally.\r\n     *\r\n     * @return The name of this contract.\r\n     */\r\n    function _nameString() internal pure virtual returns (string memory) {\r\n        // Return the name of the contract.\r\n        return \"Consideration\";\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to derive required EIP-712 typehashes and\r\n     *      other hashes during contract creation.\r\n     *\r\n     * @return nameHash                  The hash of the name of the contract.\r\n     * @return versionHash               The hash of the version string of the\r\n     *                                   contract.\r\n     * @return eip712DomainTypehash      The primary EIP-712 domain typehash.\r\n     * @return offerItemTypehash         The EIP-712 typehash for OfferItem\r\n     *                                   types.\r\n     * @return considerationItemTypehash The EIP-712 typehash for\r\n     *                                   ConsiderationItem types.\r\n     * @return orderTypehash             The EIP-712 typehash for Order types.\r\n     */\r\n    function _deriveTypehashes()\r\n        internal\r\n        pure\r\n        returns (\r\n            bytes32 nameHash,\r\n            bytes32 versionHash,\r\n            bytes32 eip712DomainTypehash,\r\n            bytes32 offerItemTypehash,\r\n            bytes32 considerationItemTypehash,\r\n            bytes32 orderTypehash\r\n        )\r\n    {\r\n        // Derive hash of the name of the contract.\r\n        nameHash = keccak256(bytes(_nameString()));\r\n\r\n        // Derive hash of the version string of the contract.\r\n        versionHash = keccak256(bytes(\"1.1\"));\r\n\r\n        // Construct the OfferItem type string.\r\n        // prettier-ignore\r\n        bytes memory offerItemTypeString = abi.encodePacked(\r\n            \"OfferItem(\",\r\n                \"uint8 itemType,\",\r\n                \"address token,\",\r\n                \"uint256 identifierOrCriteria,\",\r\n                \"uint256 startAmount,\",\r\n                \"uint256 endAmount\",\r\n            \")\"\r\n        );\r\n\r\n        // Construct the ConsiderationItem type string.\r\n        // prettier-ignore\r\n        bytes memory considerationItemTypeString = abi.encodePacked(\r\n            \"ConsiderationItem(\",\r\n                \"uint8 itemType,\",\r\n                \"address token,\",\r\n                \"uint256 identifierOrCriteria,\",\r\n                \"uint256 startAmount,\",\r\n                \"uint256 endAmount,\",\r\n                \"address recipient\",\r\n            \")\"\r\n        );\r\n\r\n        // Construct the OrderComponents type string, not including the above.\r\n        // prettier-ignore\r\n        bytes memory orderComponentsPartialTypeString = abi.encodePacked(\r\n            \"OrderComponents(\",\r\n                \"address offerer,\",\r\n                \"address zone,\",\r\n                \"OfferItem[] offer,\",\r\n                \"ConsiderationItem[] consideration,\",\r\n                \"uint8 orderType,\",\r\n                \"uint256 startTime,\",\r\n                \"uint256 endTime,\",\r\n                \"bytes32 zoneHash,\",\r\n                \"uint256 salt,\",\r\n                \"bytes32 conduitKey,\",\r\n                \"uint256 counter\",\r\n            \")\"\r\n        );\r\n\r\n        // Construct the primary EIP-712 domain type string.\r\n        // prettier-ignore\r\n        eip712DomainTypehash = keccak256(\r\n            abi.encodePacked(\r\n                \"EIP712Domain(\",\r\n                    \"string name,\",\r\n                    \"string version,\",\r\n                    \"uint256 chainId,\",\r\n                    \"address verifyingContract\",\r\n                \")\"\r\n            )\r\n        );\r\n\r\n        // Derive the OfferItem type hash using the corresponding type string.\r\n        offerItemTypehash = keccak256(offerItemTypeString);\r\n\r\n        // Derive ConsiderationItem type hash using corresponding type string.\r\n        considerationItemTypehash = keccak256(considerationItemTypeString);\r\n\r\n        // Derive OrderItem type hash via combination of relevant type strings.\r\n        orderTypehash = keccak256(\r\n            abi.encodePacked(\r\n                orderComponentsPartialTypeString,\r\n                considerationItemTypeString,\r\n                offerItemTypeString\r\n            )\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ConsiderationEventsAndErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport { SpentItem, ReceivedItem } from \"../lib/ConsiderationStructs.sol\";\r\n\r\n/**\r\n * @title ConsiderationEventsAndErrors\r\n * @author 0age\r\n * @notice ConsiderationEventsAndErrors contains all events and errors.\r\n */\r\ninterface ConsiderationEventsAndErrors {\r\n    /**\r\n     * @dev Emit an event whenever an order is successfully fulfilled.\r\n     *\r\n     * @param orderHash     The hash of the fulfilled order.\r\n     * @param offerer       The offerer of the fulfilled order.\r\n     * @param zone          The zone of the fulfilled order.\r\n     * @param recipient     The recipient of each spent item on the fulfilled\r\n     *                      order, or the null address if there is no specific\r\n     *                      fulfiller (i.e. the order is part of a group of\r\n     *                      orders). Defaults to the caller unless explicitly\r\n     *                      specified otherwise by the fulfiller.\r\n     * @param offer         The offer items spent as part of the order.\r\n     * @param consideration The consideration items received as part of the\r\n     *                      order along with the recipients of each item.\r\n     */\r\n    event OrderFulfilled(\r\n        bytes32 orderHash,\r\n        address indexed offerer,\r\n        address indexed zone,\r\n        address recipient,\r\n        SpentItem[] offer,\r\n        ReceivedItem[] consideration\r\n    );\r\n\r\n    /**\r\n     * @dev Emit an event whenever an order is successfully cancelled.\r\n     *\r\n     * @param orderHash The hash of the cancelled order.\r\n     * @param offerer   The offerer of the cancelled order.\r\n     * @param zone      The zone of the cancelled order.\r\n     */\r\n    event OrderCancelled(\r\n        bytes32 orderHash,\r\n        address indexed offerer,\r\n        address indexed zone\r\n    );\r\n\r\n    /**\r\n     * @dev Emit an event whenever an order is explicitly validated. Note that\r\n     *      this event will not be emitted on partial fills even though they do\r\n     *      validate the order as part of partial fulfillment.\r\n     *\r\n     * @param orderHash The hash of the validated order.\r\n     * @param offerer   The offerer of the validated order.\r\n     * @param zone      The zone of the validated order.\r\n     */\r\n    event OrderValidated(\r\n        bytes32 orderHash,\r\n        address indexed offerer,\r\n        address indexed zone\r\n    );\r\n\r\n    /**\r\n     * @dev Emit an event whenever a counter for a given offerer is incremented.\r\n     *\r\n     * @param newCounter The new counter for the offerer.\r\n     * @param offerer  The offerer in question.\r\n     */\r\n    event CounterIncremented(uint256 newCounter, address indexed offerer);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to fill an order that has\r\n     *      already been fully filled.\r\n     *\r\n     * @param orderHash The order hash on which a fill was attempted.\r\n     */\r\n    error OrderAlreadyFilled(bytes32 orderHash);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to fill an order outside the\r\n     *      specified start time and end time.\r\n     */\r\n    error InvalidTime();\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to fill an order referencing an\r\n     *      invalid conduit (i.e. one that has not been deployed).\r\n     */\r\n    error InvalidConduit(bytes32 conduitKey, address conduit);\r\n\r\n    /**\r\n     * @dev Revert with an error when an order is supplied for fulfillment with\r\n     *      a consideration array that is shorter than the original array.\r\n     */\r\n    error MissingOriginalConsiderationItems();\r\n\r\n    /**\r\n     * @dev Revert with an error when a call to a conduit fails with revert data\r\n     *      that is too expensive to return.\r\n     */\r\n    error InvalidCallToConduit(address conduit);\r\n\r\n    /**\r\n     * @dev Revert with an error if a consideration amount has not been fully\r\n     *      zeroed out after applying all fulfillments.\r\n     *\r\n     * @param orderIndex         The index of the order with the consideration\r\n     *                           item with a shortfall.\r\n     * @param considerationIndex The index of the consideration item on the\r\n     *                           order.\r\n     * @param shortfallAmount    The unfulfilled consideration amount.\r\n     */\r\n    error ConsiderationNotMet(\r\n        uint256 orderIndex,\r\n        uint256 considerationIndex,\r\n        uint256 shortfallAmount\r\n    );\r\n\r\n    /**\r\n     * @dev Revert with an error when insufficient ether is supplied as part of\r\n     *      msg.value when fulfilling orders.\r\n     */\r\n    error InsufficientEtherSupplied();\r\n\r\n    /**\r\n     * @dev Revert with an error when an ether transfer reverts.\r\n     */\r\n    error EtherTransferGenericFailure(address account, uint256 amount);\r\n\r\n    /**\r\n     * @dev Revert with an error when a partial fill is attempted on an order\r\n     *      that does not specify partial fill support in its order type.\r\n     */\r\n    error PartialFillsNotEnabledForOrder();\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to fill an order that has been\r\n     *      cancelled.\r\n     *\r\n     * @param orderHash The hash of the cancelled order.\r\n     */\r\n    error OrderIsCancelled(bytes32 orderHash);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to fill a basic order that has\r\n     *      been partially filled.\r\n     *\r\n     * @param orderHash The hash of the partially used order.\r\n     */\r\n    error OrderPartiallyFilled(bytes32 orderHash);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to cancel an order as a caller\r\n     *      other than the indicated offerer or zone.\r\n     */\r\n    error InvalidCanceller();\r\n\r\n    /**\r\n     * @dev Revert with an error when supplying a fraction with a value of zero\r\n     *      for the numerator or denominator, or one where the numerator exceeds\r\n     *      the denominator.\r\n     */\r\n    error BadFraction();\r\n\r\n    /**\r\n     * @dev Revert with an error when a caller attempts to supply callvalue to a\r\n     *      non-payable basic order route or does not supply any callvalue to a\r\n     *      payable basic order route.\r\n     */\r\n    error InvalidMsgValue(uint256 value);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to fill a basic order using\r\n     *      calldata not produced by default ABI encoding.\r\n     */\r\n    error InvalidBasicOrderParameterEncoding();\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to fulfill any number of\r\n     *      available orders when none are fulfillable.\r\n     */\r\n    error NoSpecifiedOrdersAvailable();\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to fulfill an order with an\r\n     *      offer for ETH outside of matching orders.\r\n     */\r\n    error InvalidNativeOfferItem();\r\n}\r\n"
    },
    "contracts/lib/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n\r\nimport { ReentrancyErrors } from \"../interfaces/ReentrancyErrors.sol\";\r\n\r\nimport \"./ConsiderationConstants.sol\";\r\n\r\n/**\r\n * @title ReentrancyGuard\r\n * @author 0age\r\n * @notice ReentrancyGuard contains a storage variable and related functionality\r\n *         for protecting against reentrancy.\r\n */\r\ncontract ReentrancyGuard is ReentrancyErrors {\r\n    // Prevent reentrant calls on protected functions.\r\n    uint256 private _reentrancyGuard;\r\n\r\n    /**\r\n     * @dev Initialize the reentrancy guard during deployment.\r\n     */\r\n    constructor() {\r\n        // Initialize the reentrancy guard in a cleared state.\r\n        _reentrancyGuard = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to ensure that the sentinel value for the\r\n     *      reentrancy guard is not currently set and, if not, to set the\r\n     *      sentinel value for the reentrancy guard.\r\n     */\r\n    function _setReentrancyGuard() internal {\r\n        // Ensure that the reentrancy guard is not already set.\r\n        _assertNonReentrant();\r\n\r\n        // Set the reentrancy guard.\r\n        _reentrancyGuard = _ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to unset the reentrancy guard sentinel value.\r\n     */\r\n    function _clearReentrancyGuard() internal {\r\n        // Clear the reentrancy guard.\r\n        _reentrancyGuard = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to ensure that the sentinel value for the\r\n            reentrancy guard is not currently set.\r\n     */\r\n    function _assertNonReentrant() internal view {\r\n        // Ensure that the reentrancy guard is not currently set.\r\n        if (_reentrancyGuard != _NOT_ENTERED) {\r\n            revert NoReentrantCalls();\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ReentrancyErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\n/**\r\n * @title ReentrancyErrors\r\n * @author 0age\r\n * @notice ReentrancyErrors contains errors related to reentrancy.\r\n */\r\ninterface ReentrancyErrors {\r\n    /**\r\n     * @dev Revert with an error when a caller attempts to reenter a protected\r\n     *      function.\r\n     */\r\n    error NoReentrantCalls();\r\n}\r\n"
    },
    "contracts/interfaces/EIP1271Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\ninterface EIP1271Interface {\r\n    function isValidSignature(bytes32 digest, bytes calldata signature)\r\n        external\r\n        view\r\n        returns (bytes4);\r\n}\r\n"
    },
    "contracts/interfaces/SignatureVerificationErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\n/**\r\n * @title SignatureVerificationErrors\r\n * @author 0age\r\n * @notice SignatureVerificationErrors contains all errors related to signature\r\n *         verification.\r\n */\r\ninterface SignatureVerificationErrors {\r\n    /**\r\n     * @dev Revert with an error when a signature that does not contain a v\r\n     *      value of 27 or 28 has been supplied.\r\n     *\r\n     * @param v The invalid v value.\r\n     */\r\n    error BadSignatureV(uint8 v);\r\n\r\n    /**\r\n     * @dev Revert with an error when the signer recovered by the supplied\r\n     *      signature does not match the offerer or an allowed EIP-1271 signer\r\n     *      as specified by the offerer in the event they are a contract.\r\n     */\r\n    error InvalidSigner();\r\n\r\n    /**\r\n     * @dev Revert with an error when a signer cannot be recovered from the\r\n     *      supplied signature.\r\n     */\r\n    error InvalidSignature();\r\n\r\n    /**\r\n     * @dev Revert with an error when an EIP-1271 call to an account fails.\r\n     */\r\n    error BadContractSignature();\r\n}\r\n"
    },
    "contracts/lib/LowLevelHelpers.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n\r\nimport \"./ConsiderationConstants.sol\";\r\n\r\n/**\r\n * @title LowLevelHelpers\r\n * @author 0age\r\n * @notice LowLevelHelpers contains logic for performing various low-level\r\n *         operations.\r\n */\r\ncontract LowLevelHelpers {\r\n    /**\r\n     * @dev Internal view function to staticcall an arbitrary target with given\r\n     *      calldata. Note that no data is written to memory and no contract\r\n     *      size check is performed.\r\n     *\r\n     * @param target   The account to staticcall.\r\n     * @param callData The calldata to supply when staticcalling the target.\r\n     *\r\n     * @return success The status of the staticcall to the target.\r\n     */\r\n    function _staticcall(address target, bytes memory callData)\r\n        internal\r\n        view\r\n        returns (bool success)\r\n    {\r\n        assembly {\r\n            // Perform the staticcall.\r\n            success := staticcall(\r\n                gas(),\r\n                target,\r\n                add(callData, OneWord),\r\n                mload(callData),\r\n                0,\r\n                0\r\n            )\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert and pass along the revert reason if\r\n     *      data was returned by the last call and that the size of that data\r\n     *      does not exceed the currently allocated memory size.\r\n     */\r\n    function _revertWithReasonIfOneIsReturned() internal view {\r\n        assembly {\r\n            // If it returned a message, bubble it up as long as sufficient gas\r\n            // remains to do so:\r\n            if returndatasize() {\r\n                // Ensure that sufficient gas is available to copy returndata\r\n                // while expanding memory where necessary. Start by computing\r\n                // the word size of returndata and allocated memory.\r\n                let returnDataWords := div(\r\n                    add(returndatasize(), AlmostOneWord),\r\n                    OneWord\r\n                )\r\n\r\n                // Note: use the free memory pointer in place of msize() to work\r\n                // around a Yul warning that prevents accessing msize directly\r\n                // when the IR pipeline is activated.\r\n                let msizeWords := div(mload(FreeMemoryPointerSlot), OneWord)\r\n\r\n                // Next, compute the cost of the returndatacopy.\r\n                let cost := mul(CostPerWord, returnDataWords)\r\n\r\n                // Then, compute cost of new memory allocation.\r\n                if gt(returnDataWords, msizeWords) {\r\n                    cost := add(\r\n                        cost,\r\n                        add(\r\n                            mul(sub(returnDataWords, msizeWords), CostPerWord),\r\n                            div(\r\n                                sub(\r\n                                    mul(returnDataWords, returnDataWords),\r\n                                    mul(msizeWords, msizeWords)\r\n                                ),\r\n                                MemoryExpansionCoefficient\r\n                            )\r\n                        )\r\n                    )\r\n                }\r\n\r\n                // Finally, add a small constant and compare to gas remaining;\r\n                // bubble up the revert data if enough gas is still available.\r\n                if lt(add(cost, ExtraGasBuffer), gas()) {\r\n                    // Copy returndata to memory; overwrite existing memory.\r\n                    returndatacopy(0, 0, returndatasize())\r\n\r\n                    // Revert, specifying memory region with copied returndata.\r\n                    revert(0, returndatasize())\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to determine if the first word of returndata\r\n     *      matches an expected magic value.\r\n     *\r\n     * @param expected The expected magic value.\r\n     *\r\n     * @return A boolean indicating whether the expected value matches the one\r\n     *         located in the first word of returndata.\r\n     */\r\n    function _doesNotMatchMagic(bytes4 expected) internal pure returns (bool) {\r\n        // Declare a variable for the value held by the return data buffer.\r\n        bytes4 result;\r\n\r\n        // Utilize assembly in order to read directly from returndata buffer.\r\n        assembly {\r\n            // Only put result on stack if return data is exactly one word.\r\n            if eq(returndatasize(), OneWord) {\r\n                // Copy the word directly from return data into scratch space.\r\n                returndatacopy(0, 0, OneWord)\r\n\r\n                // Take value from scratch space and place it on the stack.\r\n                result := mload(0)\r\n            }\r\n        }\r\n\r\n        // Return a boolean indicating whether expected and located value match.\r\n        return result != expected;\r\n    }\r\n}\r\n"
    },
    "contracts/lib/FulfillmentApplier.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n\r\nimport { ItemType, Side } from \"./ConsiderationEnums.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    OfferItem,\r\n    ConsiderationItem,\r\n    ReceivedItem,\r\n    OrderParameters,\r\n    AdvancedOrder,\r\n    Execution,\r\n    FulfillmentComponent\r\n} from \"./ConsiderationStructs.sol\";\r\n\r\nimport \"./ConsiderationConstants.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    FulfillmentApplicationErrors\r\n} from \"../interfaces/FulfillmentApplicationErrors.sol\";\r\n\r\n/**\r\n * @title FulfillmentApplier\r\n * @author 0age\r\n * @notice FulfillmentApplier contains logic related to applying fulfillments,\r\n *         both as part of order matching (where offer items are matched to\r\n *         consideration items) as well as fulfilling available orders (where\r\n *         order items and consideration items are independently aggregated).\r\n */\r\ncontract FulfillmentApplier is FulfillmentApplicationErrors {\r\n    /**\r\n     * @dev Internal pure function to match offer items to consideration items\r\n     *      on a group of orders via a supplied fulfillment.\r\n     *\r\n     * @param advancedOrders          The orders to match.\r\n     * @param offerComponents         An array designating offer components to\r\n     *                                match to consideration components.\r\n     * @param considerationComponents An array designating consideration\r\n     *                                components to match to offer components.\r\n     *                                Note that each consideration amount must\r\n     *                                be zero in order for the match operation\r\n     *                                to be valid.\r\n     *\r\n     * @return execution The transfer performed as a result of the fulfillment.\r\n     */\r\n    function _applyFulfillment(\r\n        AdvancedOrder[] memory advancedOrders,\r\n        FulfillmentComponent[] calldata offerComponents,\r\n        FulfillmentComponent[] calldata considerationComponents\r\n    ) internal pure returns (Execution memory execution) {\r\n        // Ensure 1+ of both offer and consideration components are supplied.\r\n        if (\r\n            offerComponents.length == 0 || considerationComponents.length == 0\r\n        ) {\r\n            revert OfferAndConsiderationRequiredOnFulfillment();\r\n        }\r\n\r\n        // Declare a new Execution struct.\r\n        Execution memory considerationExecution;\r\n\r\n        // Validate & aggregate consideration items to new Execution object.\r\n        _aggregateValidFulfillmentConsiderationItems(\r\n            advancedOrders,\r\n            considerationComponents,\r\n            considerationExecution\r\n        );\r\n\r\n        // Retrieve the consideration item from the execution struct.\r\n        ReceivedItem memory considerationItem = considerationExecution.item;\r\n\r\n        // Recipient does not need to be specified because it will always be set\r\n        // to that of the consideration.\r\n        // Validate & aggregate offer items to Execution object.\r\n        _aggregateValidFulfillmentOfferItems(\r\n            advancedOrders,\r\n            offerComponents,\r\n            execution\r\n        );\r\n\r\n        // Ensure offer and consideration share types, tokens and identifiers.\r\n        if (\r\n            execution.item.itemType != considerationItem.itemType ||\r\n            execution.item.token != considerationItem.token ||\r\n            execution.item.identifier != considerationItem.identifier\r\n        ) {\r\n            revert MismatchedFulfillmentOfferAndConsiderationComponents();\r\n        }\r\n\r\n        // If total consideration amount exceeds the offer amount...\r\n        if (considerationItem.amount > execution.item.amount) {\r\n            // Retrieve the first consideration component from the fulfillment.\r\n            FulfillmentComponent memory targetComponent = (\r\n                considerationComponents[0]\r\n            );\r\n\r\n            // Skip underflow check as the conditional being true implies that\r\n            // considerationItem.amount > execution.item.amount.\r\n            unchecked {\r\n                // Add excess consideration item amount to original order array.\r\n                advancedOrders[targetComponent.orderIndex]\r\n                    .parameters\r\n                    .consideration[targetComponent.itemIndex]\r\n                    .startAmount = (considerationItem.amount -\r\n                    execution.item.amount);\r\n            }\r\n\r\n            // Reduce total consideration amount to equal the offer amount.\r\n            considerationItem.amount = execution.item.amount;\r\n        } else {\r\n            // Retrieve the first offer component from the fulfillment.\r\n            FulfillmentComponent memory targetComponent = offerComponents[0];\r\n\r\n            // Skip underflow check as the conditional being false implies that\r\n            // execution.item.amount >= considerationItem.amount.\r\n            unchecked {\r\n                // Add excess offer item amount to the original array of orders.\r\n                advancedOrders[targetComponent.orderIndex]\r\n                    .parameters\r\n                    .offer[targetComponent.itemIndex]\r\n                    .startAmount = (execution.item.amount -\r\n                    considerationItem.amount);\r\n            }\r\n\r\n            // Reduce total offer amount to equal the consideration amount.\r\n            execution.item.amount = considerationItem.amount;\r\n        }\r\n\r\n        // Reuse consideration recipient.\r\n        execution.item.recipient = considerationItem.recipient;\r\n\r\n        // Return the final execution that will be triggered for relevant items.\r\n        return execution; // Execution(considerationItem, offerer, conduitKey);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to aggregate offer or consideration items\r\n     *      from a group of orders into a single execution via a supplied array\r\n     *      of fulfillment components. Items that are not available to aggregate\r\n     *      will not be included in the aggregated execution.\r\n     *\r\n     * @param advancedOrders        The orders to aggregate.\r\n     * @param side                  The side (i.e. offer or consideration).\r\n     * @param fulfillmentComponents An array designating item components to\r\n     *                              aggregate if part of an available order.\r\n     * @param fulfillerConduitKey   A bytes32 value indicating what conduit, if\r\n     *                              any, to source the fulfiller's token\r\n     *                              approvals from. The zero hash signifies that\r\n     *                              no conduit should be used, with approvals\r\n     *                              set directly on this contract.\r\n     * @param recipient             The intended recipient for all received\r\n     *                              items.\r\n     *\r\n     * @return execution The transfer performed as a result of the fulfillment.\r\n     */\r\n    function _aggregateAvailable(\r\n        AdvancedOrder[] memory advancedOrders,\r\n        Side side,\r\n        FulfillmentComponent[] memory fulfillmentComponents,\r\n        bytes32 fulfillerConduitKey,\r\n        address recipient\r\n    ) internal view returns (Execution memory execution) {\r\n        // Skip overflow / underflow checks; conditions checked or unreachable.\r\n        unchecked {\r\n            // Retrieve fulfillment components array length and place on stack.\r\n            // Ensure at least one fulfillment component has been supplied.\r\n            if (fulfillmentComponents.length == 0) {\r\n                revert MissingFulfillmentComponentOnAggregation(side);\r\n            }\r\n\r\n            // If the fulfillment components are offer components...\r\n            if (side == Side.OFFER) {\r\n                // Set the supplied recipient on the execution item.\r\n                execution.item.recipient = payable(recipient);\r\n\r\n                // Return execution for aggregated items provided by offerer.\r\n                _aggregateValidFulfillmentOfferItems(\r\n                    advancedOrders,\r\n                    fulfillmentComponents,\r\n                    execution\r\n                );\r\n            } else {\r\n                // Otherwise, fulfillment components are consideration\r\n                // components. Return execution for aggregated items provided by\r\n                // the fulfiller.\r\n                _aggregateValidFulfillmentConsiderationItems(\r\n                    advancedOrders,\r\n                    fulfillmentComponents,\r\n                    execution\r\n                );\r\n\r\n                // Set the caller as the offerer on the execution.\r\n                execution.offerer = msg.sender;\r\n\r\n                // Set fulfiller conduit key as the conduit key on execution.\r\n                execution.conduitKey = fulfillerConduitKey;\r\n            }\r\n\r\n            // Set the offerer and recipient to null address if execution\r\n            // amount is zero. This will cause the execution item to be skipped.\r\n            if (execution.item.amount == 0) {\r\n                execution.offerer = address(0);\r\n                execution.item.recipient = payable(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to aggregate a group of offer items using\r\n     *      supplied directives on which component items are candidates for\r\n     *      aggregation, skipping items on orders that are not available.\r\n     *\r\n     * @param advancedOrders  The orders to aggregate offer items from.\r\n     * @param offerComponents An array of FulfillmentComponent structs\r\n     *                        indicating the order index and item index of each\r\n     *                        candidate offer item for aggregation.\r\n     * @param execution       The execution to apply the aggregation to.\r\n     */\r\n    function _aggregateValidFulfillmentOfferItems(\r\n        AdvancedOrder[] memory advancedOrders,\r\n        FulfillmentComponent[] memory offerComponents,\r\n        Execution memory execution\r\n    ) internal pure {\r\n        assembly {\r\n            // Declare function for reverts on invalid fulfillment data.\r\n            function throwInvalidFulfillmentComponentData() {\r\n                // Store the InvalidFulfillmentComponentData error signature.\r\n                mstore(0, InvalidFulfillmentComponentData_error_signature)\r\n\r\n                // Return, supplying InvalidFulfillmentComponentData signature.\r\n                revert(0, InvalidFulfillmentComponentData_error_len)\r\n            }\r\n\r\n            // Declare function for reverts due to arithmetic overflows.\r\n            function throwOverflow() {\r\n                // Store the Panic error signature.\r\n                mstore(0, Panic_error_signature)\r\n\r\n                // Store the arithmetic (0x11) panic code as initial argument.\r\n                mstore(Panic_error_offset, Panic_arithmetic)\r\n\r\n                // Return, supplying Panic signature and arithmetic code.\r\n                revert(0, Panic_error_length)\r\n            }\r\n\r\n            // Get position in offerComponents head.\r\n            let fulfillmentHeadPtr := add(offerComponents, OneWord)\r\n\r\n            // Retrieve the order index using the fulfillment pointer.\r\n            let orderIndex := mload(mload(fulfillmentHeadPtr))\r\n\r\n            // Ensure that the order index is not out of range.\r\n            if iszero(lt(orderIndex, mload(advancedOrders))) {\r\n                throwInvalidFulfillmentComponentData()\r\n            }\r\n\r\n            // Read advancedOrders[orderIndex] pointer from its array head.\r\n            let orderPtr := mload(\r\n                // Calculate head position of advancedOrders[orderIndex].\r\n                add(add(advancedOrders, OneWord), mul(orderIndex, OneWord))\r\n            )\r\n\r\n            // Read the pointer to OrderParameters from the AdvancedOrder.\r\n            let paramsPtr := mload(orderPtr)\r\n\r\n            // Load the offer array pointer.\r\n            let offerArrPtr := mload(\r\n                add(paramsPtr, OrderParameters_offer_head_offset)\r\n            )\r\n\r\n            // Retrieve item index using an offset of the fulfillment pointer.\r\n            let itemIndex := mload(\r\n                add(mload(fulfillmentHeadPtr), Fulfillment_itemIndex_offset)\r\n            )\r\n\r\n            // Only continue if the fulfillment is not invalid.\r\n            if iszero(lt(itemIndex, mload(offerArrPtr))) {\r\n                throwInvalidFulfillmentComponentData()\r\n            }\r\n\r\n            // Retrieve consideration item pointer using the item index.\r\n            let offerItemPtr := mload(\r\n                add(\r\n                    // Get pointer to beginning of receivedItem.\r\n                    add(offerArrPtr, OneWord),\r\n                    // Calculate offset to pointer for desired order.\r\n                    mul(itemIndex, OneWord)\r\n                )\r\n            )\r\n\r\n            // Declare a variable for the final aggregated item amount.\r\n            let amount := 0\r\n\r\n            // Create variable to track errors encountered with amount.\r\n            let errorBuffer := 0\r\n\r\n            // Only add offer amount to execution amount on a nonzero numerator.\r\n            if mload(add(orderPtr, AdvancedOrder_numerator_offset)) {\r\n                // Retrieve amount pointer using consideration item pointer.\r\n                let amountPtr := add(offerItemPtr, Common_amount_offset)\r\n\r\n                // Set the amount.\r\n                amount := mload(amountPtr)\r\n\r\n                // Zero out amount on item to indicate it is credited.\r\n                mstore(amountPtr, 0)\r\n\r\n                // Buffer indicating whether issues were found.\r\n                errorBuffer := iszero(amount)\r\n            }\r\n\r\n            // Retrieve the received item pointer.\r\n            let receivedItemPtr := mload(execution)\r\n\r\n            // Set the item type on the received item.\r\n            mstore(receivedItemPtr, mload(offerItemPtr))\r\n\r\n            // Set the token on the received item.\r\n            mstore(\r\n                add(receivedItemPtr, Common_token_offset),\r\n                mload(add(offerItemPtr, Common_token_offset))\r\n            )\r\n\r\n            // Set the identifier on the received item.\r\n            mstore(\r\n                add(receivedItemPtr, Common_identifier_offset),\r\n                mload(add(offerItemPtr, Common_identifier_offset))\r\n            )\r\n\r\n            // Set the offerer on returned execution using order pointer.\r\n            mstore(add(execution, Execution_offerer_offset), mload(paramsPtr))\r\n\r\n            // Set conduitKey on returned execution via offset of order pointer.\r\n            mstore(\r\n                add(execution, Execution_conduit_offset),\r\n                mload(add(paramsPtr, OrderParameters_conduit_offset))\r\n            )\r\n\r\n            // Calculate the hash of (itemType, token, identifier).\r\n            let dataHash := keccak256(\r\n                receivedItemPtr,\r\n                ReceivedItem_CommonParams_size\r\n            )\r\n\r\n            // Get position one word past last element in head of array.\r\n            let endPtr := add(\r\n                offerComponents,\r\n                mul(mload(offerComponents), OneWord)\r\n            )\r\n\r\n            // Iterate over remaining offer components.\r\n            // prettier-ignore\r\n            for {} lt(fulfillmentHeadPtr,  endPtr) {} {\r\n                // Increment the pointer to the fulfillment head by one word.\r\n                fulfillmentHeadPtr := add(fulfillmentHeadPtr, OneWord)\r\n\r\n                // Get the order index using the fulfillment pointer.\r\n                orderIndex := mload(mload(fulfillmentHeadPtr))\r\n\r\n                // Ensure the order index is in range.\r\n                if iszero(lt(orderIndex, mload(advancedOrders))) {\r\n                  throwInvalidFulfillmentComponentData()\r\n                }\r\n\r\n                // Get pointer to AdvancedOrder element.\r\n                orderPtr := mload(\r\n                    add(\r\n                        add(advancedOrders, OneWord),\r\n                        mul(orderIndex, OneWord)\r\n                    )\r\n                )\r\n\r\n                // Only continue if numerator is not zero.\r\n                if iszero(mload(\r\n                    add(orderPtr, AdvancedOrder_numerator_offset)\r\n                )) {\r\n                  continue\r\n                }\r\n\r\n                // Read the pointer to OrderParameters from the AdvancedOrder.\r\n                paramsPtr := mload(orderPtr)\r\n\r\n                // Load offer array pointer.\r\n                offerArrPtr := mload(\r\n                    add(\r\n                        paramsPtr,\r\n                        OrderParameters_offer_head_offset\r\n                    )\r\n                )\r\n\r\n                // Get the item index using the fulfillment pointer.\r\n                itemIndex := mload(add(mload(fulfillmentHeadPtr), OneWord))\r\n\r\n                // Throw if itemIndex is out of the range of array.\r\n                if iszero(\r\n                    lt(itemIndex, mload(offerArrPtr))\r\n                ) {\r\n                    throwInvalidFulfillmentComponentData()\r\n                }\r\n\r\n                // Retrieve offer item pointer using index.\r\n                offerItemPtr := mload(\r\n                    add(\r\n                        // Get pointer to beginning of receivedItem.\r\n                        add(offerArrPtr, OneWord),\r\n                        // Use offset to pointer for desired order.\r\n                        mul(itemIndex, OneWord)\r\n                    )\r\n                )\r\n\r\n                // Retrieve amount pointer using offer item pointer.\r\n                let amountPtr := add(\r\n                      offerItemPtr,\r\n                      Common_amount_offset\r\n                )\r\n\r\n                // Add offer amount to execution amount.\r\n                let newAmount := add(amount, mload(amountPtr))\r\n\r\n                // Update error buffer: 1 = zero amount, 2 = overflow, 3 = both.\r\n                errorBuffer := or(\r\n                  errorBuffer,\r\n                  or(\r\n                    shl(1, lt(newAmount, amount)),\r\n                    iszero(mload(amountPtr))\r\n                  )\r\n                )\r\n\r\n                // Update the amount to the new, summed amount.\r\n                amount := newAmount\r\n\r\n                // Zero out amount on original item to indicate it is credited.\r\n                mstore(amountPtr, 0)\r\n\r\n                // Ensure the indicated item matches original item.\r\n                if iszero(\r\n                    and(\r\n                        and(\r\n                          // The offerer must match on both items.\r\n                          eq(\r\n                              mload(paramsPtr),\r\n                              mload(\r\n                                  add(execution, Execution_offerer_offset)\r\n                              )\r\n                          ),\r\n                          // The conduit key must match on both items.\r\n                          eq(\r\n                              mload(\r\n                                  add(\r\n                                      paramsPtr,\r\n                                      OrderParameters_conduit_offset\r\n                                  )\r\n                              ),\r\n                              mload(\r\n                                  add(\r\n                                      execution,\r\n                                      Execution_conduit_offset\r\n                                  )\r\n                              )\r\n                          )\r\n                        ),\r\n                        // The itemType, token, and identifier must match.\r\n                        eq(\r\n                            dataHash,\r\n                            keccak256(\r\n                                offerItemPtr,\r\n                                ReceivedItem_CommonParams_size\r\n                            )\r\n                        )\r\n                    )\r\n                ) {\r\n                    // Throw if any of the requirements are not met.\r\n                    throwInvalidFulfillmentComponentData()\r\n                }\r\n            }\r\n            // Write final amount to execution.\r\n            mstore(add(mload(execution), Common_amount_offset), amount)\r\n\r\n            // Determine whether the error buffer contains a nonzero error code.\r\n            if errorBuffer {\r\n                // If errorBuffer is 1, an item had an amount of zero.\r\n                if eq(errorBuffer, 1) {\r\n                    // Store the MissingItemAmount error signature.\r\n                    mstore(0, MissingItemAmount_error_signature)\r\n\r\n                    // Return, supplying MissingItemAmount signature.\r\n                    revert(0, MissingItemAmount_error_len)\r\n                }\r\n\r\n                // If errorBuffer is not 1 or 0, the sum overflowed.\r\n                // Panic!\r\n                throwOverflow()\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to aggregate a group of consideration items\r\n     *      using supplied directives on which component items are candidates\r\n     *      for aggregation, skipping items on orders that are not available.\r\n     *\r\n     * @param advancedOrders          The orders to aggregate consideration\r\n     *                                items from.\r\n     * @param considerationComponents An array of FulfillmentComponent structs\r\n     *                                indicating the order index and item index\r\n     *                                of each candidate consideration item for\r\n     *                                aggregation.\r\n     * @param execution       The execution to apply the aggregation to.\r\n     */\r\n    function _aggregateValidFulfillmentConsiderationItems(\r\n        AdvancedOrder[] memory advancedOrders,\r\n        FulfillmentComponent[] memory considerationComponents,\r\n        Execution memory execution\r\n    ) internal pure {\r\n        // Utilize assembly in order to efficiently aggregate the items.\r\n        assembly {\r\n            // Declare function for reverts on invalid fulfillment data.\r\n            function throwInvalidFulfillmentComponentData() {\r\n                // Store the InvalidFulfillmentComponentData error signature.\r\n                mstore(0, InvalidFulfillmentComponentData_error_signature)\r\n\r\n                // Return, supplying InvalidFulfillmentComponentData signature.\r\n                revert(0, InvalidFulfillmentComponentData_error_len)\r\n            }\r\n\r\n            // Declare function for reverts due to arithmetic overflows.\r\n            function throwOverflow() {\r\n                // Store the Panic error signature.\r\n                mstore(0, Panic_error_signature)\r\n\r\n                // Store the arithmetic (0x11) panic code as initial argument.\r\n                mstore(Panic_error_offset, Panic_arithmetic)\r\n\r\n                // Return, supplying Panic signature and arithmetic code.\r\n                revert(0, Panic_error_length)\r\n            }\r\n\r\n            // Get position in considerationComponents head.\r\n            let fulfillmentHeadPtr := add(considerationComponents, OneWord)\r\n\r\n            // Retrieve the order index using the fulfillment pointer.\r\n            let orderIndex := mload(mload(fulfillmentHeadPtr))\r\n\r\n            // Ensure that the order index is not out of range.\r\n            if iszero(lt(orderIndex, mload(advancedOrders))) {\r\n                throwInvalidFulfillmentComponentData()\r\n            }\r\n\r\n            // Read advancedOrders[orderIndex] pointer from its array head.\r\n            let orderPtr := mload(\r\n                // Calculate head position of advancedOrders[orderIndex].\r\n                add(add(advancedOrders, OneWord), mul(orderIndex, OneWord))\r\n            )\r\n\r\n            // Load consideration array pointer.\r\n            let considerationArrPtr := mload(\r\n                add(\r\n                    // Read pointer to OrderParameters from the AdvancedOrder.\r\n                    mload(orderPtr),\r\n                    OrderParameters_consideration_head_offset\r\n                )\r\n            )\r\n\r\n            // Retrieve item index using an offset of the fulfillment pointer.\r\n            let itemIndex := mload(\r\n                add(mload(fulfillmentHeadPtr), Fulfillment_itemIndex_offset)\r\n            )\r\n\r\n            // Ensure that the order index is not out of range.\r\n            if iszero(lt(itemIndex, mload(considerationArrPtr))) {\r\n                throwInvalidFulfillmentComponentData()\r\n            }\r\n\r\n            // Retrieve consideration item pointer using the item index.\r\n            let considerationItemPtr := mload(\r\n                add(\r\n                    // Get pointer to beginning of receivedItem.\r\n                    add(considerationArrPtr, OneWord),\r\n                    // Calculate offset to pointer for desired order.\r\n                    mul(itemIndex, OneWord)\r\n                )\r\n            )\r\n\r\n            // Declare a variable for the final aggregated item amount.\r\n            let amount := 0\r\n\r\n            // Create variable to track errors encountered with amount.\r\n            let errorBuffer := 0\r\n\r\n            // Only add consideration amount to execution amount if numerator is\r\n            // greater than zero.\r\n            if mload(add(orderPtr, AdvancedOrder_numerator_offset)) {\r\n                // Retrieve amount pointer using consideration item pointer.\r\n                let amountPtr := add(considerationItemPtr, Common_amount_offset)\r\n\r\n                // Set the amount.\r\n                amount := mload(amountPtr)\r\n\r\n                // Set error bit if amount is zero.\r\n                errorBuffer := iszero(amount)\r\n\r\n                // Zero out amount on item to indicate it is credited.\r\n                mstore(amountPtr, 0)\r\n            }\r\n\r\n            // Retrieve ReceivedItem pointer from Execution.\r\n            let receivedItem := mload(execution)\r\n\r\n            // Set the item type on the received item.\r\n            mstore(receivedItem, mload(considerationItemPtr))\r\n\r\n            // Set the token on the received item.\r\n            mstore(\r\n                add(receivedItem, Common_token_offset),\r\n                mload(add(considerationItemPtr, Common_token_offset))\r\n            )\r\n\r\n            // Set the identifier on the received item.\r\n            mstore(\r\n                add(receivedItem, Common_identifier_offset),\r\n                mload(add(considerationItemPtr, Common_identifier_offset))\r\n            )\r\n\r\n            // Set the recipient on the received item.\r\n            mstore(\r\n                add(receivedItem, ReceivedItem_recipient_offset),\r\n                mload(\r\n                    add(\r\n                        considerationItemPtr,\r\n                        ConsiderationItem_recipient_offset\r\n                    )\r\n                )\r\n            )\r\n\r\n            // Calculate the hash of (itemType, token, identifier).\r\n            let dataHash := keccak256(\r\n                receivedItem,\r\n                ReceivedItem_CommonParams_size\r\n            )\r\n\r\n            // Get position one word past last element in head of array.\r\n            let endPtr := add(\r\n                considerationComponents,\r\n                mul(mload(considerationComponents), OneWord)\r\n            )\r\n\r\n            // Iterate over remaining offer components.\r\n            // prettier-ignore\r\n            for {} lt(fulfillmentHeadPtr,  endPtr) {} {\r\n                // Increment position in considerationComponents head.\r\n                fulfillmentHeadPtr := add(fulfillmentHeadPtr, OneWord)\r\n\r\n                // Get the order index using the fulfillment pointer.\r\n                orderIndex := mload(mload(fulfillmentHeadPtr))\r\n\r\n                // Ensure the order index is in range.\r\n                if iszero(lt(orderIndex, mload(advancedOrders))) {\r\n                  throwInvalidFulfillmentComponentData()\r\n                }\r\n\r\n                // Get pointer to AdvancedOrder element.\r\n                orderPtr := mload(\r\n                    add(\r\n                        add(advancedOrders, OneWord),\r\n                        mul(orderIndex, OneWord)\r\n                    )\r\n                )\r\n\r\n                // Only continue if numerator is not zero.\r\n                if iszero(\r\n                    mload(add(orderPtr, AdvancedOrder_numerator_offset))\r\n                ) {\r\n                  continue\r\n                }\r\n\r\n                // Load consideration array pointer from OrderParameters.\r\n                considerationArrPtr := mload(\r\n                    add(\r\n                        // Get pointer to OrderParameters from AdvancedOrder.\r\n                        mload(orderPtr),\r\n                        OrderParameters_consideration_head_offset\r\n                    )\r\n                )\r\n\r\n                // Get the item index using the fulfillment pointer.\r\n                itemIndex := mload(add(mload(fulfillmentHeadPtr), OneWord))\r\n\r\n                // Check if itemIndex is within the range of array.\r\n                if iszero(lt(itemIndex, mload(considerationArrPtr))) {\r\n                    throwInvalidFulfillmentComponentData()\r\n                }\r\n\r\n                // Retrieve consideration item pointer using index.\r\n                considerationItemPtr := mload(\r\n                    add(\r\n                        // Get pointer to beginning of receivedItem.\r\n                        add(considerationArrPtr, OneWord),\r\n                        // Use offset to pointer for desired order.\r\n                        mul(itemIndex, OneWord)\r\n                    )\r\n                )\r\n\r\n                // Retrieve amount pointer using consideration item pointer.\r\n                let amountPtr := add(\r\n                      considerationItemPtr,\r\n                      Common_amount_offset\r\n                )\r\n\r\n                // Add offer amount to execution amount.\r\n                let newAmount := add(amount, mload(amountPtr))\r\n\r\n                // Update error buffer: 1 = zero amount, 2 = overflow, 3 = both.\r\n                errorBuffer := or(\r\n                  errorBuffer,\r\n                  or(\r\n                    shl(1, lt(newAmount, amount)),\r\n                    iszero(mload(amountPtr))\r\n                  )\r\n                )\r\n\r\n                // Update the amount to the new, summed amount.\r\n                amount := newAmount\r\n\r\n                // Zero out amount on original item to indicate it is credited.\r\n                mstore(amountPtr, 0)\r\n\r\n                // Ensure the indicated item matches original item.\r\n                if iszero(\r\n                    and(\r\n                        // Item recipients must match.\r\n                        eq(\r\n                            mload(\r\n                                add(\r\n                                    considerationItemPtr,\r\n                                    ConsiderItem_recipient_offset\r\n                                )\r\n                            ),\r\n                            mload(\r\n                                add(\r\n                                    receivedItem,\r\n                                    ReceivedItem_recipient_offset\r\n                                )\r\n                            )\r\n                        ),\r\n                        // The itemType, token, identifier must match.\r\n                        eq(\r\n                          dataHash,\r\n                          keccak256(\r\n                            considerationItemPtr,\r\n                            ReceivedItem_CommonParams_size\r\n                          )\r\n                        )\r\n                    )\r\n                ) {\r\n                    // Throw if any of the requirements are not met.\r\n                    throwInvalidFulfillmentComponentData()\r\n                }\r\n            }\r\n            // Write final amount to execution.\r\n            mstore(add(receivedItem, Common_amount_offset), amount)\r\n\r\n            // Determine whether the error buffer contains a nonzero error code.\r\n            if errorBuffer {\r\n                // If errorBuffer is 1, an item had an amount of zero.\r\n                if eq(errorBuffer, 1) {\r\n                    // Store the MissingItemAmount error signature.\r\n                    mstore(0, MissingItemAmount_error_signature)\r\n\r\n                    // Return, supplying MissingItemAmount signature.\r\n                    revert(0, MissingItemAmount_error_len)\r\n                }\r\n\r\n                // If errorBuffer is not 1 or 0, the sum overflowed.\r\n                // Panic!\r\n                throwOverflow()\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/FulfillmentApplicationErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport { Side } from \"../lib/ConsiderationEnums.sol\";\r\n\r\n/**\r\n * @title FulfillmentApplicationErrors\r\n * @author 0age\r\n * @notice FulfillmentApplicationErrors contains errors related to fulfillment\r\n *         application and aggregation.\r\n */\r\ninterface FulfillmentApplicationErrors {\r\n    /**\r\n     * @dev Revert with an error when a fulfillment is provided that does not\r\n     *      declare at least one component as part of a call to fulfill\r\n     *      available orders.\r\n     */\r\n    error MissingFulfillmentComponentOnAggregation(Side side);\r\n\r\n    /**\r\n     * @dev Revert with an error when a fulfillment is provided that does not\r\n     *      declare at least one offer component and at least one consideration\r\n     *      component.\r\n     */\r\n    error OfferAndConsiderationRequiredOnFulfillment();\r\n\r\n    /**\r\n     * @dev Revert with an error when the initial offer item named by a\r\n     *      fulfillment component does not match the type, token, identifier,\r\n     *      or conduit preference of the initial consideration item.\r\n     */\r\n    error MismatchedFulfillmentOfferAndConsiderationComponents();\r\n\r\n    /**\r\n     * @dev Revert with an error when an order or item index are out of range\r\n     *      or a fulfillment component does not match the type, token,\r\n     *      identifier, or conduit preference of the initial consideration item.\r\n     */\r\n    error InvalidFulfillmentComponentData();\r\n}\r\n"
    },
    "contracts/lib/CriteriaResolution.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n\r\nimport { ItemType, Side } from \"./ConsiderationEnums.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    OfferItem,\r\n    ConsiderationItem,\r\n    OrderParameters,\r\n    AdvancedOrder,\r\n    CriteriaResolver\r\n} from \"./ConsiderationStructs.sol\";\r\n\r\nimport \"./ConsiderationConstants.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    CriteriaResolutionErrors\r\n} from \"../interfaces/CriteriaResolutionErrors.sol\";\r\n\r\n/**\r\n * @title CriteriaResolution\r\n * @author 0age\r\n * @notice CriteriaResolution contains a collection of pure functions related to\r\n *         resolving criteria-based items.\r\n */\r\ncontract CriteriaResolution is CriteriaResolutionErrors {\r\n    /**\r\n     * @dev Internal pure function to apply criteria resolvers containing\r\n     *      specific token identifiers and associated proofs to order items.\r\n     *\r\n     * @param advancedOrders     The orders to apply criteria resolvers to.\r\n     * @param criteriaResolvers  An array where each element contains a\r\n     *                           reference to a specific order as well as that\r\n     *                           order's offer or consideration, a token\r\n     *                           identifier, and a proof that the supplied token\r\n     *                           identifier is contained in the order's merkle\r\n     *                           root. Note that a root of zero indicates that\r\n     *                           any transferable token identifier is valid and\r\n     *                           that no proof needs to be supplied.\r\n     */\r\n    function _applyCriteriaResolvers(\r\n        AdvancedOrder[] memory advancedOrders,\r\n        CriteriaResolver[] memory criteriaResolvers\r\n    ) internal pure {\r\n        // Skip overflow checks as all for loops are indexed starting at zero.\r\n        unchecked {\r\n            // Retrieve length of criteria resolvers array and place on stack.\r\n            uint256 totalCriteriaResolvers = criteriaResolvers.length;\r\n\r\n            // Retrieve length of orders array and place on stack.\r\n            uint256 totalAdvancedOrders = advancedOrders.length;\r\n\r\n            // Iterate over each criteria resolver.\r\n            for (uint256 i = 0; i < totalCriteriaResolvers; ++i) {\r\n                // Retrieve the criteria resolver.\r\n                CriteriaResolver memory criteriaResolver = (\r\n                    criteriaResolvers[i]\r\n                );\r\n\r\n                // Read the order index from memory and place it on the stack.\r\n                uint256 orderIndex = criteriaResolver.orderIndex;\r\n\r\n                // Ensure that the order index is in range.\r\n                if (orderIndex >= totalAdvancedOrders) {\r\n                    revert OrderCriteriaResolverOutOfRange();\r\n                }\r\n\r\n                // Skip criteria resolution for order if not fulfilled.\r\n                if (advancedOrders[orderIndex].numerator == 0) {\r\n                    continue;\r\n                }\r\n\r\n                // Retrieve the parameters for the order.\r\n                OrderParameters memory orderParameters = (\r\n                    advancedOrders[orderIndex].parameters\r\n                );\r\n\r\n                // Read component index from memory and place it on the stack.\r\n                uint256 componentIndex = criteriaResolver.index;\r\n\r\n                // Declare values for item's type and criteria.\r\n                ItemType itemType;\r\n                uint256 identifierOrCriteria;\r\n\r\n                // If the criteria resolver refers to an offer item...\r\n                if (criteriaResolver.side == Side.OFFER) {\r\n                    // Retrieve the offer.\r\n                    OfferItem[] memory offer = orderParameters.offer;\r\n\r\n                    // Ensure that the component index is in range.\r\n                    if (componentIndex >= offer.length) {\r\n                        revert OfferCriteriaResolverOutOfRange();\r\n                    }\r\n\r\n                    // Retrieve relevant item using the component index.\r\n                    OfferItem memory offerItem = offer[componentIndex];\r\n\r\n                    // Read item type and criteria from memory & place on stack.\r\n                    itemType = offerItem.itemType;\r\n                    identifierOrCriteria = offerItem.identifierOrCriteria;\r\n\r\n                    // Optimistically update item type to remove criteria usage.\r\n                    // Use assembly to operate on ItemType enum as a number.\r\n                    ItemType newItemType;\r\n                    assembly {\r\n                        // Item type 4 becomes 2 and item type 5 becomes 3.\r\n                        newItemType := sub(3, eq(itemType, 4))\r\n                    }\r\n                    offerItem.itemType = newItemType;\r\n\r\n                    // Optimistically update identifier w/ supplied identifier.\r\n                    offerItem.identifierOrCriteria = criteriaResolver\r\n                        .identifier;\r\n                } else {\r\n                    // Otherwise, the resolver refers to a consideration item.\r\n                    ConsiderationItem[] memory consideration = (\r\n                        orderParameters.consideration\r\n                    );\r\n\r\n                    // Ensure that the component index is in range.\r\n                    if (componentIndex >= consideration.length) {\r\n                        revert ConsiderationCriteriaResolverOutOfRange();\r\n                    }\r\n\r\n                    // Retrieve relevant item using order and component index.\r\n                    ConsiderationItem memory considerationItem = (\r\n                        consideration[componentIndex]\r\n                    );\r\n\r\n                    // Read item type and criteria from memory & place on stack.\r\n                    itemType = considerationItem.itemType;\r\n                    identifierOrCriteria = (\r\n                        considerationItem.identifierOrCriteria\r\n                    );\r\n\r\n                    // Optimistically update item type to remove criteria usage.\r\n                    // Use assembly to operate on ItemType enum as a number.\r\n                    ItemType newItemType;\r\n                    assembly {\r\n                        // Item type 4 becomes 2 and item type 5 becomes 3.\r\n                        newItemType := sub(3, eq(itemType, 4))\r\n                    }\r\n                    considerationItem.itemType = newItemType;\r\n\r\n                    // Optimistically update identifier w/ supplied identifier.\r\n                    considerationItem.identifierOrCriteria = (\r\n                        criteriaResolver.identifier\r\n                    );\r\n                }\r\n\r\n                // Ensure the specified item type indicates criteria usage.\r\n                if (!_isItemWithCriteria(itemType)) {\r\n                    revert CriteriaNotEnabledForItem();\r\n                }\r\n\r\n                // If criteria is not 0 (i.e. a collection-wide offer)...\r\n                if (identifierOrCriteria != uint256(0)) {\r\n                    // Verify identifier inclusion in criteria root using proof.\r\n                    _verifyProof(\r\n                        criteriaResolver.identifier,\r\n                        identifierOrCriteria,\r\n                        criteriaResolver.criteriaProof\r\n                    );\r\n                }\r\n            }\r\n\r\n            // Iterate over each advanced order.\r\n            for (uint256 i = 0; i < totalAdvancedOrders; ++i) {\r\n                // Retrieve the advanced order.\r\n                AdvancedOrder memory advancedOrder = advancedOrders[i];\r\n\r\n                // Skip criteria resolution for order if not fulfilled.\r\n                if (advancedOrder.numerator == 0) {\r\n                    continue;\r\n                }\r\n\r\n                // Retrieve the parameters for the order.\r\n                OrderParameters memory orderParameters = (\r\n                    advancedOrder.parameters\r\n                );\r\n\r\n                // Read consideration length from memory and place on stack.\r\n                uint256 totalItems = orderParameters.consideration.length;\r\n\r\n                // Iterate over each consideration item on the order.\r\n                for (uint256 j = 0; j < totalItems; ++j) {\r\n                    // Ensure item type no longer indicates criteria usage.\r\n                    if (\r\n                        _isItemWithCriteria(\r\n                            orderParameters.consideration[j].itemType\r\n                        )\r\n                    ) {\r\n                        revert UnresolvedConsiderationCriteria();\r\n                    }\r\n                }\r\n\r\n                // Read offer length from memory and place on stack.\r\n                totalItems = orderParameters.offer.length;\r\n\r\n                // Iterate over each offer item on the order.\r\n                for (uint256 j = 0; j < totalItems; ++j) {\r\n                    // Ensure item type no longer indicates criteria usage.\r\n                    if (\r\n                        _isItemWithCriteria(orderParameters.offer[j].itemType)\r\n                    ) {\r\n                        revert UnresolvedOfferCriteria();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to check whether a given item type represents\r\n     *      a criteria-based ERC721 or ERC1155 item (e.g. an item that can be\r\n     *      resolved to one of a number of different identifiers at the time of\r\n     *      order fulfillment).\r\n     *\r\n     * @param itemType The item type in question.\r\n     *\r\n     * @return withCriteria A boolean indicating that the item type in question\r\n     *                      represents a criteria-based item.\r\n     */\r\n    function _isItemWithCriteria(ItemType itemType)\r\n        internal\r\n        pure\r\n        returns (bool withCriteria)\r\n    {\r\n        // ERC721WithCriteria is ItemType 4. ERC1155WithCriteria is ItemType 5.\r\n        assembly {\r\n            withCriteria := gt(itemType, 3)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to ensure that a given element is contained\r\n     *      in a merkle root via a supplied proof.\r\n     *\r\n     * @param leaf  The element for which to prove inclusion.\r\n     * @param root  The merkle root that inclusion will be proved against.\r\n     * @param proof The merkle proof.\r\n     */\r\n    function _verifyProof(\r\n        uint256 leaf,\r\n        uint256 root,\r\n        bytes32[] memory proof\r\n    ) internal pure {\r\n        // Declare a variable that will be used to determine proof validity.\r\n        bool isValid;\r\n\r\n        // Utilize assembly to efficiently verify the proof against the root.\r\n        assembly {\r\n            // Store the leaf at the beginning of scratch space.\r\n            mstore(0, leaf)\r\n\r\n            // Derive the hash of the leaf to use as the initial proof element.\r\n            let computedHash := keccak256(0, OneWord)\r\n\r\n            // Based on: https://github.com/Rari-Capital/solmate/blob/v7/src/utils/MerkleProof.sol\r\n            // Get memory start location of the first element in proof array.\r\n            let data := add(proof, OneWord)\r\n\r\n            // Iterate over each proof element to compute the root hash.\r\n            for {\r\n                // Left shift by 5 is equivalent to multiplying by 0x20.\r\n                let end := add(data, shl(5, mload(proof)))\r\n            } lt(data, end) {\r\n                // Increment by one word at a time.\r\n                data := add(data, OneWord)\r\n            } {\r\n                // Get the proof element.\r\n                let loadedData := mload(data)\r\n\r\n                // Sort proof elements and place them in scratch space.\r\n                // Slot of `computedHash` in scratch space.\r\n                // If the condition is true: 0x20, otherwise: 0x00.\r\n                let scratch := shl(5, gt(computedHash, loadedData))\r\n\r\n                // Store elements to hash contiguously in scratch space. Scratch\r\n                // space is 64 bytes (0x00 - 0x3f) & both elements are 32 bytes.\r\n                mstore(scratch, computedHash)\r\n                mstore(xor(scratch, OneWord), loadedData)\r\n\r\n                // Derive the updated hash.\r\n                computedHash := keccak256(0, TwoWords)\r\n            }\r\n\r\n            // Compare the final hash to the supplied root.\r\n            isValid := eq(computedHash, root)\r\n        }\r\n\r\n        // Revert if computed hash does not equal supplied root.\r\n        if (!isValid) {\r\n            revert InvalidProof();\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/CriteriaResolutionErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\n/**\r\n * @title CriteriaResolutionErrors\r\n * @author 0age\r\n * @notice CriteriaResolutionErrors contains all errors related to criteria\r\n *         resolution.\r\n */\r\ninterface CriteriaResolutionErrors {\r\n    /**\r\n     * @dev Revert with an error when providing a criteria resolver that refers\r\n     *      to an order that has not been supplied.\r\n     */\r\n    error OrderCriteriaResolverOutOfRange();\r\n\r\n    /**\r\n     * @dev Revert with an error if an offer item still has unresolved criteria\r\n     *      after applying all criteria resolvers.\r\n     */\r\n    error UnresolvedOfferCriteria();\r\n\r\n    /**\r\n     * @dev Revert with an error if a consideration item still has unresolved\r\n     *      criteria after applying all criteria resolvers.\r\n     */\r\n    error UnresolvedConsiderationCriteria();\r\n\r\n    /**\r\n     * @dev Revert with an error when providing a criteria resolver that refers\r\n     *      to an order with an offer item that has not been supplied.\r\n     */\r\n    error OfferCriteriaResolverOutOfRange();\r\n\r\n    /**\r\n     * @dev Revert with an error when providing a criteria resolver that refers\r\n     *      to an order with a consideration item that has not been supplied.\r\n     */\r\n    error ConsiderationCriteriaResolverOutOfRange();\r\n\r\n    /**\r\n     * @dev Revert with an error when providing a criteria resolver that refers\r\n     *      to an order with an item that does not expect a criteria to be\r\n     *      resolved.\r\n     */\r\n    error CriteriaNotEnabledForItem();\r\n\r\n    /**\r\n     * @dev Revert with an error when providing a criteria resolver that\r\n     *      contains an invalid proof with respect to the given item and\r\n     *      chosen identifier.\r\n     */\r\n    error InvalidProof();\r\n}\r\n"
    },
    "contracts/test/TestZone.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport { ZoneInterface } from \"../interfaces/ZoneInterface.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    AdvancedOrder,\r\n    CriteriaResolver\r\n} from \"../lib/ConsiderationStructs.sol\";\r\n\r\ncontract TestZone is ZoneInterface {\r\n    function isValidOrder(\r\n        bytes32 orderHash,\r\n        address caller,\r\n        address offerer,\r\n        bytes32 zoneHash\r\n    ) external pure override returns (bytes4 validOrderMagicValue) {\r\n        orderHash;\r\n        caller;\r\n        offerer;\r\n\r\n        if (zoneHash == bytes32(uint256(1))) {\r\n            revert(\"Revert on zone hash 1\");\r\n        } else if (zoneHash == bytes32(uint256(2))) {\r\n            assembly {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n\r\n        validOrderMagicValue = zoneHash != bytes32(uint256(3))\r\n            ? ZoneInterface.isValidOrder.selector\r\n            : bytes4(0xffffffff);\r\n    }\r\n\r\n    function isValidOrderIncludingExtraData(\r\n        bytes32 orderHash,\r\n        address caller,\r\n        AdvancedOrder calldata order,\r\n        bytes32[] calldata priorOrderHashes,\r\n        CriteriaResolver[] calldata criteriaResolvers\r\n    ) external pure override returns (bytes4 validOrderMagicValue) {\r\n        orderHash;\r\n        caller;\r\n        order;\r\n        priorOrderHashes;\r\n        criteriaResolvers;\r\n\r\n        if (order.extraData.length == 4) {\r\n            revert(\"Revert on extraData length 4\");\r\n        } else if (order.extraData.length == 5) {\r\n            assembly {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n\r\n        validOrderMagicValue = order.parameters.zoneHash != bytes32(uint256(3))\r\n            ? ZoneInterface.isValidOrder.selector\r\n            : bytes4(0xffffffff);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ZoneInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\n// prettier-ignore\r\nimport {\r\n    AdvancedOrder,\r\n    CriteriaResolver\r\n} from \"../lib/ConsiderationStructs.sol\";\r\n\r\ninterface ZoneInterface {\r\n    // Called by Consideration whenever extraData is not provided by the caller.\r\n    function isValidOrder(\r\n        bytes32 orderHash,\r\n        address caller,\r\n        address offerer,\r\n        bytes32 zoneHash\r\n    ) external view returns (bytes4 validOrderMagicValue);\r\n\r\n    // Called by Consideration whenever any extraData is provided by the caller.\r\n    function isValidOrderIncludingExtraData(\r\n        bytes32 orderHash,\r\n        address caller,\r\n        AdvancedOrder calldata order,\r\n        bytes32[] calldata priorOrderHashes,\r\n        CriteriaResolver[] calldata criteriaResolvers\r\n    ) external view returns (bytes4 validOrderMagicValue);\r\n}\r\n"
    },
    "contracts/lib/ZoneInteraction.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n\r\nimport { ZoneInterface } from \"../interfaces/ZoneInterface.sol\";\r\n\r\nimport { OrderType } from \"./ConsiderationEnums.sol\";\r\n\r\n// prettier-ignore\r\nimport { AdvancedOrder, CriteriaResolver } from \"./ConsiderationStructs.sol\";\r\n\r\nimport \"./ConsiderationConstants.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    ZoneInteractionErrors\r\n} from \"../interfaces/ZoneInteractionErrors.sol\";\r\n\r\nimport { LowLevelHelpers } from \"./LowLevelHelpers.sol\";\r\n\r\n/**\r\n * @title ZoneInteraction\r\n * @author 0age\r\n * @notice ZoneInteraction contains logic related to interacting with zones.\r\n */\r\ncontract ZoneInteraction is ZoneInteractionErrors, LowLevelHelpers {\r\n    /**\r\n     * @dev Internal view function to determine if an order has a restricted\r\n     *      order type and, if so, to ensure that either the offerer or the zone\r\n     *      are the fulfiller or that a staticcall to `isValidOrder` on the zone\r\n     *      returns a magic value indicating that the order is currently valid.\r\n     *\r\n     * @param orderHash The hash of the order.\r\n     * @param zoneHash  The hash to provide upon calling the zone.\r\n     * @param orderType The type of the order.\r\n     * @param offerer   The offerer in question.\r\n     * @param zone      The zone in question.\r\n     */\r\n    function _assertRestrictedBasicOrderValidity(\r\n        bytes32 orderHash,\r\n        bytes32 zoneHash,\r\n        OrderType orderType,\r\n        address offerer,\r\n        address zone\r\n    ) internal view {\r\n        // Order type 2-3 require zone or offerer be caller or zone to approve.\r\n        if (\r\n            uint256(orderType) > 1 &&\r\n            msg.sender != zone &&\r\n            msg.sender != offerer\r\n        ) {\r\n            // Perform minimal staticcall to the zone.\r\n            _callIsValidOrder(zone, orderHash, offerer, zoneHash);\r\n        }\r\n    }\r\n\r\n    function _callIsValidOrder(\r\n        address zone,\r\n        bytes32 orderHash,\r\n        address offerer,\r\n        bytes32 zoneHash\r\n    ) internal view {\r\n        // Perform minimal staticcall to the zone.\r\n        bool success = _staticcall(\r\n            zone,\r\n            abi.encodeWithSelector(\r\n                ZoneInterface.isValidOrder.selector,\r\n                orderHash,\r\n                msg.sender,\r\n                offerer,\r\n                zoneHash\r\n            )\r\n        );\r\n\r\n        // Ensure call was successful and returned the correct magic value.\r\n        _assertIsValidOrderStaticcallSuccess(success, orderHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to determine whether an order is a restricted\r\n     *      order and, if so, to ensure that it was either submitted by the\r\n     *      offerer or the zone for the order, or that the zone returns the\r\n     *      expected magic value upon performing a staticcall to `isValidOrder`\r\n     *      or `isValidOrderIncludingExtraData` depending on whether the order\r\n     *      fulfillment specifies extra data or criteria resolvers.\r\n     *\r\n     * @param advancedOrder     The advanced order in question.\r\n     * @param criteriaResolvers An array where each element contains a reference\r\n     *                          to a specific offer or consideration, a token\r\n     *                          identifier, and a proof that the supplied token\r\n     *                          identifier is contained in the order's merkle\r\n     *                          root. Note that a criteria of zero indicates\r\n     *                          that any (transferable) token identifier is\r\n     *                          valid and that no proof needs to be supplied.\r\n     * @param priorOrderHashes  The order hashes of each order supplied prior to\r\n     *                          the current order as part of a \"match\" variety\r\n     *                          of order fulfillment (e.g. this array will be\r\n     *                          empty for single or \"fulfill available\").\r\n     * @param orderHash         The hash of the order.\r\n     * @param zoneHash          The hash to provide upon calling the zone.\r\n     * @param orderType         The type of the order.\r\n     * @param offerer           The offerer in question.\r\n     * @param zone              The zone in question.\r\n     */\r\n    function _assertRestrictedAdvancedOrderValidity(\r\n        AdvancedOrder memory advancedOrder,\r\n        CriteriaResolver[] memory criteriaResolvers,\r\n        bytes32[] memory priorOrderHashes,\r\n        bytes32 orderHash,\r\n        bytes32 zoneHash,\r\n        OrderType orderType,\r\n        address offerer,\r\n        address zone\r\n    ) internal view {\r\n        // Order type 2-3 require zone or offerer be caller or zone to approve.\r\n        if (\r\n            uint256(orderType) > 1 &&\r\n            msg.sender != zone &&\r\n            msg.sender != offerer\r\n        ) {\r\n            // If no extraData or criteria resolvers are supplied...\r\n            if (\r\n                advancedOrder.extraData.length == 0 &&\r\n                criteriaResolvers.length == 0\r\n            ) {\r\n                // Perform minimal staticcall to the zone.\r\n                _callIsValidOrder(zone, orderHash, offerer, zoneHash);\r\n            } else {\r\n                // Otherwise, extra data or criteria resolvers were supplied; in\r\n                // that event, perform a more verbose staticcall to the zone.\r\n                bool success = _staticcall(\r\n                    zone,\r\n                    abi.encodeWithSelector(\r\n                        ZoneInterface.isValidOrderIncludingExtraData.selector,\r\n                        orderHash,\r\n                        msg.sender,\r\n                        advancedOrder,\r\n                        priorOrderHashes,\r\n                        criteriaResolvers\r\n                    )\r\n                );\r\n\r\n                // Ensure call was successful and returned correct magic value.\r\n                _assertIsValidOrderStaticcallSuccess(success, orderHash);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to ensure that a staticcall to `isValidOrder`\r\n     *      or `isValidOrderIncludingExtraData` as part of validating a\r\n     *      restricted order that was not submitted by the named offerer or zone\r\n     *      was successful and returned the required magic value.\r\n     *\r\n     * @param success   A boolean indicating the status of the staticcall.\r\n     * @param orderHash The order hash of the order in question.\r\n     */\r\n    function _assertIsValidOrderStaticcallSuccess(\r\n        bool success,\r\n        bytes32 orderHash\r\n    ) internal view {\r\n        // If the call failed...\r\n        if (!success) {\r\n            // Revert and pass reason along if one was returned.\r\n            _revertWithReasonIfOneIsReturned();\r\n\r\n            // Otherwise, revert with a generic error message.\r\n            revert InvalidRestrictedOrder(orderHash);\r\n        }\r\n\r\n        // Ensure result was extracted and matches isValidOrder magic value.\r\n        if (_doesNotMatchMagic(ZoneInterface.isValidOrder.selector)) {\r\n            revert InvalidRestrictedOrder(orderHash);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ZoneInteractionErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\n/**\r\n * @title ZoneInteractionErrors\r\n * @author 0age\r\n * @notice ZoneInteractionErrors contains errors related to zone interaction.\r\n */\r\ninterface ZoneInteractionErrors {\r\n    /**\r\n     * @dev Revert with an error when attempting to fill an order that specifies\r\n     *      a restricted submitter as its order type when not submitted by\r\n     *      either the offerer or the order's zone or approved as valid by the\r\n     *      zone in question via a staticcall to `isValidOrder`.\r\n     *\r\n     * @param orderHash The order hash for the invalid restricted order.\r\n     */\r\n    error InvalidRestrictedOrder(bytes32 orderHash);\r\n}\r\n"
    },
    "contracts/lib/BasicOrderFulfiller.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n\r\nimport { ConduitInterface } from \"../interfaces/ConduitInterface.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    OrderType,\r\n    ItemType,\r\n    BasicOrderRouteType\r\n} from \"./ConsiderationEnums.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    AdditionalRecipient,\r\n    BasicOrderParameters,\r\n    OfferItem,\r\n    ConsiderationItem,\r\n    SpentItem,\r\n    ReceivedItem\r\n} from \"./ConsiderationStructs.sol\";\r\n\r\nimport { OrderValidator } from \"./OrderValidator.sol\";\r\n\r\nimport \"./ConsiderationConstants.sol\";\r\n\r\n/**\r\n * @title BasicOrderFulfiller\r\n * @author 0age\r\n * @notice BasicOrderFulfiller contains functionality for fulfilling \"basic\"\r\n *         orders with minimal overhead. See documentation for details on what\r\n *         qualifies as a basic order.\r\n */\r\ncontract BasicOrderFulfiller is OrderValidator {\r\n    /**\r\n     * @dev Derive and set hashes, reference chainId, and associated domain\r\n     *      separator during deployment.\r\n     *\r\n     * @param conduitController A contract that deploys conduits, or proxies\r\n     *                          that may optionally be used to transfer approved\r\n     *                          ERC20/721/1155 tokens.\r\n     */\r\n    constructor(address conduitController) OrderValidator(conduitController) {}\r\n\r\n    /**\r\n     * @dev Internal function to fulfill an order offering an ERC20, ERC721, or\r\n     *      ERC1155 item by supplying Ether (or other native tokens), ERC20\r\n     *      tokens, an ERC721 item, or an ERC1155 item as consideration. Six\r\n     *      permutations are supported: Native token to ERC721, Native token to\r\n     *      ERC1155, ERC20 to ERC721, ERC20 to ERC1155, ERC721 to ERC20, and\r\n     *      ERC1155 to ERC20 (with native tokens supplied as msg.value). For an\r\n     *      order to be eligible for fulfillment via this method, it must\r\n     *      contain a single offer item (though that item may have a greater\r\n     *      amount if the item is not an ERC721). An arbitrary number of\r\n     *      \"additional recipients\" may also be supplied which will each receive\r\n     *      native tokens or ERC20 items from the fulfiller as consideration.\r\n     *      Refer to the documentation for a more comprehensive summary of how\r\n     *      to utilize this method and what orders are compatible with it.\r\n     *\r\n     * @param parameters Additional information on the fulfilled order. Note\r\n     *                   that the offerer and the fulfiller must first approve\r\n     *                   this contract (or their chosen conduit if indicated)\r\n     *                   before any tokens can be transferred. Also note that\r\n     *                   contract recipients of ERC1155 consideration items must\r\n     *                   implement `onERC1155Received` in order to receive those\r\n     *                   items.\r\n     *\r\n     * @return A boolean indicating whether the order has been fulfilled.\r\n     */\r\n    function _validateAndFulfillBasicOrder(\r\n        BasicOrderParameters calldata parameters\r\n    ) internal returns (bool) {\r\n        // Declare enums for order type & route to extract from basicOrderType.\r\n        BasicOrderRouteType route;\r\n        OrderType orderType;\r\n\r\n        // Declare additional recipient item type to derive from the route type.\r\n        ItemType additionalRecipientsItemType;\r\n\r\n        // Utilize assembly to extract the order type and the basic order route.\r\n        assembly {\r\n            // Read basicOrderType from calldata.\r\n            let basicOrderType := calldataload(BasicOrder_basicOrderType_cdPtr)\r\n\r\n            // Mask all but 2 least-significant bits to derive the order type.\r\n            orderType := and(basicOrderType, 3)\r\n\r\n            // Divide basicOrderType by four to derive the route.\r\n            route := shr(2, basicOrderType)\r\n\r\n            // If route > 1 additionalRecipient items are ERC20 (1) else Eth (0)\r\n            additionalRecipientsItemType := gt(route, 1)\r\n        }\r\n\r\n        {\r\n            // Declare temporary variable for enforcing payable status.\r\n            bool correctPayableStatus;\r\n\r\n            // Utilize assembly to compare the route to the callvalue.\r\n            assembly {\r\n                // route 0 and 1 are payable, otherwise route is not payable.\r\n                correctPayableStatus := eq(\r\n                    additionalRecipientsItemType,\r\n                    iszero(callvalue())\r\n                )\r\n            }\r\n\r\n            // Revert if msg.value has not been supplied as part of payable\r\n            // routes or has been supplied as part of non-payable routes.\r\n            if (!correctPayableStatus) {\r\n                revert InvalidMsgValue(msg.value);\r\n            }\r\n        }\r\n\r\n        // Declare more arguments that will be derived from route and calldata.\r\n        address additionalRecipientsToken;\r\n        ItemType offeredItemType;\r\n        bool offerTypeIsAdditionalRecipientsType;\r\n\r\n        // Declare scope for received item type to manage stack pressure.\r\n        {\r\n            ItemType receivedItemType;\r\n\r\n            // Utilize assembly to retrieve function arguments and cast types.\r\n            assembly {\r\n                // Check if offered item type == additional recipient item type.\r\n                offerTypeIsAdditionalRecipientsType := gt(route, 3)\r\n\r\n                // If route > 3 additionalRecipientsToken is at 0xc4 else 0x24.\r\n                additionalRecipientsToken := calldataload(\r\n                    add(\r\n                        BasicOrder_considerationToken_cdPtr,\r\n                        mul(\r\n                            offerTypeIsAdditionalRecipientsType,\r\n                            BasicOrder_common_params_size\r\n                        )\r\n                    )\r\n                )\r\n\r\n                // If route > 2, receivedItemType is route - 2. If route is 2,\r\n                // the receivedItemType is ERC20 (1). Otherwise, it is Eth (0).\r\n                receivedItemType := add(\r\n                    mul(sub(route, 2), gt(route, 2)),\r\n                    eq(route, 2)\r\n                )\r\n\r\n                // If route > 3, offeredItemType is ERC20 (1). Route is 2 or 3,\r\n                // offeredItemType = route. Route is 0 or 1, it is route + 2.\r\n                offeredItemType := sub(\r\n                    add(route, mul(iszero(additionalRecipientsItemType), 2)),\r\n                    mul(\r\n                        offerTypeIsAdditionalRecipientsType,\r\n                        add(receivedItemType, 1)\r\n                    )\r\n                )\r\n            }\r\n\r\n            // Derive & validate order using parameters and update order status.\r\n            _prepareBasicFulfillmentFromCalldata(\r\n                parameters,\r\n                orderType,\r\n                receivedItemType,\r\n                additionalRecipientsItemType,\r\n                additionalRecipientsToken,\r\n                offeredItemType\r\n            );\r\n        }\r\n\r\n        // Declare conduitKey argument used by transfer functions.\r\n        bytes32 conduitKey;\r\n\r\n        // Utilize assembly to derive conduit (if relevant) based on route.\r\n        assembly {\r\n            // use offerer conduit for routes 0-3, fulfiller conduit otherwise.\r\n            conduitKey := calldataload(\r\n                add(\r\n                    BasicOrder_offererConduit_cdPtr,\r\n                    mul(offerTypeIsAdditionalRecipientsType, OneWord)\r\n                )\r\n            )\r\n        }\r\n\r\n        // Transfer tokens based on the route.\r\n        if (additionalRecipientsItemType == ItemType.NATIVE) {\r\n            // Ensure neither the token nor the identifier parameters are set.\r\n            if (\r\n                (uint160(parameters.considerationToken) |\r\n                    parameters.considerationIdentifier) != 0\r\n            ) {\r\n                revert UnusedItemParameters();\r\n            }\r\n\r\n            // Transfer the ERC721 or ERC1155 item, bypassing the accumulator.\r\n            _transferIndividual721Or1155Item(\r\n                offeredItemType,\r\n                parameters.offerToken,\r\n                parameters.offerer,\r\n                msg.sender,\r\n                parameters.offerIdentifier,\r\n                parameters.offerAmount,\r\n                conduitKey\r\n            );\r\n\r\n            // Transfer native to recipients, return excess to caller & wrap up.\r\n            _transferEthAndFinalize(\r\n                parameters.considerationAmount,\r\n                parameters.offerer,\r\n                parameters.additionalRecipients\r\n            );\r\n        } else {\r\n            // Initialize an accumulator array. From this point forward, no new\r\n            // memory regions can be safely allocated until the accumulator is\r\n            // no longer being utilized, as the accumulator operates in an\r\n            // open-ended fashion from this memory pointer; existing memory may\r\n            // still be accessed and modified, however.\r\n            bytes memory accumulator = new bytes(AccumulatorDisarmed);\r\n\r\n            // Choose transfer method for ERC721 or ERC1155 item based on route.\r\n            if (route == BasicOrderRouteType.ERC20_TO_ERC721) {\r\n                // Transfer ERC721 to caller using offerer's conduit preference.\r\n                _transferERC721(\r\n                    parameters.offerToken,\r\n                    parameters.offerer,\r\n                    msg.sender,\r\n                    parameters.offerIdentifier,\r\n                    parameters.offerAmount,\r\n                    conduitKey,\r\n                    accumulator\r\n                );\r\n            } else if (route == BasicOrderRouteType.ERC20_TO_ERC1155) {\r\n                // Transfer ERC1155 to caller with offerer's conduit preference.\r\n                _transferERC1155(\r\n                    parameters.offerToken,\r\n                    parameters.offerer,\r\n                    msg.sender,\r\n                    parameters.offerIdentifier,\r\n                    parameters.offerAmount,\r\n                    conduitKey,\r\n                    accumulator\r\n                );\r\n            } else if (route == BasicOrderRouteType.ERC721_TO_ERC20) {\r\n                // Transfer ERC721 to offerer using caller's conduit preference.\r\n                _transferERC721(\r\n                    parameters.considerationToken,\r\n                    msg.sender,\r\n                    parameters.offerer,\r\n                    parameters.considerationIdentifier,\r\n                    parameters.considerationAmount,\r\n                    conduitKey,\r\n                    accumulator\r\n                );\r\n            } else {\r\n                // route == BasicOrderRouteType.ERC1155_TO_ERC20\r\n\r\n                // Transfer ERC1155 to offerer with caller's conduit preference.\r\n                _transferERC1155(\r\n                    parameters.considerationToken,\r\n                    msg.sender,\r\n                    parameters.offerer,\r\n                    parameters.considerationIdentifier,\r\n                    parameters.considerationAmount,\r\n                    conduitKey,\r\n                    accumulator\r\n                );\r\n            }\r\n\r\n            // Transfer ERC20 tokens to all recipients and wrap up.\r\n            _transferERC20AndFinalize(\r\n                parameters.offerer,\r\n                parameters,\r\n                offerTypeIsAdditionalRecipientsType,\r\n                accumulator\r\n            );\r\n\r\n            // Trigger any remaining accumulated transfers via call to conduit.\r\n            _triggerIfArmed(accumulator);\r\n        }\r\n\r\n        // Clear the reentrancy guard.\r\n        _clearReentrancyGuard();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to prepare fulfillment of a basic order with\r\n     *      manual calldata and memory access. This calculates the order hash,\r\n     *      emits an OrderFulfilled event, and asserts basic order validity.\r\n     *      Note that calldata offsets must be validated as this function\r\n     *      accesses constant calldata pointers for dynamic types that match\r\n     *      default ABI encoding, but valid ABI encoding can use arbitrary\r\n     *      offsets. Checking that the offsets were produced by default encoding\r\n     *      will ensure that other functions using Solidity's calldata accessors\r\n     *      (which calculate pointers from the stored offsets) are reading the\r\n     *      same data as the order hash is derived from. Also note that This\r\n     *      function accesses memory directly. It does not clear the expanded\r\n     *      memory regions used, nor does it update the free memory pointer, so\r\n     *      other direct memory access must not assume that unused memory is\r\n     *      empty.\r\n     *\r\n     * @param parameters                   The parameters of the basic order.\r\n     * @param orderType                    The order type.\r\n     * @param receivedItemType             The item type of the initial\r\n     *                                     consideration item on the order.\r\n     * @param additionalRecipientsItemType The item type of any additional\r\n     *                                     consideration item on the order.\r\n     * @param additionalRecipientsToken    The ERC20 token contract address (if\r\n     *                                     applicable) for any additional\r\n     *                                     consideration item on the order.\r\n     * @param offeredItemType              The item type of the offered item on\r\n     *                                     the order.\r\n     */\r\n    function _prepareBasicFulfillmentFromCalldata(\r\n        BasicOrderParameters calldata parameters,\r\n        OrderType orderType,\r\n        ItemType receivedItemType,\r\n        ItemType additionalRecipientsItemType,\r\n        address additionalRecipientsToken,\r\n        ItemType offeredItemType\r\n    ) internal {\r\n        // Ensure this function cannot be triggered during a reentrant call.\r\n        _setReentrancyGuard();\r\n\r\n        // Ensure current timestamp falls between order start time and end time.\r\n        _verifyTime(parameters.startTime, parameters.endTime, true);\r\n\r\n        // Verify that calldata offsets for all dynamic types were produced by\r\n        // default encoding. This ensures that the constants we use for calldata\r\n        // pointers to dynamic types are the same as those calculated by\r\n        // Solidity using their offsets. Also verify that the basic order type\r\n        // is within range.\r\n        _assertValidBasicOrderParameters();\r\n\r\n        // Ensure supplied consideration array length is not less than original.\r\n        _assertConsiderationLengthIsNotLessThanOriginalConsiderationLength(\r\n            parameters.additionalRecipients.length,\r\n            parameters.totalOriginalAdditionalRecipients\r\n        );\r\n\r\n        // Declare stack element for the order hash.\r\n        bytes32 orderHash;\r\n\r\n        {\r\n            /**\r\n             * First, handle consideration items. Memory Layout:\r\n             *  0x60: final hash of the array of consideration item hashes\r\n             *  0x80-0x160: reused space for EIP712 hashing of each item\r\n             *   - 0x80: ConsiderationItem EIP-712 typehash (constant)\r\n             *   - 0xa0: itemType\r\n             *   - 0xc0: token\r\n             *   - 0xe0: identifier\r\n             *   - 0x100: startAmount\r\n             *   - 0x120: endAmount\r\n             *   - 0x140: recipient\r\n             *  0x160-END_ARR: array of consideration item hashes\r\n             *   - 0x160: primary consideration item EIP712 hash\r\n             *   - 0x180-END_ARR: additional recipient item EIP712 hashes\r\n             *  END_ARR: beginning of data for OrderFulfilled event\r\n             *   - END_ARR + 0x120: length of ReceivedItem array\r\n             *   - END_ARR + 0x140: beginning of data for first ReceivedItem\r\n             * (Note: END_ARR = 0x180 + RECIPIENTS_LENGTH * 0x20)\r\n             */\r\n\r\n            // Load consideration item typehash from runtime and place on stack.\r\n            bytes32 typeHash = _CONSIDERATION_ITEM_TYPEHASH;\r\n\r\n            // Utilize assembly to enable reuse of memory regions and use\r\n            // constant pointers when possible.\r\n            assembly {\r\n                /*\r\n                 * 1. Calculate the EIP712 ConsiderationItem hash for the\r\n                 * primary consideration item of the basic order.\r\n                 */\r\n\r\n                // Write ConsiderationItem type hash and item type to memory.\r\n                mstore(BasicOrder_considerationItem_typeHash_ptr, typeHash)\r\n                mstore(\r\n                    BasicOrder_considerationItem_itemType_ptr,\r\n                    receivedItemType\r\n                )\r\n\r\n                // Copy calldata region with (token, identifier, amount) from\r\n                // BasicOrderParameters to ConsiderationItem. The\r\n                // considerationAmount is written to startAmount and endAmount\r\n                // as basic orders do not have dynamic amounts.\r\n                calldatacopy(\r\n                    BasicOrder_considerationItem_token_ptr,\r\n                    BasicOrder_considerationToken_cdPtr,\r\n                    ThreeWords\r\n                )\r\n\r\n                // Copy calldata region with considerationAmount and offerer\r\n                // from BasicOrderParameters to endAmount and recipient in\r\n                // ConsiderationItem.\r\n                calldatacopy(\r\n                    BasicOrder_considerationItem_endAmount_ptr,\r\n                    BasicOrder_considerationAmount_cdPtr,\r\n                    TwoWords\r\n                )\r\n\r\n                // Calculate EIP712 ConsiderationItem hash and store it in the\r\n                // array of EIP712 consideration hashes.\r\n                mstore(\r\n                    BasicOrder_considerationHashesArray_ptr,\r\n                    keccak256(\r\n                        BasicOrder_considerationItem_typeHash_ptr,\r\n                        EIP712_ConsiderationItem_size\r\n                    )\r\n                )\r\n\r\n                /*\r\n                 * 2. Write a ReceivedItem struct for the primary consideration\r\n                 * item to the consideration array in OrderFulfilled.\r\n                 */\r\n\r\n                // Get the length of the additional recipients array.\r\n                let totalAdditionalRecipients := calldataload(\r\n                    BasicOrder_additionalRecipients_length_cdPtr\r\n                )\r\n\r\n                // Calculate pointer to length of OrderFulfilled consideration\r\n                // array.\r\n                let eventConsiderationArrPtr := add(\r\n                    OrderFulfilled_consideration_length_baseOffset,\r\n                    mul(totalAdditionalRecipients, OneWord)\r\n                )\r\n\r\n                // Set the length of the consideration array to the number of\r\n                // additional recipients, plus one for the primary consideration\r\n                // item.\r\n                mstore(\r\n                    eventConsiderationArrPtr,\r\n                    add(\r\n                        calldataload(\r\n                            BasicOrder_additionalRecipients_length_cdPtr\r\n                        ),\r\n                        1\r\n                    )\r\n                )\r\n\r\n                // Overwrite the consideration array pointer so it points to the\r\n                // body of the first element\r\n                eventConsiderationArrPtr := add(\r\n                    eventConsiderationArrPtr,\r\n                    OneWord\r\n                )\r\n\r\n                // Set itemType at start of the ReceivedItem memory region.\r\n                mstore(eventConsiderationArrPtr, receivedItemType)\r\n\r\n                // Copy calldata region (token, identifier, amount & recipient)\r\n                // from BasicOrderParameters to ReceivedItem memory.\r\n                calldatacopy(\r\n                    add(eventConsiderationArrPtr, Common_token_offset),\r\n                    BasicOrder_considerationToken_cdPtr,\r\n                    FourWords\r\n                )\r\n\r\n                /*\r\n                 * 3. Calculate EIP712 ConsiderationItem hashes for original\r\n                 * additional recipients and add a ReceivedItem for each to the\r\n                 * consideration array in the OrderFulfilled event. The original\r\n                 * additional recipients are all the considerations signed by\r\n                 * the offerer aside from the primary consideration of the\r\n                 * order. Uses memory region from 0x80-0x160 as a buffer for\r\n                 * calculating EIP712 ConsiderationItem hashes.\r\n                 */\r\n\r\n                // Put pointer to consideration hashes array on the stack.\r\n                // This will be updated as each additional recipient is hashed\r\n                let\r\n                    considerationHashesPtr\r\n                := BasicOrder_considerationHashesArray_ptr\r\n\r\n                // Write item type, token, & identifier for additional recipient\r\n                // to memory region for hashing EIP712 ConsiderationItem; these\r\n                // values will be reused for each recipient.\r\n                mstore(\r\n                    BasicOrder_considerationItem_itemType_ptr,\r\n                    additionalRecipientsItemType\r\n                )\r\n                mstore(\r\n                    BasicOrder_considerationItem_token_ptr,\r\n                    additionalRecipientsToken\r\n                )\r\n                mstore(BasicOrder_considerationItem_identifier_ptr, 0)\r\n\r\n                // Read length of the additionalRecipients array from calldata\r\n                // and iterate.\r\n                totalAdditionalRecipients := calldataload(\r\n                    BasicOrder_totalOriginalAdditionalRecipients_cdPtr\r\n                )\r\n                let i := 0\r\n                // prettier-ignore\r\n                for {} lt(i, totalAdditionalRecipients) {\r\n                    i := add(i, 1)\r\n                } {\r\n                    /*\r\n                     * Calculate EIP712 ConsiderationItem hash for recipient.\r\n                     */\r\n\r\n                    // Retrieve calldata pointer for additional recipient.\r\n                    let additionalRecipientCdPtr := add(\r\n                        BasicOrder_additionalRecipients_data_cdPtr,\r\n                        mul(AdditionalRecipients_size, i)\r\n                    )\r\n\r\n                    // Copy startAmount from calldata to the ConsiderationItem\r\n                    // struct.\r\n                    calldatacopy(\r\n                        BasicOrder_considerationItem_startAmount_ptr,\r\n                        additionalRecipientCdPtr,\r\n                        OneWord\r\n                    )\r\n\r\n                    // Copy endAmount and recipient from calldata to the\r\n                    // ConsiderationItem struct.\r\n                    calldatacopy(\r\n                        BasicOrder_considerationItem_endAmount_ptr,\r\n                        additionalRecipientCdPtr,\r\n                        AdditionalRecipients_size\r\n                    )\r\n\r\n                    // Add 1 word to the pointer as part of each loop to reduce\r\n                    // operations needed to get local offset into the array.\r\n                    considerationHashesPtr := add(\r\n                        considerationHashesPtr,\r\n                        OneWord\r\n                    )\r\n\r\n                    // Calculate EIP712 ConsiderationItem hash and store it in\r\n                    // the array of consideration hashes.\r\n                    mstore(\r\n                        considerationHashesPtr,\r\n                        keccak256(\r\n                            BasicOrder_considerationItem_typeHash_ptr,\r\n                            EIP712_ConsiderationItem_size\r\n                        )\r\n                    )\r\n\r\n                    /*\r\n                     * Write ReceivedItem to OrderFulfilled data.\r\n                     */\r\n\r\n                    // At this point, eventConsiderationArrPtr points to the\r\n                    // beginning of the ReceivedItem struct of the previous\r\n                    // element in the array. Increase it by the size of the\r\n                    // struct to arrive at the pointer for the current element.\r\n                    eventConsiderationArrPtr := add(\r\n                        eventConsiderationArrPtr,\r\n                        ReceivedItem_size\r\n                    )\r\n\r\n                    // Write itemType to the ReceivedItem struct.\r\n                    mstore(\r\n                        eventConsiderationArrPtr,\r\n                        additionalRecipientsItemType\r\n                    )\r\n\r\n                    // Write token to the next word of the ReceivedItem struct.\r\n                    mstore(\r\n                        add(eventConsiderationArrPtr, OneWord),\r\n                        additionalRecipientsToken\r\n                    )\r\n\r\n                    // Copy endAmount & recipient words to ReceivedItem struct.\r\n                    calldatacopy(\r\n                        add(\r\n                            eventConsiderationArrPtr,\r\n                            ReceivedItem_amount_offset\r\n                        ),\r\n                        additionalRecipientCdPtr,\r\n                        TwoWords\r\n                    )\r\n                }\r\n\r\n                /*\r\n                 * 4. Hash packed array of ConsiderationItem EIP712 hashes:\r\n                 *   `keccak256(abi.encodePacked(receivedItemHashes))`\r\n                 * Note that it is set at 0x60 — all other memory begins at\r\n                 * 0x80. 0x60 is the \"zero slot\" and will be restored at the end\r\n                 * of the assembly section and before required by the compiler.\r\n                 */\r\n                mstore(\r\n                    receivedItemsHash_ptr,\r\n                    keccak256(\r\n                        BasicOrder_considerationHashesArray_ptr,\r\n                        mul(add(totalAdditionalRecipients, 1), OneWord)\r\n                    )\r\n                )\r\n\r\n                /*\r\n                 * 5. Add a ReceivedItem for each tip to the consideration array\r\n                 * in the OrderFulfilled event. The tips are all the\r\n                 * consideration items that were not signed by the offerer and\r\n                 * were provided by the fulfiller.\r\n                 */\r\n\r\n                // Overwrite length to length of the additionalRecipients array.\r\n                totalAdditionalRecipients := calldataload(\r\n                    BasicOrder_additionalRecipients_length_cdPtr\r\n                )\r\n                // prettier-ignore\r\n                for {} lt(i, totalAdditionalRecipients) {\r\n                    i := add(i, 1)\r\n                } {\r\n                    // Retrieve calldata pointer for additional recipient.\r\n                    let additionalRecipientCdPtr := add(\r\n                        BasicOrder_additionalRecipients_data_cdPtr,\r\n                        mul(AdditionalRecipients_size, i)\r\n                    )\r\n\r\n                    // At this point, eventConsiderationArrPtr points to the\r\n                    // beginning of the ReceivedItem struct of the previous\r\n                    // element in the array. Increase it by the size of the\r\n                    // struct to arrive at the pointer for the current element.\r\n                    eventConsiderationArrPtr := add(\r\n                        eventConsiderationArrPtr,\r\n                        ReceivedItem_size\r\n                    )\r\n\r\n                    // Write itemType to the ReceivedItem struct.\r\n                    mstore(\r\n                        eventConsiderationArrPtr,\r\n                        additionalRecipientsItemType\r\n                    )\r\n\r\n                    // Write token to the next word of the ReceivedItem struct.\r\n                    mstore(\r\n                        add(eventConsiderationArrPtr, OneWord),\r\n                        additionalRecipientsToken\r\n                    )\r\n\r\n                    // Copy endAmount & recipient words to ReceivedItem struct.\r\n                    calldatacopy(\r\n                        add(\r\n                            eventConsiderationArrPtr,\r\n                            ReceivedItem_amount_offset\r\n                        ),\r\n                        additionalRecipientCdPtr,\r\n                        TwoWords\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        {\r\n            /**\r\n             * Next, handle offered items. Memory Layout:\r\n             *  EIP712 data for OfferItem\r\n             *   - 0x80:  OfferItem EIP-712 typehash (constant)\r\n             *   - 0xa0:  itemType\r\n             *   - 0xc0:  token\r\n             *   - 0xe0:  identifier (reused for offeredItemsHash)\r\n             *   - 0x100: startAmount\r\n             *   - 0x120: endAmount\r\n             */\r\n\r\n            // Place offer item typehash on the stack.\r\n            bytes32 typeHash = _OFFER_ITEM_TYPEHASH;\r\n\r\n            // Utilize assembly to enable reuse of memory regions when possible.\r\n            assembly {\r\n                /*\r\n                 * 1. Calculate OfferItem EIP712 hash\r\n                 */\r\n\r\n                // Write the OfferItem typeHash to memory.\r\n                mstore(BasicOrder_offerItem_typeHash_ptr, typeHash)\r\n\r\n                // Write the OfferItem item type to memory.\r\n                mstore(BasicOrder_offerItem_itemType_ptr, offeredItemType)\r\n\r\n                // Copy calldata region with (offerToken, offerIdentifier,\r\n                // offerAmount) from OrderParameters to (token, identifier,\r\n                // startAmount) in OfferItem struct. The offerAmount is written\r\n                // to startAmount and endAmount as basic orders do not have\r\n                // dynamic amounts.\r\n                calldatacopy(\r\n                    BasicOrder_offerItem_token_ptr,\r\n                    BasicOrder_offerToken_cdPtr,\r\n                    ThreeWords\r\n                )\r\n\r\n                // Copy offerAmount from calldata to endAmount in OfferItem\r\n                // struct.\r\n                calldatacopy(\r\n                    BasicOrder_offerItem_endAmount_ptr,\r\n                    BasicOrder_offerAmount_cdPtr,\r\n                    OneWord\r\n                )\r\n\r\n                // Compute EIP712 OfferItem hash, write result to scratch space:\r\n                //   `keccak256(abi.encode(offeredItem))`\r\n                mstore(\r\n                    0,\r\n                    keccak256(\r\n                        BasicOrder_offerItem_typeHash_ptr,\r\n                        EIP712_OfferItem_size\r\n                    )\r\n                )\r\n\r\n                /*\r\n                 * 2. Calculate hash of array of EIP712 hashes and write the\r\n                 * result to the corresponding OfferItem struct:\r\n                 *   `keccak256(abi.encodePacked(offerItemHashes))`\r\n                 */\r\n                mstore(BasicOrder_order_offerHashes_ptr, keccak256(0, OneWord))\r\n\r\n                /*\r\n                 * 3. Write SpentItem to offer array in OrderFulfilled event.\r\n                 */\r\n                let eventConsiderationArrPtr := add(\r\n                    OrderFulfilled_offer_length_baseOffset,\r\n                    mul(\r\n                        calldataload(\r\n                            BasicOrder_additionalRecipients_length_cdPtr\r\n                        ),\r\n                        OneWord\r\n                    )\r\n                )\r\n\r\n                // Set a length of 1 for the offer array.\r\n                mstore(eventConsiderationArrPtr, 1)\r\n\r\n                // Write itemType to the SpentItem struct.\r\n                mstore(add(eventConsiderationArrPtr, OneWord), offeredItemType)\r\n\r\n                // Copy calldata region with (offerToken, offerIdentifier,\r\n                // offerAmount) from OrderParameters to (token, identifier,\r\n                // amount) in SpentItem struct.\r\n                calldatacopy(\r\n                    add(eventConsiderationArrPtr, AdditionalRecipients_size),\r\n                    BasicOrder_offerToken_cdPtr,\r\n                    ThreeWords\r\n                )\r\n            }\r\n        }\r\n\r\n        {\r\n            /**\r\n             * Once consideration items and offer items have been handled,\r\n             * derive the final order hash. Memory Layout:\r\n             *  0x80-0x1c0: EIP712 data for order\r\n             *   - 0x80:   Order EIP-712 typehash (constant)\r\n             *   - 0xa0:   orderParameters.offerer\r\n             *   - 0xc0:   orderParameters.zone\r\n             *   - 0xe0:   keccak256(abi.encodePacked(offerHashes))\r\n             *   - 0x100:  keccak256(abi.encodePacked(considerationHashes))\r\n             *   - 0x120:  orderParameters.basicOrderType (% 4 = orderType)\r\n             *   - 0x140:  orderParameters.startTime\r\n             *   - 0x160:  orderParameters.endTime\r\n             *   - 0x180:  orderParameters.zoneHash\r\n             *   - 0x1a0:  orderParameters.salt\r\n             *   - 0x1c0:  orderParameters.conduitKey\r\n             *   - 0x1e0:  _counters[orderParameters.offerer] (from storage)\r\n             */\r\n\r\n            // Read the offerer from calldata and place on the stack.\r\n            address offerer;\r\n            assembly {\r\n                offerer := calldataload(BasicOrder_offerer_cdPtr)\r\n            }\r\n\r\n            // Read offerer's current counter from storage and place on stack.\r\n            uint256 counter = _getCounter(offerer);\r\n\r\n            // Load order typehash from runtime code and place on stack.\r\n            bytes32 typeHash = _ORDER_TYPEHASH;\r\n\r\n            assembly {\r\n                // Set the OrderItem typeHash in memory.\r\n                mstore(BasicOrder_order_typeHash_ptr, typeHash)\r\n\r\n                // Copy offerer and zone from OrderParameters in calldata to the\r\n                // Order struct.\r\n                calldatacopy(\r\n                    BasicOrder_order_offerer_ptr,\r\n                    BasicOrder_offerer_cdPtr,\r\n                    TwoWords\r\n                )\r\n\r\n                // Copy receivedItemsHash from zero slot to the Order struct.\r\n                mstore(\r\n                    BasicOrder_order_considerationHashes_ptr,\r\n                    mload(receivedItemsHash_ptr)\r\n                )\r\n\r\n                // Write the supplied orderType to the Order struct.\r\n                mstore(BasicOrder_order_orderType_ptr, orderType)\r\n\r\n                // Copy startTime, endTime, zoneHash, salt & conduit from\r\n                // calldata to the Order struct.\r\n                calldatacopy(\r\n                    BasicOrder_order_startTime_ptr,\r\n                    BasicOrder_startTime_cdPtr,\r\n                    FiveWords\r\n                )\r\n\r\n                // Write offerer's counter, retrieved from storage, to struct.\r\n                mstore(BasicOrder_order_counter_ptr, counter)\r\n\r\n                // Compute the EIP712 Order hash.\r\n                orderHash := keccak256(\r\n                    BasicOrder_order_typeHash_ptr,\r\n                    EIP712_Order_size\r\n                )\r\n            }\r\n        }\r\n\r\n        assembly {\r\n            /**\r\n             * After the order hash has been derived, emit OrderFulfilled event:\r\n             *   event OrderFulfilled(\r\n             *     bytes32 orderHash,\r\n             *     address indexed offerer,\r\n             *     address indexed zone,\r\n             *     address fulfiller,\r\n             *     SpentItem[] offer,\r\n             *       > (itemType, token, id, amount)\r\n             *     ReceivedItem[] consideration\r\n             *       > (itemType, token, id, amount, recipient)\r\n             *   )\r\n             * topic0 - OrderFulfilled event signature\r\n             * topic1 - offerer\r\n             * topic2 - zone\r\n             * data:\r\n             *  - 0x00: orderHash\r\n             *  - 0x20: fulfiller\r\n             *  - 0x40: offer arr ptr (0x80)\r\n             *  - 0x60: consideration arr ptr (0x120)\r\n             *  - 0x80: offer arr len (1)\r\n             *  - 0xa0: offer.itemType\r\n             *  - 0xc0: offer.token\r\n             *  - 0xe0: offer.identifier\r\n             *  - 0x100: offer.amount\r\n             *  - 0x120: 1 + recipients.length\r\n             *  - 0x140: recipient 0\r\n             */\r\n\r\n            // Derive pointer to start of OrderFulfilled event data\r\n            let eventDataPtr := add(\r\n                OrderFulfilled_baseOffset,\r\n                mul(\r\n                    calldataload(BasicOrder_additionalRecipients_length_cdPtr),\r\n                    OneWord\r\n                )\r\n            )\r\n\r\n            // Write the order hash to the head of the event's data region.\r\n            mstore(eventDataPtr, orderHash)\r\n\r\n            // Write the fulfiller (i.e. the caller) next for receiver argument.\r\n            mstore(add(eventDataPtr, OrderFulfilled_fulfiller_offset), caller())\r\n\r\n            // Write the SpentItem and ReceivedItem array offsets (constants).\r\n            mstore(\r\n                // SpentItem array offset\r\n                add(eventDataPtr, OrderFulfilled_offer_head_offset),\r\n                OrderFulfilled_offer_body_offset\r\n            )\r\n            mstore(\r\n                // ReceivedItem array offset\r\n                add(eventDataPtr, OrderFulfilled_consideration_head_offset),\r\n                OrderFulfilled_consideration_body_offset\r\n            )\r\n\r\n            // Derive total data size including SpentItem and ReceivedItem data.\r\n            // SpentItem portion is already included in the baseSize constant,\r\n            // as there can only be one element in the array.\r\n            let dataSize := add(\r\n                OrderFulfilled_baseSize,\r\n                mul(\r\n                    calldataload(BasicOrder_additionalRecipients_length_cdPtr),\r\n                    ReceivedItem_size\r\n                )\r\n            )\r\n\r\n            // Emit OrderFulfilled log with three topics (the event signature\r\n            // as well as the two indexed arguments, the offerer and the zone).\r\n            log3(\r\n                // Supply the pointer for event data in memory.\r\n                eventDataPtr,\r\n                // Supply the size of event data in memory.\r\n                dataSize,\r\n                // Supply the OrderFulfilled event signature.\r\n                OrderFulfilled_selector,\r\n                // Supply the first topic (the offerer).\r\n                calldataload(BasicOrder_offerer_cdPtr),\r\n                // Supply the second topic (the zone).\r\n                calldataload(BasicOrder_zone_cdPtr)\r\n            )\r\n\r\n            // Restore the zero slot.\r\n            mstore(ZeroSlot, 0)\r\n        }\r\n\r\n        // Determine whether order is restricted and, if so, that it is valid.\r\n        _assertRestrictedBasicOrderValidity(\r\n            orderHash,\r\n            parameters.zoneHash,\r\n            orderType,\r\n            parameters.offerer,\r\n            parameters.zone\r\n        );\r\n\r\n        // Verify and update the status of the derived order.\r\n        _validateBasicOrderAndUpdateStatus(\r\n            orderHash,\r\n            parameters.offerer,\r\n            parameters.signature\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer Ether (or other native tokens) to a\r\n     *      given recipient as part of basic order fulfillment. Note that\r\n     *      conduits are not utilized for native tokens as the transferred\r\n     *      amount must be provided as msg.value.\r\n     *\r\n     * @param amount               The amount to transfer.\r\n     * @param to                   The recipient of the native token transfer.\r\n     * @param additionalRecipients The additional recipients of the order.\r\n     */\r\n    function _transferEthAndFinalize(\r\n        uint256 amount,\r\n        address payable to,\r\n        AdditionalRecipient[] calldata additionalRecipients\r\n    ) internal {\r\n        // Put ether value supplied by the caller on the stack.\r\n        uint256 etherRemaining = msg.value;\r\n\r\n        // Retrieve total number of additional recipients and place on stack.\r\n        uint256 totalAdditionalRecipients = additionalRecipients.length;\r\n\r\n        // Skip overflow check as for loop is indexed starting at zero.\r\n        unchecked {\r\n            // Iterate over each additional recipient.\r\n            for (uint256 i = 0; i < totalAdditionalRecipients; ++i) {\r\n                // Retrieve the additional recipient.\r\n                AdditionalRecipient calldata additionalRecipient = (\r\n                    additionalRecipients[i]\r\n                );\r\n\r\n                // Read ether amount to transfer to recipient & place on stack.\r\n                uint256 additionalRecipientAmount = additionalRecipient.amount;\r\n\r\n                // Ensure that sufficient Ether is available.\r\n                if (additionalRecipientAmount > etherRemaining) {\r\n                    revert InsufficientEtherSupplied();\r\n                }\r\n\r\n                // Transfer Ether to the additional recipient.\r\n                _transferEth(\r\n                    additionalRecipient.recipient,\r\n                    additionalRecipientAmount\r\n                );\r\n\r\n                // Reduce ether value available. Skip underflow check as\r\n                // subtracted value is confirmed above as less than remaining.\r\n                etherRemaining -= additionalRecipientAmount;\r\n            }\r\n        }\r\n\r\n        // Ensure that sufficient Ether is still available.\r\n        if (amount > etherRemaining) {\r\n            revert InsufficientEtherSupplied();\r\n        }\r\n\r\n        // Transfer Ether to the offerer.\r\n        _transferEth(to, amount);\r\n\r\n        // If any Ether remains after transfers, return it to the caller.\r\n        if (etherRemaining > amount) {\r\n            // Skip underflow check as etherRemaining > amount.\r\n            unchecked {\r\n                // Transfer remaining Ether to the caller.\r\n                _transferEth(payable(msg.sender), etherRemaining - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer ERC20 tokens to a given recipient as\r\n     *      part of basic order fulfillment.\r\n     *\r\n     * @param offerer     The offerer of the fulfiller order.\r\n     * @param parameters  The basic order parameters.\r\n     * @param fromOfferer A boolean indicating whether to decrement amount from\r\n     *                    the offered amount.\r\n     * @param accumulator An open-ended array that collects transfers to execute\r\n     *                    against a given conduit in a single call.\r\n     */\r\n    function _transferERC20AndFinalize(\r\n        address offerer,\r\n        BasicOrderParameters calldata parameters,\r\n        bool fromOfferer,\r\n        bytes memory accumulator\r\n    ) internal {\r\n        // Declare from and to variables determined by fromOfferer value.\r\n        address from;\r\n        address to;\r\n\r\n        // Declare token and amount variables determined by fromOfferer value.\r\n        address token;\r\n        uint256 amount;\r\n\r\n        // Declare and check identifier variable within an isolated scope.\r\n        {\r\n            // Declare identifier variable determined by fromOfferer value.\r\n            uint256 identifier;\r\n\r\n            // Set ERC20 token transfer variables based on fromOfferer boolean.\r\n            if (fromOfferer) {\r\n                // Use offerer as from value and msg.sender as to value.\r\n                from = offerer;\r\n                to = msg.sender;\r\n\r\n                // Use offer token and related values if token is from offerer.\r\n                token = parameters.offerToken;\r\n                identifier = parameters.offerIdentifier;\r\n                amount = parameters.offerAmount;\r\n            } else {\r\n                // Use msg.sender as from value and offerer as to value.\r\n                from = msg.sender;\r\n                to = offerer;\r\n\r\n                // Otherwise, use consideration token and related values.\r\n                token = parameters.considerationToken;\r\n                identifier = parameters.considerationIdentifier;\r\n                amount = parameters.considerationAmount;\r\n            }\r\n\r\n            // Ensure that no identifier is supplied.\r\n            if (identifier != 0) {\r\n                revert UnusedItemParameters();\r\n            }\r\n        }\r\n\r\n        // Determine the appropriate conduit to utilize.\r\n        bytes32 conduitKey;\r\n\r\n        // Utilize assembly to derive conduit (if relevant) based on route.\r\n        assembly {\r\n            // Use offerer conduit if fromOfferer, fulfiller conduit otherwise.\r\n            conduitKey := calldataload(\r\n                sub(\r\n                    BasicOrder_fulfillerConduit_cdPtr,\r\n                    mul(fromOfferer, OneWord)\r\n                )\r\n            )\r\n        }\r\n\r\n        // Retrieve total number of additional recipients and place on stack.\r\n        uint256 totalAdditionalRecipients = (\r\n            parameters.additionalRecipients.length\r\n        );\r\n\r\n        // Iterate over each additional recipient.\r\n        for (uint256 i = 0; i < totalAdditionalRecipients; ) {\r\n            // Retrieve the additional recipient.\r\n            AdditionalRecipient calldata additionalRecipient = (\r\n                parameters.additionalRecipients[i]\r\n            );\r\n\r\n            uint256 additionalRecipientAmount = additionalRecipient.amount;\r\n\r\n            // Decrement the amount to transfer to fulfiller if indicated.\r\n            if (fromOfferer) {\r\n                amount -= additionalRecipientAmount;\r\n            }\r\n\r\n            // Transfer ERC20 tokens to additional recipient given approval.\r\n            _transferERC20(\r\n                token,\r\n                from,\r\n                additionalRecipient.recipient,\r\n                additionalRecipientAmount,\r\n                conduitKey,\r\n                accumulator\r\n            );\r\n\r\n            // Skip overflow check as for loop is indexed starting at zero.\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Transfer ERC20 token amount (from account must have proper approval).\r\n        _transferERC20(token, from, to, amount, conduitKey, accumulator);\r\n    }\r\n}\r\n"
    },
    "contracts/lib/OrderValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n\r\nimport { OrderType } from \"./ConsiderationEnums.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    OrderParameters,\r\n    Order,\r\n    AdvancedOrder,\r\n    OrderComponents,\r\n    OrderStatus,\r\n    CriteriaResolver\r\n} from \"./ConsiderationStructs.sol\";\r\n\r\nimport \"./ConsiderationConstants.sol\";\r\n\r\nimport { Executor } from \"./Executor.sol\";\r\n\r\nimport { ZoneInteraction } from \"./ZoneInteraction.sol\";\r\n\r\n/**\r\n * @title OrderValidator\r\n * @author 0age\r\n * @notice OrderValidator contains functionality related to validating orders\r\n *         and updating their status.\r\n */\r\ncontract OrderValidator is Executor, ZoneInteraction {\r\n    // Track status of each order (validated, cancelled, and fraction filled).\r\n    mapping(bytes32 => OrderStatus) private _orderStatus;\r\n\r\n    /**\r\n     * @dev Derive and set hashes, reference chainId, and associated domain\r\n     *      separator during deployment.\r\n     *\r\n     * @param conduitController A contract that deploys conduits, or proxies\r\n     *                          that may optionally be used to transfer approved\r\n     *                          ERC20/721/1155 tokens.\r\n     */\r\n    constructor(address conduitController) Executor(conduitController) {}\r\n\r\n    /**\r\n     * @dev Internal function to verify and update the status of a basic order.\r\n     *\r\n     * @param orderHash The hash of the order.\r\n     * @param offerer   The offerer of the order.\r\n     * @param signature A signature from the offerer indicating that the order\r\n     *                  has been approved.\r\n     */\r\n    function _validateBasicOrderAndUpdateStatus(\r\n        bytes32 orderHash,\r\n        address offerer,\r\n        bytes memory signature\r\n    ) internal {\r\n        // Retrieve the order status for the given order hash.\r\n        OrderStatus storage orderStatus = _orderStatus[orderHash];\r\n\r\n        // Ensure order is fillable and is not cancelled.\r\n        _verifyOrderStatus(\r\n            orderHash,\r\n            orderStatus,\r\n            true, // Only allow unused orders when fulfilling basic orders.\r\n            true // Signifies to revert if the order is invalid.\r\n        );\r\n\r\n        // If the order is not already validated, verify the supplied signature.\r\n        if (!orderStatus.isValidated) {\r\n            _verifySignature(offerer, orderHash, signature);\r\n        }\r\n\r\n        // Update order status as fully filled, packing struct values.\r\n        orderStatus.isValidated = true;\r\n        orderStatus.isCancelled = false;\r\n        orderStatus.numerator = 1;\r\n        orderStatus.denominator = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to validate an order, determine what portion to\r\n     *      fill, and update its status. The desired fill amount is supplied as\r\n     *      a fraction, as is the returned amount to fill.\r\n     *\r\n     * @param advancedOrder     The order to fulfill as well as the fraction to\r\n     *                          fill. Note that all offer and consideration\r\n     *                          amounts must divide with no remainder in order\r\n     *                          for a partial fill to be valid.\r\n     * @param criteriaResolvers An array where each element contains a reference\r\n     *                          to a specific offer or consideration, a token\r\n     *                          identifier, and a proof that the supplied token\r\n     *                          identifier is contained in the order's merkle\r\n     *                          root. Note that a criteria of zero indicates\r\n     *                          that any (transferable) token identifier is\r\n     *                          valid and that no proof needs to be supplied.\r\n     * @param revertOnInvalid   A boolean indicating whether to revert if the\r\n     *                          order is invalid due to the time or status.\r\n     * @param priorOrderHashes  The order hashes of each order supplied prior to\r\n     *                          the current order as part of a \"match\" variety\r\n     *                          of order fulfillment (e.g. this array will be\r\n     *                          empty for single or \"fulfill available\").\r\n     *\r\n     * @return orderHash      The order hash.\r\n     * @return newNumerator   A value indicating the portion of the order that\r\n     *                        will be filled.\r\n     * @return newDenominator A value indicating the total size of the order.\r\n     */\r\n    function _validateOrderAndUpdateStatus(\r\n        AdvancedOrder memory advancedOrder,\r\n        CriteriaResolver[] memory criteriaResolvers,\r\n        bool revertOnInvalid,\r\n        bytes32[] memory priorOrderHashes\r\n    )\r\n        internal\r\n        returns (\r\n            bytes32 orderHash,\r\n            uint256 newNumerator,\r\n            uint256 newDenominator\r\n        )\r\n    {\r\n        // Retrieve the parameters for the order.\r\n        OrderParameters memory orderParameters = advancedOrder.parameters;\r\n\r\n        // Ensure current timestamp falls between order start time and end time.\r\n        if (\r\n            !_verifyTime(\r\n                orderParameters.startTime,\r\n                orderParameters.endTime,\r\n                revertOnInvalid\r\n            )\r\n        ) {\r\n            // Assuming an invalid time and no revert, return zeroed out values.\r\n            return (bytes32(0), 0, 0);\r\n        }\r\n\r\n        // Read numerator and denominator from memory and place on the stack.\r\n        uint256 numerator = uint256(advancedOrder.numerator);\r\n        uint256 denominator = uint256(advancedOrder.denominator);\r\n\r\n        // Ensure that the supplied numerator and denominator are valid.\r\n        if (numerator > denominator || numerator == 0) {\r\n            revert BadFraction();\r\n        }\r\n\r\n        // If attempting partial fill (n < d) check order type & ensure support.\r\n        if (\r\n            numerator < denominator &&\r\n            _doesNotSupportPartialFills(orderParameters.orderType)\r\n        ) {\r\n            // Revert if partial fill was attempted on an unsupported order.\r\n            revert PartialFillsNotEnabledForOrder();\r\n        }\r\n\r\n        // Retrieve current counter & use it w/ parameters to derive order hash.\r\n        orderHash = _assertConsiderationLengthAndGetOrderHash(orderParameters);\r\n\r\n        // Ensure restricted orders have a valid submitter or pass a zone check.\r\n        _assertRestrictedAdvancedOrderValidity(\r\n            advancedOrder,\r\n            criteriaResolvers,\r\n            priorOrderHashes,\r\n            orderHash,\r\n            orderParameters.zoneHash,\r\n            orderParameters.orderType,\r\n            orderParameters.offerer,\r\n            orderParameters.zone\r\n        );\r\n\r\n        // Retrieve the order status using the derived order hash.\r\n        OrderStatus storage orderStatus = _orderStatus[orderHash];\r\n\r\n        // Ensure order is fillable and is not cancelled.\r\n        if (\r\n            !_verifyOrderStatus(\r\n                orderHash,\r\n                orderStatus,\r\n                false, // Allow partially used orders to be filled.\r\n                revertOnInvalid\r\n            )\r\n        ) {\r\n            // Assuming an invalid order status and no revert, return zero fill.\r\n            return (orderHash, 0, 0);\r\n        }\r\n\r\n        // If the order is not already validated, verify the supplied signature.\r\n        if (!orderStatus.isValidated) {\r\n            _verifySignature(\r\n                orderParameters.offerer,\r\n                orderHash,\r\n                advancedOrder.signature\r\n            );\r\n        }\r\n\r\n        // Read filled amount as numerator and denominator and put on the stack.\r\n        uint256 filledNumerator = orderStatus.numerator;\r\n        uint256 filledDenominator = orderStatus.denominator;\r\n\r\n        // If order (orderStatus) currently has a non-zero denominator it is\r\n        // partially filled.\r\n        if (filledDenominator != 0) {\r\n            // If denominator of 1 supplied, fill all remaining amount on order.\r\n            if (denominator == 1) {\r\n                // Scale numerator & denominator to match current denominator.\r\n                numerator = filledDenominator;\r\n                denominator = filledDenominator;\r\n            }\r\n            // Otherwise, if supplied denominator differs from current one...\r\n            else if (filledDenominator != denominator) {\r\n                // scale current numerator by the supplied denominator, then...\r\n                filledNumerator *= denominator;\r\n\r\n                // the supplied numerator & denominator by current denominator.\r\n                numerator *= filledDenominator;\r\n                denominator *= filledDenominator;\r\n            }\r\n\r\n            // Once adjusted, if current+supplied numerator exceeds denominator:\r\n            if (filledNumerator + numerator > denominator) {\r\n                // Skip underflow check: denominator >= orderStatus.numerator\r\n                unchecked {\r\n                    // Reduce current numerator so it + supplied = denominator.\r\n                    numerator = denominator - filledNumerator;\r\n                }\r\n            }\r\n\r\n            // Increment the filled numerator by the new numerator.\r\n            filledNumerator += numerator;\r\n\r\n            // Use assembly to ensure fractional amounts are below max uint120.\r\n            assembly {\r\n                // Check filledNumerator and denominator for uint120 overflow.\r\n                if or(\r\n                    gt(filledNumerator, MaxUint120),\r\n                    gt(denominator, MaxUint120)\r\n                ) {\r\n                    // Derive greatest common divisor using euclidean algorithm.\r\n                    function gcd(_a, _b) -> out {\r\n                        for {\r\n\r\n                        } _b {\r\n\r\n                        } {\r\n                            let _c := _b\r\n                            _b := mod(_a, _c)\r\n                            _a := _c\r\n                        }\r\n                        out := _a\r\n                    }\r\n                    let scaleDown := gcd(\r\n                        numerator,\r\n                        gcd(filledNumerator, denominator)\r\n                    )\r\n\r\n                    // Ensure that the divisor is at least one.\r\n                    let safeScaleDown := add(scaleDown, iszero(scaleDown))\r\n\r\n                    // Scale all fractional values down by gcd.\r\n                    numerator := div(numerator, safeScaleDown)\r\n                    filledNumerator := div(filledNumerator, safeScaleDown)\r\n                    denominator := div(denominator, safeScaleDown)\r\n\r\n                    // Perform the overflow check a second time.\r\n                    if or(\r\n                        gt(filledNumerator, MaxUint120),\r\n                        gt(denominator, MaxUint120)\r\n                    ) {\r\n                        // Store the Panic error signature.\r\n                        mstore(0, Panic_error_signature)\r\n\r\n                        // Set arithmetic (0x11) panic code as initial argument.\r\n                        mstore(Panic_error_offset, Panic_arithmetic)\r\n\r\n                        // Return, supplying Panic signature & arithmetic code.\r\n                        revert(0, Panic_error_length)\r\n                    }\r\n                }\r\n            }\r\n            // Skip overflow check: checked above unless numerator is reduced.\r\n            unchecked {\r\n                // Update order status and fill amount, packing struct values.\r\n                orderStatus.isValidated = true;\r\n                orderStatus.isCancelled = false;\r\n                orderStatus.numerator = uint120(filledNumerator);\r\n                orderStatus.denominator = uint120(denominator);\r\n            }\r\n        } else {\r\n            // Update order status and fill amount, packing struct values.\r\n            orderStatus.isValidated = true;\r\n            orderStatus.isCancelled = false;\r\n            orderStatus.numerator = uint120(numerator);\r\n            orderStatus.denominator = uint120(denominator);\r\n        }\r\n\r\n        // Return order hash, a modified numerator, and a modified denominator.\r\n        return (orderHash, numerator, denominator);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to cancel an arbitrary number of orders. Note that\r\n     *      only the offerer or the zone of a given order may cancel it. Callers\r\n     *      should ensure that the intended order was cancelled by calling\r\n     *      `getOrderStatus` and confirming that `isCancelled` returns `true`.\r\n     *\r\n     * @param orders The orders to cancel.\r\n     *\r\n     * @return cancelled A boolean indicating whether the supplied orders were\r\n     *                   successfully cancelled.\r\n     */\r\n    function _cancel(OrderComponents[] calldata orders)\r\n        internal\r\n        returns (bool cancelled)\r\n    {\r\n        // Ensure that the reentrancy guard is not currently set.\r\n        _assertNonReentrant();\r\n\r\n        // Declare variables outside of the loop.\r\n        OrderStatus storage orderStatus;\r\n        address offerer;\r\n        address zone;\r\n\r\n        // Skip overflow check as for loop is indexed starting at zero.\r\n        unchecked {\r\n            // Read length of the orders array from memory and place on stack.\r\n            uint256 totalOrders = orders.length;\r\n\r\n            // Iterate over each order.\r\n            for (uint256 i = 0; i < totalOrders; ) {\r\n                // Retrieve the order.\r\n                OrderComponents calldata order = orders[i];\r\n\r\n                offerer = order.offerer;\r\n                zone = order.zone;\r\n\r\n                // Ensure caller is either offerer or zone of the order.\r\n                if (msg.sender != offerer && msg.sender != zone) {\r\n                    revert InvalidCanceller();\r\n                }\r\n\r\n                // Derive order hash using the order parameters and the counter.\r\n                bytes32 orderHash = _deriveOrderHash(\r\n                    OrderParameters(\r\n                        offerer,\r\n                        zone,\r\n                        order.offer,\r\n                        order.consideration,\r\n                        order.orderType,\r\n                        order.startTime,\r\n                        order.endTime,\r\n                        order.zoneHash,\r\n                        order.salt,\r\n                        order.conduitKey,\r\n                        order.consideration.length\r\n                    ),\r\n                    order.counter\r\n                );\r\n\r\n                // Retrieve the order status using the derived order hash.\r\n                orderStatus = _orderStatus[orderHash];\r\n\r\n                // Update the order status as not valid and cancelled.\r\n                orderStatus.isValidated = false;\r\n                orderStatus.isCancelled = true;\r\n\r\n                // Emit an event signifying that the order has been cancelled.\r\n                emit OrderCancelled(orderHash, offerer, zone);\r\n\r\n                // Increment counter inside body of loop for gas efficiency.\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Return a boolean indicating that orders were successfully cancelled.\r\n        cancelled = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to validate an arbitrary number of orders, thereby\r\n     *      registering their signatures as valid and allowing the fulfiller to\r\n     *      skip signature verification on fulfillment. Note that validated\r\n     *      orders may still be unfulfillable due to invalid item amounts or\r\n     *      other factors; callers should determine whether validated orders are\r\n     *      fulfillable by simulating the fulfillment call prior to execution.\r\n     *      Also note that anyone can validate a signed order, but only the\r\n     *      offerer can validate an order without supplying a signature.\r\n     *\r\n     * @param orders The orders to validate.\r\n     *\r\n     * @return validated A boolean indicating whether the supplied orders were\r\n     *                   successfully validated.\r\n     */\r\n    function _validate(Order[] calldata orders)\r\n        internal\r\n        returns (bool validated)\r\n    {\r\n        // Ensure that the reentrancy guard is not currently set.\r\n        _assertNonReentrant();\r\n\r\n        // Declare variables outside of the loop.\r\n        OrderStatus storage orderStatus;\r\n        bytes32 orderHash;\r\n        address offerer;\r\n\r\n        // Skip overflow check as for loop is indexed starting at zero.\r\n        unchecked {\r\n            // Read length of the orders array from memory and place on stack.\r\n            uint256 totalOrders = orders.length;\r\n\r\n            // Iterate over each order.\r\n            for (uint256 i = 0; i < totalOrders; ) {\r\n                // Retrieve the order.\r\n                Order calldata order = orders[i];\r\n\r\n                // Retrieve the order parameters.\r\n                OrderParameters calldata orderParameters = order.parameters;\r\n\r\n                // Move offerer from memory to the stack.\r\n                offerer = orderParameters.offerer;\r\n\r\n                // Get current counter & use it w/ params to derive order hash.\r\n                orderHash = _assertConsiderationLengthAndGetOrderHash(\r\n                    orderParameters\r\n                );\r\n\r\n                // Retrieve the order status using the derived order hash.\r\n                orderStatus = _orderStatus[orderHash];\r\n\r\n                // Ensure order is fillable and retrieve the filled amount.\r\n                _verifyOrderStatus(\r\n                    orderHash,\r\n                    orderStatus,\r\n                    false, // Signifies that partially filled orders are valid.\r\n                    true // Signifies to revert if the order is invalid.\r\n                );\r\n\r\n                // If the order has not already been validated...\r\n                if (!orderStatus.isValidated) {\r\n                    // Verify the supplied signature.\r\n                    _verifySignature(offerer, orderHash, order.signature);\r\n\r\n                    // Update order status to mark the order as valid.\r\n                    orderStatus.isValidated = true;\r\n\r\n                    // Emit an event signifying the order has been validated.\r\n                    emit OrderValidated(\r\n                        orderHash,\r\n                        offerer,\r\n                        orderParameters.zone\r\n                    );\r\n                }\r\n\r\n                // Increment counter inside body of the loop for gas efficiency.\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Return a boolean indicating that orders were successfully validated.\r\n        validated = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to retrieve the status of a given order by\r\n     *      hash, including whether the order has been cancelled or validated\r\n     *      and the fraction of the order that has been filled.\r\n     *\r\n     * @param orderHash The order hash in question.\r\n     *\r\n     * @return isValidated A boolean indicating whether the order in question\r\n     *                     has been validated (i.e. previously approved or\r\n     *                     partially filled).\r\n     * @return isCancelled A boolean indicating whether the order in question\r\n     *                     has been cancelled.\r\n     * @return totalFilled The total portion of the order that has been filled\r\n     *                     (i.e. the \"numerator\").\r\n     * @return totalSize   The total size of the order that is either filled or\r\n     *                     unfilled (i.e. the \"denominator\").\r\n     */\r\n    function _getOrderStatus(bytes32 orderHash)\r\n        internal\r\n        view\r\n        returns (\r\n            bool isValidated,\r\n            bool isCancelled,\r\n            uint256 totalFilled,\r\n            uint256 totalSize\r\n        )\r\n    {\r\n        // Retrieve the order status using the order hash.\r\n        OrderStatus storage orderStatus = _orderStatus[orderHash];\r\n\r\n        // Return the fields on the order status.\r\n        return (\r\n            orderStatus.isValidated,\r\n            orderStatus.isCancelled,\r\n            orderStatus.numerator,\r\n            orderStatus.denominator\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to check whether a given order type indicates\r\n     *      that partial fills are not supported (e.g. only \"full fills\" are\r\n     *      allowed for the order in question).\r\n     *\r\n     * @param orderType The order type in question.\r\n     *\r\n     * @return isFullOrder A boolean indicating whether the order type only\r\n     *                     supports full fills.\r\n     */\r\n    function _doesNotSupportPartialFills(OrderType orderType)\r\n        internal\r\n        pure\r\n        returns (bool isFullOrder)\r\n    {\r\n        // The \"full\" order types are even, while \"partial\" order types are odd.\r\n        // Bitwise and by 1 is equivalent to modulo by 2, but 2 gas cheaper.\r\n        assembly {\r\n            // Equivalent to `uint256(orderType) & 1 == 0`.\r\n            isFullOrder := iszero(and(orderType, 1))\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/lib/OrderFulfiller.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n\r\nimport { ItemType } from \"./ConsiderationEnums.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    OfferItem,\r\n    ConsiderationItem,\r\n    SpentItem,\r\n    ReceivedItem,\r\n    OrderParameters,\r\n    Order,\r\n    AdvancedOrder,\r\n    CriteriaResolver\r\n} from \"./ConsiderationStructs.sol\";\r\n\r\nimport { BasicOrderFulfiller } from \"./BasicOrderFulfiller.sol\";\r\n\r\nimport { CriteriaResolution } from \"./CriteriaResolution.sol\";\r\n\r\nimport { AmountDeriver } from \"./AmountDeriver.sol\";\r\n\r\nimport \"./ConsiderationConstants.sol\";\r\n\r\n/**\r\n * @title OrderFulfiller\r\n * @author 0age\r\n * @notice OrderFulfiller contains logic related to order fulfillment where a\r\n *         single order is being fulfilled and where basic order fulfillment is\r\n *         not available as an option.\r\n */\r\ncontract OrderFulfiller is\r\n    BasicOrderFulfiller,\r\n    CriteriaResolution,\r\n    AmountDeriver\r\n{\r\n    /**\r\n     * @dev Derive and set hashes, reference chainId, and associated domain\r\n     *      separator during deployment.\r\n     *\r\n     * @param conduitController A contract that deploys conduits, or proxies\r\n     *                          that may optionally be used to transfer approved\r\n     *                          ERC20/721/1155 tokens.\r\n     */\r\n    constructor(address conduitController)\r\n        BasicOrderFulfiller(conduitController)\r\n    {}\r\n\r\n    /**\r\n     * @dev Internal function to validate an order and update its status, adjust\r\n     *      prices based on current time, apply criteria resolvers, determine\r\n     *      what portion to fill, and transfer relevant tokens.\r\n     *\r\n     * @param advancedOrder       The order to fulfill as well as the fraction\r\n     *                            to fill. Note that all offer and consideration\r\n     *                            components must divide with no remainder for\r\n     *                            the partial fill to be valid.\r\n     * @param criteriaResolvers   An array where each element contains a\r\n     *                            reference to a specific offer or\r\n     *                            consideration, a token identifier, and a proof\r\n     *                            that the supplied token identifier is\r\n     *                            contained in the order's merkle root. Note\r\n     *                            that a criteria of zero indicates that any\r\n     *                            (transferable) token identifier is valid and\r\n     *                            that no proof needs to be supplied.\r\n     * @param fulfillerConduitKey A bytes32 value indicating what conduit, if\r\n     *                            any, to source the fulfiller's token approvals\r\n     *                            from. The zero hash signifies that no conduit\r\n     *                            should be used, with direct approvals set on\r\n     *                            Consideration.\r\n     * @param recipient           The intended recipient for all received items.\r\n     *\r\n     * @return A boolean indicating whether the order has been fulfilled.\r\n     */\r\n    function _validateAndFulfillAdvancedOrder(\r\n        AdvancedOrder memory advancedOrder,\r\n        CriteriaResolver[] memory criteriaResolvers,\r\n        bytes32 fulfillerConduitKey,\r\n        address recipient\r\n    ) internal returns (bool) {\r\n        // Ensure this function cannot be triggered during a reentrant call.\r\n        _setReentrancyGuard();\r\n\r\n        // Declare empty bytes32 array (unused, will remain empty).\r\n        bytes32[] memory priorOrderHashes;\r\n\r\n        // Validate order, update status, and determine fraction to fill.\r\n        (\r\n            bytes32 orderHash,\r\n            uint256 fillNumerator,\r\n            uint256 fillDenominator\r\n        ) = _validateOrderAndUpdateStatus(\r\n                advancedOrder,\r\n                criteriaResolvers,\r\n                true,\r\n                priorOrderHashes\r\n            );\r\n\r\n        // Create an array with length 1 containing the order.\r\n        AdvancedOrder[] memory advancedOrders = new AdvancedOrder[](1);\r\n\r\n        // Populate the order as the first and only element of the new array.\r\n        advancedOrders[0] = advancedOrder;\r\n\r\n        // Apply criteria resolvers using generated orders and details arrays.\r\n        _applyCriteriaResolvers(advancedOrders, criteriaResolvers);\r\n\r\n        // Retrieve the order parameters after applying criteria resolvers.\r\n        OrderParameters memory orderParameters = advancedOrders[0].parameters;\r\n\r\n        // Perform each item transfer with the appropriate fractional amount.\r\n        _applyFractionsAndTransferEach(\r\n            orderParameters,\r\n            fillNumerator,\r\n            fillDenominator,\r\n            fulfillerConduitKey,\r\n            recipient\r\n        );\r\n\r\n        // Emit an event signifying that the order has been fulfilled.\r\n        _emitOrderFulfilledEvent(\r\n            orderHash,\r\n            orderParameters.offerer,\r\n            orderParameters.zone,\r\n            recipient,\r\n            orderParameters.offer,\r\n            orderParameters.consideration\r\n        );\r\n\r\n        // Clear the reentrancy guard.\r\n        _clearReentrancyGuard();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer each item contained in a given single\r\n     *      order fulfillment after applying a respective fraction to the amount\r\n     *      being transferred.\r\n     *\r\n     * @param orderParameters     The parameters for the fulfilled order.\r\n     * @param numerator           A value indicating the portion of the order\r\n     *                            that should be filled.\r\n     * @param denominator         A value indicating the total order size.\r\n     * @param fulfillerConduitKey A bytes32 value indicating what conduit, if\r\n     *                            any, to source the fulfiller's token approvals\r\n     *                            from. The zero hash signifies that no conduit\r\n     *                            should be used, with direct approvals set on\r\n     *                            Consideration.\r\n     * @param recipient           The intended recipient for all received items.\r\n     */\r\n    function _applyFractionsAndTransferEach(\r\n        OrderParameters memory orderParameters,\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        bytes32 fulfillerConduitKey,\r\n        address recipient\r\n    ) internal {\r\n        // Read start time & end time from order parameters and place on stack.\r\n        uint256 startTime = orderParameters.startTime;\r\n        uint256 endTime = orderParameters.endTime;\r\n\r\n        // Initialize an accumulator array. From this point forward, no new\r\n        // memory regions can be safely allocated until the accumulator is no\r\n        // longer being utilized, as the accumulator operates in an open-ended\r\n        // fashion from this memory pointer; existing memory may still be\r\n        // accessed and modified, however.\r\n        bytes memory accumulator = new bytes(AccumulatorDisarmed);\r\n\r\n        // As of solidity 0.6.0, inline assembly cannot directly access function\r\n        // definitions, but can still access locally scoped function variables.\r\n        // This means that in order to recast the type of a function, we need to\r\n        // create a local variable to reference the internal function definition\r\n        // (using the same type) and a local variable with the desired type,\r\n        // and then cast the original function pointer to the desired type.\r\n\r\n        /**\r\n         * Repurpose existing OfferItem memory regions on the offer array for\r\n         * the order by overriding the _transfer function pointer to accept a\r\n         * modified OfferItem argument in place of the usual ReceivedItem:\r\n         *\r\n         *   ========= OfferItem ==========   ====== ReceivedItem ======\r\n         *   ItemType itemType; ------------> ItemType itemType;\r\n         *   address token; ----------------> address token;\r\n         *   uint256 identifierOrCriteria; -> uint256 identifier;\r\n         *   uint256 startAmount; ----------> uint256 amount;\r\n         *   uint256 endAmount; ------------> address recipient;\r\n         */\r\n\r\n        // Declare a nested scope to minimize stack depth.\r\n        unchecked {\r\n            // Declare a virtual function pointer taking an OfferItem argument.\r\n            function(OfferItem memory, address, bytes32, bytes memory)\r\n                internal _transferOfferItem;\r\n\r\n            {\r\n                // Assign _transfer function to a new function pointer (it takes\r\n                // a ReceivedItem as its initial argument)\r\n                function(ReceivedItem memory, address, bytes32, bytes memory)\r\n                    internal _transferReceivedItem = _transfer;\r\n\r\n                // Utilize assembly to override the virtual function pointer.\r\n                assembly {\r\n                    // Cast initial ReceivedItem type to an OfferItem type.\r\n                    _transferOfferItem := _transferReceivedItem\r\n                }\r\n            }\r\n\r\n            // Read offer array length from memory and place on stack.\r\n            uint256 totalOfferItems = orderParameters.offer.length;\r\n\r\n            // Iterate over each offer on the order.\r\n            // Skip overflow check as for loop is indexed starting at zero.\r\n            for (uint256 i = 0; i < totalOfferItems; ++i) {\r\n                // Retrieve the offer item.\r\n                OfferItem memory offerItem = orderParameters.offer[i];\r\n\r\n                // Offer items for the native token can not be received\r\n                // outside of a match order function.\r\n                if (offerItem.itemType == ItemType.NATIVE) {\r\n                    revert InvalidNativeOfferItem();\r\n                }\r\n\r\n                // Declare an additional nested scope to minimize stack depth.\r\n                {\r\n                    // Apply fill fraction to get offer item amount to transfer.\r\n                    uint256 amount = _applyFraction(\r\n                        offerItem.startAmount,\r\n                        offerItem.endAmount,\r\n                        numerator,\r\n                        denominator,\r\n                        startTime,\r\n                        endTime,\r\n                        false\r\n                    );\r\n\r\n                    // Utilize assembly to set overloaded offerItem arguments.\r\n                    assembly {\r\n                        // Write new fractional amount to startAmount as amount.\r\n                        mstore(\r\n                            add(offerItem, ReceivedItem_amount_offset),\r\n                            amount\r\n                        )\r\n\r\n                        // Write recipient to endAmount.\r\n                        mstore(\r\n                            add(offerItem, ReceivedItem_recipient_offset),\r\n                            recipient\r\n                        )\r\n                    }\r\n                }\r\n\r\n                // Transfer the item from the offerer to the recipient.\r\n                _transferOfferItem(\r\n                    offerItem,\r\n                    orderParameters.offerer,\r\n                    orderParameters.conduitKey,\r\n                    accumulator\r\n                );\r\n            }\r\n        }\r\n\r\n        // Put ether value supplied by the caller on the stack.\r\n        uint256 etherRemaining = msg.value;\r\n\r\n        /**\r\n         * Repurpose existing ConsiderationItem memory regions on the\r\n         * consideration array for the order by overriding the _transfer\r\n         * function pointer to accept a modified ConsiderationItem argument in\r\n         * place of the usual ReceivedItem:\r\n         *\r\n         *   ====== ConsiderationItem =====   ====== ReceivedItem ======\r\n         *   ItemType itemType; ------------> ItemType itemType;\r\n         *   address token; ----------------> address token;\r\n         *   uint256 identifierOrCriteria;--> uint256 identifier;\r\n         *   uint256 startAmount; ----------> uint256 amount;\r\n         *   uint256 endAmount;        /----> address recipient;\r\n         *   address recipient; ------/\r\n         */\r\n\r\n        // Declare a nested scope to minimize stack depth.\r\n        unchecked {\r\n            // Declare virtual function pointer with ConsiderationItem argument.\r\n            function(ConsiderationItem memory, address, bytes32, bytes memory)\r\n                internal _transferConsiderationItem;\r\n            {\r\n                // Reassign _transfer function to a new function pointer (it\r\n                // takes a ReceivedItem as its initial argument).\r\n                function(ReceivedItem memory, address, bytes32, bytes memory)\r\n                    internal _transferReceivedItem = _transfer;\r\n\r\n                // Utilize assembly to override the virtual function pointer.\r\n                assembly {\r\n                    // Cast ReceivedItem type to ConsiderationItem type.\r\n                    _transferConsiderationItem := _transferReceivedItem\r\n                }\r\n            }\r\n\r\n            // Read consideration array length from memory and place on stack.\r\n            uint256 totalConsiderationItems = orderParameters\r\n                .consideration\r\n                .length;\r\n\r\n            // Iterate over each consideration item on the order.\r\n            // Skip overflow check as for loop is indexed starting at zero.\r\n            for (uint256 i = 0; i < totalConsiderationItems; ++i) {\r\n                // Retrieve the consideration item.\r\n                ConsiderationItem memory considerationItem = (\r\n                    orderParameters.consideration[i]\r\n                );\r\n\r\n                // Apply fraction & derive considerationItem amount to transfer.\r\n                uint256 amount = _applyFraction(\r\n                    considerationItem.startAmount,\r\n                    considerationItem.endAmount,\r\n                    numerator,\r\n                    denominator,\r\n                    startTime,\r\n                    endTime,\r\n                    true\r\n                );\r\n\r\n                // Use assembly to set overloaded considerationItem arguments.\r\n                assembly {\r\n                    // Write derived fractional amount to startAmount as amount.\r\n                    mstore(\r\n                        add(considerationItem, ReceivedItem_amount_offset),\r\n                        amount\r\n                    )\r\n\r\n                    // Write original recipient to endAmount as recipient.\r\n                    mstore(\r\n                        add(considerationItem, ReceivedItem_recipient_offset),\r\n                        mload(\r\n                            add(\r\n                                considerationItem,\r\n                                ConsiderationItem_recipient_offset\r\n                            )\r\n                        )\r\n                    )\r\n                }\r\n\r\n                // Reduce available value if offer spent ETH or a native token.\r\n                if (considerationItem.itemType == ItemType.NATIVE) {\r\n                    // Ensure that sufficient native tokens are still available.\r\n                    if (amount > etherRemaining) {\r\n                        revert InsufficientEtherSupplied();\r\n                    }\r\n\r\n                    // Skip underflow check as a comparison has just been made.\r\n                    etherRemaining -= amount;\r\n                }\r\n\r\n                // Transfer item from caller to recipient specified by the item.\r\n                _transferConsiderationItem(\r\n                    considerationItem,\r\n                    msg.sender,\r\n                    fulfillerConduitKey,\r\n                    accumulator\r\n                );\r\n            }\r\n        }\r\n\r\n        // Trigger any remaining accumulated transfers via call to the conduit.\r\n        _triggerIfArmed(accumulator);\r\n\r\n        // If any ether remains after fulfillments...\r\n        if (etherRemaining != 0) {\r\n            // return it to the caller.\r\n            _transferEth(payable(msg.sender), etherRemaining);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to emit an OrderFulfilled event. OfferItems are\r\n     *      translated into SpentItems and ConsiderationItems are translated\r\n     *      into ReceivedItems.\r\n     *\r\n     * @param orderHash     The order hash.\r\n     * @param offerer       The offerer for the order.\r\n     * @param zone          The zone for the order.\r\n     * @param fulfiller     The fulfiller of the order, or the null address if\r\n     *                      the order was fulfilled via order matching.\r\n     * @param offer         The offer items for the order.\r\n     * @param consideration The consideration items for the order.\r\n     */\r\n    function _emitOrderFulfilledEvent(\r\n        bytes32 orderHash,\r\n        address offerer,\r\n        address zone,\r\n        address fulfiller,\r\n        OfferItem[] memory offer,\r\n        ConsiderationItem[] memory consideration\r\n    ) internal {\r\n        // Cast already-modified offer memory region as spent items.\r\n        SpentItem[] memory spentItems;\r\n        assembly {\r\n            spentItems := offer\r\n        }\r\n\r\n        // Cast already-modified consideration memory region as received items.\r\n        ReceivedItem[] memory receivedItems;\r\n        assembly {\r\n            receivedItems := consideration\r\n        }\r\n\r\n        // Emit an event signifying that the order has been fulfilled.\r\n        emit OrderFulfilled(\r\n            orderHash,\r\n            offerer,\r\n            zone,\r\n            fulfiller,\r\n            spentItems,\r\n            receivedItems\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to convert an order to an advanced order with\r\n     *      numerator and denominator of 1 and empty extraData.\r\n     *\r\n     * @param order The order to convert.\r\n     *\r\n     * @return advancedOrder The new advanced order.\r\n     */\r\n    function _convertOrderToAdvanced(Order calldata order)\r\n        internal\r\n        pure\r\n        returns (AdvancedOrder memory advancedOrder)\r\n    {\r\n        // Convert to partial order (1/1 or full fill) and return new value.\r\n        advancedOrder = AdvancedOrder(\r\n            order.parameters,\r\n            1,\r\n            1,\r\n            order.signature,\r\n            \"\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to convert an array of orders to an array of\r\n     *      advanced orders with numerator and denominator of 1.\r\n     *\r\n     * @param orders The orders to convert.\r\n     *\r\n     * @return advancedOrders The new array of partial orders.\r\n     */\r\n    function _convertOrdersToAdvanced(Order[] calldata orders)\r\n        internal\r\n        pure\r\n        returns (AdvancedOrder[] memory advancedOrders)\r\n    {\r\n        // Read the number of orders from calldata and place on the stack.\r\n        uint256 totalOrders = orders.length;\r\n\r\n        // Allocate new empty array for each partial order in memory.\r\n        advancedOrders = new AdvancedOrder[](totalOrders);\r\n\r\n        // Skip overflow check as the index for the loop starts at zero.\r\n        unchecked {\r\n            // Iterate over the given orders.\r\n            for (uint256 i = 0; i < totalOrders; ++i) {\r\n                // Convert to partial order (1/1 or full fill) and update array.\r\n                advancedOrders[i] = _convertOrderToAdvanced(orders[i]);\r\n            }\r\n        }\r\n\r\n        // Return the array of advanced orders.\r\n        return advancedOrders;\r\n    }\r\n}\r\n"
    },
    "contracts/lib/AmountDeriver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n\r\n// prettier-ignore\r\nimport {\r\n    AmountDerivationErrors\r\n} from \"../interfaces/AmountDerivationErrors.sol\";\r\n\r\nimport \"./ConsiderationConstants.sol\";\r\n\r\n/**\r\n * @title AmountDeriver\r\n * @author 0age\r\n * @notice AmountDeriver contains view and pure functions related to deriving\r\n *         item amounts based on partial fill quantity and on linear\r\n *         interpolation based on current time when the start amount and end\r\n *         amount differ.\r\n */\r\ncontract AmountDeriver is AmountDerivationErrors {\r\n    /**\r\n     * @dev Internal view function to derive the current amount of a given item\r\n     *      based on the current price, the starting price, and the ending\r\n     *      price. If the start and end prices differ, the current price will be\r\n     *      interpolated on a linear basis. Note that this function expects that\r\n     *      the startTime parameter of orderParameters is not greater than the\r\n     *      current block timestamp and that the endTime parameter is greater\r\n     *      than the current block timestamp. If this condition is not upheld,\r\n     *      duration / elapsed / remaining variables will underflow.\r\n     *\r\n     * @param startAmount The starting amount of the item.\r\n     * @param endAmount   The ending amount of the item.\r\n     * @param startTime   The starting time of the order.\r\n     * @param endTime     The end time of the order.\r\n     * @param roundUp     A boolean indicating whether the resultant amount\r\n     *                    should be rounded up or down.\r\n     *\r\n     * @return amount The current amount.\r\n     */\r\n    function _locateCurrentAmount(\r\n        uint256 startAmount,\r\n        uint256 endAmount,\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        bool roundUp\r\n    ) internal view returns (uint256 amount) {\r\n        // Only modify end amount if it doesn't already equal start amount.\r\n        if (startAmount != endAmount) {\r\n            // Declare variables to derive in the subsequent unchecked scope.\r\n            uint256 duration;\r\n            uint256 elapsed;\r\n            uint256 remaining;\r\n\r\n            // Skip underflow checks as startTime <= block.timestamp < endTime.\r\n            unchecked {\r\n                // Derive the duration for the order and place it on the stack.\r\n                duration = endTime - startTime;\r\n\r\n                // Derive time elapsed since the order started & place on stack.\r\n                elapsed = block.timestamp - startTime;\r\n\r\n                // Derive time remaining until order expires and place on stack.\r\n                remaining = duration - elapsed;\r\n            }\r\n\r\n            // Aggregate new amounts weighted by time with rounding factor.\r\n            uint256 totalBeforeDivision = ((startAmount * remaining) +\r\n                (endAmount * elapsed));\r\n\r\n            // Use assembly to combine operations and skip divide-by-zero check.\r\n            assembly {\r\n                // Multiply by iszero(iszero(totalBeforeDivision)) to ensure\r\n                // amount is set to zero if totalBeforeDivision is zero,\r\n                // as intermediate overflow can occur if it is zero.\r\n                amount := mul(\r\n                    iszero(iszero(totalBeforeDivision)),\r\n                    // Subtract 1 from the numerator and add 1 to the result if\r\n                    // roundUp is true to get the proper rounding direction.\r\n                    // Division is performed with no zero check as duration\r\n                    // cannot be zero as long as startTime < endTime.\r\n                    add(\r\n                        div(sub(totalBeforeDivision, roundUp), duration),\r\n                        roundUp\r\n                    )\r\n                )\r\n            }\r\n\r\n            // Return the current amount.\r\n            return amount;\r\n        }\r\n\r\n        // Return the original amount as startAmount == endAmount.\r\n        return endAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to return a fraction of a given value and to\r\n     *      ensure the resultant value does not have any fractional component.\r\n     *      Note that this function assumes that zero will never be supplied as\r\n     *      the denominator parameter; invalid / undefined behavior will result\r\n     *      should a denominator of zero be provided.\r\n     *\r\n     * @param numerator   A value indicating the portion of the order that\r\n     *                    should be filled.\r\n     * @param denominator A value indicating the total size of the order. Note\r\n     *                    that this value cannot be equal to zero.\r\n     * @param value       The value for which to compute the fraction.\r\n     *\r\n     * @return newValue The value after applying the fraction.\r\n     */\r\n    function _getFraction(\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 value\r\n    ) internal pure returns (uint256 newValue) {\r\n        // Return value early in cases where the fraction resolves to 1.\r\n        if (numerator == denominator) {\r\n            return value;\r\n        }\r\n\r\n        // Ensure fraction can be applied to the value with no remainder. Note\r\n        // that the denominator cannot be zero.\r\n        assembly {\r\n            // Ensure new value contains no remainder via mulmod operator.\r\n            // Credit to @hrkrshnn + @axic for proposing this optimal solution.\r\n            if mulmod(value, numerator, denominator) {\r\n                mstore(0, InexactFraction_error_signature)\r\n                revert(0, InexactFraction_error_len)\r\n            }\r\n        }\r\n\r\n        // Multiply the numerator by the value and ensure no overflow occurs.\r\n        uint256 valueTimesNumerator = value * numerator;\r\n\r\n        // Divide and check for remainder. Note that denominator cannot be zero.\r\n        assembly {\r\n            // Perform division without zero check.\r\n            newValue := div(valueTimesNumerator, denominator)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to apply a fraction to a consideration\r\n     * or offer item.\r\n     *\r\n     * @param startAmount     The starting amount of the item.\r\n     * @param endAmount       The ending amount of the item.\r\n     * @param numerator       A value indicating the portion of the order that\r\n     *                        should be filled.\r\n     * @param denominator     A value indicating the total size of the order.\r\n     * @param startTime       The starting time of the order.\r\n     * @param endTime         The end time of the order.\r\n     * @param roundUp         A boolean indicating whether the resultant\r\n     *                        amount should be rounded up or down.\r\n     *\r\n     * @return amount The received item to transfer with the final amount.\r\n     */\r\n    function _applyFraction(\r\n        uint256 startAmount,\r\n        uint256 endAmount,\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        bool roundUp\r\n    ) internal view returns (uint256 amount) {\r\n        // If start amount equals end amount, apply fraction to end amount.\r\n        if (startAmount == endAmount) {\r\n            // Apply fraction to end amount.\r\n            amount = _getFraction(numerator, denominator, endAmount);\r\n        } else {\r\n            // Otherwise, apply fraction to both and interpolated final amount.\r\n            amount = _locateCurrentAmount(\r\n                _getFraction(numerator, denominator, startAmount),\r\n                _getFraction(numerator, denominator, endAmount),\r\n                startTime,\r\n                endTime,\r\n                roundUp\r\n            );\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/AmountDerivationErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\n/**\r\n * @title AmountDerivationErrors\r\n * @author 0age\r\n * @notice AmountDerivationErrors contains errors related to amount derivation.\r\n */\r\ninterface AmountDerivationErrors {\r\n    /**\r\n     * @dev Revert with an error when attempting to apply a fraction as part of\r\n     *      a partial fill that does not divide the target amount cleanly.\r\n     */\r\n    error InexactFraction();\r\n}\r\n"
    },
    "contracts/lib/OrderCombiner.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n\r\nimport { Side, ItemType } from \"./ConsiderationEnums.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    OfferItem,\r\n    ConsiderationItem,\r\n    ReceivedItem,\r\n    OrderParameters,\r\n    Fulfillment,\r\n    FulfillmentComponent,\r\n    Execution,\r\n    Order,\r\n    AdvancedOrder,\r\n    CriteriaResolver\r\n} from \"./ConsiderationStructs.sol\";\r\n\r\nimport { OrderFulfiller } from \"./OrderFulfiller.sol\";\r\n\r\nimport { FulfillmentApplier } from \"./FulfillmentApplier.sol\";\r\n\r\nimport \"./ConsiderationConstants.sol\";\r\n\r\n/**\r\n * @title OrderCombiner\r\n * @author 0age\r\n * @notice OrderCombiner contains logic for fulfilling combinations of orders,\r\n *         either by matching offer items to consideration items or by\r\n *         fulfilling orders where available.\r\n */\r\ncontract OrderCombiner is OrderFulfiller, FulfillmentApplier {\r\n    /**\r\n     * @dev Derive and set hashes, reference chainId, and associated domain\r\n     *      separator during deployment.\r\n     *\r\n     * @param conduitController A contract that deploys conduits, or proxies\r\n     *                          that may optionally be used to transfer approved\r\n     *                          ERC20/721/1155 tokens.\r\n     */\r\n    constructor(address conduitController) OrderFulfiller(conduitController) {}\r\n\r\n    /**\r\n     * @notice Internal function to attempt to fill a group of orders, fully or\r\n     *         partially, with an arbitrary number of items for offer and\r\n     *         consideration per order alongside criteria resolvers containing\r\n     *         specific token identifiers and associated proofs. Any order that\r\n     *         is not currently active, has already been fully filled, or has\r\n     *         been cancelled will be omitted. Remaining offer and consideration\r\n     *         items will then be aggregated where possible as indicated by the\r\n     *         supplied offer and consideration component arrays and aggregated\r\n     *         items will be transferred to the fulfiller or to each intended\r\n     *         recipient, respectively. Note that a failing item transfer or an\r\n     *         issue with order formatting will cause the entire batch to fail.\r\n     *\r\n     * @param advancedOrders            The orders to fulfill along with the\r\n     *                                  fraction of those orders to attempt to\r\n     *                                  fill. Note that both the offerer and the\r\n     *                                  fulfiller must first approve this\r\n     *                                  contract (or a conduit if indicated by\r\n     *                                  the order) to transfer any relevant\r\n     *                                  tokens on their behalf and that\r\n     *                                  contracts must implement\r\n     *                                  `onERC1155Received` in order to receive\r\n     *                                  ERC1155 tokens as consideration. Also\r\n     *                                  note that all offer and consideration\r\n     *                                  components must have no remainder after\r\n     *                                  multiplication of the respective amount\r\n     *                                  with the supplied fraction for an\r\n     *                                  order's partial fill amount to be\r\n     *                                  considered valid.\r\n     * @param criteriaResolvers         An array where each element contains a\r\n     *                                  reference to a specific offer or\r\n     *                                  consideration, a token identifier, and a\r\n     *                                  proof that the supplied token identifier\r\n     *                                  is contained in the merkle root held by\r\n     *                                  the item in question's criteria element.\r\n     *                                  Note that an empty criteria indicates\r\n     *                                  that any (transferable) token\r\n     *                                  identifier on the token in question is\r\n     *                                  valid and that no associated proof needs\r\n     *                                  to be supplied.\r\n     * @param offerFulfillments         An array of FulfillmentComponent arrays\r\n     *                                  indicating which offer items to attempt\r\n     *                                  to aggregate when preparing executions.\r\n     * @param considerationFulfillments An array of FulfillmentComponent arrays\r\n     *                                  indicating which consideration items to\r\n     *                                  attempt to aggregate when preparing\r\n     *                                  executions.\r\n     * @param fulfillerConduitKey       A bytes32 value indicating what conduit,\r\n     *                                  if any, to source the fulfiller's token\r\n     *                                  approvals from. The zero hash signifies\r\n     *                                  that no conduit should be used (and\r\n     *                                  direct approvals set on Consideration).\r\n     * @param recipient                 The intended recipient for all received\r\n     *                                  items.\r\n     * @param maximumFulfilled          The maximum number of orders to fulfill.\r\n     *\r\n     * @return availableOrders An array of booleans indicating if each order\r\n     *                         with an index corresponding to the index of the\r\n     *                         returned boolean was fulfillable or not.\r\n     * @return executions      An array of elements indicating the sequence of\r\n     *                         transfers performed as part of matching the given\r\n     *                         orders.\r\n     */\r\n    function _fulfillAvailableAdvancedOrders(\r\n        AdvancedOrder[] memory advancedOrders,\r\n        CriteriaResolver[] memory criteriaResolvers,\r\n        FulfillmentComponent[][] calldata offerFulfillments,\r\n        FulfillmentComponent[][] calldata considerationFulfillments,\r\n        bytes32 fulfillerConduitKey,\r\n        address recipient,\r\n        uint256 maximumFulfilled\r\n    )\r\n        internal\r\n        returns (bool[] memory availableOrders, Execution[] memory executions)\r\n    {\r\n        // Validate orders, apply amounts, & determine if they utilize conduits.\r\n        _validateOrdersAndPrepareToFulfill(\r\n            advancedOrders,\r\n            criteriaResolvers,\r\n            false, // Signifies that invalid orders should NOT revert.\r\n            maximumFulfilled,\r\n            recipient\r\n        );\r\n\r\n        // Aggregate used offer and consideration items and execute transfers.\r\n        (availableOrders, executions) = _executeAvailableFulfillments(\r\n            advancedOrders,\r\n            offerFulfillments,\r\n            considerationFulfillments,\r\n            fulfillerConduitKey,\r\n            recipient\r\n        );\r\n\r\n        // Return order fulfillment details and executions.\r\n        return (availableOrders, executions);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to validate a group of orders, update their\r\n     *      statuses, reduce amounts by their previously filled fractions, apply\r\n     *      criteria resolvers, and emit OrderFulfilled events.\r\n     *\r\n     * @param advancedOrders    The advanced orders to validate and reduce by\r\n     *                          their previously filled amounts.\r\n     * @param criteriaResolvers An array where each element contains a reference\r\n     *                          to a specific order as well as that order's\r\n     *                          offer or consideration, a token identifier, and\r\n     *                          a proof that the supplied token identifier is\r\n     *                          contained in the order's merkle root. Note that\r\n     *                          a root of zero indicates that any transferable\r\n     *                          token identifier is valid and that no proof\r\n     *                          needs to be supplied.\r\n     * @param revertOnInvalid   A boolean indicating whether to revert on any\r\n     *                          order being invalid; setting this to false will\r\n     *                          instead cause the invalid order to be skipped.\r\n     * @param maximumFulfilled  The maximum number of orders to fulfill.\r\n     * @param recipient         The intended recipient for all received items.\r\n     */\r\n    function _validateOrdersAndPrepareToFulfill(\r\n        AdvancedOrder[] memory advancedOrders,\r\n        CriteriaResolver[] memory criteriaResolvers,\r\n        bool revertOnInvalid,\r\n        uint256 maximumFulfilled,\r\n        address recipient\r\n    ) internal {\r\n        // Ensure this function cannot be triggered during a reentrant call.\r\n        _setReentrancyGuard();\r\n\r\n        // Read length of orders array and place on the stack.\r\n        uint256 totalOrders = advancedOrders.length;\r\n\r\n        // Track the order hash for each order being fulfilled.\r\n        bytes32[] memory orderHashes = new bytes32[](totalOrders);\r\n\r\n        // Override orderHashes length to zero after memory has been allocated.\r\n        assembly {\r\n            mstore(orderHashes, 0)\r\n        }\r\n\r\n        // Declare an error buffer indicating status of any native offer items.\r\n        // {00} == 0 => In a match function, no native offer items: allow.\r\n        // {01} == 1 => In a match function, some native offer items: allow.\r\n        // {10} == 2 => Not in a match function, no native offer items: allow.\r\n        // {11} == 3 => Not in a match function, some native offer items: THROW.\r\n        uint256 invalidNativeOfferItemErrorBuffer;\r\n\r\n        // Use assembly to set the value for the second bit of the error buffer.\r\n        assembly {\r\n            // Use the second bit of the error buffer to indicate whether the\r\n            // current function is not matchAdvancedOrders or matchOrders.\r\n            invalidNativeOfferItemErrorBuffer := shl(\r\n                1,\r\n                gt(\r\n                    // Take the remainder of the selector modulo a magic value.\r\n                    mod(\r\n                        shr(NumBitsAfterSelector, calldataload(0)),\r\n                        NonMatchSelector_MagicModulus\r\n                    ),\r\n                    // Check if remainder is higher than the greatest remainder\r\n                    // of the two match selectors modulo the magic value.\r\n                    NonMatchSelector_MagicRemainder\r\n                )\r\n            )\r\n        }\r\n\r\n        // Skip overflow checks as all for loops are indexed starting at zero.\r\n        unchecked {\r\n            // Iterate over each order.\r\n            for (uint256 i = 0; i < totalOrders; ++i) {\r\n                // Retrieve the current order.\r\n                AdvancedOrder memory advancedOrder = advancedOrders[i];\r\n\r\n                // Determine if max number orders have already been fulfilled.\r\n                if (maximumFulfilled == 0) {\r\n                    // Mark fill fraction as zero as the order will not be used.\r\n                    advancedOrder.numerator = 0;\r\n\r\n                    // Update the length of the orderHashes array.\r\n                    assembly {\r\n                        mstore(orderHashes, add(i, 1))\r\n                    }\r\n\r\n                    // Continue iterating through the remaining orders.\r\n                    continue;\r\n                }\r\n\r\n                // Validate it, update status, and determine fraction to fill.\r\n                (\r\n                    bytes32 orderHash,\r\n                    uint256 numerator,\r\n                    uint256 denominator\r\n                ) = _validateOrderAndUpdateStatus(\r\n                        advancedOrder,\r\n                        criteriaResolvers,\r\n                        revertOnInvalid,\r\n                        orderHashes\r\n                    );\r\n\r\n                // Update the length of the orderHashes array.\r\n                assembly {\r\n                    mstore(orderHashes, add(i, 1))\r\n                }\r\n\r\n                // Do not track hash or adjust prices if order is not fulfilled.\r\n                if (numerator == 0) {\r\n                    // Mark fill fraction as zero if the order is not fulfilled.\r\n                    advancedOrder.numerator = 0;\r\n\r\n                    // Continue iterating through the remaining orders.\r\n                    continue;\r\n                }\r\n\r\n                // Otherwise, track the order hash in question.\r\n                orderHashes[i] = orderHash;\r\n\r\n                // Decrement the number of fulfilled orders.\r\n                // Skip underflow check as the condition before\r\n                // implies that maximumFulfilled > 0.\r\n                maximumFulfilled--;\r\n\r\n                // Place the start time for the order on the stack.\r\n                uint256 startTime = advancedOrder.parameters.startTime;\r\n\r\n                // Place the end time for the order on the stack.\r\n                uint256 endTime = advancedOrder.parameters.endTime;\r\n\r\n                // Retrieve array of offer items for the order in question.\r\n                OfferItem[] memory offer = advancedOrder.parameters.offer;\r\n\r\n                // Read length of offer array and place on the stack.\r\n                uint256 totalOfferItems = offer.length;\r\n\r\n                // Iterate over each offer item on the order.\r\n                for (uint256 j = 0; j < totalOfferItems; ++j) {\r\n                    // Retrieve the offer item.\r\n                    OfferItem memory offerItem = offer[j];\r\n\r\n                    assembly {\r\n                        // If the offer item is for the native token, set the\r\n                        // first bit of the error buffer to true.\r\n                        invalidNativeOfferItemErrorBuffer := or(\r\n                            invalidNativeOfferItemErrorBuffer,\r\n                            iszero(mload(offerItem))\r\n                        )\r\n                    }\r\n\r\n                    // Apply order fill fraction to offer item end amount.\r\n                    uint256 endAmount = _getFraction(\r\n                        numerator,\r\n                        denominator,\r\n                        offerItem.endAmount\r\n                    );\r\n\r\n                    // Reuse same fraction if start and end amounts are equal.\r\n                    if (offerItem.startAmount == offerItem.endAmount) {\r\n                        // Apply derived amount to both start and end amount.\r\n                        offerItem.startAmount = endAmount;\r\n                    } else {\r\n                        // Apply order fill fraction to offer item start amount.\r\n                        offerItem.startAmount = _getFraction(\r\n                            numerator,\r\n                            denominator,\r\n                            offerItem.startAmount\r\n                        );\r\n                    }\r\n\r\n                    // Update end amount in memory to match the derived amount.\r\n                    offerItem.endAmount = endAmount;\r\n\r\n                    // Adjust offer amount using current time; round down.\r\n                    offerItem.startAmount = _locateCurrentAmount(\r\n                        offerItem.startAmount,\r\n                        offerItem.endAmount,\r\n                        startTime,\r\n                        endTime,\r\n                        false // round down\r\n                    );\r\n                }\r\n\r\n                // Retrieve array of consideration items for order in question.\r\n                ConsiderationItem[] memory consideration = (\r\n                    advancedOrder.parameters.consideration\r\n                );\r\n\r\n                // Read length of consideration array and place on the stack.\r\n                uint256 totalConsiderationItems = consideration.length;\r\n\r\n                // Iterate over each consideration item on the order.\r\n                for (uint256 j = 0; j < totalConsiderationItems; ++j) {\r\n                    // Retrieve the consideration item.\r\n                    ConsiderationItem memory considerationItem = (\r\n                        consideration[j]\r\n                    );\r\n\r\n                    // Apply fraction to consideration item end amount.\r\n                    uint256 endAmount = _getFraction(\r\n                        numerator,\r\n                        denominator,\r\n                        considerationItem.endAmount\r\n                    );\r\n\r\n                    // Reuse same fraction if start and end amounts are equal.\r\n                    if (\r\n                        considerationItem.startAmount ==\r\n                        considerationItem.endAmount\r\n                    ) {\r\n                        // Apply derived amount to both start and end amount.\r\n                        considerationItem.startAmount = endAmount;\r\n                    } else {\r\n                        // Apply fraction to consideration item start amount.\r\n                        considerationItem.startAmount = _getFraction(\r\n                            numerator,\r\n                            denominator,\r\n                            considerationItem.startAmount\r\n                        );\r\n                    }\r\n\r\n                    // Update end amount in memory to match the derived amount.\r\n                    considerationItem.endAmount = endAmount;\r\n\r\n                    // Adjust consideration amount using current time; round up.\r\n                    considerationItem.startAmount = (\r\n                        _locateCurrentAmount(\r\n                            considerationItem.startAmount,\r\n                            considerationItem.endAmount,\r\n                            startTime,\r\n                            endTime,\r\n                            true // round up\r\n                        )\r\n                    );\r\n\r\n                    // Utilize assembly to manually \"shift\" the recipient value.\r\n                    assembly {\r\n                        // Write recipient to endAmount, as endAmount is not\r\n                        // used from this point on and can be repurposed to fit\r\n                        // the layout of a ReceivedItem.\r\n                        mstore(\r\n                            add(\r\n                                considerationItem,\r\n                                ReceivedItem_recipient_offset // old endAmount\r\n                            ),\r\n                            mload(\r\n                                add(\r\n                                    considerationItem,\r\n                                    ConsiderationItem_recipient_offset\r\n                                )\r\n                            )\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // If the first bit is set, a native offer item was encountered. If the\r\n        // second bit is set in the error buffer, the current function is not\r\n        // matchOrders or matchAdvancedOrders. If the value is three, both the\r\n        // first and second bits were set; in that case, revert with an error.\r\n        if (invalidNativeOfferItemErrorBuffer == 3) {\r\n            revert InvalidNativeOfferItem();\r\n        }\r\n\r\n        // Apply criteria resolvers to each order as applicable.\r\n        _applyCriteriaResolvers(advancedOrders, criteriaResolvers);\r\n\r\n        // Emit an event for each order signifying that it has been fulfilled.\r\n        // Skip overflow checks as all for loops are indexed starting at zero.\r\n        unchecked {\r\n            // Iterate over each order.\r\n            for (uint256 i = 0; i < totalOrders; ++i) {\r\n                // Do not emit an event if no order hash is present.\r\n                if (orderHashes[i] == bytes32(0)) {\r\n                    continue;\r\n                }\r\n\r\n                // Retrieve parameters for the order in question.\r\n                OrderParameters memory orderParameters = (\r\n                    advancedOrders[i].parameters\r\n                );\r\n\r\n                // Emit an OrderFulfilled event.\r\n                _emitOrderFulfilledEvent(\r\n                    orderHashes[i],\r\n                    orderParameters.offerer,\r\n                    orderParameters.zone,\r\n                    recipient,\r\n                    orderParameters.offer,\r\n                    orderParameters.consideration\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to fulfill a group of validated orders, fully or\r\n     *      partially, with an arbitrary number of items for offer and\r\n     *      consideration per order and to execute transfers. Any order that is\r\n     *      not currently active, has already been fully filled, or has been\r\n     *      cancelled will be omitted. Remaining offer and consideration items\r\n     *      will then be aggregated where possible as indicated by the supplied\r\n     *      offer and consideration component arrays and aggregated items will\r\n     *      be transferred to the fulfiller or to each intended recipient,\r\n     *      respectively. Note that a failing item transfer or an issue with\r\n     *      order formatting will cause the entire batch to fail.\r\n     *\r\n     * @param advancedOrders            The orders to fulfill along with the\r\n     *                                  fraction of those orders to attempt to\r\n     *                                  fill. Note that both the offerer and the\r\n     *                                  fulfiller must first approve this\r\n     *                                  contract (or the conduit if indicated by\r\n     *                                  the order) to transfer any relevant\r\n     *                                  tokens on their behalf and that\r\n     *                                  contracts must implement\r\n     *                                  `onERC1155Received` in order to receive\r\n     *                                  ERC1155 tokens as consideration. Also\r\n     *                                  note that all offer and consideration\r\n     *                                  components must have no remainder after\r\n     *                                  multiplication of the respective amount\r\n     *                                  with the supplied fraction for an\r\n     *                                  order's partial fill amount to be\r\n     *                                  considered valid.\r\n     * @param offerFulfillments         An array of FulfillmentComponent arrays\r\n     *                                  indicating which offer items to attempt\r\n     *                                  to aggregate when preparing executions.\r\n     * @param considerationFulfillments An array of FulfillmentComponent arrays\r\n     *                                  indicating which consideration items to\r\n     *                                  attempt to aggregate when preparing\r\n     *                                  executions.\r\n     * @param fulfillerConduitKey       A bytes32 value indicating what conduit,\r\n     *                                  if any, to source the fulfiller's token\r\n     *                                  approvals from. The zero hash signifies\r\n     *                                  that no conduit should be used, with\r\n     *                                  direct approvals set on Consideration.\r\n     * @param recipient                 The intended recipient for all received\r\n     *                                  items.\r\n     *\r\n     * @return availableOrders An array of booleans indicating if each order\r\n     *                         with an index corresponding to the index of the\r\n     *                         returned boolean was fulfillable or not.\r\n     * @return executions      An array of elements indicating the sequence of\r\n     *                         transfers performed as part of matching the given\r\n     *                         orders.\r\n     */\r\n    function _executeAvailableFulfillments(\r\n        AdvancedOrder[] memory advancedOrders,\r\n        FulfillmentComponent[][] memory offerFulfillments,\r\n        FulfillmentComponent[][] memory considerationFulfillments,\r\n        bytes32 fulfillerConduitKey,\r\n        address recipient\r\n    )\r\n        internal\r\n        returns (bool[] memory availableOrders, Execution[] memory executions)\r\n    {\r\n        // Retrieve length of offer fulfillments array and place on the stack.\r\n        uint256 totalOfferFulfillments = offerFulfillments.length;\r\n\r\n        // Retrieve length of consideration fulfillments array & place on stack.\r\n        uint256 totalConsiderationFulfillments = (\r\n            considerationFulfillments.length\r\n        );\r\n\r\n        // Allocate an execution for each offer and consideration fulfillment.\r\n        executions = new Execution[](\r\n            totalOfferFulfillments + totalConsiderationFulfillments\r\n        );\r\n\r\n        // Skip overflow checks as all for loops are indexed starting at zero.\r\n        unchecked {\r\n            // Track number of filtered executions.\r\n            uint256 totalFilteredExecutions = 0;\r\n\r\n            // Iterate over each offer fulfillment.\r\n            for (uint256 i = 0; i < totalOfferFulfillments; ++i) {\r\n                /// Retrieve the offer fulfillment components in question.\r\n                FulfillmentComponent[] memory components = (\r\n                    offerFulfillments[i]\r\n                );\r\n\r\n                // Derive aggregated execution corresponding with fulfillment.\r\n                Execution memory execution = _aggregateAvailable(\r\n                    advancedOrders,\r\n                    Side.OFFER,\r\n                    components,\r\n                    fulfillerConduitKey,\r\n                    recipient\r\n                );\r\n\r\n                // If offerer and recipient on the execution are the same...\r\n                if (execution.item.recipient == execution.offerer) {\r\n                    // Increment total filtered executions.\r\n                    ++totalFilteredExecutions;\r\n                } else {\r\n                    // Otherwise, assign the execution to the executions array.\r\n                    executions[i - totalFilteredExecutions] = execution;\r\n                }\r\n            }\r\n\r\n            // Iterate over each consideration fulfillment.\r\n            for (uint256 i = 0; i < totalConsiderationFulfillments; ++i) {\r\n                /// Retrieve consideration fulfillment components in question.\r\n                FulfillmentComponent[] memory components = (\r\n                    considerationFulfillments[i]\r\n                );\r\n\r\n                // Derive aggregated execution corresponding with fulfillment.\r\n                Execution memory execution = _aggregateAvailable(\r\n                    advancedOrders,\r\n                    Side.CONSIDERATION,\r\n                    components,\r\n                    fulfillerConduitKey,\r\n                    address(0) // unused\r\n                );\r\n\r\n                // If offerer and recipient on the execution are the same...\r\n                if (execution.item.recipient == execution.offerer) {\r\n                    // Increment total filtered executions.\r\n                    ++totalFilteredExecutions;\r\n                } else {\r\n                    // Otherwise, assign the execution to the executions array.\r\n                    executions[\r\n                        i + totalOfferFulfillments - totalFilteredExecutions\r\n                    ] = execution;\r\n                }\r\n            }\r\n\r\n            // If some number of executions have been filtered...\r\n            if (totalFilteredExecutions != 0) {\r\n                // reduce the total length of the executions array.\r\n                assembly {\r\n                    mstore(\r\n                        executions,\r\n                        sub(mload(executions), totalFilteredExecutions)\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        // Revert if no orders are available.\r\n        if (executions.length == 0) {\r\n            revert NoSpecifiedOrdersAvailable();\r\n        }\r\n\r\n        // Perform final checks and return.\r\n        availableOrders = _performFinalChecksAndExecuteOrders(\r\n            advancedOrders,\r\n            executions\r\n        );\r\n\r\n        return (availableOrders, executions);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to perform a final check that each consideration\r\n     *      item for an arbitrary number of fulfilled orders has been met and to\r\n     *      trigger associated executions, transferring the respective items.\r\n     *\r\n     * @param advancedOrders     The orders to check and perform executions for.\r\n     * @param executions         An array of elements indicating the sequence of\r\n     *                           transfers to perform when fulfilling the given\r\n     *                           orders.\r\n     *\r\n     * @return availableOrders An array of booleans indicating if each order\r\n     *                         with an index corresponding to the index of the\r\n     *                         returned boolean was fulfillable or not.\r\n     */\r\n    function _performFinalChecksAndExecuteOrders(\r\n        AdvancedOrder[] memory advancedOrders,\r\n        Execution[] memory executions\r\n    ) internal returns (bool[] memory availableOrders) {\r\n        // Retrieve the length of the advanced orders array and place on stack.\r\n        uint256 totalOrders = advancedOrders.length;\r\n\r\n        // Initialize array for tracking available orders.\r\n        availableOrders = new bool[](totalOrders);\r\n\r\n        // Skip overflow checks as all for loops are indexed starting at zero.\r\n        unchecked {\r\n            // Iterate over orders to ensure all considerations are met.\r\n            for (uint256 i = 0; i < totalOrders; ++i) {\r\n                // Retrieve the order in question.\r\n                AdvancedOrder memory advancedOrder = advancedOrders[i];\r\n\r\n                // Skip consideration item checks for order if not fulfilled.\r\n                if (advancedOrder.numerator == 0) {\r\n                    // Note: orders do not need to be marked as unavailable as a\r\n                    // new memory region has been allocated. Review carefully if\r\n                    // altering compiler version or managing memory manually.\r\n                    continue;\r\n                }\r\n\r\n                // Mark the order as available.\r\n                availableOrders[i] = true;\r\n\r\n                // Retrieve consideration items to ensure they are fulfilled.\r\n                ConsiderationItem[] memory consideration = (\r\n                    advancedOrder.parameters.consideration\r\n                );\r\n\r\n                // Read length of consideration array and place on the stack.\r\n                uint256 totalConsiderationItems = consideration.length;\r\n\r\n                // Iterate over each consideration item to ensure it is met.\r\n                for (uint256 j = 0; j < totalConsiderationItems; ++j) {\r\n                    // Retrieve remaining amount on the consideration item.\r\n                    uint256 unmetAmount = consideration[j].startAmount;\r\n\r\n                    // Revert if the remaining amount is not zero.\r\n                    if (unmetAmount != 0) {\r\n                        revert ConsiderationNotMet(i, j, unmetAmount);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Put ether value supplied by the caller on the stack.\r\n        uint256 etherRemaining = msg.value;\r\n\r\n        // Initialize an accumulator array. From this point forward, no new\r\n        // memory regions can be safely allocated until the accumulator is no\r\n        // longer being utilized, as the accumulator operates in an open-ended\r\n        // fashion from this memory pointer; existing memory may still be\r\n        // accessed and modified, however.\r\n        bytes memory accumulator = new bytes(AccumulatorDisarmed);\r\n\r\n        // Retrieve the length of the executions array and place on stack.\r\n        uint256 totalExecutions = executions.length;\r\n\r\n        // Iterate over each execution.\r\n        for (uint256 i = 0; i < totalExecutions; ) {\r\n            // Retrieve the execution and the associated received item.\r\n            Execution memory execution = executions[i];\r\n            ReceivedItem memory item = execution.item;\r\n\r\n            // If execution transfers native tokens, reduce value available.\r\n            if (item.itemType == ItemType.NATIVE) {\r\n                // Ensure that sufficient native tokens are still available.\r\n                if (item.amount > etherRemaining) {\r\n                    revert InsufficientEtherSupplied();\r\n                }\r\n\r\n                // Skip underflow check as amount is less than ether remaining.\r\n                unchecked {\r\n                    etherRemaining -= item.amount;\r\n                }\r\n            }\r\n\r\n            // Transfer the item specified by the execution.\r\n            _transfer(\r\n                item,\r\n                execution.offerer,\r\n                execution.conduitKey,\r\n                accumulator\r\n            );\r\n\r\n            // Skip overflow check as for loop is indexed starting at zero.\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Trigger any remaining accumulated transfers via call to the conduit.\r\n        _triggerIfArmed(accumulator);\r\n\r\n        // If any ether remains after fulfillments, return it to the caller.\r\n        if (etherRemaining != 0) {\r\n            _transferEth(payable(msg.sender), etherRemaining);\r\n        }\r\n\r\n        // Clear the reentrancy guard.\r\n        _clearReentrancyGuard();\r\n\r\n        // Return the array containing available orders.\r\n        return (availableOrders);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to match an arbitrary number of full or partial\r\n     *      orders, each with an arbitrary number of items for offer and\r\n     *      consideration, supplying criteria resolvers containing specific\r\n     *      token identifiers and associated proofs as well as fulfillments\r\n     *      allocating offer components to consideration components.\r\n     *\r\n     * @param advancedOrders    The advanced orders to match. Note that both the\r\n     *                          offerer and fulfiller on each order must first\r\n     *                          approve this contract (or their conduit if\r\n     *                          indicated by the order) to transfer any relevant\r\n     *                          tokens on their behalf and each consideration\r\n     *                          recipient must implement `onERC1155Received` in\r\n     *                          order to receive ERC1155 tokens. Also note that\r\n     *                          the offer and consideration components for each\r\n     *                          order must have no remainder after multiplying\r\n     *                          the respective amount with the supplied fraction\r\n     *                          in order for the group of partial fills to be\r\n     *                          considered valid.\r\n     * @param criteriaResolvers An array where each element contains a reference\r\n     *                          to a specific order as well as that order's\r\n     *                          offer or consideration, a token identifier, and\r\n     *                          a proof that the supplied token identifier is\r\n     *                          contained in the order's merkle root. Note that\r\n     *                          an empty root indicates that any (transferable)\r\n     *                          token identifier is valid and that no associated\r\n     *                          proof needs to be supplied.\r\n     * @param fulfillments      An array of elements allocating offer components\r\n     *                          to consideration components. Note that each\r\n     *                          consideration component must be fully met in\r\n     *                          order for the match operation to be valid.\r\n     *\r\n     * @return executions An array of elements indicating the sequence of\r\n     *                    transfers performed as part of matching the given\r\n     *                    orders.\r\n     */\r\n    function _matchAdvancedOrders(\r\n        AdvancedOrder[] memory advancedOrders,\r\n        CriteriaResolver[] memory criteriaResolvers,\r\n        Fulfillment[] calldata fulfillments\r\n    ) internal returns (Execution[] memory executions) {\r\n        // Validate orders, update order status, and determine item amounts.\r\n        _validateOrdersAndPrepareToFulfill(\r\n            advancedOrders,\r\n            criteriaResolvers,\r\n            true, // Signifies that invalid orders should revert.\r\n            advancedOrders.length,\r\n            address(0) // OrderFulfilled event has no recipient when matching.\r\n        );\r\n\r\n        // Fulfill the orders using the supplied fulfillments.\r\n        return _fulfillAdvancedOrders(advancedOrders, fulfillments);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to fulfill an arbitrary number of orders, either\r\n     *      full or partial, after validating, adjusting amounts, and applying\r\n     *      criteria resolvers.\r\n     *\r\n     * @param advancedOrders     The orders to match, including a fraction to\r\n     *                           attempt to fill for each order.\r\n     * @param fulfillments       An array of elements allocating offer\r\n     *                           components to consideration components. Note\r\n     *                           that the final amount of each consideration\r\n     *                           component must be zero for a match operation to\r\n     *                           be considered valid.\r\n     *\r\n     * @return executions An array of elements indicating the sequence of\r\n     *                    transfers performed as part of matching the given\r\n     *                    orders.\r\n     */\r\n    function _fulfillAdvancedOrders(\r\n        AdvancedOrder[] memory advancedOrders,\r\n        Fulfillment[] calldata fulfillments\r\n    ) internal returns (Execution[] memory executions) {\r\n        // Retrieve fulfillments array length and place on the stack.\r\n        uint256 totalFulfillments = fulfillments.length;\r\n\r\n        // Allocate executions by fulfillment and apply them to each execution.\r\n        executions = new Execution[](totalFulfillments);\r\n\r\n        // Skip overflow checks as all for loops are indexed starting at zero.\r\n        unchecked {\r\n            // Track number of filtered executions.\r\n            uint256 totalFilteredExecutions = 0;\r\n\r\n            // Iterate over each fulfillment.\r\n            for (uint256 i = 0; i < totalFulfillments; ++i) {\r\n                /// Retrieve the fulfillment in question.\r\n                Fulfillment calldata fulfillment = fulfillments[i];\r\n\r\n                // Derive the execution corresponding with the fulfillment.\r\n                Execution memory execution = _applyFulfillment(\r\n                    advancedOrders,\r\n                    fulfillment.offerComponents,\r\n                    fulfillment.considerationComponents\r\n                );\r\n\r\n                // If offerer and recipient on the execution are the same...\r\n                if (execution.item.recipient == execution.offerer) {\r\n                    // Increment total filtered executions.\r\n                    ++totalFilteredExecutions;\r\n                } else {\r\n                    // Otherwise, assign the execution to the executions array.\r\n                    executions[i - totalFilteredExecutions] = execution;\r\n                }\r\n            }\r\n\r\n            // If some number of executions have been filtered...\r\n            if (totalFilteredExecutions != 0) {\r\n                // reduce the total length of the executions array.\r\n                assembly {\r\n                    mstore(\r\n                        executions,\r\n                        sub(mload(executions), totalFilteredExecutions)\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        // Perform final checks and execute orders.\r\n        _performFinalChecksAndExecuteOrders(advancedOrders, executions);\r\n\r\n        // Return the executions array.\r\n        return (executions);\r\n    }\r\n}\r\n"
    },
    "contracts/lib/Consideration.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n\r\n// prettier-ignore\r\nimport {\r\n    ConsiderationInterface\r\n} from \"../interfaces/ConsiderationInterface.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    OrderComponents,\r\n    BasicOrderParameters,\r\n    OrderParameters,\r\n    Order,\r\n    AdvancedOrder,\r\n    OrderStatus,\r\n    CriteriaResolver,\r\n    Fulfillment,\r\n    FulfillmentComponent,\r\n    Execution\r\n} from \"./ConsiderationStructs.sol\";\r\n\r\nimport { OrderCombiner } from \"./OrderCombiner.sol\";\r\n\r\n/**\r\n * @title Consideration\r\n * @author 0age\r\n * @custom:coauthor d1ll0n\r\n * @custom:coauthor transmissions11\r\n * @custom:version 1.1\r\n * @notice Consideration is a generalized ETH/ERC20/ERC721/ERC1155 marketplace.\r\n *         It minimizes external calls to the greatest extent possible and\r\n *         provides lightweight methods for common routes as well as more\r\n *         flexible methods for composing advanced orders or groups of orders.\r\n *         Each order contains an arbitrary number of items that may be spent\r\n *         (the \"offer\") along with an arbitrary number of items that must be\r\n *         received back by the indicated recipients (the \"consideration\").\r\n */\r\ncontract Consideration is ConsiderationInterface, OrderCombiner {\r\n    /**\r\n     * @notice Derive and set hashes, reference chainId, and associated domain\r\n     *         separator during deployment.\r\n     *\r\n     * @param conduitController A contract that deploys conduits, or proxies\r\n     *                          that may optionally be used to transfer approved\r\n     *                          ERC20/721/1155 tokens.\r\n     */\r\n    constructor(address conduitController) OrderCombiner(conduitController) {}\r\n\r\n    /**\r\n     * @notice Fulfill an order offering an ERC20, ERC721, or ERC1155 item by\r\n     *         supplying Ether (or other native tokens), ERC20 tokens, an ERC721\r\n     *         item, or an ERC1155 item as consideration. Six permutations are\r\n     *         supported: Native token to ERC721, Native token to ERC1155, ERC20\r\n     *         to ERC721, ERC20 to ERC1155, ERC721 to ERC20, and ERC1155 to\r\n     *         ERC20 (with native tokens supplied as msg.value). For an order to\r\n     *         be eligible for fulfillment via this method, it must contain a\r\n     *         single offer item (though that item may have a greater amount if\r\n     *         the item is not an ERC721). An arbitrary number of \"additional\r\n     *         recipients\" may also be supplied which will each receive native\r\n     *         tokens or ERC20 items from the fulfiller as consideration. Refer\r\n     *         to the documentation for a more comprehensive summary of how to\r\n     *         utilize this method and what orders are compatible with it.\r\n     *\r\n     * @param parameters Additional information on the fulfilled order. Note\r\n     *                   that the offerer and the fulfiller must first approve\r\n     *                   this contract (or their chosen conduit if indicated)\r\n     *                   before any tokens can be transferred. Also note that\r\n     *                   contract recipients of ERC1155 consideration items must\r\n     *                   implement `onERC1155Received` in order to receive those\r\n     *                   items.\r\n     *\r\n     * @return fulfilled A boolean indicating whether the order has been\r\n     *                   successfully fulfilled.\r\n     */\r\n    function fulfillBasicOrder(BasicOrderParameters calldata parameters)\r\n        external\r\n        payable\r\n        override\r\n        returns (bool fulfilled)\r\n    {\r\n        // Validate and fulfill the basic order.\r\n        fulfilled = _validateAndFulfillBasicOrder(parameters);\r\n    }\r\n\r\n    /**\r\n     * @notice Fulfill an order with an arbitrary number of items for offer and\r\n     *         consideration. Note that this function does not support\r\n     *         criteria-based orders or partial filling of orders (though\r\n     *         filling the remainder of a partially-filled order is supported).\r\n     *\r\n     * @param order               The order to fulfill. Note that both the\r\n     *                            offerer and the fulfiller must first approve\r\n     *                            this contract (or the corresponding conduit if\r\n     *                            indicated) to transfer any relevant tokens on\r\n     *                            their behalf and that contracts must implement\r\n     *                            `onERC1155Received` to receive ERC1155 tokens\r\n     *                            as consideration.\r\n     * @param fulfillerConduitKey A bytes32 value indicating what conduit, if\r\n     *                            any, to source the fulfiller's token approvals\r\n     *                            from. The zero hash signifies that no conduit\r\n     *                            should be used (and direct approvals set on\r\n     *                            Consideration).\r\n     *\r\n     * @return fulfilled A boolean indicating whether the order has been\r\n     *                   successfully fulfilled.\r\n     */\r\n    function fulfillOrder(Order calldata order, bytes32 fulfillerConduitKey)\r\n        external\r\n        payable\r\n        override\r\n        returns (bool fulfilled)\r\n    {\r\n        // Convert order to \"advanced\" order, then validate and fulfill it.\r\n        fulfilled = _validateAndFulfillAdvancedOrder(\r\n            _convertOrderToAdvanced(order),\r\n            new CriteriaResolver[](0), // No criteria resolvers supplied.\r\n            fulfillerConduitKey,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Fill an order, fully or partially, with an arbitrary number of\r\n     *         items for offer and consideration alongside criteria resolvers\r\n     *         containing specific token identifiers and associated proofs.\r\n     *\r\n     * @param advancedOrder       The order to fulfill along with the fraction\r\n     *                            of the order to attempt to fill. Note that\r\n     *                            both the offerer and the fulfiller must first\r\n     *                            approve this contract (or their conduit if\r\n     *                            indicated by the order) to transfer any\r\n     *                            relevant tokens on their behalf and that\r\n     *                            contracts must implement `onERC1155Received`\r\n     *                            to receive ERC1155 tokens as consideration.\r\n     *                            Also note that all offer and consideration\r\n     *                            components must have no remainder after\r\n     *                            multiplication of the respective amount with\r\n     *                            the supplied fraction for the partial fill to\r\n     *                            be considered valid.\r\n     * @param criteriaResolvers   An array where each element contains a\r\n     *                            reference to a specific offer or\r\n     *                            consideration, a token identifier, and a proof\r\n     *                            that the supplied token identifier is\r\n     *                            contained in the merkle root held by the item\r\n     *                            in question's criteria element. Note that an\r\n     *                            empty criteria indicates that any\r\n     *                            (transferable) token identifier on the token\r\n     *                            in question is valid and that no associated\r\n     *                            proof needs to be supplied.\r\n     * @param fulfillerConduitKey A bytes32 value indicating what conduit, if\r\n     *                            any, to source the fulfiller's token approvals\r\n     *                            from. The zero hash signifies that no conduit\r\n     *                            should be used (and direct approvals set on\r\n     *                            Consideration).\r\n     * @param recipient           The intended recipient for all received items,\r\n     *                            with `address(0)` indicating that the caller\r\n     *                            should receive the items.\r\n     *\r\n     * @return fulfilled A boolean indicating whether the order has been\r\n     *                   successfully fulfilled.\r\n     */\r\n    function fulfillAdvancedOrder(\r\n        AdvancedOrder calldata advancedOrder,\r\n        CriteriaResolver[] calldata criteriaResolvers,\r\n        bytes32 fulfillerConduitKey,\r\n        address recipient\r\n    ) external payable override returns (bool fulfilled) {\r\n        // Validate and fulfill the order.\r\n        fulfilled = _validateAndFulfillAdvancedOrder(\r\n            advancedOrder,\r\n            criteriaResolvers,\r\n            fulfillerConduitKey,\r\n            recipient == address(0) ? msg.sender : recipient\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Attempt to fill a group of orders, each with an arbitrary number\r\n     *         of items for offer and consideration. Any order that is not\r\n     *         currently active, has already been fully filled, or has been\r\n     *         cancelled will be omitted. Remaining offer and consideration\r\n     *         items will then be aggregated where possible as indicated by the\r\n     *         supplied offer and consideration component arrays and aggregated\r\n     *         items will be transferred to the fulfiller or to each intended\r\n     *         recipient, respectively. Note that a failing item transfer or an\r\n     *         issue with order formatting will cause the entire batch to fail.\r\n     *         Note that this function does not support criteria-based orders or\r\n     *         partial filling of orders (though filling the remainder of a\r\n     *         partially-filled order is supported).\r\n     *\r\n     * @param orders                    The orders to fulfill. Note that both\r\n     *                                  the offerer and the fulfiller must first\r\n     *                                  approve this contract (or the\r\n     *                                  corresponding conduit if indicated) to\r\n     *                                  transfer any relevant tokens on their\r\n     *                                  behalf and that contracts must implement\r\n     *                                  `onERC1155Received` to receive ERC1155\r\n     *                                  tokens as consideration.\r\n     * @param offerFulfillments         An array of FulfillmentComponent arrays\r\n     *                                  indicating which offer items to attempt\r\n     *                                  to aggregate when preparing executions.\r\n     * @param considerationFulfillments An array of FulfillmentComponent arrays\r\n     *                                  indicating which consideration items to\r\n     *                                  attempt to aggregate when preparing\r\n     *                                  executions.\r\n     * @param fulfillerConduitKey       A bytes32 value indicating what conduit,\r\n     *                                  if any, to source the fulfiller's token\r\n     *                                  approvals from. The zero hash signifies\r\n     *                                  that no conduit should be used (and\r\n     *                                  direct approvals set on Consideration).\r\n     * @param maximumFulfilled          The maximum number of orders to fulfill.\r\n     *\r\n     * @return availableOrders An array of booleans indicating if each order\r\n     *                         with an index corresponding to the index of the\r\n     *                         returned boolean was fulfillable or not.\r\n     * @return executions      An array of elements indicating the sequence of\r\n     *                         transfers performed as part of matching the given\r\n     *                         orders.\r\n     */\r\n    function fulfillAvailableOrders(\r\n        Order[] calldata orders,\r\n        FulfillmentComponent[][] calldata offerFulfillments,\r\n        FulfillmentComponent[][] calldata considerationFulfillments,\r\n        bytes32 fulfillerConduitKey,\r\n        uint256 maximumFulfilled\r\n    )\r\n        external\r\n        payable\r\n        override\r\n        returns (bool[] memory availableOrders, Execution[] memory executions)\r\n    {\r\n        // Convert orders to \"advanced\" orders and fulfill all available orders.\r\n        return\r\n            _fulfillAvailableAdvancedOrders(\r\n                _convertOrdersToAdvanced(orders), // Convert to advanced orders.\r\n                new CriteriaResolver[](0), // No criteria resolvers supplied.\r\n                offerFulfillments,\r\n                considerationFulfillments,\r\n                fulfillerConduitKey,\r\n                msg.sender,\r\n                maximumFulfilled\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Attempt to fill a group of orders, fully or partially, with an\r\n     *         arbitrary number of items for offer and consideration per order\r\n     *         alongside criteria resolvers containing specific token\r\n     *         identifiers and associated proofs. Any order that is not\r\n     *         currently active, has already been fully filled, or has been\r\n     *         cancelled will be omitted. Remaining offer and consideration\r\n     *         items will then be aggregated where possible as indicated by the\r\n     *         supplied offer and consideration component arrays and aggregated\r\n     *         items will be transferred to the fulfiller or to each intended\r\n     *         recipient, respectively. Note that a failing item transfer or an\r\n     *         issue with order formatting will cause the entire batch to fail.\r\n     *\r\n     * @param advancedOrders            The orders to fulfill along with the\r\n     *                                  fraction of those orders to attempt to\r\n     *                                  fill. Note that both the offerer and the\r\n     *                                  fulfiller must first approve this\r\n     *                                  contract (or their conduit if indicated\r\n     *                                  by the order) to transfer any relevant\r\n     *                                  tokens on their behalf and that\r\n     *                                  contracts must implement\r\n     *                                  `onERC1155Received` in order to receive\r\n     *                                  ERC1155 tokens as consideration. Also\r\n     *                                  note that all offer and consideration\r\n     *                                  components must have no remainder after\r\n     *                                  multiplication of the respective amount\r\n     *                                  with the supplied fraction for an\r\n     *                                  order's partial fill amount to be\r\n     *                                  considered valid.\r\n     * @param criteriaResolvers         An array where each element contains a\r\n     *                                  reference to a specific offer or\r\n     *                                  consideration, a token identifier, and a\r\n     *                                  proof that the supplied token identifier\r\n     *                                  is contained in the merkle root held by\r\n     *                                  the item in question's criteria element.\r\n     *                                  Note that an empty criteria indicates\r\n     *                                  that any (transferable) token\r\n     *                                  identifier on the token in question is\r\n     *                                  valid and that no associated proof needs\r\n     *                                  to be supplied.\r\n     * @param offerFulfillments         An array of FulfillmentComponent arrays\r\n     *                                  indicating which offer items to attempt\r\n     *                                  to aggregate when preparing executions.\r\n     * @param considerationFulfillments An array of FulfillmentComponent arrays\r\n     *                                  indicating which consideration items to\r\n     *                                  attempt to aggregate when preparing\r\n     *                                  executions.\r\n     * @param fulfillerConduitKey       A bytes32 value indicating what conduit,\r\n     *                                  if any, to source the fulfiller's token\r\n     *                                  approvals from. The zero hash signifies\r\n     *                                  that no conduit should be used (and\r\n     *                                  direct approvals set on Consideration).\r\n     * @param recipient                 The intended recipient for all received\r\n     *                                  items, with `address(0)` indicating that\r\n     *                                  the caller should receive the items.\r\n     * @param maximumFulfilled          The maximum number of orders to fulfill.\r\n     *\r\n     * @return availableOrders An array of booleans indicating if each order\r\n     *                         with an index corresponding to the index of the\r\n     *                         returned boolean was fulfillable or not.\r\n     * @return executions      An array of elements indicating the sequence of\r\n     *                         transfers performed as part of matching the given\r\n     *                         orders.\r\n     */\r\n    function fulfillAvailableAdvancedOrders(\r\n        AdvancedOrder[] memory advancedOrders,\r\n        CriteriaResolver[] calldata criteriaResolvers,\r\n        FulfillmentComponent[][] calldata offerFulfillments,\r\n        FulfillmentComponent[][] calldata considerationFulfillments,\r\n        bytes32 fulfillerConduitKey,\r\n        address recipient,\r\n        uint256 maximumFulfilled\r\n    )\r\n        external\r\n        payable\r\n        override\r\n        returns (bool[] memory availableOrders, Execution[] memory executions)\r\n    {\r\n        // Fulfill all available orders.\r\n        return\r\n            _fulfillAvailableAdvancedOrders(\r\n                advancedOrders,\r\n                criteriaResolvers,\r\n                offerFulfillments,\r\n                considerationFulfillments,\r\n                fulfillerConduitKey,\r\n                recipient == address(0) ? msg.sender : recipient,\r\n                maximumFulfilled\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Match an arbitrary number of orders, each with an arbitrary\r\n     *         number of items for offer and consideration along with a set of\r\n     *         fulfillments allocating offer components to consideration\r\n     *         components. Note that this function does not support\r\n     *         criteria-based or partial filling of orders (though filling the\r\n     *         remainder of a partially-filled order is supported).\r\n     *\r\n     * @param orders            The orders to match. Note that both the offerer\r\n     *                          and fulfiller on each order must first approve\r\n     *                          this contract (or their conduit if indicated by\r\n     *                          the order) to transfer any relevant tokens on\r\n     *                          their behalf and each consideration recipient\r\n     *                          must implement `onERC1155Received` in order to\r\n     *                          receive ERC1155 tokens.\r\n     * @param fulfillments      An array of elements allocating offer components\r\n     *                          to consideration components. Note that each\r\n     *                          consideration component must be fully met in\r\n     *                          order for the match operation to be valid.\r\n     *\r\n     * @return executions An array of elements indicating the sequence of\r\n     *                    transfers performed as part of matching the given\r\n     *                    orders.\r\n     */\r\n    function matchOrders(\r\n        Order[] calldata orders,\r\n        Fulfillment[] calldata fulfillments\r\n    ) external payable override returns (Execution[] memory executions) {\r\n        // Convert to advanced, validate, and match orders using fulfillments.\r\n        return\r\n            _matchAdvancedOrders(\r\n                _convertOrdersToAdvanced(orders),\r\n                new CriteriaResolver[](0), // No criteria resolvers supplied.\r\n                fulfillments\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Match an arbitrary number of full or partial orders, each with an\r\n     *         arbitrary number of items for offer and consideration, supplying\r\n     *         criteria resolvers containing specific token identifiers and\r\n     *         associated proofs as well as fulfillments allocating offer\r\n     *         components to consideration components.\r\n     *\r\n     * @param advancedOrders    The advanced orders to match. Note that both the\r\n     *                          offerer and fulfiller on each order must first\r\n     *                          approve this contract (or their conduit if\r\n     *                          indicated by the order) to transfer any relevant\r\n     *                          tokens on their behalf and each consideration\r\n     *                          recipient must implement `onERC1155Received` in\r\n     *                          order to receive ERC1155 tokens. Also note that\r\n     *                          the offer and consideration components for each\r\n     *                          order must have no remainder after multiplying\r\n     *                          the respective amount with the supplied fraction\r\n     *                          in order for the group of partial fills to be\r\n     *                          considered valid.\r\n     * @param criteriaResolvers An array where each element contains a reference\r\n     *                          to a specific order as well as that order's\r\n     *                          offer or consideration, a token identifier, and\r\n     *                          a proof that the supplied token identifier is\r\n     *                          contained in the order's merkle root. Note that\r\n     *                          an empty root indicates that any (transferable)\r\n     *                          token identifier is valid and that no associated\r\n     *                          proof needs to be supplied.\r\n     * @param fulfillments      An array of elements allocating offer components\r\n     *                          to consideration components. Note that each\r\n     *                          consideration component must be fully met in\r\n     *                          order for the match operation to be valid.\r\n     *\r\n     * @return executions An array of elements indicating the sequence of\r\n     *                    transfers performed as part of matching the given\r\n     *                    orders.\r\n     */\r\n    function matchAdvancedOrders(\r\n        AdvancedOrder[] memory advancedOrders,\r\n        CriteriaResolver[] calldata criteriaResolvers,\r\n        Fulfillment[] calldata fulfillments\r\n    ) external payable override returns (Execution[] memory executions) {\r\n        // Validate and match the advanced orders using supplied fulfillments.\r\n        return\r\n            _matchAdvancedOrders(\r\n                advancedOrders,\r\n                criteriaResolvers,\r\n                fulfillments\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Cancel an arbitrary number of orders. Note that only the offerer\r\n     *         or the zone of a given order may cancel it. Callers should ensure\r\n     *         that the intended order was cancelled by calling `getOrderStatus`\r\n     *         and confirming that `isCancelled` returns `true`.\r\n     *\r\n     * @param orders The orders to cancel.\r\n     *\r\n     * @return cancelled A boolean indicating whether the supplied orders have\r\n     *                   been successfully cancelled.\r\n     */\r\n    function cancel(OrderComponents[] calldata orders)\r\n        external\r\n        override\r\n        returns (bool cancelled)\r\n    {\r\n        // Cancel the orders.\r\n        cancelled = _cancel(orders);\r\n    }\r\n\r\n    /**\r\n     * @notice Validate an arbitrary number of orders, thereby registering their\r\n     *         signatures as valid and allowing the fulfiller to skip signature\r\n     *         verification on fulfillment. Note that validated orders may still\r\n     *         be unfulfillable due to invalid item amounts or other factors;\r\n     *         callers should determine whether validated orders are fulfillable\r\n     *         by simulating the fulfillment call prior to execution. Also note\r\n     *         that anyone can validate a signed order, but only the offerer can\r\n     *         validate an order without supplying a signature.\r\n     *\r\n     * @param orders The orders to validate.\r\n     *\r\n     * @return validated A boolean indicating whether the supplied orders have\r\n     *                   been successfully validated.\r\n     */\r\n    function validate(Order[] calldata orders)\r\n        external\r\n        override\r\n        returns (bool validated)\r\n    {\r\n        // Validate the orders.\r\n        validated = _validate(orders);\r\n    }\r\n\r\n    /**\r\n     * @notice Cancel all orders from a given offerer with a given zone in bulk\r\n     *         by incrementing a counter. Note that only the offerer may\r\n     *         increment the counter.\r\n     *\r\n     * @return newCounter The new counter.\r\n     */\r\n    function incrementCounter() external override returns (uint256 newCounter) {\r\n        // Increment current counter for the supplied offerer.\r\n        newCounter = _incrementCounter();\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieve the order hash for a given order.\r\n     *\r\n     * @param order The components of the order.\r\n     *\r\n     * @return orderHash The order hash.\r\n     */\r\n    function getOrderHash(OrderComponents calldata order)\r\n        external\r\n        view\r\n        override\r\n        returns (bytes32 orderHash)\r\n    {\r\n        // Derive order hash by supplying order parameters along with counter.\r\n        orderHash = _deriveOrderHash(\r\n            OrderParameters(\r\n                order.offerer,\r\n                order.zone,\r\n                order.offer,\r\n                order.consideration,\r\n                order.orderType,\r\n                order.startTime,\r\n                order.endTime,\r\n                order.zoneHash,\r\n                order.salt,\r\n                order.conduitKey,\r\n                order.consideration.length\r\n            ),\r\n            order.counter\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieve the status of a given order by hash, including whether\r\n     *         the order has been cancelled or validated and the fraction of the\r\n     *         order that has been filled.\r\n     *\r\n     * @param orderHash The order hash in question.\r\n     *\r\n     * @return isValidated A boolean indicating whether the order in question\r\n     *                     has been validated (i.e. previously approved or\r\n     *                     partially filled).\r\n     * @return isCancelled A boolean indicating whether the order in question\r\n     *                     has been cancelled.\r\n     * @return totalFilled The total portion of the order that has been filled\r\n     *                     (i.e. the \"numerator\").\r\n     * @return totalSize   The total size of the order that is either filled or\r\n     *                     unfilled (i.e. the \"denominator\").\r\n     */\r\n    function getOrderStatus(bytes32 orderHash)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            bool isValidated,\r\n            bool isCancelled,\r\n            uint256 totalFilled,\r\n            uint256 totalSize\r\n        )\r\n    {\r\n        // Retrieve the order status using the order hash.\r\n        return _getOrderStatus(orderHash);\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieve the current counter for a given offerer.\r\n     *\r\n     * @param offerer The offerer in question.\r\n     *\r\n     * @return counter The current counter.\r\n     */\r\n    function getCounter(address offerer)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256 counter)\r\n    {\r\n        // Return the counter for the supplied offerer.\r\n        counter = _getCounter(offerer);\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieve configuration information for this contract.\r\n     *\r\n     * @return version           The contract version.\r\n     * @return domainSeparator   The domain separator for this contract.\r\n     * @return conduitController The conduit Controller set for this contract.\r\n     */\r\n    function information()\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            string memory version,\r\n            bytes32 domainSeparator,\r\n            address conduitController\r\n        )\r\n    {\r\n        // Return the information for this contract.\r\n        return _information();\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieve the name of this contract.\r\n     *\r\n     * @return contractName The name of this contract.\r\n     */\r\n    function name()\r\n        external\r\n        pure\r\n        override\r\n        returns (string memory contractName)\r\n    {\r\n        // Return the name of the contract.\r\n        contractName = _name();\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ConsiderationInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\n// prettier-ignore\r\nimport {\r\n    BasicOrderParameters,\r\n    OrderComponents,\r\n    Fulfillment,\r\n    FulfillmentComponent,\r\n    Execution,\r\n    Order,\r\n    AdvancedOrder,\r\n    OrderStatus,\r\n    CriteriaResolver\r\n} from \"../lib/ConsiderationStructs.sol\";\r\n\r\n/**\r\n * @title ConsiderationInterface\r\n * @author 0age\r\n * @custom:version 1.1\r\n * @notice Consideration is a generalized ETH/ERC20/ERC721/ERC1155 marketplace.\r\n *         It minimizes external calls to the greatest extent possible and\r\n *         provides lightweight methods for common routes as well as more\r\n *         flexible methods for composing advanced orders.\r\n *\r\n * @dev ConsiderationInterface contains all external function interfaces for\r\n *      Consideration.\r\n */\r\ninterface ConsiderationInterface {\r\n    /**\r\n     * @notice Fulfill an order offering an ERC721 token by supplying Ether (or\r\n     *         the native token for the given chain) as consideration for the\r\n     *         order. An arbitrary number of \"additional recipients\" may also be\r\n     *         supplied which will each receive native tokens from the fulfiller\r\n     *         as consideration.\r\n     *\r\n     * @param parameters Additional information on the fulfilled order. Note\r\n     *                   that the offerer must first approve this contract (or\r\n     *                   their preferred conduit if indicated by the order) for\r\n     *                   their offered ERC721 token to be transferred.\r\n     *\r\n     * @return fulfilled A boolean indicating whether the order has been\r\n     *                   successfully fulfilled.\r\n     */\r\n    function fulfillBasicOrder(BasicOrderParameters calldata parameters)\r\n        external\r\n        payable\r\n        returns (bool fulfilled);\r\n\r\n    /**\r\n     * @notice Fulfill an order with an arbitrary number of items for offer and\r\n     *         consideration. Note that this function does not support\r\n     *         criteria-based orders or partial filling of orders (though\r\n     *         filling the remainder of a partially-filled order is supported).\r\n     *\r\n     * @param order               The order to fulfill. Note that both the\r\n     *                            offerer and the fulfiller must first approve\r\n     *                            this contract (or the corresponding conduit if\r\n     *                            indicated) to transfer any relevant tokens on\r\n     *                            their behalf and that contracts must implement\r\n     *                            `onERC1155Received` to receive ERC1155 tokens\r\n     *                            as consideration.\r\n     * @param fulfillerConduitKey A bytes32 value indicating what conduit, if\r\n     *                            any, to source the fulfiller's token approvals\r\n     *                            from. The zero hash signifies that no conduit\r\n     *                            should be used, with direct approvals set on\r\n     *                            Consideration.\r\n     *\r\n     * @return fulfilled A boolean indicating whether the order has been\r\n     *                   successfully fulfilled.\r\n     */\r\n    function fulfillOrder(Order calldata order, bytes32 fulfillerConduitKey)\r\n        external\r\n        payable\r\n        returns (bool fulfilled);\r\n\r\n    /**\r\n     * @notice Fill an order, fully or partially, with an arbitrary number of\r\n     *         items for offer and consideration alongside criteria resolvers\r\n     *         containing specific token identifiers and associated proofs.\r\n     *\r\n     * @param advancedOrder       The order to fulfill along with the fraction\r\n     *                            of the order to attempt to fill. Note that\r\n     *                            both the offerer and the fulfiller must first\r\n     *                            approve this contract (or their preferred\r\n     *                            conduit if indicated by the order) to transfer\r\n     *                            any relevant tokens on their behalf and that\r\n     *                            contracts must implement `onERC1155Received`\r\n     *                            to receive ERC1155 tokens as consideration.\r\n     *                            Also note that all offer and consideration\r\n     *                            components must have no remainder after\r\n     *                            multiplication of the respective amount with\r\n     *                            the supplied fraction for the partial fill to\r\n     *                            be considered valid.\r\n     * @param criteriaResolvers   An array where each element contains a\r\n     *                            reference to a specific offer or\r\n     *                            consideration, a token identifier, and a proof\r\n     *                            that the supplied token identifier is\r\n     *                            contained in the merkle root held by the item\r\n     *                            in question's criteria element. Note that an\r\n     *                            empty criteria indicates that any\r\n     *                            (transferable) token identifier on the token\r\n     *                            in question is valid and that no associated\r\n     *                            proof needs to be supplied.\r\n     * @param fulfillerConduitKey A bytes32 value indicating what conduit, if\r\n     *                            any, to source the fulfiller's token approvals\r\n     *                            from. The zero hash signifies that no conduit\r\n     *                            should be used, with direct approvals set on\r\n     *                            Consideration.\r\n     * @param recipient           The intended recipient for all received items,\r\n     *                            with `address(0)` indicating that the caller\r\n     *                            should receive the items.\r\n     *\r\n     * @return fulfilled A boolean indicating whether the order has been\r\n     *                   successfully fulfilled.\r\n     */\r\n    function fulfillAdvancedOrder(\r\n        AdvancedOrder calldata advancedOrder,\r\n        CriteriaResolver[] calldata criteriaResolvers,\r\n        bytes32 fulfillerConduitKey,\r\n        address recipient\r\n    ) external payable returns (bool fulfilled);\r\n\r\n    /**\r\n     * @notice Attempt to fill a group of orders, each with an arbitrary number\r\n     *         of items for offer and consideration. Any order that is not\r\n     *         currently active, has already been fully filled, or has been\r\n     *         cancelled will be omitted. Remaining offer and consideration\r\n     *         items will then be aggregated where possible as indicated by the\r\n     *         supplied offer and consideration component arrays and aggregated\r\n     *         items will be transferred to the fulfiller or to each intended\r\n     *         recipient, respectively. Note that a failing item transfer or an\r\n     *         issue with order formatting will cause the entire batch to fail.\r\n     *         Note that this function does not support criteria-based orders or\r\n     *         partial filling of orders (though filling the remainder of a\r\n     *         partially-filled order is supported).\r\n     *\r\n     * @param orders                    The orders to fulfill. Note that both\r\n     *                                  the offerer and the fulfiller must first\r\n     *                                  approve this contract (or the\r\n     *                                  corresponding conduit if indicated) to\r\n     *                                  transfer any relevant tokens on their\r\n     *                                  behalf and that contracts must implement\r\n     *                                  `onERC1155Received` to receive ERC1155\r\n     *                                  tokens as consideration.\r\n     * @param offerFulfillments         An array of FulfillmentComponent arrays\r\n     *                                  indicating which offer items to attempt\r\n     *                                  to aggregate when preparing executions.\r\n     * @param considerationFulfillments An array of FulfillmentComponent arrays\r\n     *                                  indicating which consideration items to\r\n     *                                  attempt to aggregate when preparing\r\n     *                                  executions.\r\n     * @param fulfillerConduitKey       A bytes32 value indicating what conduit,\r\n     *                                  if any, to source the fulfiller's token\r\n     *                                  approvals from. The zero hash signifies\r\n     *                                  that no conduit should be used, with\r\n     *                                  direct approvals set on this contract.\r\n     * @param maximumFulfilled          The maximum number of orders to fulfill.\r\n     *\r\n     * @return availableOrders An array of booleans indicating if each order\r\n     *                         with an index corresponding to the index of the\r\n     *                         returned boolean was fulfillable or not.\r\n     * @return executions      An array of elements indicating the sequence of\r\n     *                         transfers performed as part of matching the given\r\n     *                         orders.\r\n     */\r\n    function fulfillAvailableOrders(\r\n        Order[] calldata orders,\r\n        FulfillmentComponent[][] calldata offerFulfillments,\r\n        FulfillmentComponent[][] calldata considerationFulfillments,\r\n        bytes32 fulfillerConduitKey,\r\n        uint256 maximumFulfilled\r\n    )\r\n        external\r\n        payable\r\n        returns (bool[] memory availableOrders, Execution[] memory executions);\r\n\r\n    /**\r\n     * @notice Attempt to fill a group of orders, fully or partially, with an\r\n     *         arbitrary number of items for offer and consideration per order\r\n     *         alongside criteria resolvers containing specific token\r\n     *         identifiers and associated proofs. Any order that is not\r\n     *         currently active, has already been fully filled, or has been\r\n     *         cancelled will be omitted. Remaining offer and consideration\r\n     *         items will then be aggregated where possible as indicated by the\r\n     *         supplied offer and consideration component arrays and aggregated\r\n     *         items will be transferred to the fulfiller or to each intended\r\n     *         recipient, respectively. Note that a failing item transfer or an\r\n     *         issue with order formatting will cause the entire batch to fail.\r\n     *\r\n     * @param advancedOrders            The orders to fulfill along with the\r\n     *                                  fraction of those orders to attempt to\r\n     *                                  fill. Note that both the offerer and the\r\n     *                                  fulfiller must first approve this\r\n     *                                  contract (or their preferred conduit if\r\n     *                                  indicated by the order) to transfer any\r\n     *                                  relevant tokens on their behalf and that\r\n     *                                  contracts must implement\r\n     *                                  `onERC1155Received` to enable receipt of\r\n     *                                  ERC1155 tokens as consideration. Also\r\n     *                                  note that all offer and consideration\r\n     *                                  components must have no remainder after\r\n     *                                  multiplication of the respective amount\r\n     *                                  with the supplied fraction for an\r\n     *                                  order's partial fill amount to be\r\n     *                                  considered valid.\r\n     * @param criteriaResolvers         An array where each element contains a\r\n     *                                  reference to a specific offer or\r\n     *                                  consideration, a token identifier, and a\r\n     *                                  proof that the supplied token identifier\r\n     *                                  is contained in the merkle root held by\r\n     *                                  the item in question's criteria element.\r\n     *                                  Note that an empty criteria indicates\r\n     *                                  that any (transferable) token\r\n     *                                  identifier on the token in question is\r\n     *                                  valid and that no associated proof needs\r\n     *                                  to be supplied.\r\n     * @param offerFulfillments         An array of FulfillmentComponent arrays\r\n     *                                  indicating which offer items to attempt\r\n     *                                  to aggregate when preparing executions.\r\n     * @param considerationFulfillments An array of FulfillmentComponent arrays\r\n     *                                  indicating which consideration items to\r\n     *                                  attempt to aggregate when preparing\r\n     *                                  executions.\r\n     * @param fulfillerConduitKey       A bytes32 value indicating what conduit,\r\n     *                                  if any, to source the fulfiller's token\r\n     *                                  approvals from. The zero hash signifies\r\n     *                                  that no conduit should be used, with\r\n     *                                  direct approvals set on this contract.\r\n     * @param recipient                 The intended recipient for all received\r\n     *                                  items, with `address(0)` indicating that\r\n     *                                  the caller should receive the items.\r\n     * @param maximumFulfilled          The maximum number of orders to fulfill.\r\n     *\r\n     * @return availableOrders An array of booleans indicating if each order\r\n     *                         with an index corresponding to the index of the\r\n     *                         returned boolean was fulfillable or not.\r\n     * @return executions      An array of elements indicating the sequence of\r\n     *                         transfers performed as part of matching the given\r\n     *                         orders.\r\n     */\r\n    function fulfillAvailableAdvancedOrders(\r\n        AdvancedOrder[] calldata advancedOrders,\r\n        CriteriaResolver[] calldata criteriaResolvers,\r\n        FulfillmentComponent[][] calldata offerFulfillments,\r\n        FulfillmentComponent[][] calldata considerationFulfillments,\r\n        bytes32 fulfillerConduitKey,\r\n        address recipient,\r\n        uint256 maximumFulfilled\r\n    )\r\n        external\r\n        payable\r\n        returns (bool[] memory availableOrders, Execution[] memory executions);\r\n\r\n    /**\r\n     * @notice Match an arbitrary number of orders, each with an arbitrary\r\n     *         number of items for offer and consideration along with as set of\r\n     *         fulfillments allocating offer components to consideration\r\n     *         components. Note that this function does not support\r\n     *         criteria-based or partial filling of orders (though filling the\r\n     *         remainder of a partially-filled order is supported).\r\n     *\r\n     * @param orders       The orders to match. Note that both the offerer and\r\n     *                     fulfiller on each order must first approve this\r\n     *                     contract (or their conduit if indicated by the order)\r\n     *                     to transfer any relevant tokens on their behalf and\r\n     *                     each consideration recipient must implement\r\n     *                     `onERC1155Received` to enable ERC1155 token receipt.\r\n     * @param fulfillments An array of elements allocating offer components to\r\n     *                     consideration components. Note that each\r\n     *                     consideration component must be fully met for the\r\n     *                     match operation to be valid.\r\n     *\r\n     * @return executions An array of elements indicating the sequence of\r\n     *                    transfers performed as part of matching the given\r\n     *                    orders.\r\n     */\r\n    function matchOrders(\r\n        Order[] calldata orders,\r\n        Fulfillment[] calldata fulfillments\r\n    ) external payable returns (Execution[] memory executions);\r\n\r\n    /**\r\n     * @notice Match an arbitrary number of full or partial orders, each with an\r\n     *         arbitrary number of items for offer and consideration, supplying\r\n     *         criteria resolvers containing specific token identifiers and\r\n     *         associated proofs as well as fulfillments allocating offer\r\n     *         components to consideration components.\r\n     *\r\n     * @param orders            The advanced orders to match. Note that both the\r\n     *                          offerer and fulfiller on each order must first\r\n     *                          approve this contract (or a preferred conduit if\r\n     *                          indicated by the order) to transfer any relevant\r\n     *                          tokens on their behalf and each consideration\r\n     *                          recipient must implement `onERC1155Received` in\r\n     *                          order to receive ERC1155 tokens. Also note that\r\n     *                          the offer and consideration components for each\r\n     *                          order must have no remainder after multiplying\r\n     *                          the respective amount with the supplied fraction\r\n     *                          in order for the group of partial fills to be\r\n     *                          considered valid.\r\n     * @param criteriaResolvers An array where each element contains a reference\r\n     *                          to a specific order as well as that order's\r\n     *                          offer or consideration, a token identifier, and\r\n     *                          a proof that the supplied token identifier is\r\n     *                          contained in the order's merkle root. Note that\r\n     *                          an empty root indicates that any (transferable)\r\n     *                          token identifier is valid and that no associated\r\n     *                          proof needs to be supplied.\r\n     * @param fulfillments      An array of elements allocating offer components\r\n     *                          to consideration components. Note that each\r\n     *                          consideration component must be fully met in\r\n     *                          order for the match operation to be valid.\r\n     *\r\n     * @return executions An array of elements indicating the sequence of\r\n     *                    transfers performed as part of matching the given\r\n     *                    orders.\r\n     */\r\n    function matchAdvancedOrders(\r\n        AdvancedOrder[] calldata orders,\r\n        CriteriaResolver[] calldata criteriaResolvers,\r\n        Fulfillment[] calldata fulfillments\r\n    ) external payable returns (Execution[] memory executions);\r\n\r\n    /**\r\n     * @notice Cancel an arbitrary number of orders. Note that only the offerer\r\n     *         or the zone of a given order may cancel it. Callers should ensure\r\n     *         that the intended order was cancelled by calling `getOrderStatus`\r\n     *         and confirming that `isCancelled` returns `true`.\r\n     *\r\n     * @param orders The orders to cancel.\r\n     *\r\n     * @return cancelled A boolean indicating whether the supplied orders have\r\n     *                   been successfully cancelled.\r\n     */\r\n    function cancel(OrderComponents[] calldata orders)\r\n        external\r\n        returns (bool cancelled);\r\n\r\n    /**\r\n     * @notice Validate an arbitrary number of orders, thereby registering their\r\n     *         signatures as valid and allowing the fulfiller to skip signature\r\n     *         verification on fulfillment. Note that validated orders may still\r\n     *         be unfulfillable due to invalid item amounts or other factors;\r\n     *         callers should determine whether validated orders are fulfillable\r\n     *         by simulating the fulfillment call prior to execution. Also note\r\n     *         that anyone can validate a signed order, but only the offerer can\r\n     *         validate an order without supplying a signature.\r\n     *\r\n     * @param orders The orders to validate.\r\n     *\r\n     * @return validated A boolean indicating whether the supplied orders have\r\n     *                   been successfully validated.\r\n     */\r\n    function validate(Order[] calldata orders)\r\n        external\r\n        returns (bool validated);\r\n\r\n    /**\r\n     * @notice Cancel all orders from a given offerer with a given zone in bulk\r\n     *         by incrementing a counter. Note that only the offerer may\r\n     *         increment the counter.\r\n     *\r\n     * @return newCounter The new counter.\r\n     */\r\n    function incrementCounter() external returns (uint256 newCounter);\r\n\r\n    /**\r\n     * @notice Retrieve the order hash for a given order.\r\n     *\r\n     * @param order The components of the order.\r\n     *\r\n     * @return orderHash The order hash.\r\n     */\r\n    function getOrderHash(OrderComponents calldata order)\r\n        external\r\n        view\r\n        returns (bytes32 orderHash);\r\n\r\n    /**\r\n     * @notice Retrieve the status of a given order by hash, including whether\r\n     *         the order has been cancelled or validated and the fraction of the\r\n     *         order that has been filled.\r\n     *\r\n     * @param orderHash The order hash in question.\r\n     *\r\n     * @return isValidated A boolean indicating whether the order in question\r\n     *                     has been validated (i.e. previously approved or\r\n     *                     partially filled).\r\n     * @return isCancelled A boolean indicating whether the order in question\r\n     *                     has been cancelled.\r\n     * @return totalFilled The total portion of the order that has been filled\r\n     *                     (i.e. the \"numerator\").\r\n     * @return totalSize   The total size of the order that is either filled or\r\n     *                     unfilled (i.e. the \"denominator\").\r\n     */\r\n    function getOrderStatus(bytes32 orderHash)\r\n        external\r\n        view\r\n        returns (\r\n            bool isValidated,\r\n            bool isCancelled,\r\n            uint256 totalFilled,\r\n            uint256 totalSize\r\n        );\r\n\r\n    /**\r\n     * @notice Retrieve the current counter for a given offerer.\r\n     *\r\n     * @param offerer The offerer in question.\r\n     *\r\n     * @return counter The current counter.\r\n     */\r\n    function getCounter(address offerer)\r\n        external\r\n        view\r\n        returns (uint256 counter);\r\n\r\n    /**\r\n     * @notice Retrieve configuration information for this contract.\r\n     *\r\n     * @return version           The contract version.\r\n     * @return domainSeparator   The domain separator for this contract.\r\n     * @return conduitController The conduit Controller set for this contract.\r\n     */\r\n    function information()\r\n        external\r\n        view\r\n        returns (\r\n            string memory version,\r\n            bytes32 domainSeparator,\r\n            address conduitController\r\n        );\r\n\r\n    /**\r\n     * @notice Retrieve the name of this contract.\r\n     *\r\n     * @return contractName The name of this contract.\r\n     */\r\n    function name() external view returns (string memory contractName);\r\n}\r\n"
    },
    "contracts/Seaport.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n\r\nimport { Consideration } from \"./lib/Consideration.sol\";\r\n\r\n/**\r\n * @title Seaport\r\n * @custom:version 1.1\r\n * @author 0age (0age.eth)\r\n * @custom:coauthor d1ll0n (d1ll0n.eth)\r\n * @custom:coauthor transmissions11 (t11s.eth)\r\n * @custom:contributor Kartik (slokh.eth)\r\n * @custom:contributor LeFevre (lefevre.eth)\r\n * @custom:contributor Joseph Schiarizzi (CupOJoseph.eth)\r\n * @custom:contributor Aspyn Palatnick (stuckinaboot.eth)\r\n * @custom:contributor James Wenzel (emo.eth)\r\n * @custom:contributor Stephan Min (stephanm.eth)\r\n * @custom:contributor Ryan Ghods (ralxz.eth)\r\n * @custom:contributor hack3r-0m (hack3r-0m.eth)\r\n * @custom:contributor Diego Estevez (antidiego.eth)\r\n * @custom:contributor Chomtana (chomtana.eth)\r\n * @custom:contributor Saw-mon and Natalie (sawmonandnatalie.eth)\r\n * @custom:contributor 0xBeans (0xBeans.eth)\r\n * @custom:contributor 0x4non (punkdev.eth)\r\n * @custom:contributor Laurence E. Day (norsefire.eth)\r\n * @custom:contributor vectorized.eth (vectorized.eth)\r\n * @custom:contributor karmacoma (karmacoma.eth)\r\n * @custom:contributor horsefacts (horsefacts.eth)\r\n * @custom:contributor UncarvedBlock (uncarvedblock.eth)\r\n * @custom:contributor Zoraiz Mahmood (zorz.eth)\r\n * @custom:contributor William Poulin (wpoulin.eth)\r\n * @custom:contributor Rajiv Patel-O'Connor (rajivpoc.eth)\r\n * @custom:contributor tserg (tserg.eth)\r\n * @custom:contributor cygaar (cygaar.eth)\r\n * @custom:contributor Meta0xNull (meta0xnull.eth)\r\n * @custom:contributor gpersoon (gpersoon.eth)\r\n * @custom:contributor Matt Solomon (msolomon.eth)\r\n * @custom:contributor Weikang Song (weikangs.eth)\r\n * @custom:contributor zer0dot (zer0dot.eth)\r\n * @custom:contributor Mudit Gupta (mudit.eth)\r\n * @custom:contributor leonardoalt (leoalt.eth)\r\n * @custom:contributor cmichel (cmichel.eth)\r\n * @custom:contributor PraneshASP (pranesh.eth)\r\n * @custom:contributor JasperAlexander (jasperalexander.eth)\r\n * @custom:contributor Ellahi (ellahi.eth)\r\n * @custom:contributor zaz (1zaz1.eth)\r\n * @custom:contributor berndartmueller (berndartmueller.eth)\r\n * @custom:contributor dmfxyz (dmfxyz.eth)\r\n * @custom:contributor daltoncoder (dontkillrobots.eth)\r\n * @custom:contributor 0xf4ce (0xf4ce.eth)\r\n * @custom:contributor phaze (phaze.eth)\r\n * @custom:contributor hrkrshnn (hrkrshnn.eth)\r\n * @custom:contributor axic (axic.eth)\r\n * @custom:contributor leastwood (leastwood.eth)\r\n * @custom:contributor 0xsanson (sanson.eth)\r\n * @custom:contributor blockdev (blockd3v.eth)\r\n * @custom:contributor fiveoutofnine (fiveoutofnine.eth)\r\n * @custom:contributor shuklaayush (shuklaayush.eth)\r\n * @custom:contributor 0xPatissier\r\n * @custom:contributor pcaversaccio\r\n * @custom:contributor David Eiber\r\n * @custom:contributor csanuragjain\r\n * @custom:contributor sach1r0\r\n * @custom:contributor twojoy0\r\n * @custom:contributor ori_dabush\r\n * @custom:contributor Daniel Gelfand\r\n * @custom:contributor okkothejawa\r\n * @custom:contributor FlameHorizon\r\n * @custom:contributor vdrg\r\n * @custom:contributor dmitriia\r\n * @custom:contributor bokeh-eth\r\n * @custom:contributor asutorufos\r\n * @custom:contributor rfart(rfa)\r\n * @custom:contributor Riley Holterhus\r\n * @custom:contributor big-tech-sux\r\n * @notice Seaport is a generalized ETH/ERC20/ERC721/ERC1155 marketplace. It\r\n *         minimizes external calls to the greatest extent possible and provides\r\n *         lightweight methods for common routes as well as more flexible\r\n *         methods for composing advanced orders or groups of orders. Each order\r\n *         contains an arbitrary number of items that may be spent (the \"offer\")\r\n *         along with an arbitrary number of items that must be received back by\r\n *         the indicated recipients (the \"consideration\").\r\n */\r\ncontract Seaport is Consideration {\r\n    /**\r\n     * @notice Derive and set hashes, reference chainId, and associated domain\r\n     *         separator during deployment.\r\n     *\r\n     * @param conduitController A contract that deploys conduits, or proxies\r\n     *                          that may optionally be used to transfer approved\r\n     *                          ERC20/721/1155 tokens.\r\n     */\r\n    constructor(address conduitController) Consideration(conduitController) {}\r\n\r\n    /**\r\n     * @dev Internal pure function to retrieve and return the name of this\r\n     *      contract.\r\n     *\r\n     * @return The name of this contract.\r\n     */\r\n    function _name() internal pure override returns (string memory) {\r\n        // Return the name of the contract.\r\n        assembly {\r\n            mstore(0x20, 0x20)\r\n            mstore(0x47, 0x07536561706f7274)\r\n            return(0x20, 0x60)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to retrieve the name of this contract as a\r\n     *      string that will be used to derive the name hash in the constructor.\r\n     *\r\n     * @return The name of this contract as a string.\r\n     */\r\n    function _nameString() internal pure override returns (string memory) {\r\n        // Return the name of the contract.\r\n        return \"Seaport\";\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/SeaportInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\n// prettier-ignore\r\nimport {\r\n    BasicOrderParameters,\r\n    OrderComponents,\r\n    Fulfillment,\r\n    FulfillmentComponent,\r\n    Execution,\r\n    Order,\r\n    AdvancedOrder,\r\n    OrderStatus,\r\n    CriteriaResolver\r\n} from \"../lib/ConsiderationStructs.sol\";\r\n\r\n/**\r\n * @title SeaportInterface\r\n * @author 0age\r\n * @custom:version 1.1\r\n * @notice Seaport is a generalized ETH/ERC20/ERC721/ERC1155 marketplace. It\r\n *         minimizes external calls to the greatest extent possible and provides\r\n *         lightweight methods for common routes as well as more flexible\r\n *         methods for composing advanced orders.\r\n *\r\n * @dev SeaportInterface contains all external function interfaces for Seaport.\r\n */\r\ninterface SeaportInterface {\r\n    /**\r\n     * @notice Fulfill an order offering an ERC721 token by supplying Ether (or\r\n     *         the native token for the given chain) as consideration for the\r\n     *         order. An arbitrary number of \"additional recipients\" may also be\r\n     *         supplied which will each receive native tokens from the fulfiller\r\n     *         as consideration.\r\n     *\r\n     * @param parameters Additional information on the fulfilled order. Note\r\n     *                   that the offerer must first approve this contract (or\r\n     *                   their preferred conduit if indicated by the order) for\r\n     *                   their offered ERC721 token to be transferred.\r\n     *\r\n     * @return fulfilled A boolean indicating whether the order has been\r\n     *                   successfully fulfilled.\r\n     */\r\n    function fulfillBasicOrder(BasicOrderParameters calldata parameters)\r\n        external\r\n        payable\r\n        returns (bool fulfilled);\r\n\r\n    /**\r\n     * @notice Fulfill an order with an arbitrary number of items for offer and\r\n     *         consideration. Note that this function does not support\r\n     *         criteria-based orders or partial filling of orders (though\r\n     *         filling the remainder of a partially-filled order is supported).\r\n     *\r\n     * @param order               The order to fulfill. Note that both the\r\n     *                            offerer and the fulfiller must first approve\r\n     *                            this contract (or the corresponding conduit if\r\n     *                            indicated) to transfer any relevant tokens on\r\n     *                            their behalf and that contracts must implement\r\n     *                            `onERC1155Received` to receive ERC1155 tokens\r\n     *                            as consideration.\r\n     * @param fulfillerConduitKey A bytes32 value indicating what conduit, if\r\n     *                            any, to source the fulfiller's token approvals\r\n     *                            from. The zero hash signifies that no conduit\r\n     *                            should be used, with direct approvals set on\r\n     *                            Seaport.\r\n     *\r\n     * @return fulfilled A boolean indicating whether the order has been\r\n     *                   successfully fulfilled.\r\n     */\r\n    function fulfillOrder(Order calldata order, bytes32 fulfillerConduitKey)\r\n        external\r\n        payable\r\n        returns (bool fulfilled);\r\n\r\n    /**\r\n     * @notice Fill an order, fully or partially, with an arbitrary number of\r\n     *         items for offer and consideration alongside criteria resolvers\r\n     *         containing specific token identifiers and associated proofs.\r\n     *\r\n     * @param advancedOrder       The order to fulfill along with the fraction\r\n     *                            of the order to attempt to fill. Note that\r\n     *                            both the offerer and the fulfiller must first\r\n     *                            approve this contract (or their preferred\r\n     *                            conduit if indicated by the order) to transfer\r\n     *                            any relevant tokens on their behalf and that\r\n     *                            contracts must implement `onERC1155Received`\r\n     *                            to receive ERC1155 tokens as consideration.\r\n     *                            Also note that all offer and consideration\r\n     *                            components must have no remainder after\r\n     *                            multiplication of the respective amount with\r\n     *                            the supplied fraction for the partial fill to\r\n     *                            be considered valid.\r\n     * @param criteriaResolvers   An array where each element contains a\r\n     *                            reference to a specific offer or\r\n     *                            consideration, a token identifier, and a proof\r\n     *                            that the supplied token identifier is\r\n     *                            contained in the merkle root held by the item\r\n     *                            in question's criteria element. Note that an\r\n     *                            empty criteria indicates that any\r\n     *                            (transferable) token identifier on the token\r\n     *                            in question is valid and that no associated\r\n     *                            proof needs to be supplied.\r\n     * @param fulfillerConduitKey A bytes32 value indicating what conduit, if\r\n     *                            any, to source the fulfiller's token approvals\r\n     *                            from. The zero hash signifies that no conduit\r\n     *                            should be used, with direct approvals set on\r\n     *                            Seaport.\r\n     * @param recipient           The intended recipient for all received items,\r\n     *                            with `address(0)` indicating that the caller\r\n     *                            should receive the items.\r\n     *\r\n     * @return fulfilled A boolean indicating whether the order has been\r\n     *                   successfully fulfilled.\r\n     */\r\n    function fulfillAdvancedOrder(\r\n        AdvancedOrder calldata advancedOrder,\r\n        CriteriaResolver[] calldata criteriaResolvers,\r\n        bytes32 fulfillerConduitKey,\r\n        address recipient\r\n    ) external payable returns (bool fulfilled);\r\n\r\n    /**\r\n     * @notice Attempt to fill a group of orders, each with an arbitrary number\r\n     *         of items for offer and consideration. Any order that is not\r\n     *         currently active, has already been fully filled, or has been\r\n     *         cancelled will be omitted. Remaining offer and consideration\r\n     *         items will then be aggregated where possible as indicated by the\r\n     *         supplied offer and consideration component arrays and aggregated\r\n     *         items will be transferred to the fulfiller or to each intended\r\n     *         recipient, respectively. Note that a failing item transfer or an\r\n     *         issue with order formatting will cause the entire batch to fail.\r\n     *         Note that this function does not support criteria-based orders or\r\n     *         partial filling of orders (though filling the remainder of a\r\n     *         partially-filled order is supported).\r\n     *\r\n     * @param orders                    The orders to fulfill. Note that both\r\n     *                                  the offerer and the fulfiller must first\r\n     *                                  approve this contract (or the\r\n     *                                  corresponding conduit if indicated) to\r\n     *                                  transfer any relevant tokens on their\r\n     *                                  behalf and that contracts must implement\r\n     *                                  `onERC1155Received` to receive ERC1155\r\n     *                                  tokens as consideration.\r\n     * @param offerFulfillments         An array of FulfillmentComponent arrays\r\n     *                                  indicating which offer items to attempt\r\n     *                                  to aggregate when preparing executions.\r\n     * @param considerationFulfillments An array of FulfillmentComponent arrays\r\n     *                                  indicating which consideration items to\r\n     *                                  attempt to aggregate when preparing\r\n     *                                  executions.\r\n     * @param fulfillerConduitKey       A bytes32 value indicating what conduit,\r\n     *                                  if any, to source the fulfiller's token\r\n     *                                  approvals from. The zero hash signifies\r\n     *                                  that no conduit should be used, with\r\n     *                                  direct approvals set on this contract.\r\n     * @param maximumFulfilled          The maximum number of orders to fulfill.\r\n     *\r\n     * @return availableOrders An array of booleans indicating if each order\r\n     *                         with an index corresponding to the index of the\r\n     *                         returned boolean was fulfillable or not.\r\n     * @return executions      An array of elements indicating the sequence of\r\n     *                         transfers performed as part of matching the given\r\n     *                         orders.\r\n     */\r\n    function fulfillAvailableOrders(\r\n        Order[] calldata orders,\r\n        FulfillmentComponent[][] calldata offerFulfillments,\r\n        FulfillmentComponent[][] calldata considerationFulfillments,\r\n        bytes32 fulfillerConduitKey,\r\n        uint256 maximumFulfilled\r\n    )\r\n        external\r\n        payable\r\n        returns (bool[] memory availableOrders, Execution[] memory executions);\r\n\r\n    /**\r\n     * @notice Attempt to fill a group of orders, fully or partially, with an\r\n     *         arbitrary number of items for offer and consideration per order\r\n     *         alongside criteria resolvers containing specific token\r\n     *         identifiers and associated proofs. Any order that is not\r\n     *         currently active, has already been fully filled, or has been\r\n     *         cancelled will be omitted. Remaining offer and consideration\r\n     *         items will then be aggregated where possible as indicated by the\r\n     *         supplied offer and consideration component arrays and aggregated\r\n     *         items will be transferred to the fulfiller or to each intended\r\n     *         recipient, respectively. Note that a failing item transfer or an\r\n     *         issue with order formatting will cause the entire batch to fail.\r\n     *\r\n     * @param advancedOrders            The orders to fulfill along with the\r\n     *                                  fraction of those orders to attempt to\r\n     *                                  fill. Note that both the offerer and the\r\n     *                                  fulfiller must first approve this\r\n     *                                  contract (or their preferred conduit if\r\n     *                                  indicated by the order) to transfer any\r\n     *                                  relevant tokens on their behalf and that\r\n     *                                  contracts must implement\r\n     *                                  `onERC1155Received` to enable receipt of\r\n     *                                  ERC1155 tokens as consideration. Also\r\n     *                                  note that all offer and consideration\r\n     *                                  components must have no remainder after\r\n     *                                  multiplication of the respective amount\r\n     *                                  with the supplied fraction for an\r\n     *                                  order's partial fill amount to be\r\n     *                                  considered valid.\r\n     * @param criteriaResolvers         An array where each element contains a\r\n     *                                  reference to a specific offer or\r\n     *                                  consideration, a token identifier, and a\r\n     *                                  proof that the supplied token identifier\r\n     *                                  is contained in the merkle root held by\r\n     *                                  the item in question's criteria element.\r\n     *                                  Note that an empty criteria indicates\r\n     *                                  that any (transferable) token\r\n     *                                  identifier on the token in question is\r\n     *                                  valid and that no associated proof needs\r\n     *                                  to be supplied.\r\n     * @param offerFulfillments         An array of FulfillmentComponent arrays\r\n     *                                  indicating which offer items to attempt\r\n     *                                  to aggregate when preparing executions.\r\n     * @param considerationFulfillments An array of FulfillmentComponent arrays\r\n     *                                  indicating which consideration items to\r\n     *                                  attempt to aggregate when preparing\r\n     *                                  executions.\r\n     * @param fulfillerConduitKey       A bytes32 value indicating what conduit,\r\n     *                                  if any, to source the fulfiller's token\r\n     *                                  approvals from. The zero hash signifies\r\n     *                                  that no conduit should be used, with\r\n     *                                  direct approvals set on this contract.\r\n     * @param recipient                 The intended recipient for all received\r\n     *                                  items, with `address(0)` indicating that\r\n     *                                  the caller should receive the items.\r\n     * @param maximumFulfilled          The maximum number of orders to fulfill.\r\n     *\r\n     * @return availableOrders An array of booleans indicating if each order\r\n     *                         with an index corresponding to the index of the\r\n     *                         returned boolean was fulfillable or not.\r\n     * @return executions      An array of elements indicating the sequence of\r\n     *                         transfers performed as part of matching the given\r\n     *                         orders.\r\n     */\r\n    function fulfillAvailableAdvancedOrders(\r\n        AdvancedOrder[] calldata advancedOrders,\r\n        CriteriaResolver[] calldata criteriaResolvers,\r\n        FulfillmentComponent[][] calldata offerFulfillments,\r\n        FulfillmentComponent[][] calldata considerationFulfillments,\r\n        bytes32 fulfillerConduitKey,\r\n        address recipient,\r\n        uint256 maximumFulfilled\r\n    )\r\n        external\r\n        payable\r\n        returns (bool[] memory availableOrders, Execution[] memory executions);\r\n\r\n    /**\r\n     * @notice Match an arbitrary number of orders, each with an arbitrary\r\n     *         number of items for offer and consideration along with as set of\r\n     *         fulfillments allocating offer components to consideration\r\n     *         components. Note that this function does not support\r\n     *         criteria-based or partial filling of orders (though filling the\r\n     *         remainder of a partially-filled order is supported).\r\n     *\r\n     * @param orders       The orders to match. Note that both the offerer and\r\n     *                     fulfiller on each order must first approve this\r\n     *                     contract (or their conduit if indicated by the order)\r\n     *                     to transfer any relevant tokens on their behalf and\r\n     *                     each consideration recipient must implement\r\n     *                     `onERC1155Received` to enable ERC1155 token receipt.\r\n     * @param fulfillments An array of elements allocating offer components to\r\n     *                     consideration components. Note that each\r\n     *                     consideration component must be fully met for the\r\n     *                     match operation to be valid.\r\n     *\r\n     * @return executions An array of elements indicating the sequence of\r\n     *                    transfers performed as part of matching the given\r\n     *                    orders.\r\n     */\r\n    function matchOrders(\r\n        Order[] calldata orders,\r\n        Fulfillment[] calldata fulfillments\r\n    ) external payable returns (Execution[] memory executions);\r\n\r\n    /**\r\n     * @notice Match an arbitrary number of full or partial orders, each with an\r\n     *         arbitrary number of items for offer and consideration, supplying\r\n     *         criteria resolvers containing specific token identifiers and\r\n     *         associated proofs as well as fulfillments allocating offer\r\n     *         components to consideration components.\r\n     *\r\n     * @param orders            The advanced orders to match. Note that both the\r\n     *                          offerer and fulfiller on each order must first\r\n     *                          approve this contract (or a preferred conduit if\r\n     *                          indicated by the order) to transfer any relevant\r\n     *                          tokens on their behalf and each consideration\r\n     *                          recipient must implement `onERC1155Received` in\r\n     *                          order to receive ERC1155 tokens. Also note that\r\n     *                          the offer and consideration components for each\r\n     *                          order must have no remainder after multiplying\r\n     *                          the respective amount with the supplied fraction\r\n     *                          in order for the group of partial fills to be\r\n     *                          considered valid.\r\n     * @param criteriaResolvers An array where each element contains a reference\r\n     *                          to a specific order as well as that order's\r\n     *                          offer or consideration, a token identifier, and\r\n     *                          a proof that the supplied token identifier is\r\n     *                          contained in the order's merkle root. Note that\r\n     *                          an empty root indicates that any (transferable)\r\n     *                          token identifier is valid and that no associated\r\n     *                          proof needs to be supplied.\r\n     * @param fulfillments      An array of elements allocating offer components\r\n     *                          to consideration components. Note that each\r\n     *                          consideration component must be fully met in\r\n     *                          order for the match operation to be valid.\r\n     *\r\n     * @return executions An array of elements indicating the sequence of\r\n     *                    transfers performed as part of matching the given\r\n     *                    orders.\r\n     */\r\n    function matchAdvancedOrders(\r\n        AdvancedOrder[] calldata orders,\r\n        CriteriaResolver[] calldata criteriaResolvers,\r\n        Fulfillment[] calldata fulfillments\r\n    ) external payable returns (Execution[] memory executions);\r\n\r\n    /**\r\n     * @notice Cancel an arbitrary number of orders. Note that only the offerer\r\n     *         or the zone of a given order may cancel it. Callers should ensure\r\n     *         that the intended order was cancelled by calling `getOrderStatus`\r\n     *         and confirming that `isCancelled` returns `true`.\r\n     *\r\n     * @param orders The orders to cancel.\r\n     *\r\n     * @return cancelled A boolean indicating whether the supplied orders have\r\n     *                   been successfully cancelled.\r\n     */\r\n    function cancel(OrderComponents[] calldata orders)\r\n        external\r\n        returns (bool cancelled);\r\n\r\n    /**\r\n     * @notice Validate an arbitrary number of orders, thereby registering their\r\n     *         signatures as valid and allowing the fulfiller to skip signature\r\n     *         verification on fulfillment. Note that validated orders may still\r\n     *         be unfulfillable due to invalid item amounts or other factors;\r\n     *         callers should determine whether validated orders are fulfillable\r\n     *         by simulating the fulfillment call prior to execution. Also note\r\n     *         that anyone can validate a signed order, but only the offerer can\r\n     *         validate an order without supplying a signature.\r\n     *\r\n     * @param orders The orders to validate.\r\n     *\r\n     * @return validated A boolean indicating whether the supplied orders have\r\n     *                   been successfully validated.\r\n     */\r\n    function validate(Order[] calldata orders)\r\n        external\r\n        returns (bool validated);\r\n\r\n    /**\r\n     * @notice Cancel all orders from a given offerer with a given zone in bulk\r\n     *         by incrementing a counter. Note that only the offerer may\r\n     *         increment the counter.\r\n     *\r\n     * @return newCounter The new counter.\r\n     */\r\n    function incrementCounter() external returns (uint256 newCounter);\r\n\r\n    /**\r\n     * @notice Retrieve the order hash for a given order.\r\n     *\r\n     * @param order The components of the order.\r\n     *\r\n     * @return orderHash The order hash.\r\n     */\r\n    function getOrderHash(OrderComponents calldata order)\r\n        external\r\n        view\r\n        returns (bytes32 orderHash);\r\n\r\n    /**\r\n     * @notice Retrieve the status of a given order by hash, including whether\r\n     *         the order has been cancelled or validated and the fraction of the\r\n     *         order that has been filled.\r\n     *\r\n     * @param orderHash The order hash in question.\r\n     *\r\n     * @return isValidated A boolean indicating whether the order in question\r\n     *                     has been validated (i.e. previously approved or\r\n     *                     partially filled).\r\n     * @return isCancelled A boolean indicating whether the order in question\r\n     *                     has been cancelled.\r\n     * @return totalFilled The total portion of the order that has been filled\r\n     *                     (i.e. the \"numerator\").\r\n     * @return totalSize   The total size of the order that is either filled or\r\n     *                     unfilled (i.e. the \"denominator\").\r\n     */\r\n    function getOrderStatus(bytes32 orderHash)\r\n        external\r\n        view\r\n        returns (\r\n            bool isValidated,\r\n            bool isCancelled,\r\n            uint256 totalFilled,\r\n            uint256 totalSize\r\n        );\r\n\r\n    /**\r\n     * @notice Retrieve the current counter for a given offerer.\r\n     *\r\n     * @param offerer The offerer in question.\r\n     *\r\n     * @return counter The current counter.\r\n     */\r\n    function getCounter(address offerer)\r\n        external\r\n        view\r\n        returns (uint256 counter);\r\n\r\n    /**\r\n     * @notice Retrieve configuration information for this contract.\r\n     *\r\n     * @return version           The contract version.\r\n     * @return domainSeparator   The domain separator for this contract.\r\n     * @return conduitController The conduit Controller set for this contract.\r\n     */\r\n    function information()\r\n        external\r\n        view\r\n        returns (\r\n            string memory version,\r\n            bytes32 domainSeparator,\r\n            address conduitController\r\n        );\r\n\r\n    /**\r\n     * @notice Retrieve the name of this contract.\r\n     *\r\n     * @return contractName The name of this contract.\r\n     */\r\n    function name() external view returns (string memory contractName);\r\n}\r\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 19066
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}