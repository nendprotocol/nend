{
  "address": "0xD4167b0207F73d35FDF1d11c519e6a0e35EC5cA5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "ERC721Deployed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "addressOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "newContractAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeda4db1177501068cf13add4691a8af8b50826b82ce33ed3058289d687c2a928",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x4a580D71c0F73202C51C58147aA7c7E09245b10A",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "1943565",
    "logsBloom": "0x
    "blockHash": "0x51a93edc87345d544803edd06657836a0cddd5e88ca90314c2147d11916b6d7d",
    "transactionHash": "0xeda4db1177501068cf13add4691a8af8b50826b82ce33ed3058289d687c2a928",
    "logs": [],
    "blockNumber": 16767273,
    "cumulativeGasUsed": "3369790",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a98b85679c117a20c3b99df23d476f7d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"ERC721Deployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"addressOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContractAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/ERC721/ERC721Factory.sol\":\"ERC721Factory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/token/ERC721/ERC721Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"./PeriFiNFT.sol\\\";\\r\\n\\r\\ncontract ERC721Factory is ReentrancyGuard, Context {\\r\\n    using Address for address;\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    address[] private _contracts;\\r\\n\\r\\n    event ERC721Deployed(\\r\\n        address indexed from,\\r\\n        address indexed contractAddr,\\r\\n        string name,\\r\\n        string symbol\\r\\n    );\\r\\n\\r\\n    function totalOf() public view returns (uint256) {\\r\\n        return _contracts.length;\\r\\n    }\\r\\n\\r\\n    function addressOf(uint256 index)\\r\\n        public\\r\\n        view\\r\\n        returns (address contractAddr)\\r\\n    {\\r\\n        // if the given index is invalid, return empty address\\r\\n        if (_contracts.length == 0 || _contracts.length + 1 < index) {\\r\\n            return address(0);\\r\\n        }\\r\\n        return _contracts[index];\\r\\n    }\\r\\n\\r\\n    // deploy a newly purchased contract\\r\\n    function deploy(string memory name, string memory symbol)\\r\\n        public\\r\\n        nonReentrant\\r\\n        returns (address newContractAddr)\\r\\n    {\\r\\n        // create new contract\\r\\n        PeriFiNFT contractToDeploy = new PeriFiNFT(name, symbol);\\r\\n        contractToDeploy.transferOwnership(_msgSender());\\r\\n        address cAddr = address(contractToDeploy);\\r\\n        _contracts.push(cAddr);\\r\\n\\r\\n        // emit contract deploy event\\r\\n        emit ERC721Deployed(_msgSender(), cAddr, name, symbol);\\r\\n        return cAddr;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8cde0206d655cb07841bc4e4b0bb610811f225001f25d30fa6558320da60fbb0\",\"license\":\"MIT\"},\"contracts/token/ERC721/PeriFiNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\ncontract PeriFiNFT is ERC721, ERC721URIStorage, Ownable {\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol)\\r\\n        ERC721(_name, _symbol)\\r\\n    {}\\r\\n\\r\\n    function safeMint(address to, string memory uri) public onlyOwner {\\r\\n        _tokenIdCounter.increment();\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _safeMint(to, tokenId);\\r\\n        _setTokenURI(tokenId, uri);\\r\\n    }\\r\\n\\r\\n    // The following functions are overrides required by Solidity.\\r\\n\\r\\n    function _burn(uint256 tokenId)\\r\\n        internal\\r\\n        override(ERC721, ERC721URIStorage)\\r\\n    {\\r\\n        super._burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721URIStorage)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return ERC721URIStorage.tokenURI(tokenId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xab1e1899531b02e45f6a04d7d38f18e61b8abde37e8750051e28ccb03c3a25f3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001b5760016000556121c890816100218239f35b600080fdfe6080604052600436101562000014575b600080fd5b6000803560e01c90816311a800bc146200007157816362784a16146200004f575063b5488487146200004557600080fd5b6200000f62000174565b346200006e57806003193601126200006e576020600154604051908152f35b80fd5b346200006e5760203660031901126200006e576020620000936004356200036e565b6001600160a01b0360405191168152f35b60009103126200000f57565b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111620000dc57604052565b620000e6620000b0565b604052565b81601f820112156200000f5780359067ffffffffffffffff9283831162000164575b60405193601f8401601f19908116603f011685019081118582101762000154575b604052828452602083830101116200000f57816000926020809301838601378301015290565b6200015e620000b0565b6200012e565b6200016e620000b0565b6200010d565b50346200000f576040806003193601126200000f5767ffffffffffffffff906004358281116200000f57620001ae903690600401620000eb565b906024358381116200000f57620001ca903690600401620000eb565b9160009360028554146200031357816001600160a01b03916002875562000210868651938493611c78808601918683109083111762000303575b6200051b863962000458565b039086f08015620002f3575b1692833b15620002ef57825163f2fde38b60e01b8152336004820152620002bd958593927f2a22d317a6fd118f1422413c6f53c6d7963bc63d05ecb0002cc892f22786ab5a92620002979281602481838a5af18015620002df575b620002c1575b50620002898562000491565b855191829133958362000458565b0390a3620002a56001600055565b516001600160a01b0390911681529081906020820190565b0390f35b80620002d1620002d892620000c7565b80620000a4565b386200027d565b620002e962000484565b62000277565b8480fd5b620002fd62000484565b6200021c565b6200030d620000b0565b62000204565b825162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b50634e487b7160e01b600052603260045260246000fd5b6001549081158015620003d6575b620003cf576001600160a01b0391811015620003bf575b60016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601541690565b620003c962000357565b62000393565b5050600090565b506001198211620003ed578060018301106200037c565b634e487b7160e01b600052601160045260246000fd5b91908251928382526000905b8482106200043f57509280602093941162000431575b601f01601f1916010190565b600083828401015262000425565b906020908180828501015190828601015201906200040f565b909162000472620004819360408452604084019062000403565b91602081840391015262000403565b90565b506040513d6000823e3d90fd5b6001600160a01b03600154680100000000000000008110156200050a575b6001810180600155811015620004fa575b60016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60191166001600160a01b0319825416179055565b6200050462000357565b620004c0565b62000514620000b0565b620004af56fe6080604052346200018d5762001c78803803806200001d81620001a9565b92833981016040828203126200018d5781516001600160401b0391908281116200018d57816200004f918501620001de565b92602091828201518481116200018d576200006b9201620001de565b9183519081116200017d575b60009162000091826200008b855462000272565b620002af565b80601f8311600114620000ef57508190620000c8958492620000e3575b50508160011b916000199060031b1c191617905562000363565b620000d33362000465565b6040516117c49081620004b48239f35b015190503880620000ae565b600080529194601f1986167f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639385905b82821062000164575050916001939187620000c89894106200014a575b505050811b01905562000363565b015160001960f88460031b161c191690553880806200013c565b806001869782949787015181550196019401906200011f565b6200018762000192565b62000077565b600080fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b03811183821017620001cf57604052565b620001d962000192565b604052565b81601f820112156200018d578051906001600160401b03821162000262575b60209062000214601f8401601f19168301620001a9565b938385528284830101116200018d5782906000905b8383831062000249575050116200023f57505090565b6000918301015290565b8193508281939201015182828801015201839162000229565b6200026c62000192565b620001fd565b90600182811c92168015620002a4575b60208310146200028e57565b634e487b7160e01b600052602260045260246000fd5b91607f169162000282565b601f8111620002bc575050565b60009081805260208220906020601f850160051c83019410620002fc575b601f0160051c01915b828110620002f057505050565b818155600101620002e3565b9092508290620002da565b90601f821162000315575050565b60019160009083825260208220906020601f850160051c8301941062000358575b601f0160051c01915b8281106200034d5750505050565b81815583016200033f565b909250829062000336565b80519091906001600160401b03811162000455575b60019062000392816200038c845462000272565b62000307565b602080601f8311600114620003d0575081929394600092620003c4575b5050600019600383901b1c191690821b179055565b015190503880620003af565b6001600052601f198316959091907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b8882106200043d575050838596971062000423575b505050811b019055565b015160001960f88460031b161c1916905538808062000419565b80878596829496860151815501950193019062000404565b6200045f62000192565b62000378565b600780546001600160a01b039283166001600160a01b031982168117909255604051919216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a356fe60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a71461016757806306fdde031461015e578063081812fc14610155578063095ea7b31461014c57806323b872dd1461014357806342842e0e1461013a5780636352211e1461013157806370a0823114610128578063715018a61461011f5780638da5cb5b1461011657806395d89b411461010d578063a22cb46514610104578063b88d4fde146100fb578063c87b56dd146100f2578063d204c45e146100e9578063e985e9c5146100e05763f2fde38b146100d857600080fd5b61000e610b3f565b5061000e610adc565b5061000e610949565b5061000e610915565b5061000e6108b4565b5061000e610702565b5061000e61065c565b5061000e610634565b5061000e6105d4565b5061000e610532565b5061000e610513565b5061000e6104ea565b5061000e6104c0565b5061000e610396565b5061000e61033a565b5061000e61025f565b5061000e610182565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e5760206004356101a281610170565b63ffffffff60e01b166380ac58cd60e01b81149081156101e0575b81156101cf575b506040519015158152f35b6301ffc9a760e01b149050386101c4565b635b5e139f60e01b811491506101bd565b918091926000905b82821061021157501161020a575050565b6000910152565b915080602091830151818601520182916101f9565b9060209161023f815180928185528580860191016101f1565b601f01601f1916010190565b90602061025c928181520190610226565b90565b503461000e57600080600319360112610337576040519080805461028281610ccf565b8085529160019180831690811561031657506001146102bc575b6102b8856102ac81870382610830565b6040519182918261024b565b0390f35b80809450527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b8284106102fe5750505081016020016102ac826102b861029c565b805460208587018101919091529093019281016102e3565b60ff1916602087015250506040840192506102ac91508390506102b861029c565b80fd5b503461000e57602036600319011261000e576020610359600435610d7b565b6001600160a01b0360405191168152f35b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57604036600319011261000e576103b061036a565b6024356103bc81610cad565b916001600160a01b03808416809183161461043c576103ee936103e99133149081156103f0575b50610d09565b61119a565b005b610436915061042f9061041733916001600160a01b03166000526005602052604060002090565b906001600160a01b0316600052602052604060002090565b5460ff1690565b386103e3565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b606090600319011261000e576001600160a01b0390600435828116810361000e5791602435908116810361000e579060443590565b503461000e576103ee6104d23661048b565b916104e56104e08433610ef1565b610dbd565b61101a565b503461000e576103ee6104fc3661048b565b906040519261050a84610807565b60008452610e61565b503461000e57602036600319011261000e576020610359600435610cad565b503461000e57602036600319011261000e576001600160a01b0361055461036a565b16801561057d5760005260036020526102b8604060002054604051918291829190602083019252565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b503461000e57600080600319360112610337576105ef610c09565b6007546001600160a01b03198116600755816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e57600036600319011261000e5760206001600160a01b0360075416604051908152f35b503461000e57600080600319360112610337576040519080600180549161068283610ccf565b8086529282811690811561031657506001146106a8576102b8856102ac81870382610830565b92508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b8284106106ea5750505081016020016102ac826102b861029c565b805460208587018101919091529093019281016106cf565b503461000e57604036600319011261000e5761071c61036a565b602435801515810361000e576001600160a01b038216918233146107ab5781610768610779923360005260056020526040600020906001600160a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b50634e487b7160e01b600052604160045260246000fd5b6020810190811067ffffffffffffffff82111761082357604052565b61082b6107f0565b604052565b90601f8019910116810190811067ffffffffffffffff82111761082357604052565b60209067ffffffffffffffff8111610870575b601f01601f19160190565b6108786107f0565b610865565b92919261088982610852565b916108976040519384610830565b82948184528183011161000e578281602093846000960137010152565b503461000e57608036600319011261000e576108ce61036a565b6108d6610380565b6064359167ffffffffffffffff831161000e573660238401121561000e5761090b6103ee93369060248160040135910161087d565b9160443591610e61565b503461000e57602036600319011261000e576102b8610935600435611627565b604051918291602083526020830190610226565b503461000e57604036600319011261000e5761096361036a565b60243567ffffffffffffffff811161000e573660238201121561000e5761099490369060248160040135910161087d565b61099c610c09565b60016008540180600855604051926109b384610807565b600084526001600160a01b038116908115610a98576103ee9483610a8e9281610a9395610a05610a006109fc8460005260026020526001600160a01b0360406000205416151590565b1590565b6113f9565b610a22836001600160a01b03166000526003602052604060002090565b610a2c8154610ffe565b9055610a6183610a46846000526002602052604060002090565b906001600160a01b03166001600160a01b0319825416179055565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a46112ad565b610e8a565b611499565b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b503461000e57604036600319011261000e57602060ff610b33610afd61036a565b6001600160a01b03610b0d610380565b9116600052600584526040600020906001600160a01b0316600052602052604060002090565b54166040519015158152f35b503461000e57602036600319011261000e57610b5961036a565b610b61610c09565b6001600160a01b03809116908115610bb55760009160075491816001600160a01b031984161760075560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6001600160a01b03600754163303610c1d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15610c6857565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b60005260026020526001600160a01b036040600020541661025c811515610c61565b90600182811c92168015610cff575b6020831014610ce957565b634e487b7160e01b600052602260045260246000fd5b91607f1691610cde565b15610d1057565b60405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608490fd5b610da3610d9e8260005260026020526001600160a01b0360406000205416151590565b610c61565b60005260046020526001600160a01b036040600020541690565b15610dc457565b60405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f7665640000000000000000000000000000000000006064820152608490fd5b604051906020820182811067ffffffffffffffff821117610e54575b60405260008252565b610e5c6107f0565b610e4b565b91610e889391610a8e93610e786104e08433610ef1565b610e8383838361101a565b6113b5565b565b15610e9157565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b6001600160a01b0380610f0384610cad565b169281831692848414948515610f39575b50508315610f23575b50505090565b610f2f91929350610d7b565b1614388080610f1d565b60ff92955090610f689160005260056020526040600020906001600160a01b0316600052602052604060002090565b5416923880610f14565b15610f7957565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b60018110610ff1575b6000190190565b610ff9610fca565b610fea565b600190600119811161100e570190565b611016610fca565b0190565b9061102483610cad565b6001600160a01b0391829182851693849116036110e4576110726110bb92821694611050861515610f72565b61105987611137565b6001600160a01b03166000526003602052604060002090565b61107c8154610fe1565b905561109b816001600160a01b03166000526003602052604060002090565b6110a58154610ffe565b9055610a46856000526002602052604060002090565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b6000818152600460205260408120805473ffffffffffffffffffffffffffffffffffffffff191690556001600160a01b0361117183610cad565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92582604051a4565b6000828152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556001600160a01b03806111e084610cad565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b9081602091031261000e575161025c81610170565b61025c93926001600160a01b036080931682526000602083015260408201528160608201520190610226565b909261025c94936080936001600160a01b03809216845216602083015260408201528160608201520190610226565b3d156112a8573d9061128e82610852565b9161129c6040519384610830565b82523d6000602084013e565b606090565b909190803b156113ad576112e76020916001600160a01b03936000604051958680958194630a85bd0160e11b9a8b84523360048501611222565b0393165af16000918161137d575b5061136f5761130261127d565b8051908161136a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b602001fd5b6001600160e01b0319161490565b61139f91925060203d81116113a6575b6113978183610830565b81019061120d565b90386112f5565b503d61138d565b505050600190565b92909190823b156113f0576112e79260209260006001600160a01b03604051809781968295630a85bd0160e11b9b8c8552336004860161124e565b50505050600190565b1561140057565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b90601f811161145357505050565b600091825260208220906020601f850160051c8301941061148f575b601f0160051c01915b82811061148457505050565b818155600101611478565b909250829061146f565b9190916114bc8160005260026020526001600160a01b0360406000205416151590565b156115a95760005260206006815260406000209083519067ffffffffffffffff821161159c575b6114f7826114f18554610ccf565b85611445565b80601f8311600114611531575081929394600092611526575b50508160011b916000199060031b1c1916179055565b015190503880611510565b90601f1983169561154785600052602060002090565b926000905b8882106115845750508360019596971061156b575b505050811b019055565b015160001960f88460031b161c19169055388080611561565b8060018596829496860151815501950193019061154c565b6115a46107f0565b6114e3565b60405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201527f6578697374656e7420746f6b656e0000000000000000000000000000000000006064820152608490fd5b90611016602092828151948592016101f1565b61164a610d9e8260005260026020526001600160a01b0360406000205416151590565b600090808252602060068152604083206040518481959083549061166d82610ccf565b8085529460019280841690811561172957506001146116ed575b50505061169692500384610830565b61169e610e2f565b928351156116e65780516116b857505061025c9150611749565b61025c92506116d8906116d2604051958694850190611614565b90611614565b03601f198101835282610830565b9250505090565b869350819291528282205b8583106117115750506116969350820101388080611687565b8054838a0185015288945086939092019181016116f8565b965050505050505060ff1916818401526116968360408101388080611687565b610d9e61176c9160005260026020526001600160a01b0360406000205416151590565b600060405161177a81610807565b5260405161178781610807565b600081529056fea2646970667358221220af675c13fea3b2c87723e7f8bc335fd9f943bfac6043e1d040a4dc14ef2d16f264736f6c634300080e0033a2646970667358221220b2c05910ec4ac242e11c4082ec69eb58c418a29774b9b0fbd2eae7df5e6532de64736f6c634300080e0033",
  "deployedBytecode": "0x6080604052600436101562000014575b600080fd5b6000803560e01c90816311a800bc146200007157816362784a16146200004f575063b5488487146200004557600080fd5b6200000f62000174565b346200006e57806003193601126200006e576020600154604051908152f35b80fd5b346200006e5760203660031901126200006e576020620000936004356200036e565b6001600160a01b0360405191168152f35b60009103126200000f57565b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111620000dc57604052565b620000e6620000b0565b604052565b81601f820112156200000f5780359067ffffffffffffffff9283831162000164575b60405193601f8401601f19908116603f011685019081118582101762000154575b604052828452602083830101116200000f57816000926020809301838601378301015290565b6200015e620000b0565b6200012e565b6200016e620000b0565b6200010d565b50346200000f576040806003193601126200000f5767ffffffffffffffff906004358281116200000f57620001ae903690600401620000eb565b906024358381116200000f57620001ca903690600401620000eb565b9160009360028554146200031357816001600160a01b03916002875562000210868651938493611c78808601918683109083111762000303575b6200051b863962000458565b039086f08015620002f3575b1692833b15620002ef57825163f2fde38b60e01b8152336004820152620002bd958593927f2a22d317a6fd118f1422413c6f53c6d7963bc63d05ecb0002cc892f22786ab5a92620002979281602481838a5af18015620002df575b620002c1575b50620002898562000491565b855191829133958362000458565b0390a3620002a56001600055565b516001600160a01b0390911681529081906020820190565b0390f35b80620002d1620002d892620000c7565b80620000a4565b386200027d565b620002e962000484565b62000277565b8480fd5b620002fd62000484565b6200021c565b6200030d620000b0565b62000204565b825162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b50634e487b7160e01b600052603260045260246000fd5b6001549081158015620003d6575b620003cf576001600160a01b0391811015620003bf575b60016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601541690565b620003c962000357565b62000393565b5050600090565b506001198211620003ed578060018301106200037c565b634e487b7160e01b600052601160045260246000fd5b91908251928382526000905b8482106200043f57509280602093941162000431575b601f01601f1916010190565b600083828401015262000425565b906020908180828501015190828601015201906200040f565b909162000472620004819360408452604084019062000403565b91602081840391015262000403565b90565b506040513d6000823e3d90fd5b6001600160a01b03600154680100000000000000008110156200050a575b6001810180600155811015620004fa575b60016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60191166001600160a01b0319825416179055565b6200050462000357565b620004c0565b62000514620000b0565b620004af56fe6080604052346200018d5762001c78803803806200001d81620001a9565b92833981016040828203126200018d5781516001600160401b0391908281116200018d57816200004f918501620001de565b92602091828201518481116200018d576200006b9201620001de565b9183519081116200017d575b60009162000091826200008b855462000272565b620002af565b80601f8311600114620000ef57508190620000c8958492620000e3575b50508160011b916000199060031b1c191617905562000363565b620000d33362000465565b6040516117c49081620004b48239f35b015190503880620000ae565b600080529194601f1986167f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639385905b82821062000164575050916001939187620000c89894106200014a575b505050811b01905562000363565b015160001960f88460031b161c191690553880806200013c565b806001869782949787015181550196019401906200011f565b6200018762000192565b62000077565b600080fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b03811183821017620001cf57604052565b620001d962000192565b604052565b81601f820112156200018d578051906001600160401b03821162000262575b60209062000214601f8401601f19168301620001a9565b938385528284830101116200018d5782906000905b8383831062000249575050116200023f57505090565b6000918301015290565b8193508281939201015182828801015201839162000229565b6200026c62000192565b620001fd565b90600182811c92168015620002a4575b60208310146200028e57565b634e487b7160e01b600052602260045260246000fd5b91607f169162000282565b601f8111620002bc575050565b60009081805260208220906020601f850160051c83019410620002fc575b601f0160051c01915b828110620002f057505050565b818155600101620002e3565b9092508290620002da565b90601f821162000315575050565b60019160009083825260208220906020601f850160051c8301941062000358575b601f0160051c01915b8281106200034d5750505050565b81815583016200033f565b909250829062000336565b80519091906001600160401b03811162000455575b60019062000392816200038c845462000272565b62000307565b602080601f8311600114620003d0575081929394600092620003c4575b5050600019600383901b1c191690821b179055565b015190503880620003af565b6001600052601f198316959091907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b8882106200043d575050838596971062000423575b505050811b019055565b015160001960f88460031b161c1916905538808062000419565b80878596829496860151815501950193019062000404565b6200045f62000192565b62000378565b600780546001600160a01b039283166001600160a01b031982168117909255604051919216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a356fe60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a71461016757806306fdde031461015e578063081812fc14610155578063095ea7b31461014c57806323b872dd1461014357806342842e0e1461013a5780636352211e1461013157806370a0823114610128578063715018a61461011f5780638da5cb5b1461011657806395d89b411461010d578063a22cb46514610104578063b88d4fde146100fb578063c87b56dd146100f2578063d204c45e146100e9578063e985e9c5146100e05763f2fde38b146100d857600080fd5b61000e610b3f565b5061000e610adc565b5061000e610949565b5061000e610915565b5061000e6108b4565b5061000e610702565b5061000e61065c565b5061000e610634565b5061000e6105d4565b5061000e610532565b5061000e610513565b5061000e6104ea565b5061000e6104c0565b5061000e610396565b5061000e61033a565b5061000e61025f565b5061000e610182565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e5760206004356101a281610170565b63ffffffff60e01b166380ac58cd60e01b81149081156101e0575b81156101cf575b506040519015158152f35b6301ffc9a760e01b149050386101c4565b635b5e139f60e01b811491506101bd565b918091926000905b82821061021157501161020a575050565b6000910152565b915080602091830151818601520182916101f9565b9060209161023f815180928185528580860191016101f1565b601f01601f1916010190565b90602061025c928181520190610226565b90565b503461000e57600080600319360112610337576040519080805461028281610ccf565b8085529160019180831690811561031657506001146102bc575b6102b8856102ac81870382610830565b6040519182918261024b565b0390f35b80809450527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b8284106102fe5750505081016020016102ac826102b861029c565b805460208587018101919091529093019281016102e3565b60ff1916602087015250506040840192506102ac91508390506102b861029c565b80fd5b503461000e57602036600319011261000e576020610359600435610d7b565b6001600160a01b0360405191168152f35b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57604036600319011261000e576103b061036a565b6024356103bc81610cad565b916001600160a01b03808416809183161461043c576103ee936103e99133149081156103f0575b50610d09565b61119a565b005b610436915061042f9061041733916001600160a01b03166000526005602052604060002090565b906001600160a01b0316600052602052604060002090565b5460ff1690565b386103e3565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b606090600319011261000e576001600160a01b0390600435828116810361000e5791602435908116810361000e579060443590565b503461000e576103ee6104d23661048b565b916104e56104e08433610ef1565b610dbd565b61101a565b503461000e576103ee6104fc3661048b565b906040519261050a84610807565b60008452610e61565b503461000e57602036600319011261000e576020610359600435610cad565b503461000e57602036600319011261000e576001600160a01b0361055461036a565b16801561057d5760005260036020526102b8604060002054604051918291829190602083019252565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b503461000e57600080600319360112610337576105ef610c09565b6007546001600160a01b03198116600755816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e57600036600319011261000e5760206001600160a01b0360075416604051908152f35b503461000e57600080600319360112610337576040519080600180549161068283610ccf565b8086529282811690811561031657506001146106a8576102b8856102ac81870382610830565b92508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b8284106106ea5750505081016020016102ac826102b861029c565b805460208587018101919091529093019281016106cf565b503461000e57604036600319011261000e5761071c61036a565b602435801515810361000e576001600160a01b038216918233146107ab5781610768610779923360005260056020526040600020906001600160a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b50634e487b7160e01b600052604160045260246000fd5b6020810190811067ffffffffffffffff82111761082357604052565b61082b6107f0565b604052565b90601f8019910116810190811067ffffffffffffffff82111761082357604052565b60209067ffffffffffffffff8111610870575b601f01601f19160190565b6108786107f0565b610865565b92919261088982610852565b916108976040519384610830565b82948184528183011161000e578281602093846000960137010152565b503461000e57608036600319011261000e576108ce61036a565b6108d6610380565b6064359167ffffffffffffffff831161000e573660238401121561000e5761090b6103ee93369060248160040135910161087d565b9160443591610e61565b503461000e57602036600319011261000e576102b8610935600435611627565b604051918291602083526020830190610226565b503461000e57604036600319011261000e5761096361036a565b60243567ffffffffffffffff811161000e573660238201121561000e5761099490369060248160040135910161087d565b61099c610c09565b60016008540180600855604051926109b384610807565b600084526001600160a01b038116908115610a98576103ee9483610a8e9281610a9395610a05610a006109fc8460005260026020526001600160a01b0360406000205416151590565b1590565b6113f9565b610a22836001600160a01b03166000526003602052604060002090565b610a2c8154610ffe565b9055610a6183610a46846000526002602052604060002090565b906001600160a01b03166001600160a01b0319825416179055565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a46112ad565b610e8a565b611499565b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b503461000e57604036600319011261000e57602060ff610b33610afd61036a565b6001600160a01b03610b0d610380565b9116600052600584526040600020906001600160a01b0316600052602052604060002090565b54166040519015158152f35b503461000e57602036600319011261000e57610b5961036a565b610b61610c09565b6001600160a01b03809116908115610bb55760009160075491816001600160a01b031984161760075560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6001600160a01b03600754163303610c1d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15610c6857565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b60005260026020526001600160a01b036040600020541661025c811515610c61565b90600182811c92168015610cff575b6020831014610ce957565b634e487b7160e01b600052602260045260246000fd5b91607f1691610cde565b15610d1057565b60405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608490fd5b610da3610d9e8260005260026020526001600160a01b0360406000205416151590565b610c61565b60005260046020526001600160a01b036040600020541690565b15610dc457565b60405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f7665640000000000000000000000000000000000006064820152608490fd5b604051906020820182811067ffffffffffffffff821117610e54575b60405260008252565b610e5c6107f0565b610e4b565b91610e889391610a8e93610e786104e08433610ef1565b610e8383838361101a565b6113b5565b565b15610e9157565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b6001600160a01b0380610f0384610cad565b169281831692848414948515610f39575b50508315610f23575b50505090565b610f2f91929350610d7b565b1614388080610f1d565b60ff92955090610f689160005260056020526040600020906001600160a01b0316600052602052604060002090565b5416923880610f14565b15610f7957565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b60018110610ff1575b6000190190565b610ff9610fca565b610fea565b600190600119811161100e570190565b611016610fca565b0190565b9061102483610cad565b6001600160a01b0391829182851693849116036110e4576110726110bb92821694611050861515610f72565b61105987611137565b6001600160a01b03166000526003602052604060002090565b61107c8154610fe1565b905561109b816001600160a01b03166000526003602052604060002090565b6110a58154610ffe565b9055610a46856000526002602052604060002090565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b6000818152600460205260408120805473ffffffffffffffffffffffffffffffffffffffff191690556001600160a01b0361117183610cad565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92582604051a4565b6000828152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556001600160a01b03806111e084610cad565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b9081602091031261000e575161025c81610170565b61025c93926001600160a01b036080931682526000602083015260408201528160608201520190610226565b909261025c94936080936001600160a01b03809216845216602083015260408201528160608201520190610226565b3d156112a8573d9061128e82610852565b9161129c6040519384610830565b82523d6000602084013e565b606090565b909190803b156113ad576112e76020916001600160a01b03936000604051958680958194630a85bd0160e11b9a8b84523360048501611222565b0393165af16000918161137d575b5061136f5761130261127d565b8051908161136a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b602001fd5b6001600160e01b0319161490565b61139f91925060203d81116113a6575b6113978183610830565b81019061120d565b90386112f5565b503d61138d565b505050600190565b92909190823b156113f0576112e79260209260006001600160a01b03604051809781968295630a85bd0160e11b9b8c8552336004860161124e565b50505050600190565b1561140057565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b90601f811161145357505050565b600091825260208220906020601f850160051c8301941061148f575b601f0160051c01915b82811061148457505050565b818155600101611478565b909250829061146f565b9190916114bc8160005260026020526001600160a01b0360406000205416151590565b156115a95760005260206006815260406000209083519067ffffffffffffffff821161159c575b6114f7826114f18554610ccf565b85611445565b80601f8311600114611531575081929394600092611526575b50508160011b916000199060031b1c1916179055565b015190503880611510565b90601f1983169561154785600052602060002090565b926000905b8882106115845750508360019596971061156b575b505050811b019055565b015160001960f88460031b161c19169055388080611561565b8060018596829496860151815501950193019061154c565b6115a46107f0565b6114e3565b60405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201527f6578697374656e7420746f6b656e0000000000000000000000000000000000006064820152608490fd5b90611016602092828151948592016101f1565b61164a610d9e8260005260026020526001600160a01b0360406000205416151590565b600090808252602060068152604083206040518481959083549061166d82610ccf565b8085529460019280841690811561172957506001146116ed575b50505061169692500384610830565b61169e610e2f565b928351156116e65780516116b857505061025c9150611749565b61025c92506116d8906116d2604051958694850190611614565b90611614565b03601f198101835282610830565b9250505090565b869350819291528282205b8583106117115750506116969350820101388080611687565b8054838a0185015288945086939092019181016116f8565b965050505050505060ff1916818401526116968360408101388080611687565b610d9e61176c9160005260026020526001600160a01b0360406000205416151590565b600060405161177a81610807565b5260405161178781610807565b600081529056fea2646970667358221220af675c13fea3b2c87723e7f8bc335fd9f943bfac6043e1d040a4dc14ef2d16f264736f6c634300080e0033a2646970667358221220b2c05910ec4ac242e11c4082ec69eb58c418a29774b9b0fbd2eae7df5e6532de64736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5790,
        "contract": "contracts/token/ERC721/ERC721Factory.sol:ERC721Factory",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 28199,
        "contract": "contracts/token/ERC721/ERC721Factory.sol:ERC721Factory",
        "label": "_contracts",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}