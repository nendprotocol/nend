{
  "address": "0x1a713D088E40F7BEC35308F768576e9474bA4fC4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CloseMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "conclusion",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "capacityInQuote",
          "type": "bool"
        }
      ],
      "name": "CreateMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "marketId",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "noteId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payoutPerVesting",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "created",
          "type": "uint48"
        }
      ],
      "name": "NoteCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "vestingCount",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "totalVested",
          "type": "uint256[]"
        }
      ],
      "name": "NotesRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "__MWOwnable_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__Testing_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adjustments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "change",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "lastAdjustment",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "timeToAdjusted",
          "type": "uint48"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "authorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commissionRate",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_capacity",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_capacityInQuote",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_initialPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "_conclusion",
          "type": "uint48"
        },
        {
          "internalType": "uint32",
          "name": "_depositInterval",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_tuneInterval",
          "type": "uint32"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ecosystemPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getMarketData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nend",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_insurancePool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ecosystemPool",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insurancePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "capacityInQuote",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketsForQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "lastTune",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "lastDecay",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "length",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "depositInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "tuneInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint8",
          "name": "quoteDecimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nend",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "notes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payoutPerVesting",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "created",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "marketID",
          "type": "uint48"
        },
        {
          "internalType": "uint8",
          "name": "vestingCount",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "redeemAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_testing",
          "type": "bool"
        }
      ],
      "name": "setTesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "controlVariable",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "conclusion",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "maxDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testVestingInverval",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVestingCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_commissionRate",
          "type": "uint16"
        }
      ],
      "name": "updateCommissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ecosystemPool",
          "type": "address"
        }
      ],
      "name": "updateEcosystemPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_insurancePool",
          "type": "address"
        }
      ],
      "name": "updateInsurancePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nend",
          "type": "address"
        }
      ],
      "name": "updateNend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingInverval",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc6b1d7fa7b47fb57093e15cff7946a2b1edbce614cd3bad9e8ab41b60a755570",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x7E8aE5C72eCA86946b695dCc211863D9721A0961",
    "contractAddress": null,
    "transactionIndex": 124,
    "gasUsed": "3413869",
    "logsBloom": "0x
    "blockHash": "0x4f583ca7b02f4126fa8d1195d656713be87422fa71e3067a496cdac313161075",
    "transactionHash": "0xc6b1d7fa7b47fb57093e15cff7946a2b1edbce614cd3bad9e8ab41b60a755570",
    "logs": [
      {
        "transactionIndex": 124,
        "blockNumber": 16219475,
        "transactionHash": "0xc6b1d7fa7b47fb57093e15cff7946a2b1edbce614cd3bad9e8ab41b60a755570",
        "address": "0x1a713D088E40F7BEC35308F768576e9474bA4fC4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007e8ae5c72eca86946b695dcc211863d9721a0961"
        ],
        "data": "0x",
        "logIndex": 222,
        "blockHash": "0x4f583ca7b02f4126fa8d1195d656713be87422fa71e3067a496cdac313161075"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 16219475,
        "transactionHash": "0xc6b1d7fa7b47fb57093e15cff7946a2b1edbce614cd3bad9e8ab41b60a755570",
        "address": "0x1a713D088E40F7BEC35308F768576e9474bA4fC4",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 223,
        "blockHash": "0x4f583ca7b02f4126fa8d1195d656713be87422fa71e3067a496cdac313161075"
      },
      {
        "transactionIndex": 124,
        "blockNumber": 16219475,
        "transactionHash": "0xc6b1d7fa7b47fb57093e15cff7946a2b1edbce614cd3bad9e8ab41b60a755570",
        "address": "0x1a713D088E40F7BEC35308F768576e9474bA4fC4",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 224,
        "blockHash": "0x4f583ca7b02f4126fa8d1195d656713be87422fa71e3067a496cdac313161075"
      }
    ],
    "blockNumber": 16219475,
    "cumulativeGasUsed": "19072869",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5f4e724599e3a7403e26c4f96c760b8c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CloseMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"conclusion\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"capacityInQuote\",\"type\":\"bool\"}],\"name\":\"CreateMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"marketId\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noteId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutPerVesting\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"created\",\"type\":\"uint48\"}],\"name\":\"NoteCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"vestingCount\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"totalVested\",\"type\":\"uint256[]\"}],\"name\":\"NotesRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__MWOwnable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__Testing_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adjustments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"change\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"lastAdjustment\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"timeToAdjusted\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_capacity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_capacityInQuote\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"_conclusion\",\"type\":\"uint48\"},{\"internalType\":\"uint32\",\"name\":\"_depositInterval\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_tuneInterval\",\"type\":\"uint32\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystemPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMarketData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nend\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_insurancePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ecosystemPool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurancePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"capacityInQuote\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsForQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"lastTune\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lastDecay\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"length\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"depositInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"tuneInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"quoteDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutPerVesting\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"created\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"marketID\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"vestingCount\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"redeemAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_testing\",\"type\":\"bool\"}],\"name\":\"setTesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"conclusion\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testVestingInverval\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVestingCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_commissionRate\",\"type\":\"uint16\"}],\"name\":\"updateCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ecosystemPool\",\"type\":\"address\"}],\"name\":\"updateEcosystemPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_insurancePool\",\"type\":\"address\"}],\"name\":\"updateInsurancePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nend\",\"type\":\"address\"}],\"name\":\"updateNend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingInverval\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"close(uint256)\":{\"params\":{\"_id\":\"ID of market to close\"}},\"deposit(uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"the amount of quote token to spend\",\"_id\":\"the ID of the market\",\"_maxPrice\":\"the maxeimum price at which to buy\"},\"returns\":{\"index_\":\"     the user index of the Note (usd to redeem or query information)\",\"payout_\":\"    the amount of NEND due\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"redeem(uint256[])\":{\"params\":{\"_indexes\":\"the note indexes to redeem\"},\"returns\":{\"payout_\":\"    sum of payout sent, in NEND\"}},\"redeemAll(uint256)\":{\"details\":\"if possible, query indexesFor() off-chain and input in redeem() to save gas\",\"returns\":{\"_0\":\"sum of payout sent, in NEND\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"close(uint256)\":{\"notice\":\"disable existing market\"},\"deposit(uint256,uint256,uint256)\":{\"notice\":\"deposit quote tokens in exchange for a bond from a specified market\"},\"redeem(uint256[])\":{\"notice\":\"redeem notes for user\"},\"redeemAll(uint256)\":{\"notice\":\"redeem all redeemable markets for user\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bonding/BondDepository.sol\":\"BondDepository\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/access/MWOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract MWOwnable is Initializable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() initializer {\\r\\n        _transferOwnership(0x7E8aE5C72eCA86946b695dCc211863D9721A0961);\\r\\n    }\\r\\n\\r\\n    function __MWOwnable_init() public virtual onlyInitializing {\\r\\n        _transferOwnership(0x7E8aE5C72eCA86946b695dCc211863D9721A0961);  // Nend Mainnet Main Wallet\\r\\n        // _transferOwnership(0x4a580D71c0F73202C51C58147aA7c7E09245b10A); // Nend Testnet/Turbo Main Wallet\\r\\n        // _transferOwnership(0x2F358B80eD2d296C09560d2b9F70a7f81d57e352); // Kong Wallet\\r\\n        // _transferOwnership(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4); // Remix test wallet\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x7ef8a1586453a8f1fa99a90c7a97d141e3d1e584fe11b625244c19a22dfc179f\",\"license\":\"MIT\"},\"contracts/access/SimpleRoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract SimpleRoleAccess is MWOwnable {\\r\\n    mapping(address => mapping(string => bool)) public hasRole;\\r\\n\\r\\n    function authorize(\\r\\n        address operator,\\r\\n        string memory role,\\r\\n        bool authorized\\r\\n    ) public onlyOwner {\\r\\n        hasRole[operator][role] = authorized;\\r\\n    }\\r\\n\\r\\n    modifier onlyRole(string memory _role) virtual {\\r\\n        require(\\r\\n            msg.sender == owner() || hasRole[msg.sender][_role],\\r\\n            \\\"Not authorized\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasAllRoles(string[] memory _roles) virtual {\\r\\n        for (uint256 i = 0; i < _roles.length; i++) {\\r\\n            require(hasRole[msg.sender][_roles[i]], \\\"Not authorized\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasSomeRoles(string[] memory _roles) virtual {\\r\\n        bool _hasRole;\\r\\n        for (uint256 i = 0; i < _roles.length; i++) {\\r\\n            if (hasRole[msg.sender][_roles[i]]) {\\r\\n                _hasRole = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(_hasRole, \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcda400188b817a7c5311ef3c5de33e0d404621eea1f3e2b446c0c666981a8f86\",\"license\":\"UNLICENSED\"},\"contracts/bonding/BondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./NoteKeeper.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./IBondDepository.sol\\\";\\r\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\n\\r\\ncontract BondDepository is\\r\\n    IBondDepository,\\r\\n    NoteKeeper,\\r\\n    SimpleRoleAccess,\\r\\n    UUPSUpgradeable\\r\\n{\\r\\n    /* ======== DEPENDENCIES ======== */\\r\\n\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /* ======== STATE VARIABLES ======== */\\r\\n\\r\\n    // Storage\\r\\n    Market[] public markets; // persistent market data\\r\\n    Terms[] public terms; // deposit construction data\\r\\n    Metadata[] public metadata; // extraneous market data\\r\\n    mapping(uint256 => Adjustment) public adjustments; // control variable changes\\r\\n\\r\\n    // Queries\\r\\n    mapping(address => uint256[]) public marketsForQuote; // market IDs for quote token\\r\\n\\r\\n    /* ======== CONSTRUCTOR ======== */\\r\\n\\r\\n    function initialize(\\r\\n        address _nend,\\r\\n        address _insurancePool,\\r\\n        address _ecosystemPool\\r\\n    ) public virtual initializer {\\r\\n        __NoteKeeper_init(_nend, _insurancePool, _ecosystemPool);\\r\\n        __MWOwnable_init();\\r\\n        __Testing_init();\\r\\n    }\\r\\n\\r\\n    /* ======== DEPOSIT ======== */\\r\\n\\r\\n    /**\\r\\n     * @notice             deposit quote tokens in exchange for a bond from a specified market\\r\\n     * @param _id          the ID of the market\\r\\n     * @param _amount      the amount of quote token to spend\\r\\n     * @param _maxPrice    the maxeimum price at which to buy\\r\\n     * @return payout_     the amount of NEND due\\r\\n     * @return index_      the user index of the Note (usd to redeem or query information)\\r\\n     */\\r\\n    function deposit(\\r\\n        uint256 _id,\\r\\n        uint256 _amount,\\r\\n        uint256 _maxPrice\\r\\n    ) external virtual override returns (uint256 payout_, uint256 index_) {\\r\\n        Market storage market = markets[_id];\\r\\n        Terms memory term = terms[_id];\\r\\n        uint48 currentTime = uint48(block.timestamp);\\r\\n\\r\\n        // Markets end at a defined timestamp\\r\\n        // |-------------------------------------| t\\r\\n        require(currentTime < term.conclusion, \\\"Depository: market concluded\\\");\\r\\n\\r\\n        // Debt and the control variable decay over time\\r\\n        _decay(_id, currentTime);\\r\\n\\r\\n        // Users input a maximum price, which protects them from price changes after\\r\\n        // entering the mempool. max price is a slippage mitigation measure\\r\\n        uint256 price = _marketPrice(_id);\\r\\n        require(price <= _maxPrice, \\\"Depository: more than max price\\\");\\r\\n\\r\\n        /**\\r\\n         * payout for the deposit = amount / price\\r\\n         *\\r\\n         * where\\r\\n         * payout = NEND out\\r\\n         * amount = quote tokens in\\r\\n         * price = quote tokens : NEND (i.e. 42069 DAI : NENDs)\\r\\n         *\\r\\n         * 1e27 = NEND decimals (18) + price decimals (9)\\r\\n         */\\r\\n        payout_ =\\r\\n            ((_amount * 1e27) / price) /\\r\\n            (10 ** metadata[_id].quoteDecimals);\\r\\n\\r\\n        // markets have a max payout amount, capping size because deposits\\r\\n        // do not experience slippage. max payout is recalculated upon tuning\\r\\n        require(payout_ <= market.maxPayout, \\\"Depository: max size exceeded\\\");\\r\\n\\r\\n        /*\\r\\n         * each market is initialized with a capacity\\r\\n         *\\r\\n         * this is either the number of NEND that the market can sell\\r\\n         * (if capacity in quote is false),\\r\\n         *\\r\\n         * or the number of quote tokens that the market can buy\\r\\n         * (if capacity in quote is true)\\r\\n         */\\r\\n        market.capacity -= market.capacityInQuote ? _amount : payout_;\\r\\n\\r\\n        /**\\r\\n         * bonds mature with a cliff at a set timestamp\\r\\n         * prior to the expiry timestamp, no payout tokens are accessible to the user\\r\\n         * after the expiry timestamp, the entire payout can be redeemed\\r\\n         *\\r\\n         * there are two types of bonds: fixed-term and fixed-expiration\\r\\n         *\\r\\n         * fixed-term bonds mature in a set amount of time from deposit\\r\\n         * i.e. term = 1 week. when alice deposits on day 1, her bond\\r\\n         * expires on day 8. when bob deposits on day 2, his bond expires day 9.\\r\\n         *\\r\\n         * fixed-expiration bonds mature at a set timestamp\\r\\n         * i.e. expiration = day 10. when alice deposits on day 1, her term\\r\\n         * is 9 days. when bob deposits on day 2, his term is 8 days.\\r\\n         */\\r\\n\\r\\n        // markets keep track of how many quote tokens have been\\r\\n        // purchased, and how much NEND has been sold\\r\\n        market.purchased += _amount;\\r\\n        market.sold += uint64(payout_);\\r\\n\\r\\n        // incrementing total debt raises the price of the next bond\\r\\n        market.totalDebt += uint64(payout_);\\r\\n\\r\\n        /**\\r\\n         * user data is stored as Notes. these are isolated array entries\\r\\n         * storing the amount due, the time created, the time when payout\\r\\n         * is redeemable, the time when payout was redeemed, and the ID\\r\\n         * of the market deposited into\\r\\n         */\\r\\n        index_ = addNote(uint48(_id), _amount, price, msg.sender, payout_);\\r\\n\\r\\n        // transfer payment to treasury\\r\\n        market.quoteToken.safeTransferFrom(msg.sender, ecosystemPool, _amount);\\r\\n\\r\\n        // if max debt is breached, the market is closed\\r\\n        // this a circuit breaker\\r\\n        if (term.maxDebt < market.totalDebt) {\\r\\n            market.capacity = 0;\\r\\n            emit CloseMarket(_id);\\r\\n        } else {\\r\\n            // if market will continue, the control variable is tuned to hit targets on time\\r\\n            _tune(_id, currentTime);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             decay debt, and adjust control variable if there is an active change\\r\\n     * @param _id          ID of market\\r\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\r\\n     */\\r\\n    function _decay(uint256 _id, uint48 _time) internal virtual {\\r\\n        // Debt decay\\r\\n\\r\\n        /*\\r\\n         * Debt is a time-decayed sum of tokens spent in a market\\r\\n         * Debt is added when deposits occur and removed over time\\r\\n         * |\\r\\n         * |    debt falls with\\r\\n         * |   / \\\\  inactivity       / \\\\\\r\\n         * | /     \\\\              /\\\\/    \\\\\\r\\n         * |         \\\\           /         \\\\\\r\\n         * |           \\\\      /\\\\/            \\\\\\r\\n         * |             \\\\  /  and rises       \\\\\\r\\n         * |                with deposits\\r\\n         * |\\r\\n         * |------------------------------------| t\\r\\n         */\\r\\n        markets[_id].totalDebt -= _debtDecay(_id);\\r\\n        metadata[_id].lastDecay = _time;\\r\\n\\r\\n        // Control variable decay\\r\\n\\r\\n        // The bond control variable is continually tuned. When it is lowered (which\\r\\n        // lowers the market price), the change is carried out smoothly over time.\\r\\n        if (adjustments[_id].active) {\\r\\n            Adjustment storage adjustment = adjustments[_id];\\r\\n\\r\\n            (\\r\\n                uint256 adjustBy,\\r\\n                uint48 secondsSince,\\r\\n                bool stillActive\\r\\n            ) = _controlDecay(_id);\\r\\n            terms[_id].controlVariable -= adjustBy;\\r\\n\\r\\n            if (stillActive) {\\r\\n                adjustment.change -= adjustBy;\\r\\n                adjustment.timeToAdjusted -= secondsSince;\\r\\n                adjustment.lastAdjustment = _time;\\r\\n            } else {\\r\\n                adjustment.active = false;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             auto-adjust control variable to hit capacity/spend target\\r\\n     * @param _id          ID of market\\r\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\r\\n     */\\r\\n    function _tune(uint256 _id, uint48 _time) internal virtual {\\r\\n        Metadata memory meta = metadata[_id];\\r\\n\\r\\n        if (_time >= meta.lastTune + meta.tuneInterval) {\\r\\n            Market memory market = markets[_id];\\r\\n\\r\\n            // compute seconds remaining until market will conclude\\r\\n            uint256 timeRemaining = terms[_id].conclusion - _time;\\r\\n            uint256 price = _marketPrice(_id);\\r\\n\\r\\n            // standardize capacity into an base token amount\\r\\n            // NEND decimals (9) + price decimals (9)\\r\\n            uint256 capacity = market.capacityInQuote\\r\\n                ? ((market.capacity * 1e27) / price) /\\r\\n                    (10 ** meta.quoteDecimals)\\r\\n                : market.capacity;\\r\\n\\r\\n            /**\\r\\n             * calculate the correct payout to complete on time assuming each bond\\r\\n             * will be max size in the desired deposit interval for the remaining time\\r\\n             *\\r\\n             * i.e. market has 10 days remaining. deposit interval is 1 day. capacity\\r\\n             * is 10,000 NEND. max payout would be 1,000 NEND (10,000 * 1 / 10).\\r\\n             */\\r\\n            markets[_id].maxPayout = uint64(\\r\\n                (capacity * meta.depositInterval) / timeRemaining\\r\\n            );\\r\\n\\r\\n            // calculate the ideal total debt to satisfy capacity in the remaining time\\r\\n            uint256 targetDebt = (capacity * meta.length) / timeRemaining;\\r\\n\\r\\n            // derive a new control variable from the target debt and current supply\\r\\n            uint64 newControlVariable = uint64(\\r\\n                (price * NEND(nend).timeSlicedCrossChainSupply()) / targetDebt\\r\\n            );\\r\\n\\r\\n            if (newControlVariable >= terms[_id].controlVariable) {\\r\\n                terms[_id].controlVariable = newControlVariable;\\r\\n            } else {\\r\\n                // if decrease, control variable change will be carried out over the tune interval\\r\\n                // this is because price will be lowered\\r\\n                uint256 change = terms[_id].controlVariable -\\r\\n                    newControlVariable;\\r\\n                adjustments[_id] = Adjustment(\\r\\n                    change,\\r\\n                    _time,\\r\\n                    meta.tuneInterval,\\r\\n                    true\\r\\n                );\\r\\n            }\\r\\n            metadata[_id].lastTune = _time;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ======== CREATE ======== */\\r\\n\\r\\n    function create(\\r\\n        IERC20 _quoteToken,\\r\\n        uint256 _capacity,\\r\\n        bool _capacityInQuote,\\r\\n        uint256 _initialPrice,\\r\\n        uint48 _conclusion,\\r\\n        uint32 _depositInterval,\\r\\n        uint32 _tuneInterval\\r\\n    ) external virtual override onlyRole(\\\"admin\\\") returns (uint256 id_) {\\r\\n        uint256 secondsToConclusion = _conclusion - block.timestamp;\\r\\n\\r\\n        // the decimal count of the quote token\\r\\n        uint256 decimals = ERC20(address(_quoteToken)).decimals();\\r\\n\\r\\n        /*\\r\\n         * initial target debt is equal to capacity (this is the amount of debt\\r\\n         * that will decay over in the length of the program if price remains the same).\\r\\n         * it is converted into base token terms if passed in in quote token terms.\\r\\n         *\\r\\n         * 1e27 = NEND decimals (18) + initial price decimals (9)\\r\\n         */\\r\\n        uint256 targetDebt = _capacityInQuote\\r\\n            ? ((_capacity * 1e27) / _initialPrice) / 10 ** decimals\\r\\n            : _capacity;\\r\\n\\r\\n        // depositing into, or getting info for, the created market uses this ID\\r\\n        id_ = markets.length;\\r\\n\\r\\n        markets.push(\\r\\n            Market({\\r\\n                quoteToken: _quoteToken,\\r\\n                capacityInQuote: _capacityInQuote,\\r\\n                capacity: _capacity,\\r\\n                totalDebt: targetDebt,\\r\\n                maxPayout: (targetDebt * _depositInterval) /\\r\\n                    secondsToConclusion,\\r\\n                purchased: 0,\\r\\n                sold: 0\\r\\n            })\\r\\n        );\\r\\n\\r\\n        terms.push(\\r\\n            Terms({\\r\\n                controlVariable: (_initialPrice *\\r\\n                    NEND(nend).timeSlicedCrossChainSupply()) / targetDebt,\\r\\n                conclusion: uint48(_conclusion),\\r\\n                maxDebt: targetDebt + ((targetDebt * 1000000) / 1e5)\\r\\n            })\\r\\n        );\\r\\n\\r\\n        metadata.push(\\r\\n            Metadata({\\r\\n                lastTune: uint48(block.timestamp),\\r\\n                lastDecay: uint48(block.timestamp),\\r\\n                length: uint48(secondsToConclusion),\\r\\n                depositInterval: _depositInterval,\\r\\n                tuneInterval: _tuneInterval,\\r\\n                quoteDecimals: uint8(decimals)\\r\\n            })\\r\\n        );\\r\\n\\r\\n        marketsForQuote[address(_quoteToken)].push(id_);\\r\\n\\r\\n        emit CreateMarket(\\r\\n            id_,\\r\\n            address(_quoteToken),\\r\\n            uint48(_conclusion),\\r\\n            _capacity,\\r\\n            _capacityInQuote\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             disable existing market\\r\\n     * @param _id          ID of market to close\\r\\n     */\\r\\n    function close(uint256 _id) external override onlyRole(\\\"admin\\\") {\\r\\n        terms[_id].conclusion = uint48(block.timestamp);\\r\\n        markets[_id].capacity = 0;\\r\\n        emit CloseMarket(_id);\\r\\n    }\\r\\n\\r\\n    /* ======== EXTERNAL VIEW ======== */\\r\\n\\r\\n    function getMarketData(\\r\\n        uint256 _id\\r\\n    ) external view virtual override returns (uint256, uint256, uint256) {\\r\\n        uint256 currentPrice = _marketPrice(_id);\\r\\n\\r\\n        return (\\r\\n            currentPrice,\\r\\n            markets[_id].capacity,\\r\\n            (markets[_id].maxPayout *\\r\\n                (10 ** metadata[_id].quoteDecimals) *\\r\\n                currentPrice) / 1e27\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* ======== INTERNAL VIEW ======== */\\r\\n\\r\\n    function _debtDecay(uint256 _id) internal view returns (uint64) {\\r\\n        Metadata memory meta = metadata[_id];\\r\\n\\r\\n        uint256 secondsSince = block.timestamp - meta.lastDecay;\\r\\n\\r\\n        return uint64((markets[_id].totalDebt * secondsSince) / meta.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                  calculate current market price of quote token in base token\\r\\n     * @dev                     see marketPrice() for explanation of price computation\\r\\n     * @dev                     uses info from storage because data has been updated before call (vs marketPrice())\\r\\n     * @param _id               market ID\\r\\n     * @return                  price for market in NEND decimals\\r\\n     */\\r\\n    function _marketPrice(uint256 _id) internal view virtual returns (uint256) {\\r\\n        return\\r\\n            (terms[_id].controlVariable * _debtRatio(_id)) /\\r\\n            (10 ** metadata[_id].quoteDecimals);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                  calculate debt factoring in decay\\r\\n     * @dev                     uses info from storage because data has been updated before call (vs debtRatio())\\r\\n     * @param _id               market ID\\r\\n     * @return                  current debt for market in quote decimals\\r\\n     */\\r\\n    function _debtRatio(uint256 _id) internal view virtual returns (uint256) {\\r\\n        return\\r\\n            (markets[_id].totalDebt * (10 ** metadata[_id].quoteDecimals)) /\\r\\n            NEND(nend).timeSlicedCrossChainSupply();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                  amount to decay control variable by\\r\\n     * @param _id               ID of market\\r\\n     * @return decay_           change in control variable\\r\\n     * @return secondsSince_    seconds since last change in control variable\\r\\n     * @return active_          whether or not change remains active\\r\\n     */\\r\\n    function _controlDecay(\\r\\n        uint256 _id\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256 decay_, uint48 secondsSince_, bool active_)\\r\\n    {\\r\\n        Adjustment memory info = adjustments[_id];\\r\\n        if (!info.active) return (0, 0, false);\\r\\n\\r\\n        secondsSince_ = uint48(block.timestamp) - info.lastAdjustment;\\r\\n\\r\\n        active_ = secondsSince_ < info.timeToAdjusted;\\r\\n        decay_ = active_\\r\\n            ? (info.change * secondsSince_) / info.timeToAdjusted\\r\\n            : info.change;\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\\r\\n}\\r\\n\",\"keccak256\":\"0x9546f73ace75fe86e624ee1ef270705f1443c7c8d7847f25dcfc8256db7dfcde\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/bonding/IBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IBondDepository {\\r\\n    event CreateMarket(\\r\\n        uint256 indexed id,\\r\\n        address indexed quoteToken,\\r\\n        uint48 conclusion,\\r\\n        uint256 capacity,\\r\\n        bool capacityInQuote\\r\\n    );\\r\\n    event CloseMarket(uint256 indexed id);\\r\\n\\r\\n    // Info about each type of market\\r\\n    struct Market {\\r\\n        uint256 capacity; // capacity remaining\\r\\n        IERC20 quoteToken; // token to accept as payment\\r\\n        bool capacityInQuote; // capacity limit is in payment token (true) or in OHM (false, default)\\r\\n        uint256 totalDebt; // total debt from market\\r\\n        uint256 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\\r\\n        uint256 sold; // base tokens out\\r\\n        uint256 purchased; // quote tokens in\\r\\n    }\\r\\n\\r\\n    // Info for creating new markets\\r\\n    struct Terms {\\r\\n        uint256 controlVariable; // scaling variable for price\\r\\n        uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\r\\n        uint256 maxDebt; // 9 decimal debt maximum in OHM\\r\\n    }\\r\\n\\r\\n    // Additional info about market.\\r\\n    struct Metadata {\\r\\n        uint48 lastTune; // last timestamp when control variable was tuned\\r\\n        uint48 lastDecay; // last timestamp when market was created and debt was decayed\\r\\n        uint48 length; // time from creation to conclusion. used as speed to decay debt.\\r\\n        uint48 depositInterval; // target frequency of deposits\\r\\n        uint48 tuneInterval; // frequency of tuning\\r\\n        uint8 quoteDecimals; // decimals of quote token\\r\\n    }\\r\\n\\r\\n    // Control variable adjustment data\\r\\n    struct Adjustment {\\r\\n        uint256 change;\\r\\n        uint48 lastAdjustment;\\r\\n        uint48 timeToAdjusted;\\r\\n        bool active;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice deposit market\\r\\n     * @param _bid uint256\\r\\n     * @param _amount uint256\\r\\n     * @param _maxPrice uint256\\r\\n     * @return payout_ uint256\\r\\n     * @return index_ uint256\\r\\n     */\\r\\n    function deposit(\\r\\n        uint256 _bid,\\r\\n        uint256 _amount,\\r\\n        uint256 _maxPrice\\r\\n    ) external returns (uint256 payout_, uint256 index_);\\r\\n\\r\\n    function create(\\r\\n        IERC20 _quoteToken,\\r\\n        uint256 _capacity,\\r\\n        bool _capacityInQuote,\\r\\n        uint256 _initialPrice,\\r\\n        uint48 _conclusion,\\r\\n        uint32 _depositInterval,\\r\\n        uint32 _tuneInterval\\r\\n    ) external returns (uint256 id_);\\r\\n\\r\\n    function close(uint256 _id) external;\\r\\n\\r\\n    function getMarketData(uint256 _id)\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0xca6f15bd592b5a1d8c799eca8c2957bee20630c5ccee8a11ed03730b60978f94\",\"license\":\"AGPL-3.0\"},\"contracts/bonding/INoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface INoteKeeper {\\r\\n    // Info for market note\\r\\n    struct Note {\\r\\n        uint256 payout; // Total NEND to be paid\\r\\n        uint256 payoutPerVesting; // Amount claimable every vesting\\r\\n        uint48 created; // time note was created\\r\\n        uint48 marketID; // market ID of deposit. uint48 to avoid adding a slot.\\r\\n        uint8 vestingCount; // Number of times vested\\r\\n    }\\r\\n\\r\\n    event NoteCreated(\\r\\n        address ownerAddress,\\r\\n        uint48 marketId,\\r\\n        uint256 noteId,\\r\\n        uint256 amount,\\r\\n        uint256 price,\\r\\n        uint256 payout,\\r\\n        uint256 payoutPerVesting,\\r\\n        uint48 created\\r\\n    );\\r\\n\\r\\n    event NotesRedeemed(\\r\\n        address ownerAddress,\\r\\n        uint256[] indexes,\\r\\n        uint8[] vestingCount,\\r\\n        uint256[] totalVested\\r\\n    );\\r\\n\\r\\n    function redeem(uint256[] memory _indexes) external returns (uint256);\\r\\n\\r\\n    function redeemAll(uint256 _marketId) external returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf336fa8e65c46a9367f77a4b9b8a072a7a96bcbfcea7fe902bc4d5597eb8115f\",\"license\":\"AGPL-3.0-only\"},\"contracts/bonding/NoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./INoteKeeper.sol\\\";\\r\\nimport \\\"../token/ERC20/NEND.sol\\\";\\r\\nimport \\\"../vault/Vault.sol\\\";\\r\\n\\r\\nabstract contract NoteKeeper is INoteKeeper, Testing {\\r\\n    mapping(address => Note[]) public notes; // user deposit data\\r\\n    address public insurancePool;\\r\\n    address public ecosystemPool;\\r\\n    address public nend;\\r\\n    uint8 public totalVestingCount;\\r\\n    uint16 public commissionRate;\\r\\n    uint48 public vestingInverval;\\r\\n    uint48 public testVestingInverval;\\r\\n\\r\\n    function __NoteKeeper_init(\\r\\n        address _nend,\\r\\n        address _insurancePool,\\r\\n        address _ecosystemPool\\r\\n    ) internal virtual onlyInitializing {\\r\\n        nend = _nend;\\r\\n        insurancePool = _insurancePool;\\r\\n        ecosystemPool = _ecosystemPool;\\r\\n        totalVestingCount = 5; // 5 times in 5 days\\r\\n        commissionRate = 30; // Commission in basis point\\r\\n        vestingInverval = 1 days;\\r\\n        testVestingInverval = 10 minutes;\\r\\n    }\\r\\n\\r\\n    // if treasury address changes on authority, update it\\r\\n    function updateNend(address _nend) external onlyOwner {\\r\\n        nend = _nend;\\r\\n    }\\r\\n\\r\\n    function updateInsurancePool(address _insurancePool) external onlyOwner {\\r\\n        insurancePool = _insurancePool;\\r\\n    }\\r\\n\\r\\n    function updateEcosystemPool(address _ecosystemPool) external onlyOwner {\\r\\n        ecosystemPool = _ecosystemPool;\\r\\n    }\\r\\n\\r\\n    function updateCommissionRate(uint16 _commissionRate) external onlyOwner {\\r\\n        require(\\r\\n            _commissionRate >= 0 && _commissionRate <= 10000,\\r\\n            \\\"Invalid basis point\\\"\\r\\n        );\\r\\n        commissionRate = _commissionRate;\\r\\n    }\\r\\n\\r\\n    /* ========== ADD ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice             adds a new Note for a user, stores the front end & DAO rewards, and mints & stakes payout & rewards\\r\\n     * @param _marketId    id of the market that created the note\\r\\n     * @param _amount      amount of quote token bonded\\r\\n     * @param _price       the bond price\\r\\n     * @param _user        the user that owns the Note\\r\\n     * @param _payout      the amount of NEND due to the user\\r\\n     * @return index_      the index of the Note in the user's array\\r\\n     */\\r\\n    function addNote(\\r\\n        uint48 _marketId,\\r\\n        uint256 _amount,\\r\\n        uint256 _price,\\r\\n        address _user,\\r\\n        uint256 _payout\\r\\n    ) internal virtual returns (uint256 index_) {\\r\\n        require(\\r\\n            IERC20(nend).balanceOf(ecosystemPool) >= _payout,\\r\\n            \\\"Insufficient treasury balance for payout\\\"\\r\\n        );\\r\\n\\r\\n        Vault(payable(ecosystemPool)).transferERC20(\\r\\n            nend,\\r\\n            address(this),\\r\\n            _payout\\r\\n        );\\r\\n\\r\\n        uint256 insuranceFund = (_payout * commissionRate) / 10000;\\r\\n        uint256 userPayout = _payout - insuranceFund;\\r\\n\\r\\n        index_ = notes[_user].length;\\r\\n\\r\\n        // the new note is pushed to the user's array\\r\\n        notes[_user].push(\\r\\n            Note({\\r\\n                payout: userPayout,\\r\\n                payoutPerVesting: userPayout / 5,\\r\\n                created: uint48(block.timestamp),\\r\\n                marketID: _marketId,\\r\\n                vestingCount: 0\\r\\n            })\\r\\n        );\\r\\n\\r\\n        IERC20(nend).transfer(insurancePool, insuranceFund);\\r\\n\\r\\n        emit NoteCreated(\\r\\n            msg.sender,\\r\\n            _marketId,\\r\\n            index_,\\r\\n            _amount,\\r\\n            _price,\\r\\n            userPayout,\\r\\n            userPayout / 5,\\r\\n            uint48(block.timestamp)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* ========== REDEEM ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice             redeem notes for user\\r\\n     * @param _indexes     the note indexes to redeem\\r\\n     * @return payout_     sum of payout sent, in NEND\\r\\n     */\\r\\n    function redeem(\\r\\n        uint256[] memory _indexes\\r\\n    ) public virtual override returns (uint256 payout_) {\\r\\n        require(_indexes.length > 0, \\\"Nothing to redeem\\\");\\r\\n\\r\\n        uint8[] memory vestingCount = new uint8[](_indexes.length);\\r\\n        uint256[] memory totalVested = new uint256[](_indexes.length);\\r\\n\\r\\n        for (uint256 i = 0; i < _indexes.length; i++) {\\r\\n            Note storage note = notes[msg.sender][_indexes[i]];\\r\\n            uint8 pendingVestingCount = getPendingVestingCount(\\r\\n                msg.sender,\\r\\n                _indexes[i]\\r\\n            );\\r\\n\\r\\n            require(pendingVestingCount > 0, \\\"No pending vesting\\\");\\r\\n\\r\\n            note.vestingCount += pendingVestingCount;\\r\\n            payout_ += note.payoutPerVesting * pendingVestingCount;\\r\\n\\r\\n            vestingCount[i] = note.vestingCount;\\r\\n            totalVested[i] = note.vestingCount * note.payoutPerVesting;\\r\\n        }\\r\\n\\r\\n        IERC20(nend).transfer(msg.sender, payout_);\\r\\n        emit NotesRedeemed(msg.sender, _indexes, vestingCount, totalVested);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             redeem all redeemable markets for user\\r\\n     * @dev                if possible, query indexesFor() off-chain and input in redeem() to save gas\\r\\n     * @return             sum of payout sent, in NEND\\r\\n     */\\r\\n    function redeemAll(\\r\\n        uint256 _marketId\\r\\n    ) external virtual override returns (uint256) {\\r\\n        return redeem(indexesFor(msg.sender, _marketId));\\r\\n    }\\r\\n\\r\\n    /* ========== VIEW ========== */\\r\\n\\r\\n    // Note info\\r\\n\\r\\n    /**\\r\\n     * @notice             all pending notes for user\\r\\n     * @param _user        the user to query notes for\\r\\n     * @param _marketId    the market to query notes for\\r\\n     * @return             the pending notes for the user\\r\\n     */\\r\\n    function indexesFor(\\r\\n        address _user,\\r\\n        uint256 _marketId\\r\\n    ) internal view virtual returns (uint256[] memory) {\\r\\n        Note[] memory info = notes[_user];\\r\\n\\r\\n        uint256 length;\\r\\n        for (uint256 i = 0; i < info.length; i++) {\\r\\n            if (\\r\\n                info[i].marketID == _marketId &&\\r\\n                getPendingVestingCount(_user, i) > 0\\r\\n            ) length++;\\r\\n        }\\r\\n\\r\\n        uint256[] memory indexes = new uint256[](length);\\r\\n        uint256 position;\\r\\n\\r\\n        for (uint256 i = 0; i < info.length; i++) {\\r\\n            if (\\r\\n                info[i].marketID == _marketId &&\\r\\n                getPendingVestingCount(_user, i) > 0\\r\\n            ) {\\r\\n                indexes[position] = i;\\r\\n                position++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return indexes;\\r\\n    }\\r\\n\\r\\n    function getPendingVestingCount(\\r\\n        address _owner,\\r\\n        uint256 _noteId\\r\\n    ) internal view virtual returns (uint8) {\\r\\n        Note memory note = notes[_owner][_noteId];\\r\\n\\r\\n        // Max vesting\\r\\n        if (note.vestingCount == totalVestingCount) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 secondsElapsed = block.timestamp - note.created;\\r\\n        uint256 invervalsElapsed = secondsElapsed /\\r\\n            (testing ? testVestingInverval : vestingInverval);\\r\\n\\r\\n        return\\r\\n            uint8(\\r\\n                invervalsElapsed > totalVestingCount\\r\\n                    ? totalVestingCount\\r\\n                    : invervalsElapsed\\r\\n            ) - note.vestingCount;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcc87603c0c647aece2269f90b4f1e7cf4dfbc110d0afb22989c2127b8db1126b\",\"license\":\"AGPL-3.0-only\"},\"contracts/bridge/NENDBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\nimport \\\"../helpers/SignatureHelper.sol\\\";\\r\\n\\r\\nabstract contract NENDBridge is ERC20Upgradeable, MWOwnable {\\r\\n    using SignatureHelper for bytes32;\\r\\n\\r\\n    event EnterBridge(\\r\\n        uint48 enteredAt,\\r\\n        uint256 targetChainId,\\r\\n        address sender,\\r\\n        address receiver,\\r\\n        uint256 amount,\\r\\n        uint256 nonce\\r\\n    );\\r\\n\\r\\n    event LeaveBridge(uint256 nonce, uint256 sourceChainId, uint48 leftAt);\\r\\n\\r\\n    modifier validDestinationChain(uint256 chainId) virtual {\\r\\n        require(\\r\\n            _isChainSupported(chainId) && block.chainid != chainId,\\r\\n            \\\"Invalid destination chain\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function __Bridge_init(\\r\\n        uint256[] memory _chains\\r\\n    ) internal virtual onlyInitializing {\\r\\n        supportedChainIds = _chains;\\r\\n\\r\\n        require(\\r\\n            _chains.length > 1,\\r\\n            \\\"Must have at least two destination chains\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _isChainSupported(block.chainid),\\r\\n            \\\"The hosted chain must be one of the supported chains\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => mapping(uint256 => bool))\\r\\n        private chainNonceToExecutedMapping;\\r\\n    uint256 private nonce;\\r\\n\\r\\n    uint256[] public supportedChainIds;\\r\\n\\r\\n    function enterBridge(\\r\\n        uint256 _targetChainId,\\r\\n        address _receiver,\\r\\n        uint256 _amount\\r\\n    ) external virtual validDestinationChain(_targetChainId) {\\r\\n        require(_amount > 0, \\\"Invalid amount\\\");\\r\\n        require(balanceOf(msg.sender) >= _amount, \\\"Insufficient balance\\\");\\r\\n\\r\\n        _burn(msg.sender, _amount);\\r\\n\\r\\n        emit EnterBridge(\\r\\n            uint48(block.timestamp),\\r\\n            _targetChainId,\\r\\n            msg.sender,\\r\\n            _receiver,\\r\\n            _amount,\\r\\n            nonce++\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function leaveBridge(\\r\\n        uint256 _sourceChainId,\\r\\n        address _receiver,\\r\\n        uint256 _amount,\\r\\n        uint256 _nonce,\\r\\n        bytes memory _signature\\r\\n    ) external virtual {\\r\\n        bytes32 messageHash = keccak256(\\r\\n            abi.encodePacked(_sourceChainId, _receiver, _amount, _nonce)\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            messageHash.recoverSigner(_signature) == owner(),\\r\\n            \\\"Invalid signature\\\"\\r\\n        );\\r\\n\\r\\n        // Duplicate request, already left bridge\\r\\n        if (chainNonceToExecutedMapping[_sourceChainId][_nonce]) {\\r\\n            return;\\r\\n        }\\r\\n        chainNonceToExecutedMapping[_sourceChainId][_nonce] = true;\\r\\n\\r\\n        _mint(_receiver, _amount);\\r\\n\\r\\n        emit LeaveBridge(_nonce, _sourceChainId, uint48(block.timestamp));\\r\\n    }\\r\\n\\r\\n    function _isChainSupported(\\r\\n        uint256 chainId\\r\\n    ) internal view virtual returns (bool) {\\r\\n        for (uint256 i = 0; i < supportedChainIds.length; i++) {\\r\\n            if (supportedChainIds[i] == chainId) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x58a2920b3cadb77f8634a24b9d1a5432d5528f8d1ee1df4c63cac6911c2345c1\",\"license\":\"UNLICENSED\"},\"contracts/helpers/SignatureHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SignatureHelper {\\r\\n    function recoverSigner(bytes32 messageHash, bytes memory signature)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address)\\r\\n    {\\r\\n        (bytes32 r, bytes32 s, uint8 v) = splitSig(signature);\\r\\n\\r\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\r\\n        bytes32 prefixedHashMessage = keccak256(\\r\\n            abi.encodePacked(prefix, messageHash)\\r\\n        );\\r\\n\\r\\n        return ecrecover(prefixedHashMessage, v, r, s);\\r\\n    }\\r\\n\\r\\n    function splitSig(bytes memory signature)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            bytes32 r,\\r\\n            bytes32 s,\\r\\n            uint8 v\\r\\n        )\\r\\n    {\\r\\n        assembly {\\r\\n            r := mload(add(signature, 32))\\r\\n            s := mload(add(signature, 64))\\r\\n            v := and(mload(add(signature, 65)), 255)\\r\\n        }\\r\\n        if (v < 27) v += 27;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2aad6f30ae6e31239a36a51948c87c8d2e08a4f437d5f6c1a1e0029fee947cd8\",\"license\":\"UNLICENSED\"},\"contracts/inflation/Inflation.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"../staking/interfaces/ILendingPoolStaking.sol\\\";\\r\\nimport \\\"../vault/Vault.sol\\\";\\r\\nimport \\\"../test/Testing.sol\\\";\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\nimport \\\"../helpers/SignatureHelper.sol\\\";\\r\\n\\r\\nabstract contract Inflation is ERC20Upgradeable, MWOwnable, Testing {\\r\\n    using SignatureHelper for bytes32;\\r\\n\\r\\n    uint48 public lastInflation;\\r\\n    ILendingPoolStaking public staking;\\r\\n\\r\\n    mapping(uint8 => bool) public isProcessed;\\r\\n\\r\\n    function setStaking(address _staking) external virtual onlyOwner {\\r\\n        staking = ILendingPoolStaking(_staking);\\r\\n    }\\r\\n\\r\\n    function reset() external virtual onlyOwner {\\r\\n        uint8 i = 0;\\r\\n        while (true) {\\r\\n            isProcessed[i] = false;\\r\\n            if (i == 255) {\\r\\n                break;\\r\\n            }\\r\\n            i++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function inflate(\\r\\n        uint8 _count,\\r\\n        uint256 _amount,\\r\\n        bytes memory _signature\\r\\n    ) external virtual onlyOwner {\\r\\n        require(address(staking) != address(0), \\\"Staking not set\\\");\\r\\n        if (isProcessed[_count]) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        isProcessed[_count] = true;\\r\\n\\r\\n        bytes32 messageHash = keccak256(abi.encodePacked(_count, _amount));\\r\\n\\r\\n        require(\\r\\n            messageHash.recoverSigner(_signature) == msg.sender,\\r\\n            \\\"Invalid signature\\\"\\r\\n        );\\r\\n\\r\\n        _mint(address(staking), _amount);\\r\\n\\r\\n        staking.distributeInflationRewards(_amount);\\r\\n\\r\\n        lastInflation = uint48(block.timestamp);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3852644b1971d43d383438351787c0954256f8e24352956ddd4af7384c99362b\",\"license\":\"UNLICENSED\"},\"contracts/staking/interfaces/ILendingPoolStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILendingPoolStaking {\\r\\n    error InsufficientBalance();\\r\\n    error InvalidArgument(string details);\\r\\n    error InvalidState();\\r\\n    error Unauthorized();\\r\\n\\r\\n    enum StakeStatus {\\r\\n        DEFAULT, // Not staked, only applicable to escrowed reward\\r\\n        STAKED, // Stake ongoing\\r\\n        FULFILLED // Stake ended gracefully\\r\\n    }\\r\\n\\r\\n    enum EscrowStatus {\\r\\n        DEFAULT, // Not issued\\r\\n        ISSUED,\\r\\n        CLAIMED\\r\\n    }\\r\\n\\r\\n    struct Stake {\\r\\n        // Staker address\\r\\n        address staker;\\r\\n        // Stake token address\\r\\n        address token;\\r\\n        // The time of deposit\\r\\n        uint48 start;\\r\\n        // The time of withdrawal\\r\\n        uint48 end;\\r\\n        // The amount staked by each stake duration\\r\\n        uint256[3] amountsPerDuration;\\r\\n        // The amount of stake token that will be rewarded upon finishing the stake duration\\r\\n        uint256 rewardAllocated;\\r\\n        // Stake is escrow\\r\\n        bool isEscrow;\\r\\n        // Status of eab\\r\\n        EscrowStatus escrowStatus;\\r\\n        // Status of stake\\r\\n        StakeStatus stakeStatus;\\r\\n    }\\r\\n\\r\\n    event Staked(\\r\\n        uint256 stakeId,\\r\\n        address staker,\\r\\n        address token,\\r\\n        uint48 start,\\r\\n        uint48 end,\\r\\n        uint256[3] amountsPerDuration,\\r\\n        bool isEscrow\\r\\n    );\\r\\n    event StakeStatusChanged(uint256 stakeId, StakeStatus status);\\r\\n    event EscrowStatusChanged(uint256 stakeId, EscrowStatus status);\\r\\n    event InflationRewardDistributed();\\r\\n    event NonInflationRewardDistributed();\\r\\n\\r\\n    function deposit(\\r\\n        address _stakeToken,\\r\\n        uint256 _amount,\\r\\n        uint8 _durationId\\r\\n    ) external payable;\\r\\n\\r\\n    function stakeEscrowedReward(uint256 _stakeId) external;\\r\\n\\r\\n    function distributeInflationRewards(uint256 _inflationReward) external;\\r\\n\\r\\n    function distributeNonInflationRewards() external;\\r\\n\\r\\n    function hasPendingNonInflationRewards() external view returns (bool);\\r\\n\\r\\n    function unstake(uint256 _stakeId) external;\\r\\n\\r\\n    function addStakeToken(address _stakeToken) external;\\r\\n\\r\\n    function removeStakeToken(address _stakeToken) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x4bec2a92147df12dffb6075f6fbcb47ecf6718bdb662e9f769e4e63fa6025619\",\"license\":\"UNLICENSED\"},\"contracts/test/Testing.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract Testing is MWOwnable {\\r\\n    bool public testing;\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() initializer {\\r\\n        testing = false;\\r\\n    }\\r\\n\\r\\n    function __Testing_init() public virtual onlyInitializing {\\r\\n        testing = false;\\r\\n    }\\r\\n\\r\\n    function setTesting(bool _testing) external onlyOwner {\\r\\n        testing = _testing;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7af4208c644f38b1419c726459752b81564e59acfcbd77840fc223293d19032a\",\"license\":\"Unlicense\"},\"contracts/token/ERC20/NEND.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../bridge/NENDBridge.sol\\\";\\r\\nimport \\\"./NENDCrossChainSupply.sol\\\";\\r\\nimport \\\"../../inflation/Inflation.sol\\\";\\r\\nimport \\\"../../access/SimpleRoleAccess.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\r\\n\\r\\ncontract NEND is\\r\\n    NENDBridge,\\r\\n    NENDCrossChainSupply,\\r\\n    SimpleRoleAccess,\\r\\n    ERC20BurnableUpgradeable,\\r\\n    UUPSUpgradeable\\r\\n{\\r\\n    bool public isMintChain;\\r\\n\\r\\n    function mint(\\r\\n        address _receiver,\\r\\n        uint256 _amount\\r\\n    ) external virtual onlyRole(\\\"minter\\\") {\\r\\n        _mint(_receiver, _amount);\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        bool _isMainChain,\\r\\n        uint256[] memory _chains\\r\\n    ) public virtual initializer {\\r\\n        isMintChain = _isMainChain;\\r\\n        if (isMintChain) {\\r\\n            _mint(address(this), 70000000 ether);\\r\\n        }\\r\\n\\r\\n        __ERC20_init(\\\"NEND\\\", \\\"NEND\\\");\\r\\n        __Bridge_init(_chains);\\r\\n        __MWOwnable_init();\\r\\n        __Testing_init();\\r\\n    }\\r\\n\\r\\n    function distribute(\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external virtual onlyOwner {\\r\\n        _transfer(address(this), _to, _amount);\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\\r\\n}\\r\\n\",\"keccak256\":\"0x89a76830c6455cba0305edd2d84f542e2de15ba3bfd8fe9575bb807057e19831\",\"license\":\"UNLICENSED\"},\"contracts/token/ERC20/NENDCrossChainSupply.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../../inflation/Inflation.sol\\\";\\r\\n\\r\\nabstract contract NENDCrossChainSupply is Inflation {\\r\\n    uint256 public crossChainSupply;\\r\\n    uint256 public crossChainInflationAmount;\\r\\n\\r\\n    function update(\\r\\n        uint256 _crossChainSupply,\\r\\n        uint256 _crossChainInflationAmount\\r\\n    ) external virtual onlyOwner {\\r\\n        crossChainSupply = _crossChainSupply;\\r\\n        crossChainInflationAmount = _crossChainInflationAmount;\\r\\n    }\\r\\n\\r\\n    function timeSlicedCrossChainSupply()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (lastInflation == 0) {\\r\\n            return crossChainSupply;\\r\\n        }\\r\\n\\r\\n        uint256 timeElapsed = block.timestamp - lastInflation;\\r\\n        uint256 elapsedPct = (timeElapsed * 10000) /\\r\\n            (testing ? 10 minutes : 1 weeks);\\r\\n        if (elapsedPct > 10000) {\\r\\n            elapsedPct = 10000;\\r\\n        }\\r\\n\\r\\n        return\\r\\n            crossChainSupply + (crossChainInflationAmount * elapsedPct) / 10000;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8965531218e39acfb01d7f9a4ca1cad3f3ef898a9f41674d411fa934f6660538\",\"license\":\"UNLICENSED\"},\"contracts/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"../helpers/SignatureHelper.sol\\\";\\r\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\n\\r\\ncontract Vault is SimpleRoleAccess, UUPSUpgradeable {\\r\\n    using SignatureHelper for bytes32;\\r\\n\\r\\n    event Claimed(bytes _hash);\\r\\n\\r\\n    bytes4 private ERC1155_INTERFACE_ID;\\r\\n    string public name;\\r\\n\\r\\n    mapping(bytes => bool) public claimed;\\r\\n    // Balance name => token => amount\\r\\n    mapping(string => mapping(address => uint256)) public namedBalances;\\r\\n\\r\\n    function initialize(string memory _name) public virtual initializer {\\r\\n        __Vault_init(_name);\\r\\n        __MWOwnable_init();\\r\\n    }\\r\\n\\r\\n    function __Vault_init(\\r\\n        string memory _name\\r\\n    ) internal virtual onlyInitializing {\\r\\n        name = _name;\\r\\n        ERC1155_INTERFACE_ID = 0xd9b67a26;\\r\\n    }\\r\\n\\r\\n    function approveERC20Transfer(\\r\\n        address _tokenAddress,\\r\\n        address _spender,\\r\\n        uint256 _amount\\r\\n    ) external virtual onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.approve(_spender, _amount);\\r\\n    }\\r\\n\\r\\n    function transferERC20(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external virtual onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.transfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function setERC721ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function transferERC721(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.transferFrom(address(this), _to, _tokenId);\\r\\n    }\\r\\n\\r\\n    function transferERC1155(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeTransferFrom(address(this), _to, _id, _value, _data);\\r\\n    }\\r\\n\\r\\n    function transferERC1155Batch(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeBatchTransferFrom(address(this), _to, _ids, _values, _data);\\r\\n    }\\r\\n\\r\\n    function setERC1155ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function getNativeBalance() external view virtual returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function transferNative(\\r\\n        address payable _to,\\r\\n        uint256 _amount\\r\\n    ) public payable virtual onlyRole(\\\"spender\\\") {\\r\\n        (bool sent, ) = _to.call{ value: _amount }(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n\\r\\n    function burn(\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) public virtual onlyRole(\\\"spender\\\") {\\r\\n        ERC20Burnable(_token).burn(_amount);\\r\\n    }\\r\\n\\r\\n    function namedBalanceReceive(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        namedBalances[_name][_token] += _amount;\\r\\n    }\\r\\n\\r\\n    function namedBalanceSpend(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external virtual onlyRole(\\\"spender\\\") {\\r\\n        require(\\r\\n            namedBalances[_name][_token] >= _amount,\\r\\n            \\\"Insufficient balance\\\"\\r\\n        );\\r\\n        namedBalances[_name][_token] -= _amount;\\r\\n    }\\r\\n\\r\\n    function getNamedBalance(\\r\\n        string memory _name,\\r\\n        address _token\\r\\n    ) external view virtual returns (uint256) {\\r\\n        uint256 balance = namedBalances[_name][_token];\\r\\n        uint256 actualBalance = _token == address(0)\\r\\n            ? payable(this).balance\\r\\n            : IERC20(_token).balanceOf(address(this));\\r\\n\\r\\n        return balance <= actualBalance ? balance : actualBalance;\\r\\n    }\\r\\n\\r\\n    function claim(\\r\\n        bytes[] memory _hashes,\\r\\n        bytes[] memory _signatures\\r\\n    ) external virtual {\\r\\n        require(\\r\\n            _hashes.length == _signatures.length,\\r\\n            \\\"Not matching hash and signature count\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < _hashes.length; i++) {\\r\\n            if (claimed[_hashes[i]]) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            (\\r\\n                address _recipientAddress,\\r\\n                address _tokenAddress,\\r\\n                uint256 _amount,\\r\\n                uint48 _timestamp\\r\\n            ) = abi.decode(_hashes[i], (address, address, uint256, uint48));\\r\\n\\r\\n            bytes32 _messageHash = keccak256(\\r\\n                abi.encodePacked(\\r\\n                    _recipientAddress,\\r\\n                    _tokenAddress,\\r\\n                    _amount,\\r\\n                    _timestamp\\r\\n                )\\r\\n            );\\r\\n\\r\\n            require(\\r\\n                _messageHash.recoverSigner(_signatures[i]) == owner(),\\r\\n                \\\"Invalid signature\\\"\\r\\n            );\\r\\n\\r\\n            require(_recipientAddress == msg.sender, \\\"Not recipient\\\");\\r\\n            require(block.timestamp >= _timestamp, \\\"Invalid timestamp\\\");\\r\\n            require(\\r\\n                IERC20(_tokenAddress).balanceOf(address(this)) >= _amount,\\r\\n                \\\"Insufficient pool balance\\\"\\r\\n            );\\r\\n\\r\\n            claimed[_hashes[i]] = true;\\r\\n            IERC20(_tokenAddress).transfer(msg.sender, _amount);\\r\\n            emit Claimed(_hashes[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n\\r\\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\\r\\n}\\r\\n\",\"keccak256\":\"0x08f1faf21b97709c47f65ae9f075a5658dfd07a2fdfed06f3197369389cff958\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523462000111576000546200003260ff8260081c16158092819362000102575b8115620000df575b5062000116565b8062000046600160ff196000541617600055565b620000c4575b620000566200020d565b62000091575b620000666200017a565b30608052604051613bfe90816200028782396080518181816108c301528181610c330152610cb20152f35b620000a261ff001960005416600055565b6040516001815260008051602062003e8583398151915290602090a16200005c565b620000d961010061ff00196000541617600055565b6200004c565b303b15915081620000f3575b50386200002b565b6001915060ff161438620000eb565b600160ff821610915062000023565b600080fd5b156200011e57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b600054620001a060ff8260081c16158092819362000102578115620000df575062000116565b80620001b4600160ff196000541617600055565b620001f2575b60ff1960325416603255620001cb57565b61ff00196000541660005560008051602062003e85833981519152602060405160018152a1565b6200020761010061ff00196000541617600055565b620001ba565b6000805462010000600160b01b03198116757e8ae5c72eca86946b695dcc211863d9721a09610000178255604051737e8ae5c72eca86946b695dcc211863d9721a09619260109290921c6001600160a01b0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a356fe60806040526004361015610013575b600080fd5b60003560e01c8062aeef8a146102e257806308ed8d16146102d95780630aebeb4e146102d0578063203732b4146102c7578063217fe6c6146102be578063231259d9146102b55780633659cfe6146102ac57806339d2525f146102a35780633eca1cf01461029a57806345fd86ac14610291578063498e324f146102885780634f1ef2861461027f57806352d1902d146102765780635ea1d6f81461026d5780636088d1091461026457806365b014b71461025b5780637136a7a614610252578063715018a6146102495780637cbd26ef146102405780637ecb084d14610237578063829522001461022e5780638d03b102146102255780638da5cb5b1461021c57806399d508c014610213578063ab2adc001461020a578063b1283e7714610201578063bc3b2b12146101f8578063bfacba3d146101ef578063c0680e20146101e6578063c0aa0e8a146101dd578063c0c53b8b146101d4578063d2438c2a146101cb578063e0b117ff146101c2578063e3684e39146101b9578063f2fde38b146101b05763f9afb26a146101a857600080fd5b61000e611874565b5061000e61176f565b5061000e6116d2565b5061000e611637565b5061000e611608565b5061000e611501565b5061000e61144f565b5061000e611381565b5061000e61124f565b5061000e6111f6565b5061000e61116c565b5061000e6110e4565b5061000e6110bf565b5061000e611094565b5061000e611070565b5061000e611048565b5061000e611021565b5061000e610ff9565b5061000e610f93565b5061000e610e57565b5061000e610e2c565b5061000e610d94565b5061000e610d6e565b5061000e610c96565b5061000e610bd6565b5061000e610b8f565b5061000e610b65565b5061000e610ae9565b5061000e610a38565b5061000e610899565b5061000e610852565b5061000e6107c3565b5061000e61059e565b5061000e610509565b5061000e6104cc565b503461000e57606036600319011261000e5760043560243561030382611123565b509161030e816113dc565b5061031890612056565b9265ffffffffffff93818386421692602081015161033b9065ffffffffffff1690565b65ffffffffffff16841061034e906120a5565b61035884836123fc565b610361826130e9565b61036f6044358211156120f1565b8061037989612154565b90610383916121ac565b61038c84611316565b505460f01c60ff1661039d906121cc565b6103a6916121ac565b9760038501548911156103b8906121eb565b80600186019a8a8c546103cf9060ff9060a01c1690565b6000149661045d956104499461043b9460409a6104b9576103f2825b8d54612237565b8c5560058c0161040383825461224e565b9055610431600267ffffffffffffffff87169d8e6104266004830191825461224e565b9055019c8d5461224e565b8c553393166133d2565b9a546001600160a01b031690565b6035546001600160a01b0316903390612266565b0151905411156104a95750600090557f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe56000604051a25b604080519182526020820192909252f35b0390f35b90506104b49161278e565b610494565b6103f2856103eb565b8015150361000e57565b503461000e57602036600319011261000e576004356104ea816104c2565b6104f2611e49565b60ff80196032541691151516176032556000604051f35b503461000e57602036600319011261000e57610545610526612a2a565b6001600160a01b0360005460101c163314908115610552575b50612a4b565b61055060043561308a565b005b60ff9150602061057c9133600052603882526040600020826040519483868095519384920161078e565b82019081520301902054163861053f565b6001600160a01b0381160361000e57565b503461000e57602036600319011261000e576001600160a01b036004356105c48161058d565b6105cc611e49565b166001600160a01b031960355416176035556000604051f35b50634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761061857604052565b6106206105e5565b604052565b6020810190811067ffffffffffffffff82111761061857604052565b6040810190811067ffffffffffffffff82111761061857604052565b90601f8019910116810190811067ffffffffffffffff82111761061857604052565b604051906080820182811067ffffffffffffffff82111761061857604052565b6040519060e0820182811067ffffffffffffffff82111761061857604052565b604051906106cc826105fc565b565b6040519060c0820182811067ffffffffffffffff82111761061857604052565b6040519060a0820182811067ffffffffffffffff82111761061857604052565b60209067ffffffffffffffff811161072c575b601f01601f19160190565b6107346105e5565b610721565b9291926107458261070e565b91610753604051938461065d565b82948184528183011161000e578281602093846000960137010152565b9080601f8301121561000e5781602061078b93359101610739565b90565b918091926000905b8282106107ae5750116107a7575050565b6000910152565b91508060209183015181860152018291610796565b503461000e57604036600319011261000e576004356107e18161058d565b60243567ffffffffffffffff811161000e5761083560206104a5936001600160a01b0361081460ff953690600401610770565b9116600052603882526040600020826040519483868095519384920161078e565b820190815203019020546040519116151581529081906020820190565b503461000e57602036600319011261000e576001600160a01b036004356108788161058d565b610880611e49565b166001600160a01b031960365416176036556000604051f35b503461000e57602036600319011261000e576004356108b78161058d565b6001600160a01b0390817f000000000000000000000000000000000000000000000000000000000000000016916108f0833014156118ff565b61091f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc938285541614611960565b610927611e49565b6040519061093482610625565b600082527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561096e5750506105509150611b53565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181610a08575b506109f55760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b61055093610a0391146119dd565b611bf1565b610a2a91925060203d8111610a31575b610a22818361065d565b8101906119c1565b9038610994565b503d610a18565b503461000e57606036600319011261000e57600435610a568161058d565b6024359067ffffffffffffffff821161000e57610abc6020610a7f610550943690600401610770565b6001600160a01b0360443594610a94866104c2565b610a9c611e49565b16600052603882526040600020826040519483868095519384920161078e565b8201908152030190209060ff801983541691151516179055565b60c4359063ffffffff8216820361000e57565b503461000e5760e036600319011261000e57600435610b078161058d565b60443590610b14826104c2565b6084359165ffffffffffff8316830361000e5760a43563ffffffff8116810361000e576104a593610b5593610b47610ad6565b936064359160243590612a97565b6040519081529081906020820190565b503461000e57600036600319011261000e57602065ffffffffffff60365460b81c16604051908152f35b503461000e57602036600319011261000e576001600160a01b03600435610bb58161058d565b610bbd611e49565b166001600160a01b031960345416176034556000604051f35b50604036600319011261000e57600435610bef8161058d565b6024359067ffffffffffffffff821161000e573660238301121561000e57610c24610550923690602481600401359101610739565b90610c896001600160a01b03807f00000000000000000000000000000000000000000000000000000000000000001690610c60823014156118ff565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc541614611960565b610c91611e49565b611a3b565b503461000e57600036600319011261000e576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d03576040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152602090f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b503461000e57600036600319011261000e57602061ffff60365460a81c16604051908152f35b503461000e57602036600319011261000e5760043561ffff811680820361000e5761271090610dc1611e49565b11610de7576036805461ffff60a81b191660a89290921b61ffff60a81b16919091179055005b60405162461bcd60e51b815260206004820152601360248201527f496e76616c696420626173697320706f696e74000000000000000000000000006044820152606490fd5b503461000e57600036600319011261000e57610e4f60ff60005460081c16611de9565b610550611ea4565b503461000e57602036600319011261000e57600435610e91610e8c336001600160a01b03166000526033602052604060002090565b613a72565b6000805b8251811015610f08578365ffffffffffff610ec36060610eb58588613724565b51015165ffffffffffff1690565b161480610ef3575b610ede575b610ed990613714565b610e95565b90610eeb610ed991613714565b919050610ed0565b5060ff610f008233613ada565b161515610ecb565b50610f12906136e2565b6000805b8351811015610f87578465ffffffffffff610f366060610eb58589613724565b161480610f72575b610f51575b610f4c90613714565b610f16565b90610f6a8183610f64610f4c9487613724565b52613714565b919050610f43565b5060ff610f7f8233613ada565b161515610f3e565b6104a5610b558461384e565b503461000e57600080600319360112610ff657610fae611e49565b805462010000600160b01b031981168255816001600160a01b036040519260101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e5760206001600160a01b0360355416604051908152f35b503461000e57600036600319011261000e57602065ffffffffffff60375416604051908152f35b503461000e57600036600319011261000e5760206001600160a01b0360365416604051908152f35b503461000e57600036600319011261000e57602060ff603254166040519015158152f35b503461000e57600036600319011261000e5760206001600160a01b0360005460101c16604051908152f35b503461000e57600036600319011261000e57602060ff60365460a01c16604051908152f35b503461000e57600036600319011261000e5760206001600160a01b0360345416604051908152f35b50634e487b7160e01b600052603260045260246000fd5b600690609d5481101561115f575b609d600052027fd26e832454299e9fabb89e0e5fffdc046d4e14431bc1bf607ffb2e8a1ddecf7b0190600090565b61116761110c565b611131565b503461000e57602036600319011261000e57600435609d5481101561000e5761119490611123565b5080546001820154600283015460038401546004850154600590950154604080519586526001600160a01b038516602087015260ff60a095861c16151590860152606085019290925260808401529082019290925260c081019190915260e090f35b503461000e57602036600319011261000e5760043560005260a06020526080604060002060ff6001825492015460405192835265ffffffffffff80821660208501528160301c16604084015260601c1615156060820152f35b503461000e57602036600319011261000e5760043561126d816130e9565b6104a56b033b2e3c9fd0803ce80000006112eb836112e661128d87611123565b5054966112e060ff60036112a084611123565b50015492609f54811015611309575b609f6000527f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de28015460f01c166121cc565b90612199565b612199565b04604051938493846040919493926060820195825260208201520152565b61131161110c565b6112af565b609f5481101561134e575b609f6000527f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de280190600090565b61135661110c565b611321565b8054821015611374575b60005260206000200190600090565b61137c61110c565b611365565b503461000e57604036600319011261000e5760043561139f8161058d565b6001600160a01b03602435911660005260a16020526040600020805482101561000e576020916113ce9161135b565b90546040519160031b1c8152f35b600390609e54811015611418575b609e600052027fcfe2a20ff701a1f3e14f63bd70d6c6bc6fba8172ec6d5a505cdab3927c0a9de60190600090565b61142061110c565b6113ea565b8054821015611442575b6000526003602060002091020190600090565b61144a61110c565b61142f565b503461000e57602036600319011261000e57600435609e5481101561000e576003606091609e60005202807fcfe2a20ff701a1f3e14f63bd70d6c6bc6fba8172ec6d5a505cdab3927c0a9de60154907fcfe2a20ff701a1f3e14f63bd70d6c6bc6fba8172ec6d5a505cdab3927c0a9de865ffffffffffff7fcfe2a20ff701a1f3e14f63bd70d6c6bc6fba8172ec6d5a505cdab3927c0a9de7830154169101549060405192835260208301526040820152f35b503461000e57606036600319011261000e5760043561151f8161058d565b61157c60243561152e8161058d565b6044359061153b8261058d565b6000549361156060ff8660081c1615809681976115fa575b81156115da575b50611f19565b84611573600160ff196000541617600055565b6115c157611f8b565b61158257005b61159261ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b6115d561010061ff00196000541617600055565b611f8b565b303b159150816115ec575b503861155a565b6001915060ff1614386115e5565b600160ff8216109150611553565b503461000e57600036600319011261000e5761162b60ff60005460081c16611de9565b6032805460ff19169055005b503461000e57604036600319011261000e576004356116558161058d565b6001600160a01b0360243591166000526033602052604060002090815481101561000e5761168291611425565b508054600182015460029092015460408051928352602083019390935265ffffffffffff80821693830193909352603081901c9092166060808301919091529190911c60ff16608082015260a090f35b503461000e57602036600319011261000e57600435609f5481101561000e57609f6000527f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de2801546040805165ffffffffffff8084168252603084901c81166020830152606084811c821693830193909352609084901c81169282019290925260c083811c909216608082015260f09290921c60ff1660a083015290f35b503461000e57602036600319011261000e5760043561178d8161058d565b611795611e49565b6001600160a01b039081811680156117f95760009262010000600160b01b0384549360101b1662010000600160b01b031984161784556040519260101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b60209067ffffffffffffffff8111611867575b60051b0190565b61186f6105e5565b611860565b503461000e5760208060031936011261000e5760043567ffffffffffffffff811161000e573660238201121561000e578060040135906118b38261184d565b916118c1604051938461065d565b80835260248484019160051b8301019136831161000e57602401905b8282106118f0576104a5610b558561384e565b813581529084019084016118dd565b1561190657565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561196757565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b9081602091031261000e575190565b506040513d6000823e3d90fd5b156119e457565b60405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b90611a677f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1690565b15611a7657506106cc90611b53565b6040516352d1902d60e01b8152916020836004816001600160a01b0385165afa60009381611b33575b50611b005760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b611b2e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6106cc94146119dd565b611d09565b611b4c91945060203d8111610a3157610a22818361065d565b9238611a9f565b803b15611b96576001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91166001600160a01b0319825416179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b611bfa81611b53565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a2825115801590611d01575b611c4057505050565b813b15611cb0575060008281926020611cad95519201905af4611c61611d5f565b60405191611c6e836105fc565b602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020840152660819985a5b195960ca1b6040840152611d8f565b50565b62461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b506000611c37565b611d1281611b53565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a2825115801590611d5757611c4057505050565b506001611c37565b3d15611d8a573d90611d708261070e565b91611d7e604051938461065d565b82523d6000602084013e565b606090565b90919015611d9b575090565b815115611dab5750805190602001fd5b6044604051809262461bcd60e51b825260206004830152611ddb815180928160248601526020868601910161078e565b601f01601f19168101030190fd5b15611df057565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6001600160a01b0360005460101c163303611e6057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b737e8ae5c72eca86946b695dcc211863d9721a09616001600160a01b03600054757e8ae5c72eca86946b695dcc211863d9721a0961000062010000600160b01b031982161760005560101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b15611f2057565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608490fd5b917fffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffff6120319360ff60005460081c1693611fc485611de9565b603654906001600160a01b038095816001600160a01b031993168360345416176034551690603554161760355563a8c0000f60a91b93600560a01b9216906affffffffffffffffffffff60a81b161717161760365561025865ffffffffffff196037541617603755611de9565b612039611ea4565b61204a60ff60005460081c16611de9565b60ff1960325416603255565b906040516060810181811067ffffffffffffffff821117612098575b6040526040600282948054845265ffffffffffff60018201541660208501520154910152565b6120a06105e5565b612072565b156120ac57565b60405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c75646564000000006044820152606490fd5b156120f857565b60405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d6178207072696365006044820152606490fd5b50634e487b7160e01b600052601160045260246000fd5b6b033b2e3c9fd0803ce8000000908060001904821181151516612175570290565b61217d61213d565b0290565b620f4240908060001904821181151516612175570290565b8060001904821181151516612175570290565b81156121b6570490565b634e487b7160e01b600052601260045260246000fd5b60ff16604d81116121de575b600a0a90565b6121e661213d565b6121d8565b156121f257565b60405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a652065786365656465640000006044820152606490fd5b818110612242570390565b61224a61213d565b0390565b8119811161225a570190565b61226261213d565b0190565b6040516323b872dd60e01b60208083019182526001600160a01b0394851660248401529484166044830152606480830196909652948152929391906122ac60848561065d565b1690604051926122bb84610641565b8484527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656485850152823b1561232c57612307939260009283809351925af1612301611d5f565b90611d8f565b8051908161231457505050565b826106cc93612327938301019101612371565b612386565b60405162461bcd60e51b815260048101869052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9081602091031261000e575161078b816104c2565b1561238d57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b65ffffffffffff9182169116818110612242570390565b90609f548210156125d3575b609f60005261248a61247d61247d612441857f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de28016125e0565b65ffffffffffff6040612473826020850151168042106125c6575b60026124678b611123565b50914203910154612199565b92015116906121ac565b67ffffffffffffffff1690565b6124a2600261249885611123565b5001918254612237565b90556124d6816124b184611316565b509065ffffffffffff60301b82549160301b169065ffffffffffff60301b1916179055565b6124fa60016124ef8460005260a0602052604060002090565b015460601c60ff1690565b612502575050565b6125168260005260a0602052604060002090565b9161252c612523826131ec565b919290936113dc565b50612538838254612237565b9055156125b35761257360018561255661259a946106cc9854612237565b8155019261256e845465ffffffffffff9060301c1690565b6123e5565b82546bffffffffffff000000000000191660309190911b65ffffffffffff60301b16178255565b9065ffffffffffff1665ffffffffffff19825416179055565b505050600101805460ff60601b19169055565b6125ce61213d565b61245c565b6125db61110c565b612408565b9060405160c0810181811067ffffffffffffffff821117612646575b60405260a060ff82945465ffffffffffff8082168552808260301c166020860152808260601c166040860152808260901c1660608601528160c01c16608085015260f01c16910152565b61264e6105e5565b6125fc565b9065ffffffffffff808093169116809203811161225a570190565b9060405160e0810181811067ffffffffffffffff8211176126e4575b60405260c060058294805484526126bf60ff60018301546001600160a01b038116602088015260a01c16604086019015159052565b6002810154606085015260038101546080850152600481015460a08501520154910152565b6126ec6105e5565b61268a565b50634e487b7160e01b600052600060045260246000fd5b6060600161278a9284518155019261276f65ffffffffffff61274481602085015116879065ffffffffffff1665ffffffffffff19825416179055565b604083015186546bffffffffffff0000000000001916911660301b65ffffffffffff60301b16178555565b0151825460ff60601b191690151560601b60ff60601b161790565b9055565b906127a161279b83611316565b506125e0565b805165ffffffffffff16926127d86127cd60808401956127c7875165ffffffffffff1690565b90612653565b65ffffffffffff1690565b65ffffffffffff841610156127ee575b50505050565b6129759361292c61247d8561287460046128db61295b98612874896112e06127cd60406128466127cd61282961282387611123565b5061266e565b9b61256e6001612838896113dc565b50015465ffffffffffff1690565b95612850856130e9565b9a8b61285e84830151151590565b15612a2257612879906128746128959351612154565b6121ac565b61288f61288a60a085015160ff1690565b6121cc565b906121ac565b945b60036128cb6128c561247d61247d8c6128746128bf6127cd60608b015165ffffffffffff1690565b8d612199565b92611123565b500155015165ffffffffffff1690565b9260206129026128f66128f66036546001600160a01b031690565b6001600160a01b031690565b604051633fdaeac760e11b815293849182905afa918215612a15575b6000926129f5575b50612199565b9067ffffffffffffffff61293f846113dc565b5054921691821061297e5750612954826113dc565b5055611316565b509065ffffffffffff1665ffffffffffff19825416179055565b388080806127e8565b6129d06129a861299b6129f094612994876113dc565b5054612237565b925165ffffffffffff1690565b6129b061067f565b92835265ffffffffffff8716602084015265ffffffffffff166040830152565b600160608201526129eb8360005260a0602052604060002090565b612708565b611316565b612a0e91925060203d8111610a3157610a22818361065d565b9038612926565b612a1d6119d0565b61291e565b505194612897565b60405190612a3782610641565b600582526430b236b4b760d91b6020830152565b15612a5257565b60405162461bcd60e51b815260206004820152600e60248201527f4e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606490fd5b9094929394612aa4612a2a565b92612ac86001600160a01b03948560005460101c1633149081156105525750612a4b565b612ada4265ffffffffffff8916612237565b916040519663313ce56760e01b88526020886004818989165afa978815612d92575b600098612d61575b508215612d595788612b28612b1c8361287486612154565b61288f60ff8c16612db8565b915b609d549b8c9a87612b4163ffffffff8d1687612199565b90612b4b916121ac565b612b5361069f565b8781526001600160a01b038b166020820152908815156040830152866060830152608082015260a081016000905260c0810160009052612b9290612dc6565b603654604051633fdaeac760e11b8152928691849081906001600160a01b03165a92600491602094fa90811563ffffffff7f3f414051967f5a5e84f3af856364502239c9052e98e136c6ed4ed90bc5f5b0ba9f612ca965ffffffffffff612d2c9f612c70612cd99e60209e612c66612cd49f60ff9f612cc99e6128748c9f612c4b94612cb99f94612c2f95612d4c575b600092612d325750612199565b93612c45612c3c82612181565b620186a0900490565b9061224e565b91612c546106bf565b93845265ffffffffffff166020840152565b6040820152612e82565b612c99824216612c7e6106ce565b65ffffffffffff821681529e8f019065ffffffffffff169052565b1665ffffffffffff1660408c0152565b1665ffffffffffff166060890152565b1665ffffffffffff166080860152565b1660ff1660a0830152565b612eff565b612d0187612cfc8787166001600160a01b031660005260a1602052604060002090565b613045565b6040519485941697849192604091949365ffffffffffff606085019616845260208401521515910152565b0390a390565b6020612a0e9293503d602011610a3157610a22818361065d565b612d546119d0565b612c22565b888291612b2a565b612d8491985060203d602011612d8b575b612d7c818361065d565b810190612d9f565b9638612b04565b503d612d72565b612d9a6119d0565b612afc565b9081602091031261000e575160ff8116810361000e5790565b604d81116121de57600a0a90565b600560c0612de9609d54600160401b811015612e75575b60018101609d55611123565b939093612e68575b8051845560018401612e266001600160a01b0360208401511682906001600160a01b03166001600160a01b0319825416179055565b6040820151815460ff60a01b191690151560a01b60ff60a01b16179055606081015160028501556080810151600385015560a081015160048501550151910155565b612e706126f1565b612df1565b612e7d6105e5565b612ddd565b60026040612ea5609e54600160401b811015612ef2575b60018101609e556113dc565b939093612ee5575b80518455612ede65ffffffffffff602083015116600186019065ffffffffffff1665ffffffffffff19825416179055565b0151910155565b612eed6126f1565b612ead565b612efa6105e5565b612e99565b6106cc9061301160a0612f27609f54600160401b811015613038575b60018101609f55611316565b93909361302b575b805184546020830151604084015160608086015191901b71ffffffffffff0000000000000000000000001660309290921b65ffffffffffff60301b1665ffffffffffff9485167fffffffffffffffff00000000000000000000000000000000000000000000000090941693909317929092171760909190911b77ffffffffffff000000000000000000000000000000000000161785556080820151613009911685547fffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff1660c09190911b65ffffffffffff60c01b16178555565b015160ff1690565b815460ff60f01b191660f09190911b60ff60f01b16179055565b6130336126f1565b612f2f565b6130406105e5565b612f1b565b805461306391600160401b82101561307d575b60018201815561135b565b819291549060031b600019811b9283911b16911916179055565b6130856105e5565b613058565b6130b3613096826113dc565b50600101805465ffffffffffff19164265ffffffffffff16179055565b60006130be82611123565b50557f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe56000604051a2565b61078b9061288f61288a6131a76131a1613102856113dc565b50546112e0600461315d60026131178a611123565b500154609f548a10156131df575b609f6000527f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de288a01546112e09060f01c60ff166121cc565b60206131776128f66128f66036546001600160a01b031690565b604051633fdaeac760e11b815293849182905afa9182156131d2575b6000926131b2575b506121ac565b93611316565b505460f01c60ff1690565b6131cb91925060203d8111610a3157610a22818361065d565b903861319b565b6131da6119d0565b613193565b6131e761110c565b613125565b600090815260a060205260408120906001604051926080840184811067ffffffffffffffff8211176132a9575b6040528054845201549165ffffffffffff9283811680602084015260ff6040840192868160301c16845260601c16158015606085015261329e5761325f908542166123e5565b936132736127cd835165ffffffffffff1690565b90851690811093508315613298576127cd61299b61288f926132959551612199565b92565b50505192565b505050809150918190565b6132b16105e5565b613219565b156132bd57565b60405162461bcd60e51b815260206004820152602860248201527f496e73756666696369656e742074726561737572792062616c616e636520666f6044820152671c881c185e5bdd5d60c21b6064820152608490fd5b60ff6080600261333b61278a94805490600160401b8210156133c5575b600182018155611425565b6133b8575b855181556020860151600182015560408601519101805465ffffffffffff191665ffffffffffff928316178155949061339e90606083015187546bffffffffffff0000000000001916911660301b65ffffffffffff60301b16178655565b0151835460ff60601b1916911660601b60ff60601b161790565b6133c06126f1565b613340565b6133cd6105e5565b613330565b909493929160009061348a6133ef6036546001600160a01b031690565b866134026035546001600160a01b031690565b6040516370a0823160e01b81526001600160a01b03828116600483015260209788959290919061344f90869088816024818988165afa908115613689575b859161366c575b5010156132b6565b60405163276d76f960e21b81526001600160a01b03909316600484015230602484015260448301949094529094859384929183906064820190565b0393165af1801561365f575b613642575b5060365460a81c61ffff1661ffff166134b49086612199565b612710900494856134c491612237565b966134e2856001600160a01b03166000526033602052604060002090565b549761350289966001600160a01b03166000526033602052604060002090565b9260058204924265ffffffffffff169461351a6106ee565b84815287810186905265ffffffffffff8716604082015265ffffffffffff891660608201526000608082015261354f91613313565b60365460345460405163a9059cbb60e01b81526001600160a01b039182166004820152602481019b909b5287918b916044918391165a90600091f17f129794f6f9aa0adfa6dda6ca7d08d05812fea954f80008e5cf68ae7b9fa898b49961360297918015613635575b613607575b50506040805133815265ffffffffffff9889166020820152908101989098526060880152608087015260a086015260c085015290911660e08301528190610100820190565b0390a1565b8161362692903d1061362e575b61361e818361065d565b810190612371565b5038806135bd565b503d613614565b61363d6119d0565b6135b8565b61365890833d851161362e5761361e818361065d565b503861349b565b6136676119d0565b613496565b6136839150893d8b11610a3157610a22818361065d565b38613447565b6136916119d0565b613440565b1561369d57565b60405162461bcd60e51b815260206004820152601160248201527f4e6f7468696e6720746f2072656465656d0000000000000000000000000000006044820152606490fd5b906136ec8261184d565b6136f9604051918261065d565b828152809261370a601f199161184d565b0190602036910137565b600190600019811461225a570190565b6020918151811015613739575b60051b010190565b61374161110c565b613731565b1561374d57565b60405162461bcd60e51b815260206004820152601260248201527f4e6f2070656e64696e672076657374696e6700000000000000000000000000006044820152606490fd5b60ff8091169116908160ff03811161225a570190565b90815180825260208080930193019160005b8281106137c8575050505090565b8351855293810193928101926001016137ba565b906001600160a01b03909594929516815261380360209560808784015260808301906137a8565b818103604083015285808551928381520194019060005b8181106138375750505061078b93945060608184039101526137a8565b825160ff168652948701949187019160010161381a565b9060009161385e81511515613696565b61386881516136e2565b9061387381516136e2565b9160005b8251811015613954573360009081526033602052604090206138998285613724565b516138a391611425565b506138ae8285613724565b516138b99033613ada565b9660ff90818916928315156138cd90613746565b600281018054909a9060601c60ff16906138e691613792565b8a5460ff60601b191660609190911b60ff60601b16178a55600101549261390d9084612199565b6139169161224e565b975460601c60ff16806139298587613724565b60ff9091169052169061393b91612199565b6139458286613724565b5261394f90613714565b613877565b50906136027f5a21b90378728eb82fe7be28a8f4a46d422e5c1f08ac7521b84ef5c190b0cc8693600060206139c361399a6128f66128f66036546001600160a01b031690565b60405163a9059cbb60e01b8152336004820152602481018c905293849283919082906044820190565b03925af180156139ff575b6139e1575b5060405193849333856137dc565b6139f89060203d811161362e5761361e818361065d565b50386139d3565b613a076119d0565b6139ce565b9060405160a0810181811067ffffffffffffffff821117613a65575b604052608060ff600283958054855260018101546020860152015465ffffffffffff80821660408601528160301c16606085015260601c16910152565b613a6d6105e5565b613a28565b908154613a7e8161184d565b92613a8c604051948561065d565b818452600090815260208082208186015b848410613aab575050505050565b600383600192613aba85613a0c565b815201920193019290613a9d565b60ff9182169116818110612242570390565b613b0560ff92613b00613b0b936001600160a01b03166000526033602052604060002090565b611425565b50613a0c565b6080810190613b1b825160ff1690565b60365490848260a01c169485911614613bbf5761078b93613b8c613b9e92613b5a613b546127cd604060ff98015165ffffffffffff1690565b42612237565b90613b6760325460ff1690565b15613bad575065ffffffffffff613b8560375465ffffffffffff1690565b16906121ac565b81811115613ba55750925b5160ff1690565b9116613ac8565b905092613b97565b65ffffffffffff809160b81c16613b85565b5050505060009056fea2646970667358221220de3c2e5e376aa5f999116cb7b132ca356d9f178801b0bc21825ba58c33deb22d64736f6c634300080e00337f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c8062aeef8a146102e257806308ed8d16146102d95780630aebeb4e146102d0578063203732b4146102c7578063217fe6c6146102be578063231259d9146102b55780633659cfe6146102ac57806339d2525f146102a35780633eca1cf01461029a57806345fd86ac14610291578063498e324f146102885780634f1ef2861461027f57806352d1902d146102765780635ea1d6f81461026d5780636088d1091461026457806365b014b71461025b5780637136a7a614610252578063715018a6146102495780637cbd26ef146102405780637ecb084d14610237578063829522001461022e5780638d03b102146102255780638da5cb5b1461021c57806399d508c014610213578063ab2adc001461020a578063b1283e7714610201578063bc3b2b12146101f8578063bfacba3d146101ef578063c0680e20146101e6578063c0aa0e8a146101dd578063c0c53b8b146101d4578063d2438c2a146101cb578063e0b117ff146101c2578063e3684e39146101b9578063f2fde38b146101b05763f9afb26a146101a857600080fd5b61000e611874565b5061000e61176f565b5061000e6116d2565b5061000e611637565b5061000e611608565b5061000e611501565b5061000e61144f565b5061000e611381565b5061000e61124f565b5061000e6111f6565b5061000e61116c565b5061000e6110e4565b5061000e6110bf565b5061000e611094565b5061000e611070565b5061000e611048565b5061000e611021565b5061000e610ff9565b5061000e610f93565b5061000e610e57565b5061000e610e2c565b5061000e610d94565b5061000e610d6e565b5061000e610c96565b5061000e610bd6565b5061000e610b8f565b5061000e610b65565b5061000e610ae9565b5061000e610a38565b5061000e610899565b5061000e610852565b5061000e6107c3565b5061000e61059e565b5061000e610509565b5061000e6104cc565b503461000e57606036600319011261000e5760043560243561030382611123565b509161030e816113dc565b5061031890612056565b9265ffffffffffff93818386421692602081015161033b9065ffffffffffff1690565b65ffffffffffff16841061034e906120a5565b61035884836123fc565b610361826130e9565b61036f6044358211156120f1565b8061037989612154565b90610383916121ac565b61038c84611316565b505460f01c60ff1661039d906121cc565b6103a6916121ac565b9760038501548911156103b8906121eb565b80600186019a8a8c546103cf9060ff9060a01c1690565b6000149661045d956104499461043b9460409a6104b9576103f2825b8d54612237565b8c5560058c0161040383825461224e565b9055610431600267ffffffffffffffff87169d8e6104266004830191825461224e565b9055019c8d5461224e565b8c553393166133d2565b9a546001600160a01b031690565b6035546001600160a01b0316903390612266565b0151905411156104a95750600090557f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe56000604051a25b604080519182526020820192909252f35b0390f35b90506104b49161278e565b610494565b6103f2856103eb565b8015150361000e57565b503461000e57602036600319011261000e576004356104ea816104c2565b6104f2611e49565b60ff80196032541691151516176032556000604051f35b503461000e57602036600319011261000e57610545610526612a2a565b6001600160a01b0360005460101c163314908115610552575b50612a4b565b61055060043561308a565b005b60ff9150602061057c9133600052603882526040600020826040519483868095519384920161078e565b82019081520301902054163861053f565b6001600160a01b0381160361000e57565b503461000e57602036600319011261000e576001600160a01b036004356105c48161058d565b6105cc611e49565b166001600160a01b031960355416176035556000604051f35b50634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761061857604052565b6106206105e5565b604052565b6020810190811067ffffffffffffffff82111761061857604052565b6040810190811067ffffffffffffffff82111761061857604052565b90601f8019910116810190811067ffffffffffffffff82111761061857604052565b604051906080820182811067ffffffffffffffff82111761061857604052565b6040519060e0820182811067ffffffffffffffff82111761061857604052565b604051906106cc826105fc565b565b6040519060c0820182811067ffffffffffffffff82111761061857604052565b6040519060a0820182811067ffffffffffffffff82111761061857604052565b60209067ffffffffffffffff811161072c575b601f01601f19160190565b6107346105e5565b610721565b9291926107458261070e565b91610753604051938461065d565b82948184528183011161000e578281602093846000960137010152565b9080601f8301121561000e5781602061078b93359101610739565b90565b918091926000905b8282106107ae5750116107a7575050565b6000910152565b91508060209183015181860152018291610796565b503461000e57604036600319011261000e576004356107e18161058d565b60243567ffffffffffffffff811161000e5761083560206104a5936001600160a01b0361081460ff953690600401610770565b9116600052603882526040600020826040519483868095519384920161078e565b820190815203019020546040519116151581529081906020820190565b503461000e57602036600319011261000e576001600160a01b036004356108788161058d565b610880611e49565b166001600160a01b031960365416176036556000604051f35b503461000e57602036600319011261000e576004356108b78161058d565b6001600160a01b0390817f000000000000000000000000000000000000000000000000000000000000000016916108f0833014156118ff565b61091f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc938285541614611960565b610927611e49565b6040519061093482610625565b600082527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561096e5750506105509150611b53565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181610a08575b506109f55760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b61055093610a0391146119dd565b611bf1565b610a2a91925060203d8111610a31575b610a22818361065d565b8101906119c1565b9038610994565b503d610a18565b503461000e57606036600319011261000e57600435610a568161058d565b6024359067ffffffffffffffff821161000e57610abc6020610a7f610550943690600401610770565b6001600160a01b0360443594610a94866104c2565b610a9c611e49565b16600052603882526040600020826040519483868095519384920161078e565b8201908152030190209060ff801983541691151516179055565b60c4359063ffffffff8216820361000e57565b503461000e5760e036600319011261000e57600435610b078161058d565b60443590610b14826104c2565b6084359165ffffffffffff8316830361000e5760a43563ffffffff8116810361000e576104a593610b5593610b47610ad6565b936064359160243590612a97565b6040519081529081906020820190565b503461000e57600036600319011261000e57602065ffffffffffff60365460b81c16604051908152f35b503461000e57602036600319011261000e576001600160a01b03600435610bb58161058d565b610bbd611e49565b166001600160a01b031960345416176034556000604051f35b50604036600319011261000e57600435610bef8161058d565b6024359067ffffffffffffffff821161000e573660238301121561000e57610c24610550923690602481600401359101610739565b90610c896001600160a01b03807f00000000000000000000000000000000000000000000000000000000000000001690610c60823014156118ff565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc541614611960565b610c91611e49565b611a3b565b503461000e57600036600319011261000e576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d03576040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152602090f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b503461000e57600036600319011261000e57602061ffff60365460a81c16604051908152f35b503461000e57602036600319011261000e5760043561ffff811680820361000e5761271090610dc1611e49565b11610de7576036805461ffff60a81b191660a89290921b61ffff60a81b16919091179055005b60405162461bcd60e51b815260206004820152601360248201527f496e76616c696420626173697320706f696e74000000000000000000000000006044820152606490fd5b503461000e57600036600319011261000e57610e4f60ff60005460081c16611de9565b610550611ea4565b503461000e57602036600319011261000e57600435610e91610e8c336001600160a01b03166000526033602052604060002090565b613a72565b6000805b8251811015610f08578365ffffffffffff610ec36060610eb58588613724565b51015165ffffffffffff1690565b161480610ef3575b610ede575b610ed990613714565b610e95565b90610eeb610ed991613714565b919050610ed0565b5060ff610f008233613ada565b161515610ecb565b50610f12906136e2565b6000805b8351811015610f87578465ffffffffffff610f366060610eb58589613724565b161480610f72575b610f51575b610f4c90613714565b610f16565b90610f6a8183610f64610f4c9487613724565b52613714565b919050610f43565b5060ff610f7f8233613ada565b161515610f3e565b6104a5610b558461384e565b503461000e57600080600319360112610ff657610fae611e49565b805462010000600160b01b031981168255816001600160a01b036040519260101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e5760206001600160a01b0360355416604051908152f35b503461000e57600036600319011261000e57602065ffffffffffff60375416604051908152f35b503461000e57600036600319011261000e5760206001600160a01b0360365416604051908152f35b503461000e57600036600319011261000e57602060ff603254166040519015158152f35b503461000e57600036600319011261000e5760206001600160a01b0360005460101c16604051908152f35b503461000e57600036600319011261000e57602060ff60365460a01c16604051908152f35b503461000e57600036600319011261000e5760206001600160a01b0360345416604051908152f35b50634e487b7160e01b600052603260045260246000fd5b600690609d5481101561115f575b609d600052027fd26e832454299e9fabb89e0e5fffdc046d4e14431bc1bf607ffb2e8a1ddecf7b0190600090565b61116761110c565b611131565b503461000e57602036600319011261000e57600435609d5481101561000e5761119490611123565b5080546001820154600283015460038401546004850154600590950154604080519586526001600160a01b038516602087015260ff60a095861c16151590860152606085019290925260808401529082019290925260c081019190915260e090f35b503461000e57602036600319011261000e5760043560005260a06020526080604060002060ff6001825492015460405192835265ffffffffffff80821660208501528160301c16604084015260601c1615156060820152f35b503461000e57602036600319011261000e5760043561126d816130e9565b6104a56b033b2e3c9fd0803ce80000006112eb836112e661128d87611123565b5054966112e060ff60036112a084611123565b50015492609f54811015611309575b609f6000527f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de28015460f01c166121cc565b90612199565b612199565b04604051938493846040919493926060820195825260208201520152565b61131161110c565b6112af565b609f5481101561134e575b609f6000527f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de280190600090565b61135661110c565b611321565b8054821015611374575b60005260206000200190600090565b61137c61110c565b611365565b503461000e57604036600319011261000e5760043561139f8161058d565b6001600160a01b03602435911660005260a16020526040600020805482101561000e576020916113ce9161135b565b90546040519160031b1c8152f35b600390609e54811015611418575b609e600052027fcfe2a20ff701a1f3e14f63bd70d6c6bc6fba8172ec6d5a505cdab3927c0a9de60190600090565b61142061110c565b6113ea565b8054821015611442575b6000526003602060002091020190600090565b61144a61110c565b61142f565b503461000e57602036600319011261000e57600435609e5481101561000e576003606091609e60005202807fcfe2a20ff701a1f3e14f63bd70d6c6bc6fba8172ec6d5a505cdab3927c0a9de60154907fcfe2a20ff701a1f3e14f63bd70d6c6bc6fba8172ec6d5a505cdab3927c0a9de865ffffffffffff7fcfe2a20ff701a1f3e14f63bd70d6c6bc6fba8172ec6d5a505cdab3927c0a9de7830154169101549060405192835260208301526040820152f35b503461000e57606036600319011261000e5760043561151f8161058d565b61157c60243561152e8161058d565b6044359061153b8261058d565b6000549361156060ff8660081c1615809681976115fa575b81156115da575b50611f19565b84611573600160ff196000541617600055565b6115c157611f8b565b61158257005b61159261ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b6115d561010061ff00196000541617600055565b611f8b565b303b159150816115ec575b503861155a565b6001915060ff1614386115e5565b600160ff8216109150611553565b503461000e57600036600319011261000e5761162b60ff60005460081c16611de9565b6032805460ff19169055005b503461000e57604036600319011261000e576004356116558161058d565b6001600160a01b0360243591166000526033602052604060002090815481101561000e5761168291611425565b508054600182015460029092015460408051928352602083019390935265ffffffffffff80821693830193909352603081901c9092166060808301919091529190911c60ff16608082015260a090f35b503461000e57602036600319011261000e57600435609f5481101561000e57609f6000527f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de2801546040805165ffffffffffff8084168252603084901c81166020830152606084811c821693830193909352609084901c81169282019290925260c083811c909216608082015260f09290921c60ff1660a083015290f35b503461000e57602036600319011261000e5760043561178d8161058d565b611795611e49565b6001600160a01b039081811680156117f95760009262010000600160b01b0384549360101b1662010000600160b01b031984161784556040519260101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b60209067ffffffffffffffff8111611867575b60051b0190565b61186f6105e5565b611860565b503461000e5760208060031936011261000e5760043567ffffffffffffffff811161000e573660238201121561000e578060040135906118b38261184d565b916118c1604051938461065d565b80835260248484019160051b8301019136831161000e57602401905b8282106118f0576104a5610b558561384e565b813581529084019084016118dd565b1561190657565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561196757565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b9081602091031261000e575190565b506040513d6000823e3d90fd5b156119e457565b60405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b90611a677f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1690565b15611a7657506106cc90611b53565b6040516352d1902d60e01b8152916020836004816001600160a01b0385165afa60009381611b33575b50611b005760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b611b2e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6106cc94146119dd565b611d09565b611b4c91945060203d8111610a3157610a22818361065d565b9238611a9f565b803b15611b96576001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91166001600160a01b0319825416179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b611bfa81611b53565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a2825115801590611d01575b611c4057505050565b813b15611cb0575060008281926020611cad95519201905af4611c61611d5f565b60405191611c6e836105fc565b602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020840152660819985a5b195960ca1b6040840152611d8f565b50565b62461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b506000611c37565b611d1281611b53565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a2825115801590611d5757611c4057505050565b506001611c37565b3d15611d8a573d90611d708261070e565b91611d7e604051938461065d565b82523d6000602084013e565b606090565b90919015611d9b575090565b815115611dab5750805190602001fd5b6044604051809262461bcd60e51b825260206004830152611ddb815180928160248601526020868601910161078e565b601f01601f19168101030190fd5b15611df057565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6001600160a01b0360005460101c163303611e6057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b737e8ae5c72eca86946b695dcc211863d9721a09616001600160a01b03600054757e8ae5c72eca86946b695dcc211863d9721a0961000062010000600160b01b031982161760005560101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b15611f2057565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608490fd5b917fffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffff6120319360ff60005460081c1693611fc485611de9565b603654906001600160a01b038095816001600160a01b031993168360345416176034551690603554161760355563a8c0000f60a91b93600560a01b9216906affffffffffffffffffffff60a81b161717161760365561025865ffffffffffff196037541617603755611de9565b612039611ea4565b61204a60ff60005460081c16611de9565b60ff1960325416603255565b906040516060810181811067ffffffffffffffff821117612098575b6040526040600282948054845265ffffffffffff60018201541660208501520154910152565b6120a06105e5565b612072565b156120ac57565b60405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c75646564000000006044820152606490fd5b156120f857565b60405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d6178207072696365006044820152606490fd5b50634e487b7160e01b600052601160045260246000fd5b6b033b2e3c9fd0803ce8000000908060001904821181151516612175570290565b61217d61213d565b0290565b620f4240908060001904821181151516612175570290565b8060001904821181151516612175570290565b81156121b6570490565b634e487b7160e01b600052601260045260246000fd5b60ff16604d81116121de575b600a0a90565b6121e661213d565b6121d8565b156121f257565b60405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a652065786365656465640000006044820152606490fd5b818110612242570390565b61224a61213d565b0390565b8119811161225a570190565b61226261213d565b0190565b6040516323b872dd60e01b60208083019182526001600160a01b0394851660248401529484166044830152606480830196909652948152929391906122ac60848561065d565b1690604051926122bb84610641565b8484527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656485850152823b1561232c57612307939260009283809351925af1612301611d5f565b90611d8f565b8051908161231457505050565b826106cc93612327938301019101612371565b612386565b60405162461bcd60e51b815260048101869052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9081602091031261000e575161078b816104c2565b1561238d57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b65ffffffffffff9182169116818110612242570390565b90609f548210156125d3575b609f60005261248a61247d61247d612441857f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de28016125e0565b65ffffffffffff6040612473826020850151168042106125c6575b60026124678b611123565b50914203910154612199565b92015116906121ac565b67ffffffffffffffff1690565b6124a2600261249885611123565b5001918254612237565b90556124d6816124b184611316565b509065ffffffffffff60301b82549160301b169065ffffffffffff60301b1916179055565b6124fa60016124ef8460005260a0602052604060002090565b015460601c60ff1690565b612502575050565b6125168260005260a0602052604060002090565b9161252c612523826131ec565b919290936113dc565b50612538838254612237565b9055156125b35761257360018561255661259a946106cc9854612237565b8155019261256e845465ffffffffffff9060301c1690565b6123e5565b82546bffffffffffff000000000000191660309190911b65ffffffffffff60301b16178255565b9065ffffffffffff1665ffffffffffff19825416179055565b505050600101805460ff60601b19169055565b6125ce61213d565b61245c565b6125db61110c565b612408565b9060405160c0810181811067ffffffffffffffff821117612646575b60405260a060ff82945465ffffffffffff8082168552808260301c166020860152808260601c166040860152808260901c1660608601528160c01c16608085015260f01c16910152565b61264e6105e5565b6125fc565b9065ffffffffffff808093169116809203811161225a570190565b9060405160e0810181811067ffffffffffffffff8211176126e4575b60405260c060058294805484526126bf60ff60018301546001600160a01b038116602088015260a01c16604086019015159052565b6002810154606085015260038101546080850152600481015460a08501520154910152565b6126ec6105e5565b61268a565b50634e487b7160e01b600052600060045260246000fd5b6060600161278a9284518155019261276f65ffffffffffff61274481602085015116879065ffffffffffff1665ffffffffffff19825416179055565b604083015186546bffffffffffff0000000000001916911660301b65ffffffffffff60301b16178555565b0151825460ff60601b191690151560601b60ff60601b161790565b9055565b906127a161279b83611316565b506125e0565b805165ffffffffffff16926127d86127cd60808401956127c7875165ffffffffffff1690565b90612653565b65ffffffffffff1690565b65ffffffffffff841610156127ee575b50505050565b6129759361292c61247d8561287460046128db61295b98612874896112e06127cd60406128466127cd61282961282387611123565b5061266e565b9b61256e6001612838896113dc565b50015465ffffffffffff1690565b95612850856130e9565b9a8b61285e84830151151590565b15612a2257612879906128746128959351612154565b6121ac565b61288f61288a60a085015160ff1690565b6121cc565b906121ac565b945b60036128cb6128c561247d61247d8c6128746128bf6127cd60608b015165ffffffffffff1690565b8d612199565b92611123565b500155015165ffffffffffff1690565b9260206129026128f66128f66036546001600160a01b031690565b6001600160a01b031690565b604051633fdaeac760e11b815293849182905afa918215612a15575b6000926129f5575b50612199565b9067ffffffffffffffff61293f846113dc565b5054921691821061297e5750612954826113dc565b5055611316565b509065ffffffffffff1665ffffffffffff19825416179055565b388080806127e8565b6129d06129a861299b6129f094612994876113dc565b5054612237565b925165ffffffffffff1690565b6129b061067f565b92835265ffffffffffff8716602084015265ffffffffffff166040830152565b600160608201526129eb8360005260a0602052604060002090565b612708565b611316565b612a0e91925060203d8111610a3157610a22818361065d565b9038612926565b612a1d6119d0565b61291e565b505194612897565b60405190612a3782610641565b600582526430b236b4b760d91b6020830152565b15612a5257565b60405162461bcd60e51b815260206004820152600e60248201527f4e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606490fd5b9094929394612aa4612a2a565b92612ac86001600160a01b03948560005460101c1633149081156105525750612a4b565b612ada4265ffffffffffff8916612237565b916040519663313ce56760e01b88526020886004818989165afa978815612d92575b600098612d61575b508215612d595788612b28612b1c8361287486612154565b61288f60ff8c16612db8565b915b609d549b8c9a87612b4163ffffffff8d1687612199565b90612b4b916121ac565b612b5361069f565b8781526001600160a01b038b166020820152908815156040830152866060830152608082015260a081016000905260c0810160009052612b9290612dc6565b603654604051633fdaeac760e11b8152928691849081906001600160a01b03165a92600491602094fa90811563ffffffff7f3f414051967f5a5e84f3af856364502239c9052e98e136c6ed4ed90bc5f5b0ba9f612ca965ffffffffffff612d2c9f612c70612cd99e60209e612c66612cd49f60ff9f612cc99e6128748c9f612c4b94612cb99f94612c2f95612d4c575b600092612d325750612199565b93612c45612c3c82612181565b620186a0900490565b9061224e565b91612c546106bf565b93845265ffffffffffff166020840152565b6040820152612e82565b612c99824216612c7e6106ce565b65ffffffffffff821681529e8f019065ffffffffffff169052565b1665ffffffffffff1660408c0152565b1665ffffffffffff166060890152565b1665ffffffffffff166080860152565b1660ff1660a0830152565b612eff565b612d0187612cfc8787166001600160a01b031660005260a1602052604060002090565b613045565b6040519485941697849192604091949365ffffffffffff606085019616845260208401521515910152565b0390a390565b6020612a0e9293503d602011610a3157610a22818361065d565b612d546119d0565b612c22565b888291612b2a565b612d8491985060203d602011612d8b575b612d7c818361065d565b810190612d9f565b9638612b04565b503d612d72565b612d9a6119d0565b612afc565b9081602091031261000e575160ff8116810361000e5790565b604d81116121de57600a0a90565b600560c0612de9609d54600160401b811015612e75575b60018101609d55611123565b939093612e68575b8051845560018401612e266001600160a01b0360208401511682906001600160a01b03166001600160a01b0319825416179055565b6040820151815460ff60a01b191690151560a01b60ff60a01b16179055606081015160028501556080810151600385015560a081015160048501550151910155565b612e706126f1565b612df1565b612e7d6105e5565b612ddd565b60026040612ea5609e54600160401b811015612ef2575b60018101609e556113dc565b939093612ee5575b80518455612ede65ffffffffffff602083015116600186019065ffffffffffff1665ffffffffffff19825416179055565b0151910155565b612eed6126f1565b612ead565b612efa6105e5565b612e99565b6106cc9061301160a0612f27609f54600160401b811015613038575b60018101609f55611316565b93909361302b575b805184546020830151604084015160608086015191901b71ffffffffffff0000000000000000000000001660309290921b65ffffffffffff60301b1665ffffffffffff9485167fffffffffffffffff00000000000000000000000000000000000000000000000090941693909317929092171760909190911b77ffffffffffff000000000000000000000000000000000000161785556080820151613009911685547fffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff1660c09190911b65ffffffffffff60c01b16178555565b015160ff1690565b815460ff60f01b191660f09190911b60ff60f01b16179055565b6130336126f1565b612f2f565b6130406105e5565b612f1b565b805461306391600160401b82101561307d575b60018201815561135b565b819291549060031b600019811b9283911b16911916179055565b6130856105e5565b613058565b6130b3613096826113dc565b50600101805465ffffffffffff19164265ffffffffffff16179055565b60006130be82611123565b50557f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe56000604051a2565b61078b9061288f61288a6131a76131a1613102856113dc565b50546112e0600461315d60026131178a611123565b500154609f548a10156131df575b609f6000527f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de288a01546112e09060f01c60ff166121cc565b60206131776128f66128f66036546001600160a01b031690565b604051633fdaeac760e11b815293849182905afa9182156131d2575b6000926131b2575b506121ac565b93611316565b505460f01c60ff1690565b6131cb91925060203d8111610a3157610a22818361065d565b903861319b565b6131da6119d0565b613193565b6131e761110c565b613125565b600090815260a060205260408120906001604051926080840184811067ffffffffffffffff8211176132a9575b6040528054845201549165ffffffffffff9283811680602084015260ff6040840192868160301c16845260601c16158015606085015261329e5761325f908542166123e5565b936132736127cd835165ffffffffffff1690565b90851690811093508315613298576127cd61299b61288f926132959551612199565b92565b50505192565b505050809150918190565b6132b16105e5565b613219565b156132bd57565b60405162461bcd60e51b815260206004820152602860248201527f496e73756666696369656e742074726561737572792062616c616e636520666f6044820152671c881c185e5bdd5d60c21b6064820152608490fd5b60ff6080600261333b61278a94805490600160401b8210156133c5575b600182018155611425565b6133b8575b855181556020860151600182015560408601519101805465ffffffffffff191665ffffffffffff928316178155949061339e90606083015187546bffffffffffff0000000000001916911660301b65ffffffffffff60301b16178655565b0151835460ff60601b1916911660601b60ff60601b161790565b6133c06126f1565b613340565b6133cd6105e5565b613330565b909493929160009061348a6133ef6036546001600160a01b031690565b866134026035546001600160a01b031690565b6040516370a0823160e01b81526001600160a01b03828116600483015260209788959290919061344f90869088816024818988165afa908115613689575b859161366c575b5010156132b6565b60405163276d76f960e21b81526001600160a01b03909316600484015230602484015260448301949094529094859384929183906064820190565b0393165af1801561365f575b613642575b5060365460a81c61ffff1661ffff166134b49086612199565b612710900494856134c491612237565b966134e2856001600160a01b03166000526033602052604060002090565b549761350289966001600160a01b03166000526033602052604060002090565b9260058204924265ffffffffffff169461351a6106ee565b84815287810186905265ffffffffffff8716604082015265ffffffffffff891660608201526000608082015261354f91613313565b60365460345460405163a9059cbb60e01b81526001600160a01b039182166004820152602481019b909b5287918b916044918391165a90600091f17f129794f6f9aa0adfa6dda6ca7d08d05812fea954f80008e5cf68ae7b9fa898b49961360297918015613635575b613607575b50506040805133815265ffffffffffff9889166020820152908101989098526060880152608087015260a086015260c085015290911660e08301528190610100820190565b0390a1565b8161362692903d1061362e575b61361e818361065d565b810190612371565b5038806135bd565b503d613614565b61363d6119d0565b6135b8565b61365890833d851161362e5761361e818361065d565b503861349b565b6136676119d0565b613496565b6136839150893d8b11610a3157610a22818361065d565b38613447565b6136916119d0565b613440565b1561369d57565b60405162461bcd60e51b815260206004820152601160248201527f4e6f7468696e6720746f2072656465656d0000000000000000000000000000006044820152606490fd5b906136ec8261184d565b6136f9604051918261065d565b828152809261370a601f199161184d565b0190602036910137565b600190600019811461225a570190565b6020918151811015613739575b60051b010190565b61374161110c565b613731565b1561374d57565b60405162461bcd60e51b815260206004820152601260248201527f4e6f2070656e64696e672076657374696e6700000000000000000000000000006044820152606490fd5b60ff8091169116908160ff03811161225a570190565b90815180825260208080930193019160005b8281106137c8575050505090565b8351855293810193928101926001016137ba565b906001600160a01b03909594929516815261380360209560808784015260808301906137a8565b818103604083015285808551928381520194019060005b8181106138375750505061078b93945060608184039101526137a8565b825160ff168652948701949187019160010161381a565b9060009161385e81511515613696565b61386881516136e2565b9061387381516136e2565b9160005b8251811015613954573360009081526033602052604090206138998285613724565b516138a391611425565b506138ae8285613724565b516138b99033613ada565b9660ff90818916928315156138cd90613746565b600281018054909a9060601c60ff16906138e691613792565b8a5460ff60601b191660609190911b60ff60601b16178a55600101549261390d9084612199565b6139169161224e565b975460601c60ff16806139298587613724565b60ff9091169052169061393b91612199565b6139458286613724565b5261394f90613714565b613877565b50906136027f5a21b90378728eb82fe7be28a8f4a46d422e5c1f08ac7521b84ef5c190b0cc8693600060206139c361399a6128f66128f66036546001600160a01b031690565b60405163a9059cbb60e01b8152336004820152602481018c905293849283919082906044820190565b03925af180156139ff575b6139e1575b5060405193849333856137dc565b6139f89060203d811161362e5761361e818361065d565b50386139d3565b613a076119d0565b6139ce565b9060405160a0810181811067ffffffffffffffff821117613a65575b604052608060ff600283958054855260018101546020860152015465ffffffffffff80821660408601528160301c16606085015260601c16910152565b613a6d6105e5565b613a28565b908154613a7e8161184d565b92613a8c604051948561065d565b818452600090815260208082208186015b848410613aab575050505050565b600383600192613aba85613a0c565b815201920193019290613a9d565b60ff9182169116818110612242570390565b613b0560ff92613b00613b0b936001600160a01b03166000526033602052604060002090565b611425565b50613a0c565b6080810190613b1b825160ff1690565b60365490848260a01c169485911614613bbf5761078b93613b8c613b9e92613b5a613b546127cd604060ff98015165ffffffffffff1690565b42612237565b90613b6760325460ff1690565b15613bad575065ffffffffffff613b8560375465ffffffffffff1690565b16906121ac565b81811115613ba55750925b5160ff1690565b9116613ac8565b905092613b97565b65ffffffffffff809160b81c16613b85565b5050505060009056fea2646970667358221220de3c2e5e376aa5f999116cb7b132ca356d9f178801b0bc21825ba58c33deb22d64736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "close(uint256)": {
        "params": {
          "_id": "ID of market to close"
        }
      },
      "deposit(uint256,uint256,uint256)": {
        "params": {
          "_amount": "the amount of quote token to spend",
          "_id": "the ID of the market",
          "_maxPrice": "the maxeimum price at which to buy"
        },
        "returns": {
          "index_": "     the user index of the Note (usd to redeem or query information)",
          "payout_": "    the amount of NEND due"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "redeem(uint256[])": {
        "params": {
          "_indexes": "the note indexes to redeem"
        },
        "returns": {
          "payout_": "    sum of payout sent, in NEND"
        }
      },
      "redeemAll(uint256)": {
        "details": "if possible, query indexesFor() off-chain and input in redeem() to save gas",
        "returns": {
          "_0": "sum of payout sent, in NEND"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "close(uint256)": {
        "notice": "disable existing market"
      },
      "deposit(uint256,uint256,uint256)": {
        "notice": "deposit quote tokens in exchange for a bond from a specified market"
      },
      "redeem(uint256[])": {
        "notice": "redeem notes for user"
      },
      "redeemAll(uint256)": {
        "notice": "redeem all redeemable markets for user"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 674,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 677,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9827,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9947,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 28121,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "testing",
        "offset": 0,
        "slot": "50",
        "type": "t_bool"
      },
      {
        "astId": 11148,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "notes",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_array(t_struct(Note)11086_storage)dyn_storage)"
      },
      {
        "astId": 11150,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "insurancePool",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 11152,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "ecosystemPool",
        "offset": 0,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 11154,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "nend",
        "offset": 0,
        "slot": "54",
        "type": "t_address"
      },
      {
        "astId": 11156,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "totalVestingCount",
        "offset": 20,
        "slot": "54",
        "type": "t_uint8"
      },
      {
        "astId": 11158,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "commissionRate",
        "offset": 21,
        "slot": "54",
        "type": "t_uint16"
      },
      {
        "astId": 11160,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "vestingInverval",
        "offset": 23,
        "slot": "54",
        "type": "t_uint48"
      },
      {
        "astId": 11162,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "testVestingInverval",
        "offset": 0,
        "slot": "55",
        "type": "t_uint48"
      },
      {
        "astId": 9959,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "hasRole",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))"
      },
      {
        "astId": 656,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "__gap",
        "offset": 0,
        "slot": "57",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 971,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10100,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "markets",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_struct(Market)10993_storage)dyn_storage"
      },
      {
        "astId": 10104,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "terms",
        "offset": 0,
        "slot": "158",
        "type": "t_array(t_struct(Terms)11000_storage)dyn_storage"
      },
      {
        "astId": 10108,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "metadata",
        "offset": 0,
        "slot": "159",
        "type": "t_array(t_struct(Metadata)11013_storage)dyn_storage"
      },
      {
        "astId": 10113,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "adjustments",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_uint256,t_struct(Adjustment)11022_storage)"
      },
      {
        "astId": 10118,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "marketsForQuote",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Market)10993_storage)dyn_storage": {
        "base": "t_struct(Market)10993_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Metadata)11013_storage)dyn_storage": {
        "base": "t_struct(Metadata)11013_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Metadata[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Note)11086_storage)dyn_storage": {
        "base": "t_struct(Note)11086_storage",
        "encoding": "dynamic_array",
        "label": "struct INoteKeeper.Note[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Terms)11000_storage)dyn_storage": {
        "base": "t_struct(Terms)11000_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Terms[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)6605": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Note)11086_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct INoteKeeper.Note[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Note)11086_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Adjustment)11022_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBondDepository.Adjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(Adjustment)11022_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Adjustment)11022_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Adjustment",
        "members": [
          {
            "astId": 11015,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "change",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11017,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "lastAdjustment",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 11019,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "timeToAdjusted",
            "offset": 6,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 11021,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "active",
            "offset": 12,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Market)10993_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Market",
        "members": [
          {
            "astId": 10979,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "capacity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10982,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "quoteToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)6605"
          },
          {
            "astId": 10984,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "capacityInQuote",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 10986,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "totalDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10988,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "maxPayout",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10990,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "sold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10992,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "purchased",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Metadata)11013_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Metadata",
        "members": [
          {
            "astId": 11002,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "lastTune",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 11004,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "lastDecay",
            "offset": 6,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 11006,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "length",
            "offset": 12,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 11008,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "depositInterval",
            "offset": 18,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 11010,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "tuneInterval",
            "offset": 24,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 11012,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "quoteDecimals",
            "offset": 30,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Note)11086_storage": {
        "encoding": "inplace",
        "label": "struct INoteKeeper.Note",
        "members": [
          {
            "astId": 11077,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11079,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "payoutPerVesting",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11081,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "created",
            "offset": 0,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 11083,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "marketID",
            "offset": 6,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 11085,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "vestingCount",
            "offset": 12,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Terms)11000_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Terms",
        "members": [
          {
            "astId": 10995,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "controlVariable",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10997,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "conclusion",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 10999,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "maxDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}