{
  "address": "0xC394100347c205E3f4ab7E6fE7901D810F442D99",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SALE_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORIGIN_CONTRACT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "wETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "originContract",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isEnabledNextScenario",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRevealed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintIndexForSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingInformation",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        }
      ],
      "name": "publicMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenHash",
          "type": "string"
        }
      ],
      "name": "repairTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "revealChecked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "tokenHash",
          "type": "string[]"
        }
      ],
      "name": "revealTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nextScenario",
          "type": "address"
        }
      ],
      "name": "setNextScenarioConenct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newNotRevealedURI",
          "type": "string"
        }
      ],
      "name": "setNotRevealedURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setRevealState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 9,
  "solcInputHash": "1e9c4750bd48852a795d330a10454f5b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SALE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORIGIN_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEnabledNextScenario\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintIndexForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingInformation\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenHash\",\"type\":\"string\"}],\"name\":\"repairTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"revealChecked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenHash\",\"type\":\"string[]\"}],\"name\":\"revealTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextScenario\",\"type\":\"address\"}],\"name\":\"setNextScenarioConenct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newNotRevealedURI\",\"type\":\"string\"}],\"name\":\"setNotRevealedURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setRevealState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mintingInformation()\":{\"details\":\"Returns. About Minting\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"publicMint(address)\":{\"details\":\"A function that anyone can mint. Before reveal, it is minted in the unreveal state\",\"params\":{\"tokenOwner\":\"The owner of the minting token\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repairTokenURI(uint256,string)\":{\"details\":\"A function that can be repaired in the event of an unintended error when revealed. Only the owner can execute it\",\"params\":{\"tokenHash\":\"The unique hash value of the token\",\"tokenId\":\"The ID of the token you want to repair\"}},\"revealTokens(uint256[],string[])\":{\"details\":\"A function that revises tokens that have not yet been revealed. It issues tokens in the next scenario at the same time\",\"params\":{\"tokenHash\":\"The unique hash value of the token\",\"tokenIds\":\"The ID of the token you want to reveal\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"details\":\"Set base URI of reveal tokens. Only the owner can do it\",\"params\":{\"_newBaseURI\":\"Base URI of revealed tokens\"}},\"setNextScenarioConenct(address)\":{\"details\":\"Functions that associate with the following collection of scenarios\",\"params\":{\"nextScenario\":\"Address of the next scenario contract\"}},\"setNotRevealedURI(string)\":{\"details\":\"Set base URI of unreveal tokens. Only the owner can do it\",\"params\":{\"_newNotRevealedURI\":\"Base URI of unreveal tokens\"}},\"setRevealState(bool)\":{\"details\":\"A function that allows users to start reveal\",\"params\":{\"_state\":\"True & False, Allow reveal\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/voting/ScenarioTwo.sol\":\"NendNFTs2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x56035505d62f05f5e5040532b749ab25237f6dd87c7a514614acda96af996751\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, ERC721Upgradeable {\\n    function __ERC721URIStorage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xbd5c6f8268a1d477f6a746ebedaf7fbcf412186f0c1c54ee104547cfb5e18edd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/voting/ScenarioTwo.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Inheritance\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\r\\n\\r\\n// Internal references\\r\\nimport \\\"./interface/WETH.sol\\\";\\r\\nimport \\\"./interface/INextScenario.sol\\\";\\r\\n\\r\\n// @author The Peri Finanace team\\r\\n// @title A Peri NFT Contract\\r\\ncontract NendNFTs2 is\\r\\n    ERC721Upgradeable,\\r\\n    ERC721URIStorageUpgradeable,\\r\\n    ERC721EnumerableUpgradeable,\\r\\n    OwnableUpgradeable\\r\\n{\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    //Index of tokens to sell\\r\\n    uint256 public mintIndexForSale;\\r\\n\\r\\n    //The maximum quantity sold\\r\\n    uint256 public MAX_SALE_AMOUNT;\\r\\n\\r\\n    //Notify token reveal start\\r\\n    bool public isRevealed;\\r\\n\\r\\n    //Is it connected to the next scenario contract\\r\\n    bool public isEnabledNextScenario;\\r\\n\\r\\n    //Address of previous scenario contract\\r\\n    address public ORIGIN_CONTRACT;\\r\\n\\r\\n    //Default URL of revealed tokens\\r\\n    string private baseURI;\\r\\n\\r\\n    //Default URL of unreveal tokens\\r\\n    string private notRevealedURI;\\r\\n\\r\\n    //Mapping owner address to last block number\\r\\n    mapping(address => uint256) private _lastCallBlockNumber;\\r\\n\\r\\n    //Mapping from owner address to token URI\\r\\n    mapping(uint256 => string) private _tokenURIs;\\r\\n\\r\\n    //Mapping from token ID to reveal checked (true & false)\\r\\n    mapping(uint256 => bool) public revealChecked;\\r\\n\\r\\n    //Interface for next scenario\\r\\n    INextScenario private _nextScenario;\\r\\n\\r\\n    //Interface for trading with wETH contract\\r\\n    WETH private _wETH;\\r\\n\\r\\n    function initialize(\\r\\n        string calldata name,\\r\\n        string calldata symbol,\\r\\n        address wETH,\\r\\n        address originContract\\r\\n    ) public initializer {\\r\\n        __ERC721_init(name, symbol);\\r\\n        __ERC721URIStorage_init();\\r\\n        __Ownable_init();\\r\\n\\r\\n        isRevealed = false;\\r\\n        isEnabledNextScenario = false;\\r\\n        MAX_SALE_AMOUNT = 10000;\\r\\n        mintIndexForSale = 1;\\r\\n        ORIGIN_CONTRACT = originContract;\\r\\n        _wETH = WETH(wETH);\\r\\n    }\\r\\n\\r\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @dev A function that anyone can mint. Before reveal, it is minted in the unreveal state\\r\\n     * @param tokenOwner The owner of the minting token\\r\\n     */\\r\\n    function publicMint(address tokenOwner) external {\\r\\n        require(msg.sender == ORIGIN_CONTRACT, \\\"caller is not origin!\\\");\\r\\n        require(mintIndexForSale <= MAX_SALE_AMOUNT, \\\"Exceed max amount\\\");\\r\\n\\r\\n        _mint(tokenOwner, mintIndexForSale);\\r\\n        _setTokenURI(mintIndexForSale, notRevealedURI);\\r\\n        revealChecked[mintIndexForSale] = false;\\r\\n        mintIndexForSale += 1;\\r\\n        _lastCallBlockNumber[msg.sender] = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that can be repaired in the event of an unintended error when revealed. Only the owner can execute it\\r\\n     * @param tokenId The ID of the token you want to repair\\r\\n     * @param tokenHash The unique hash value of the token\\r\\n     */\\r\\n    function repairTokenURI(uint256 tokenId, string calldata tokenHash)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        string memory _revealURI = string(\\r\\n            abi.encodePacked(baseURI, tokenHash, \\\".json\\\")\\r\\n        );\\r\\n        _tokenURIs[tokenId] = _revealURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that revises tokens that have not yet been revealed. It issues tokens in the next scenario at the same time\\r\\n     * @param tokenIds The ID of the token you want to reveal\\r\\n     * @param tokenHash The unique hash value of the token\\r\\n     */\\r\\n    function revealTokens(\\r\\n        uint256[] calldata tokenIds,\\r\\n        string[] calldata tokenHash\\r\\n    ) public {\\r\\n        require(isRevealed == true, \\\"Not yet started\\\");\\r\\n        require(bytes(baseURI).length > 0, \\\"Invalid BaseURI\\\");\\r\\n        require(\\r\\n            isEnabledNextScenario == true,\\r\\n            \\\"The next scenario is not enabled!\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            require(\\r\\n                ownerOf(tokenIds[i]) == msg.sender,\\r\\n                \\\"Token owner is not false\\\"\\r\\n            );\\r\\n            require(\\r\\n                revealChecked[tokenIds[i]] == false,\\r\\n                \\\"Already Revealed token!\\\"\\r\\n            );\\r\\n            string memory _revealURI = string(\\r\\n                abi.encodePacked(baseURI, tokenHash[i], \\\".json\\\")\\r\\n            );\\r\\n            revealChecked[tokenIds[i]] = true;\\r\\n            _tokenURIs[tokenIds[i]] = _revealURI;\\r\\n            _NextScenarioMint(msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set base URI of reveal tokens. Only the owner can do it\\r\\n     * @param _newBaseURI Base URI of revealed tokens\\r\\n     */\\r\\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\\r\\n        baseURI = _newBaseURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set base URI of unreveal tokens. Only the owner can do it\\r\\n     * @param _newNotRevealedURI Base URI of unreveal tokens\\r\\n     */\\r\\n    function setNotRevealedURI(string memory _newNotRevealedURI)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        notRevealedURI = _newNotRevealedURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows users to start reveal\\r\\n     * @param _state True & False, Allow reveal\\r\\n     */\\r\\n    function setRevealState(bool _state) public onlyOwner {\\r\\n        isRevealed = _state;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Functions that associate with the following collection of scenarios\\r\\n     * @param nextScenario Address of the next scenario contract\\r\\n     */\\r\\n    function setNextScenarioConenct(address nextScenario) public onlyOwner {\\r\\n        _nextScenario = INextScenario(nextScenario);\\r\\n        isEnabledNextScenario = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that mints the following collection of scenarios\\r\\n     * @param tokenOwner The address of the token owner to mint\\r\\n     */\\r\\n    function _NextScenarioMint(address tokenOwner) private {\\r\\n        _nextScenario.publicMint(tokenOwner);\\r\\n    }\\r\\n\\r\\n    /* ========== VIEWS ========== */\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721Upgradeable, ERC721EnumerableUpgradeable)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns. About Minting\\r\\n     */\\r\\n    function mintingInformation()\\r\\n        external\\r\\n        view\\r\\n        onlyOwner\\r\\n        returns (uint256[2] memory)\\r\\n    {\\r\\n        uint256[2] memory info = [mintIndexForSale, MAX_SALE_AMOUNT];\\r\\n        return info;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC721Upgradeable, ERC721URIStorageUpgradeable)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721URIStorage: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        if (revealChecked[tokenId] == false) {\\r\\n            return notRevealedURI;\\r\\n        }\\r\\n        string memory _tokenURI = _tokenURIs[tokenId];\\r\\n        return _tokenURI;\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId)\\r\\n        internal\\r\\n        virtual\\r\\n        override(ERC721Upgradeable, ERC721URIStorageUpgradeable)\\r\\n    {\\r\\n        super._burn(tokenId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbec3304dac491586a652ae626f5de2565909b9289e38c85eb508a65b12f5d987\",\"license\":\"MIT\"},\"contracts/voting/interface/INextScenario.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface INextScenario {\\r\\n    function publicMint(address _tokenOwner) external;\\r\\n}\",\"keccak256\":\"0x00a7b6833cba533f27010a402059422b315316614a69462b95f5c50f6ed206bf\",\"license\":\"MIT\"},\"contracts/voting/interface/WETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Inheritance\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n\\r\\ninterface WETH is IERC20 {\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns(bool);\\r\\n}\",\"keccak256\":\"0xeaefde6c08f90fb1fe67054c063de35fb7220cd7c8132305bf785f888b4b71ec\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657613151908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a7146102bb57806306fdde03146102b2578063081812fc146102a9578063095ea7b3146102a057806318160ddd1461029757806318758ec31461028e5780631dd8792b146102855780632084ab831461027c57806323b872dd14610273578063257a1a631461026a5780632f745c591461026157806332a93a3a1461025857806342842e0e1461024f5780634f6ccce71461024657806353de78041461023d57806354214f691461023457806355f804b31461022b5780636352211e146102225780636ce653c21461021957806370a0823114610210578063715018a61461020757806376661e42146101fe5780638b2e9809146101f55780638da5cb5b146101ec5780638f15b414146101e357806395d89b41146101da578063a0d90f76146101d1578063a22cb465146101c8578063a3057227146101bf578063b88d4fde146101b6578063c87b56dd146101ad578063e985e9c5146101a4578063f2c4ce1e1461019b5763f2fde38b1461019357600080fd5b61000e61164c565b5061000e611562565b5061000e6114ff565b5061000e6114cb565b5061000e61146a565b5061000e611310565b5061000e611226565b5061000e6111fe565b5061000e611156565b5061000e611026565b5061000e610fd0565b5061000e610f92565b5061000e610f63565b5061000e610f03565b5061000e610ed7565b5061000e610e82565b5061000e610e63565b5061000e610d53565b5061000e610c2e565b5061000e610a8a565b5061000e6109ad565b5061000e610965565b5061000e610867565b5061000e6107a9565b5061000e610789565b5061000e61075f565b5061000e6106f7565b5061000e610669565b5061000e61063d565b5061000e61061e565b5061000e610529565b5061000e6104a1565b5061000e6103c4565b5061000e6102d6565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e5760206004356102f6816102c4565b63ffffffff60e01b1663780e9d6360e01b811490811561031c575b506040519015158152f35b6380ac58cd60e01b81149150811561034e575b811561033d575b5038610311565b6301ffc9a760e01b14905038610336565b635b5e139f60e01b8114915061032f565b91908251928382526000905b84821061039857509280602093941161038b575b601f01601f1916010190565b600083828401015261037f565b9060209081808285010151908286010152019061036b565b9060206103c192818152019061035f565b90565b503461000e5760008060031936011261049e5760405190806065546103e881611861565b8085529160019180831690811561047d5750600114610422575b61041e8561041281870382610c93565b604051918291826103b0565b0390f35b9250606583527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c75b8284106104655750505081016020016104128261041e610402565b8054602085870181019190915290930192810161044a565b60ff191660208701525050604084019250610412915083905061041e610402565b80fd5b503461000e57602036600319011261000e5760206104c06004356119ca565b6001600160a01b0360405191168152f35b600435906001600160a01b038216820361000e57565b604435906001600160a01b038216820361000e57565b606435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57604036600319011261000e576105436104d1565b60243561054f8161183f565b916001600160a01b0380841680918316146105cf576105819361057c913314908115610583575b50611958565b611dd8565b005b6105c991506105c2906105aa33916001600160a01b0316600052606a602052604060002090565b906001600160a01b0316600052602052604060002090565b5460ff1690565b38610576565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b503461000e57600036600319011261000e57602060cb54604051908152f35b503461000e57600036600319011261000e5760206001600160a01b0361012f5460101c16604051908152f35b503461000e57600036600319011261000e57604080805161068981610c6a565b3690376106946116da565b805181810181811067ffffffffffffffff8211176106ea575b825261012d54815261012e549060209182820152825191826000905b600282106106d5578585f35b828060019286518152019401910190926106c9565b6106f2610c53565b6106ad565b503461000e57602036600319011261000e57600435600052610134602052602060ff604060002054166040519015158152f35b606090600319011261000e576001600160a01b0390600435828116810361000e5791602435908116810361000e579060443590565b503461000e576105816107713661072a565b9161078461077f8433611b09565b611a0c565b611c32565b503461000e57600036600319011261000e57602061012e54604051908152f35b503461000e57604036600319011261000e576107c36104d1565b602435906107d08161177c565b82101561080e576001600160a01b031660005260c960205260406000209060005260205261041e604060002054604051918291829190602083019252565b60405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608490fd5b503461000e57602036600319011261000e576108816104d1565b6001600160a01b0361012f5460101c163303610920576108f86108fe916108bc61012d918254906108b761012e548311156126b9565b612705565b6108cf81546108c961189b565b90612838565b6108f26108e88254600052610134602052604060002090565b805460ff19169055565b54611c16565b61012d55565b4361091d336001600160a01b0316600052610132602052604060002090565b55005b60405162461bcd60e51b815260206004820152601560248201527f63616c6c6572206973206e6f74206f726967696e2100000000000000000000006044820152606490fd5b503461000e576105816109773661072a565b90604051926020840184811067ffffffffffffffff8211176109a0575b60405260008452611a7e565b6109a8610c53565b610994565b503461000e57602036600319011261000e5760043560cb548110156109ff5760cb6000527fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0154604051908152602090f35b60405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608490fd5b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020808501948460051b01011161000e57565b503461000e5760408060031936011261000e5767ffffffffffffffff60043581811161000e57610abe903690600401610a59565b909160243590811161000e57610ad8903690600401610a59565b610b17600160ff61012f96949654610af583838316151514612a31565b610b0b610b0461013054611861565b1515612a7d565b60081c16151514612ac9565b60005b838110610b2357005b610c2990610b5433610b4e610b42610b3c858a8a612b2f565b3561183f565b6001600160a01b031690565b14612b4d565b610b88610b82610b7d6105c2610b6b858a8a612b2f565b35600052610134602052604060002090565b151590565b15612b99565b610c1b610bd8610b9983868a612be5565b610bca610bb98c94939451948593610bb360208601612987565b91612a23565b64173539b7b760d91b815260050190565b03601f198101835282610c93565b610bf6610be9610b6b858a8a612b2f565b805460ff19166001179055565b610c16610c04848989612b2f565b35600052610133602052604060002090565b6125cb565b610c2433612c35565b612b1f565b610b1a565b503461000e57600036600319011261000e57602060ff61012f54166040519015158152f35b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117610c8657604052565b610c8e610c53565b604052565b90601f8019910116810190811067ffffffffffffffff821117610c8657604052565b60209067ffffffffffffffff8111610cd3575b601f01601f19160190565b610cdb610c53565b610cc8565b929192610cec82610cb5565b91610cfa6040519384610c93565b82948184528183011161000e578281602093846000960137010152565b602060031982011261000e576004359067ffffffffffffffff821161000e578060238301121561000e578160246103c193600401359101610ce0565b503461000e57610d6236610d17565b610d6a6116da565b805167ffffffffffffffff8111610e56575b61013090610d9381610d8e8454611861565b6122b9565b602080601f8311600114610dce5750819293600092610dc3575b50508160011b916000199060031b1c1916179055005b015190503880610dad565b90601f19831694610e026101306000527f2f605e086faac1d93117bbfbc18835d434e9405fadc1ca66faf4b864746daf3490565b926000905b878210610e3e575050836001959610610e25575b505050811b019055005b015160001960f88460031b161c19169055388080610e1b565b80600185968294968601518155019501930190610e07565b610e5e610c53565b610d7c565b503461000e57602036600319011261000e5760206104c060043561183f565b503461000e57602036600319011261000e57610e9c6104d1565b610ea46116da565b6001600160a01b0361013591166001600160a01b031982541617905561012f61010061ff00198254161790556000604051f35b503461000e57602036600319011261000e576020610efb610ef66104d1565b61177c565b604051908152f35b503461000e5760008060031936011261049e57610f1e6116da565b60fb546001600160a01b0319811660fb55816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e57600036600319011261000e57602061012d54604051908152f35b60243590811515820361000e57565b503461000e57602036600319011261000e5760043580151580910361000e57610fb96116da565b61012f9060ff801983541691161790556000604051f35b503461000e57600036600319011261000e5760206001600160a01b0360fb5416604051908152f35b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020838186019501011161000e57565b503461000e57608036600319011261000e5767ffffffffffffffff60043581811161000e57611059903690600401610ff8565b60249291923591821161000e576110776110ca923690600401610ff8565b61107f6104e7565b916110886104fd565b93600054966110ae60ff8960081c16158099819a611148575b8115611128575b50611fe0565b876110c1600160ff196000541617600055565b61110f57612052565b6110d057005b6110e061ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b61112361010061ff00196000541617600055565b612052565b303b1591508161113a575b50386110a8565b6001915060ff161438611133565b600160ff82161091506110a1565b503461000e5760008060031936011261049e57604051908060665461117a81611861565b8085529160019180831690811561047d57506001146111a35761041e8561041281870382610c93565b9250606683527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e943545b8284106111e65750505081016020016104128261041e610402565b805460208587018101919091529093019281016111cb565b503461000e57600036600319011261000e57602060ff61012f5460081c166040519015158152f35b503461000e57604036600319011261000e576112406104d1565b611248610f83565b6001600160a01b038216918233146112cb57816112886112999233600052606a6020526040600020906001600160a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b503461000e57604036600319011261000e5767ffffffffffffffff60243581811161000e57611343903690600401610ff8565b919061134d6116da565b6113846005604051809560209481611366878501612987565b9182370164173539b7b760d91b815203601a19810186520184610c93565b600091600435835261013382526040832091845191821161145d575b6113b4826113ae8554611861565b8561247f565b80601f83116001146113f057508394829394926113e5575b50508160011b916000199060031b1c1916179055604051f35b0151905038806113cc565b90601f1983169561140685600052602060002090565b9286905b8882106114455750508360019596971061142c575b505050811b019055604051f35b015160001960f88460031b161c1916905538808061141f565b8060018596829496860151815501950193019061140a565b611465610c53565b6113a0565b503461000e57608036600319011261000e576114846104d1565b61148c610513565b6064359167ffffffffffffffff831161000e573660238401121561000e576114c1610581933690602481600401359101610ce0565b9160443591611a7e565b503461000e57602036600319011261000e5761041e6114eb600435612c99565b60405191829160208352602083019061035f565b503461000e57604036600319011261000e57602060ff6115566115206104d1565b6001600160a01b03611530610513565b9116600052606a84526040600020906001600160a01b0316600052602052604060002090565b54166040519015158152f35b503461000e5761157136610d17565b6115796116da565b805167ffffffffffffffff811161163f575b610131906115a28161159d8454611861565b61232b565b602080601f83116001146115d15750819293600092610dc35750508160011b916000199060031b1c1916179055005b90601f198316946116056101316000527fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db7390565b926000905b878210611627575050836001959610610e2557505050811b019055005b8060018596829496860151815501950193019061160a565b611647610c53565b61158b565b503461000e57602036600319011261000e576116666104d1565b61166e6116da565b6001600160a01b038116156116865761058190611732565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6001600160a01b0360fb541633036116ee57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60fb54906001600160a01b0380911691826001600160a01b031982161760fb55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b6001600160a01b0316801561179c57600052606860205260406000205490565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b156117fa57565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b60005260676020526001600160a01b03604060002054166103c18115156117f3565b90600182811c92168015611891575b602083101461187b57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611870565b604051906000826101319182546118b181611861565b8084529360019180831690811561193957506001146118db575b50506118d992500383610c93565b565b600090815291507fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db735b84831061191e57506118d9935050810160200138806118cb565b81935090816020925483858a01015201910190918592611904565b9550505050505060ff191660208301526118d9826040810138806118cb565b1561195f57565b60405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608490fd5b6119f26119ed8260005260676020526001600160a01b0360406000205416151590565b6117f3565b60005260696020526001600160a01b036040600020541690565b15611a1357565b60405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f7665640000000000000000000000000000000000006064820152608490fd5b90611aa2939291611a9261077f8433611b09565b611a9d838383611c32565b611ebf565b15611aa957565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b6001600160a01b0380611b1b8461183f565b169281831692848414948515611b51575b50508315611b3b575b50505090565b611b47919293506119ca565b1614388080611b35565b60ff92955090611b8091600052606a6020526040600020906001600160a01b0316600052602052604060002090565b5416923880611b2c565b15611b9157565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b60018110611c09575b6000190190565b611c11611be2565b611c02565b6001906001198111611c26570190565b611c2e611be2565b0190565b90611c3c8361183f565b6001600160a01b039182918285169384911603611d2257611c95611cf992821694611c68861515611b8a565b611c73878483612e2f565b611c7c87611d75565b6001600160a01b03166000526068602052604060002090565b611c9f8154611bf9565b9055611cbe816001600160a01b03166000526068602052604060002090565b611cc88154611c16565b9055611cde856000526067602052604060002090565b906001600160a01b03166001600160a01b0319825416179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b6000818152606960205260408120805473ffffffffffffffffffffffffffffffffffffffff191690556001600160a01b03611daf8361183f565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92582604051a4565b6000828152606960205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556001600160a01b0380611e1e8461183f565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b9081602091031261000e57516103c1816102c4565b90926103c194936080936001600160a01b0380921684521660208301526040820152816060820152019061035f565b3d15611eba573d90611ea082610cb5565b91611eae6040519384610c93565b82523d6000602084013e565b606090565b92909190823b15611fc057611efa9260209260006001600160a01b03604051809781968295630a85bd0160e11b9b8c85523360048601611e60565b0393165af160009181611f90575b50611f8257611f15611e8f565b80519081611f7d5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b602001fd5b6001600160e01b0319161490565b611fb291925060203d8111611fb9575b611faa8183610c93565b810190611e4b565b9038611f08565b503d611fa0565b50505050600190565b50634e487b7160e01b600052603260045260246000fd5b15611fe757565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608490fd5b6120659061206d93929695963691610ce0565b923691610ce0565b9061208860ff60005460081c166120838161223b565b61223b565b80519067ffffffffffffffff821161222e575b6120af826120aa606554611861565b61239d565b60209081601f841160011461219257506118d9959383612168946001600160a01b0397946120f994600092612187575b50508160011b916000199060031b1c1916176065556124d3565b6121016126a8565b61210961229b565b61012f805461ffff1916905561271061012e55612127600161012d55565b61012f9075ffffffffffffffffffffffffffffffffffffffff000082549160101b169075ffffffffffffffffffffffffffffffffffffffff00001916179055565b166001600160a01b0361013691166001600160a01b0319825416179055565b0151905038806120df565b60656000529190601f1984167f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c7936000905b828210612216575050846001600160a01b0397946120f9946118d99a989461216898600195106121fd575b505050811b016065556124d3565b015160001960f88460031b161c191690553880806121ef565b806001869782949787015181550196019401906121c4565b612236610c53565b61209b565b1561224257565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6122b060ff60005460081c166120838161223b565b6118d933611732565b601f81116122c5575050565b60009061013082527f2f605e086faac1d93117bbfbc18835d434e9405fadc1ca66faf4b864746daf34906020601f850160051c83019410612321575b601f0160051c01915b82811061231657505050565b81815560010161230a565b9092508290612301565b601f8111612337575050565b60009061013182527fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db73906020601f850160051c83019410612393575b601f0160051c01915b82811061238857505050565b81815560010161237c565b9092508290612373565b601f81116123a9575050565b600090606582527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c7906020601f850160051c83019410612404575b601f0160051c01915b8281106123f957505050565b8181556001016123ed565b90925082906123e4565b601f811161241a575050565b600090606682527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e94354906020601f850160051c83019410612475575b601f0160051c01915b82811061246a57505050565b81815560010161245e565b9092508290612455565b90601f811161248d57505050565b600091825260208220906020601f850160051c830194106124c9575b601f0160051c01915b8281106124be57505050565b8181556001016124b2565b90925082906124a9565b90815167ffffffffffffffff81116125be575b6124fa816124f5606654611861565b61240e565b602080601f8311600114612536575081929360009261252b575b50508160011b916000199060031b1c191617606655565b015190503880612514565b90601f1983169461256960666000527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e9435490565b926000905b8782106125a657505083600195961061258d575b505050811b01606655565b015160001960f88460031b161c19169055388080612582565b8060018596829496860151815501950193019061256e565b6125c6610c53565b6124e6565b919091825167ffffffffffffffff811161269b575b6125f4816125ee8454611861565b8461247f565b602080601f8311600114612630575081929394600092612625575b50508160011b916000199060031b1c1916179055565b01519050388061260f565b90601f1983169561264685600052602060002090565b926000905b8882106126835750508360019596971061266a575b505050811b019055565b015160001960f88460031b161c19169055388080612660565b8060018596829496860151815501950193019061264b565b6126a3610c53565b6125e0565b6118d960ff60005460081c1661223b565b156126c057565b60405162461bcd60e51b815260206004820152601160248201527f457863656564206d617820616d6f756e740000000000000000000000000000006044820152606490fd5b6001600160a01b0381169081156127f4576127368360005260676020526001600160a01b0360406000205416151590565b6127af57806127488461278593612e04565b612765816001600160a01b03166000526068602052604060002090565b61276f8154611c16565b9055611cde846000526067602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a4565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b91909161285b8160005260676020526001600160a01b0360406000205416151590565b1561291c5760005260206097815260406000209083519067ffffffffffffffff821161290f575b612890826113ae8554611861565b80601f83116001146128be5750819293946000926126255750508160011b916000199060031b1c1916179055565b90601f198316956128d485600052602060002090565b926000905b8882106128f75750508360019596971061266a57505050811b019055565b806001859682949686015181550195019301906128d9565b612917610c53565b612882565b60405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201527f6578697374656e7420746f6b656e0000000000000000000000000000000000006064820152608490fd5b9060009161013090815461299a81611861565b92600191808316908115612a0e57506001146129b7575b50505050565b9091929394506000527f2f605e086faac1d93117bbfbc18835d434e9405fadc1ca66faf4b864746daf34906000915b8483106129fb575050500190388080806129b1565b81816020925485870152019201916129e6565b60ff19168452505050019150388080806129b1565b908092918237016000815290565b15612a3857565b60405162461bcd60e51b815260206004820152600f60248201527f4e6f7420796574207374617274656400000000000000000000000000000000006044820152606490fd5b15612a8457565b60405162461bcd60e51b815260206004820152600f60248201527f496e76616c6964204261736555524900000000000000000000000000000000006044820152606490fd5b15612ad057565b60405162461bcd60e51b815260206004820152602160248201527f546865206e657874207363656e6172696f206973206e6f7420656e61626c65646044820152602160f81b6064820152608490fd5b6001906000198114611c26570190565b9190811015612b40575b60051b0190565b612b48611fc9565b612b39565b15612b5457565b60405162461bcd60e51b815260206004820152601860248201527f546f6b656e206f776e6572206973206e6f742066616c736500000000000000006044820152606490fd5b15612ba057565b60405162461bcd60e51b815260206004820152601760248201527f416c72656164792052657665616c656420746f6b656e210000000000000000006044820152606490fd5b9190811015612c28575b60051b81013590601e198136030182121561000e57019081359167ffffffffffffffff831161000e57602001823603811361000e579190565b612c30611fc9565b612bef565b6001600160a01b039081610135541691823b1561000e5760246000928360405195869485936319549d1d60e11b85521660048401525af18015612c8d57612c795750565b67ffffffffffffffff8111610c8657604052565b6040513d6000823e3d90fd5b612cb98160005260676020526001600160a01b0360406000205416151590565b15612d995760ff612cd582600052610134602052604060002090565b541615612d9057612cf190600052610133602052604060002090565b60405190816000825492612d0484611861565b908184526001948581169081600014612d715750600114612d2e575b50506103c192500382610c93565b9093915060005260209081600020936000915b818310612d595750506103c193508201013880612d20565b85548784018501529485019486945091830191612d41565b9550505050505060ff191660208201526103c181604081013880612d20565b506103c161189b565b60405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f722060448201527f6e6f6e6578697374656e7420746f6b656e0000000000000000000000000000006064820152608490fd5b90612e0e81612f8d565b6001600160a01b038216612e26576118d99150613006565b6118d991612f54565b9091906001600160a01b038082169182612e695750612e4d83612f8d565b831680612e605750506118d99150613006565b03612e26575050565b8185168303612e79575b50612e4d565b612eec612e858261177c565b60018110612f47575b60001901612edd60009387855260ca6020526040852054838103612ef3575b5084612ec38960005260ca602052604060002090565b556001600160a01b031660005260c9602052604060002090565b90600052602052604060002090565b5538612e73565b87865260c960205260408620848752602052612f40604087205480612f2f84612edd876001600160a01b031660005260c9602052604060002090565b5560005260ca602052604060002090565b5538612ead565b612f4f611be2565b612e8e565b604090612f608161177c565b926001600160a01b0360009216825260c96020528282208483526020528083832055815260ca6020522055565b60cb548160005260cc6020528060406000205568010000000000000000811015612ff9575b600181018060cb55811015612fec575b60cb6000527fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0155565b612ff4611fc9565b612fc2565b613001610c53565b612fb2565b60cb80546001811061310e575b60009083825260cc602052816130b560408220549560001996848881011015613101575b8684526130a47fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fa9586810154908310156130f4575b88865280837fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb015560005260cc602052604060002090565b5560005260cc602052604060002090565b5582549384156130e057840193808510156130d3575b838352015555565b6130db611fc9565b6130cb565b634e487b7160e01b83526031600452602483fd5b6130fc611fc9565b61306c565b613109611fc9565b613037565b613116611be2565b61301356fea2646970667358221220a47f129ed2c8562a400463c245ae7e68d5b63bfd2b6b40289c86a73145e900e164736f6c634300080e0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a7146102bb57806306fdde03146102b2578063081812fc146102a9578063095ea7b3146102a057806318160ddd1461029757806318758ec31461028e5780631dd8792b146102855780632084ab831461027c57806323b872dd14610273578063257a1a631461026a5780632f745c591461026157806332a93a3a1461025857806342842e0e1461024f5780634f6ccce71461024657806353de78041461023d57806354214f691461023457806355f804b31461022b5780636352211e146102225780636ce653c21461021957806370a0823114610210578063715018a61461020757806376661e42146101fe5780638b2e9809146101f55780638da5cb5b146101ec5780638f15b414146101e357806395d89b41146101da578063a0d90f76146101d1578063a22cb465146101c8578063a3057227146101bf578063b88d4fde146101b6578063c87b56dd146101ad578063e985e9c5146101a4578063f2c4ce1e1461019b5763f2fde38b1461019357600080fd5b61000e61164c565b5061000e611562565b5061000e6114ff565b5061000e6114cb565b5061000e61146a565b5061000e611310565b5061000e611226565b5061000e6111fe565b5061000e611156565b5061000e611026565b5061000e610fd0565b5061000e610f92565b5061000e610f63565b5061000e610f03565b5061000e610ed7565b5061000e610e82565b5061000e610e63565b5061000e610d53565b5061000e610c2e565b5061000e610a8a565b5061000e6109ad565b5061000e610965565b5061000e610867565b5061000e6107a9565b5061000e610789565b5061000e61075f565b5061000e6106f7565b5061000e610669565b5061000e61063d565b5061000e61061e565b5061000e610529565b5061000e6104a1565b5061000e6103c4565b5061000e6102d6565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e5760206004356102f6816102c4565b63ffffffff60e01b1663780e9d6360e01b811490811561031c575b506040519015158152f35b6380ac58cd60e01b81149150811561034e575b811561033d575b5038610311565b6301ffc9a760e01b14905038610336565b635b5e139f60e01b8114915061032f565b91908251928382526000905b84821061039857509280602093941161038b575b601f01601f1916010190565b600083828401015261037f565b9060209081808285010151908286010152019061036b565b9060206103c192818152019061035f565b90565b503461000e5760008060031936011261049e5760405190806065546103e881611861565b8085529160019180831690811561047d5750600114610422575b61041e8561041281870382610c93565b604051918291826103b0565b0390f35b9250606583527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c75b8284106104655750505081016020016104128261041e610402565b8054602085870181019190915290930192810161044a565b60ff191660208701525050604084019250610412915083905061041e610402565b80fd5b503461000e57602036600319011261000e5760206104c06004356119ca565b6001600160a01b0360405191168152f35b600435906001600160a01b038216820361000e57565b604435906001600160a01b038216820361000e57565b606435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57604036600319011261000e576105436104d1565b60243561054f8161183f565b916001600160a01b0380841680918316146105cf576105819361057c913314908115610583575b50611958565b611dd8565b005b6105c991506105c2906105aa33916001600160a01b0316600052606a602052604060002090565b906001600160a01b0316600052602052604060002090565b5460ff1690565b38610576565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b503461000e57600036600319011261000e57602060cb54604051908152f35b503461000e57600036600319011261000e5760206001600160a01b0361012f5460101c16604051908152f35b503461000e57600036600319011261000e57604080805161068981610c6a565b3690376106946116da565b805181810181811067ffffffffffffffff8211176106ea575b825261012d54815261012e549060209182820152825191826000905b600282106106d5578585f35b828060019286518152019401910190926106c9565b6106f2610c53565b6106ad565b503461000e57602036600319011261000e57600435600052610134602052602060ff604060002054166040519015158152f35b606090600319011261000e576001600160a01b0390600435828116810361000e5791602435908116810361000e579060443590565b503461000e576105816107713661072a565b9161078461077f8433611b09565b611a0c565b611c32565b503461000e57600036600319011261000e57602061012e54604051908152f35b503461000e57604036600319011261000e576107c36104d1565b602435906107d08161177c565b82101561080e576001600160a01b031660005260c960205260406000209060005260205261041e604060002054604051918291829190602083019252565b60405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608490fd5b503461000e57602036600319011261000e576108816104d1565b6001600160a01b0361012f5460101c163303610920576108f86108fe916108bc61012d918254906108b761012e548311156126b9565b612705565b6108cf81546108c961189b565b90612838565b6108f26108e88254600052610134602052604060002090565b805460ff19169055565b54611c16565b61012d55565b4361091d336001600160a01b0316600052610132602052604060002090565b55005b60405162461bcd60e51b815260206004820152601560248201527f63616c6c6572206973206e6f74206f726967696e2100000000000000000000006044820152606490fd5b503461000e576105816109773661072a565b90604051926020840184811067ffffffffffffffff8211176109a0575b60405260008452611a7e565b6109a8610c53565b610994565b503461000e57602036600319011261000e5760043560cb548110156109ff5760cb6000527fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0154604051908152602090f35b60405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608490fd5b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020808501948460051b01011161000e57565b503461000e5760408060031936011261000e5767ffffffffffffffff60043581811161000e57610abe903690600401610a59565b909160243590811161000e57610ad8903690600401610a59565b610b17600160ff61012f96949654610af583838316151514612a31565b610b0b610b0461013054611861565b1515612a7d565b60081c16151514612ac9565b60005b838110610b2357005b610c2990610b5433610b4e610b42610b3c858a8a612b2f565b3561183f565b6001600160a01b031690565b14612b4d565b610b88610b82610b7d6105c2610b6b858a8a612b2f565b35600052610134602052604060002090565b151590565b15612b99565b610c1b610bd8610b9983868a612be5565b610bca610bb98c94939451948593610bb360208601612987565b91612a23565b64173539b7b760d91b815260050190565b03601f198101835282610c93565b610bf6610be9610b6b858a8a612b2f565b805460ff19166001179055565b610c16610c04848989612b2f565b35600052610133602052604060002090565b6125cb565b610c2433612c35565b612b1f565b610b1a565b503461000e57600036600319011261000e57602060ff61012f54166040519015158152f35b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117610c8657604052565b610c8e610c53565b604052565b90601f8019910116810190811067ffffffffffffffff821117610c8657604052565b60209067ffffffffffffffff8111610cd3575b601f01601f19160190565b610cdb610c53565b610cc8565b929192610cec82610cb5565b91610cfa6040519384610c93565b82948184528183011161000e578281602093846000960137010152565b602060031982011261000e576004359067ffffffffffffffff821161000e578060238301121561000e578160246103c193600401359101610ce0565b503461000e57610d6236610d17565b610d6a6116da565b805167ffffffffffffffff8111610e56575b61013090610d9381610d8e8454611861565b6122b9565b602080601f8311600114610dce5750819293600092610dc3575b50508160011b916000199060031b1c1916179055005b015190503880610dad565b90601f19831694610e026101306000527f2f605e086faac1d93117bbfbc18835d434e9405fadc1ca66faf4b864746daf3490565b926000905b878210610e3e575050836001959610610e25575b505050811b019055005b015160001960f88460031b161c19169055388080610e1b565b80600185968294968601518155019501930190610e07565b610e5e610c53565b610d7c565b503461000e57602036600319011261000e5760206104c060043561183f565b503461000e57602036600319011261000e57610e9c6104d1565b610ea46116da565b6001600160a01b0361013591166001600160a01b031982541617905561012f61010061ff00198254161790556000604051f35b503461000e57602036600319011261000e576020610efb610ef66104d1565b61177c565b604051908152f35b503461000e5760008060031936011261049e57610f1e6116da565b60fb546001600160a01b0319811660fb55816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e57600036600319011261000e57602061012d54604051908152f35b60243590811515820361000e57565b503461000e57602036600319011261000e5760043580151580910361000e57610fb96116da565b61012f9060ff801983541691161790556000604051f35b503461000e57600036600319011261000e5760206001600160a01b0360fb5416604051908152f35b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020838186019501011161000e57565b503461000e57608036600319011261000e5767ffffffffffffffff60043581811161000e57611059903690600401610ff8565b60249291923591821161000e576110776110ca923690600401610ff8565b61107f6104e7565b916110886104fd565b93600054966110ae60ff8960081c16158099819a611148575b8115611128575b50611fe0565b876110c1600160ff196000541617600055565b61110f57612052565b6110d057005b6110e061ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b61112361010061ff00196000541617600055565b612052565b303b1591508161113a575b50386110a8565b6001915060ff161438611133565b600160ff82161091506110a1565b503461000e5760008060031936011261049e57604051908060665461117a81611861565b8085529160019180831690811561047d57506001146111a35761041e8561041281870382610c93565b9250606683527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e943545b8284106111e65750505081016020016104128261041e610402565b805460208587018101919091529093019281016111cb565b503461000e57600036600319011261000e57602060ff61012f5460081c166040519015158152f35b503461000e57604036600319011261000e576112406104d1565b611248610f83565b6001600160a01b038216918233146112cb57816112886112999233600052606a6020526040600020906001600160a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b503461000e57604036600319011261000e5767ffffffffffffffff60243581811161000e57611343903690600401610ff8565b919061134d6116da565b6113846005604051809560209481611366878501612987565b9182370164173539b7b760d91b815203601a19810186520184610c93565b600091600435835261013382526040832091845191821161145d575b6113b4826113ae8554611861565b8561247f565b80601f83116001146113f057508394829394926113e5575b50508160011b916000199060031b1c1916179055604051f35b0151905038806113cc565b90601f1983169561140685600052602060002090565b9286905b8882106114455750508360019596971061142c575b505050811b019055604051f35b015160001960f88460031b161c1916905538808061141f565b8060018596829496860151815501950193019061140a565b611465610c53565b6113a0565b503461000e57608036600319011261000e576114846104d1565b61148c610513565b6064359167ffffffffffffffff831161000e573660238401121561000e576114c1610581933690602481600401359101610ce0565b9160443591611a7e565b503461000e57602036600319011261000e5761041e6114eb600435612c99565b60405191829160208352602083019061035f565b503461000e57604036600319011261000e57602060ff6115566115206104d1565b6001600160a01b03611530610513565b9116600052606a84526040600020906001600160a01b0316600052602052604060002090565b54166040519015158152f35b503461000e5761157136610d17565b6115796116da565b805167ffffffffffffffff811161163f575b610131906115a28161159d8454611861565b61232b565b602080601f83116001146115d15750819293600092610dc35750508160011b916000199060031b1c1916179055005b90601f198316946116056101316000527fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db7390565b926000905b878210611627575050836001959610610e2557505050811b019055005b8060018596829496860151815501950193019061160a565b611647610c53565b61158b565b503461000e57602036600319011261000e576116666104d1565b61166e6116da565b6001600160a01b038116156116865761058190611732565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6001600160a01b0360fb541633036116ee57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60fb54906001600160a01b0380911691826001600160a01b031982161760fb55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b6001600160a01b0316801561179c57600052606860205260406000205490565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b156117fa57565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b60005260676020526001600160a01b03604060002054166103c18115156117f3565b90600182811c92168015611891575b602083101461187b57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611870565b604051906000826101319182546118b181611861565b8084529360019180831690811561193957506001146118db575b50506118d992500383610c93565b565b600090815291507fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db735b84831061191e57506118d9935050810160200138806118cb565b81935090816020925483858a01015201910190918592611904565b9550505050505060ff191660208301526118d9826040810138806118cb565b1561195f57565b60405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608490fd5b6119f26119ed8260005260676020526001600160a01b0360406000205416151590565b6117f3565b60005260696020526001600160a01b036040600020541690565b15611a1357565b60405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f7665640000000000000000000000000000000000006064820152608490fd5b90611aa2939291611a9261077f8433611b09565b611a9d838383611c32565b611ebf565b15611aa957565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b6001600160a01b0380611b1b8461183f565b169281831692848414948515611b51575b50508315611b3b575b50505090565b611b47919293506119ca565b1614388080611b35565b60ff92955090611b8091600052606a6020526040600020906001600160a01b0316600052602052604060002090565b5416923880611b2c565b15611b9157565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b60018110611c09575b6000190190565b611c11611be2565b611c02565b6001906001198111611c26570190565b611c2e611be2565b0190565b90611c3c8361183f565b6001600160a01b039182918285169384911603611d2257611c95611cf992821694611c68861515611b8a565b611c73878483612e2f565b611c7c87611d75565b6001600160a01b03166000526068602052604060002090565b611c9f8154611bf9565b9055611cbe816001600160a01b03166000526068602052604060002090565b611cc88154611c16565b9055611cde856000526067602052604060002090565b906001600160a01b03166001600160a01b0319825416179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b6000818152606960205260408120805473ffffffffffffffffffffffffffffffffffffffff191690556001600160a01b03611daf8361183f565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92582604051a4565b6000828152606960205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556001600160a01b0380611e1e8461183f565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b9081602091031261000e57516103c1816102c4565b90926103c194936080936001600160a01b0380921684521660208301526040820152816060820152019061035f565b3d15611eba573d90611ea082610cb5565b91611eae6040519384610c93565b82523d6000602084013e565b606090565b92909190823b15611fc057611efa9260209260006001600160a01b03604051809781968295630a85bd0160e11b9b8c85523360048601611e60565b0393165af160009181611f90575b50611f8257611f15611e8f565b80519081611f7d5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b602001fd5b6001600160e01b0319161490565b611fb291925060203d8111611fb9575b611faa8183610c93565b810190611e4b565b9038611f08565b503d611fa0565b50505050600190565b50634e487b7160e01b600052603260045260246000fd5b15611fe757565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608490fd5b6120659061206d93929695963691610ce0565b923691610ce0565b9061208860ff60005460081c166120838161223b565b61223b565b80519067ffffffffffffffff821161222e575b6120af826120aa606554611861565b61239d565b60209081601f841160011461219257506118d9959383612168946001600160a01b0397946120f994600092612187575b50508160011b916000199060031b1c1916176065556124d3565b6121016126a8565b61210961229b565b61012f805461ffff1916905561271061012e55612127600161012d55565b61012f9075ffffffffffffffffffffffffffffffffffffffff000082549160101b169075ffffffffffffffffffffffffffffffffffffffff00001916179055565b166001600160a01b0361013691166001600160a01b0319825416179055565b0151905038806120df565b60656000529190601f1984167f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c7936000905b828210612216575050846001600160a01b0397946120f9946118d99a989461216898600195106121fd575b505050811b016065556124d3565b015160001960f88460031b161c191690553880806121ef565b806001869782949787015181550196019401906121c4565b612236610c53565b61209b565b1561224257565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6122b060ff60005460081c166120838161223b565b6118d933611732565b601f81116122c5575050565b60009061013082527f2f605e086faac1d93117bbfbc18835d434e9405fadc1ca66faf4b864746daf34906020601f850160051c83019410612321575b601f0160051c01915b82811061231657505050565b81815560010161230a565b9092508290612301565b601f8111612337575050565b60009061013182527fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db73906020601f850160051c83019410612393575b601f0160051c01915b82811061238857505050565b81815560010161237c565b9092508290612373565b601f81116123a9575050565b600090606582527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c7906020601f850160051c83019410612404575b601f0160051c01915b8281106123f957505050565b8181556001016123ed565b90925082906123e4565b601f811161241a575050565b600090606682527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e94354906020601f850160051c83019410612475575b601f0160051c01915b82811061246a57505050565b81815560010161245e565b9092508290612455565b90601f811161248d57505050565b600091825260208220906020601f850160051c830194106124c9575b601f0160051c01915b8281106124be57505050565b8181556001016124b2565b90925082906124a9565b90815167ffffffffffffffff81116125be575b6124fa816124f5606654611861565b61240e565b602080601f8311600114612536575081929360009261252b575b50508160011b916000199060031b1c191617606655565b015190503880612514565b90601f1983169461256960666000527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e9435490565b926000905b8782106125a657505083600195961061258d575b505050811b01606655565b015160001960f88460031b161c19169055388080612582565b8060018596829496860151815501950193019061256e565b6125c6610c53565b6124e6565b919091825167ffffffffffffffff811161269b575b6125f4816125ee8454611861565b8461247f565b602080601f8311600114612630575081929394600092612625575b50508160011b916000199060031b1c1916179055565b01519050388061260f565b90601f1983169561264685600052602060002090565b926000905b8882106126835750508360019596971061266a575b505050811b019055565b015160001960f88460031b161c19169055388080612660565b8060018596829496860151815501950193019061264b565b6126a3610c53565b6125e0565b6118d960ff60005460081c1661223b565b156126c057565b60405162461bcd60e51b815260206004820152601160248201527f457863656564206d617820616d6f756e740000000000000000000000000000006044820152606490fd5b6001600160a01b0381169081156127f4576127368360005260676020526001600160a01b0360406000205416151590565b6127af57806127488461278593612e04565b612765816001600160a01b03166000526068602052604060002090565b61276f8154611c16565b9055611cde846000526067602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a4565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b91909161285b8160005260676020526001600160a01b0360406000205416151590565b1561291c5760005260206097815260406000209083519067ffffffffffffffff821161290f575b612890826113ae8554611861565b80601f83116001146128be5750819293946000926126255750508160011b916000199060031b1c1916179055565b90601f198316956128d485600052602060002090565b926000905b8882106128f75750508360019596971061266a57505050811b019055565b806001859682949686015181550195019301906128d9565b612917610c53565b612882565b60405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201527f6578697374656e7420746f6b656e0000000000000000000000000000000000006064820152608490fd5b9060009161013090815461299a81611861565b92600191808316908115612a0e57506001146129b7575b50505050565b9091929394506000527f2f605e086faac1d93117bbfbc18835d434e9405fadc1ca66faf4b864746daf34906000915b8483106129fb575050500190388080806129b1565b81816020925485870152019201916129e6565b60ff19168452505050019150388080806129b1565b908092918237016000815290565b15612a3857565b60405162461bcd60e51b815260206004820152600f60248201527f4e6f7420796574207374617274656400000000000000000000000000000000006044820152606490fd5b15612a8457565b60405162461bcd60e51b815260206004820152600f60248201527f496e76616c6964204261736555524900000000000000000000000000000000006044820152606490fd5b15612ad057565b60405162461bcd60e51b815260206004820152602160248201527f546865206e657874207363656e6172696f206973206e6f7420656e61626c65646044820152602160f81b6064820152608490fd5b6001906000198114611c26570190565b9190811015612b40575b60051b0190565b612b48611fc9565b612b39565b15612b5457565b60405162461bcd60e51b815260206004820152601860248201527f546f6b656e206f776e6572206973206e6f742066616c736500000000000000006044820152606490fd5b15612ba057565b60405162461bcd60e51b815260206004820152601760248201527f416c72656164792052657665616c656420746f6b656e210000000000000000006044820152606490fd5b9190811015612c28575b60051b81013590601e198136030182121561000e57019081359167ffffffffffffffff831161000e57602001823603811361000e579190565b612c30611fc9565b612bef565b6001600160a01b039081610135541691823b1561000e5760246000928360405195869485936319549d1d60e11b85521660048401525af18015612c8d57612c795750565b67ffffffffffffffff8111610c8657604052565b6040513d6000823e3d90fd5b612cb98160005260676020526001600160a01b0360406000205416151590565b15612d995760ff612cd582600052610134602052604060002090565b541615612d9057612cf190600052610133602052604060002090565b60405190816000825492612d0484611861565b908184526001948581169081600014612d715750600114612d2e575b50506103c192500382610c93565b9093915060005260209081600020936000915b818310612d595750506103c193508201013880612d20565b85548784018501529485019486945091830191612d41565b9550505050505060ff191660208201526103c181604081013880612d20565b506103c161189b565b60405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f722060448201527f6e6f6e6578697374656e7420746f6b656e0000000000000000000000000000006064820152608490fd5b90612e0e81612f8d565b6001600160a01b038216612e26576118d99150613006565b6118d991612f54565b9091906001600160a01b038082169182612e695750612e4d83612f8d565b831680612e605750506118d99150613006565b03612e26575050565b8185168303612e79575b50612e4d565b612eec612e858261177c565b60018110612f47575b60001901612edd60009387855260ca6020526040852054838103612ef3575b5084612ec38960005260ca602052604060002090565b556001600160a01b031660005260c9602052604060002090565b90600052602052604060002090565b5538612e73565b87865260c960205260408620848752602052612f40604087205480612f2f84612edd876001600160a01b031660005260c9602052604060002090565b5560005260ca602052604060002090565b5538612ead565b612f4f611be2565b612e8e565b604090612f608161177c565b926001600160a01b0360009216825260c96020528282208483526020528083832055815260ca6020522055565b60cb548160005260cc6020528060406000205568010000000000000000811015612ff9575b600181018060cb55811015612fec575b60cb6000527fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0155565b612ff4611fc9565b612fc2565b613001610c53565b612fb2565b60cb80546001811061310e575b60009083825260cc602052816130b560408220549560001996848881011015613101575b8684526130a47fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fa9586810154908310156130f4575b88865280837fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb015560005260cc602052604060002090565b5560005260cc602052604060002090565b5582549384156130e057840193808510156130d3575b838352015555565b6130db611fc9565b6130cb565b634e487b7160e01b83526031600452602483fd5b6130fc611fc9565b61306c565b613109611fc9565b613037565b613116611be2565b61301356fea2646970667358221220a47f129ed2c8562a400463c245ae7e68d5b63bfd2b6b40289c86a73145e900e164736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mintingInformation()": {
        "details": "Returns. About Minting"
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "publicMint(address)": {
        "details": "A function that anyone can mint. Before reveal, it is minted in the unreveal state",
        "params": {
          "tokenOwner": "The owner of the minting token"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repairTokenURI(uint256,string)": {
        "details": "A function that can be repaired in the event of an unintended error when revealed. Only the owner can execute it",
        "params": {
          "tokenHash": "The unique hash value of the token",
          "tokenId": "The ID of the token you want to repair"
        }
      },
      "revealTokens(uint256[],string[])": {
        "details": "A function that revises tokens that have not yet been revealed. It issues tokens in the next scenario at the same time",
        "params": {
          "tokenHash": "The unique hash value of the token",
          "tokenIds": "The ID of the token you want to reveal"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "details": "Set base URI of reveal tokens. Only the owner can do it",
        "params": {
          "_newBaseURI": "Base URI of revealed tokens"
        }
      },
      "setNextScenarioConenct(address)": {
        "details": "Functions that associate with the following collection of scenarios",
        "params": {
          "nextScenario": "Address of the next scenario contract"
        }
      },
      "setNotRevealedURI(string)": {
        "details": "Set base URI of unreveal tokens. Only the owner can do it",
        "params": {
          "_newNotRevealedURI": "Base URI of unreveal tokens"
        }
      },
      "setRevealState(bool)": {
        "details": "A function that allows users to start reveal",
        "params": {
          "_state": "True & False, Allow reveal"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}"
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token"
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 285,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 288,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3014,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3786,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1172,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1174,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1178,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1182,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1186,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1192,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2034,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 2555,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2671,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2199,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2203,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2206,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "_allTokens",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2210,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2526,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "__gap",
        "offset": 0,
        "slot": "205",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 157,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "_owner",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 277,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 27894,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "mintIndexForSale",
        "offset": 0,
        "slot": "301",
        "type": "t_uint256"
      },
      {
        "astId": 27896,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "MAX_SALE_AMOUNT",
        "offset": 0,
        "slot": "302",
        "type": "t_uint256"
      },
      {
        "astId": 27898,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "isRevealed",
        "offset": 0,
        "slot": "303",
        "type": "t_bool"
      },
      {
        "astId": 27900,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "isEnabledNextScenario",
        "offset": 1,
        "slot": "303",
        "type": "t_bool"
      },
      {
        "astId": 27902,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "ORIGIN_CONTRACT",
        "offset": 2,
        "slot": "303",
        "type": "t_address"
      },
      {
        "astId": 27904,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "baseURI",
        "offset": 0,
        "slot": "304",
        "type": "t_string_storage"
      },
      {
        "astId": 27906,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "notRevealedURI",
        "offset": 0,
        "slot": "305",
        "type": "t_string_storage"
      },
      {
        "astId": 27910,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "_lastCallBlockNumber",
        "offset": 0,
        "slot": "306",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 27914,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "307",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 27918,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "revealChecked",
        "offset": 0,
        "slot": "308",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 27921,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "_nextScenario",
        "offset": 0,
        "slot": "309",
        "type": "t_contract(INextScenario)28417"
      },
      {
        "astId": 27924,
        "contract": "contracts/voting/ScenarioTwo.sol:NendNFTs2",
        "label": "_wETH",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(WETH)28455"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(INextScenario)28417": {
        "encoding": "inplace",
        "label": "contract INextScenario",
        "numberOfBytes": "20"
      },
      "t_contract(WETH)28455": {
        "encoding": "inplace",
        "label": "contract WETH",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}