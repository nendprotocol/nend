{
  "address": "0xB27C61e19B33FE02bAE1F18ed1abA4c14d33Bf4E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract NEND",
          "name": "_nend",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "insurance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CloseMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "conclusion",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "capacityInQuote",
          "type": "bool"
        }
      ],
      "name": "CreateMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "marketId",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "noteId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payoutPerVesting",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "created",
          "type": "uint48"
        }
      ],
      "name": "NoteCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "vestingCount",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "totalVested",
          "type": "uint256[]"
        }
      ],
      "name": "NotesRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adjustments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "change",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "lastAdjustment",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "timeToAdjusted",
          "type": "uint48"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "authorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commissionRate",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_capacity",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_capacityInQuote",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_initialPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "_conclusion",
          "type": "uint48"
        },
        {
          "internalType": "uint32",
          "name": "_depositInterval",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_tuneInterval",
          "type": "uint32"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getMarketData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insurance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "capacityInQuote",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketsForQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "lastTune",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "lastDecay",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "length",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "depositInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "tuneInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint8",
          "name": "quoteDecimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nend",
      "outputs": [
        {
          "internalType": "contract NEND",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "notes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payoutPerVesting",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "created",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "marketID",
          "type": "uint48"
        },
        {
          "internalType": "uint8",
          "name": "vestingCount",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "redeemAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_testing",
          "type": "bool"
        }
      ],
      "name": "setTesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "controlVariable",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "conclusion",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "maxDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testVestingInverval",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVestingCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_commissionRate",
          "type": "uint16"
        }
      ],
      "name": "updateCommissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_insurance",
          "type": "address"
        }
      ],
      "name": "updateInsurance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract NEND",
          "name": "_nend",
          "type": "address"
        }
      ],
      "name": "updateNend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingInverval",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfdbdfbde80b7b3b50b16c223e267a98f0f99d0a66bb9706fb657f87c63411556",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x2F358B80eD2d296C09560d2b9F70a7f81d57e352",
    "contractAddress": null,
    "transactionIndex": 23,
    "gasUsed": "2727590",
    "logsBloom": "0x00000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000008000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000020000000000000000000010000000000000000000000000000000000800000000000",
    "blockHash": "0xbaf68ea2c2943d4491f3049e9a58e27e822c134854181704f999375ca6d3b771",
    "transactionHash": "0xfdbdfbde80b7b3b50b16c223e267a98f0f99d0a66bb9706fb657f87c63411556",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 11349751,
        "transactionHash": "0xfdbdfbde80b7b3b50b16c223e267a98f0f99d0a66bb9706fb657f87c63411556",
        "address": "0xB27C61e19B33FE02bAE1F18ed1abA4c14d33Bf4E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002f358b80ed2d296c09560d2b9f70a7f81d57e352"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0xbaf68ea2c2943d4491f3049e9a58e27e822c134854181704f999375ca6d3b771"
      }
    ],
    "blockNumber": 11349751,
    "cumulativeGasUsed": "6127430",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x235D5eb29E540DB5D58Ba7CC4cC1fbf0118A1Fa2",
    "0xC3C6613f36FbBE4667997555A8E020316a46679a",
    "0xCAE22f4f0D72A28F70774F05D71B447B1EdDcd37"
  ],
  "numDeployments": 15,
  "solcInputHash": "e6a8509ab9edc0773d6a6bd4cf2732fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract NEND\",\"name\":\"_nend\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"insurance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CloseMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"conclusion\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"capacityInQuote\",\"type\":\"bool\"}],\"name\":\"CreateMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"marketId\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noteId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutPerVesting\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"created\",\"type\":\"uint48\"}],\"name\":\"NoteCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"vestingCount\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"totalVested\",\"type\":\"uint256[]\"}],\"name\":\"NotesRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adjustments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"change\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"lastAdjustment\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"timeToAdjusted\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_capacity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_capacityInQuote\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"_conclusion\",\"type\":\"uint48\"},{\"internalType\":\"uint32\",\"name\":\"_depositInterval\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_tuneInterval\",\"type\":\"uint32\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMarketData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"capacityInQuote\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsForQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"lastTune\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lastDecay\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"length\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"depositInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"tuneInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"quoteDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nend\",\"outputs\":[{\"internalType\":\"contract NEND\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutPerVesting\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"created\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"marketID\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"vestingCount\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"redeemAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_testing\",\"type\":\"bool\"}],\"name\":\"setTesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"conclusion\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testVestingInverval\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVestingCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_commissionRate\",\"type\":\"uint16\"}],\"name\":\"updateCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_insurance\",\"type\":\"address\"}],\"name\":\"updateInsurance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract NEND\",\"name\":\"_nend\",\"type\":\"address\"}],\"name\":\"updateNend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingInverval\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"close(uint256)\":{\"params\":{\"_id\":\"ID of market to close\"}},\"deposit(uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"the amount of quote token to spend\",\"_id\":\"the ID of the market\",\"_maxPrice\":\"the maxeimum price at which to buy\"},\"returns\":{\"index_\":\"     the user index of the Note (usd to redeem or query information)\",\"payout_\":\"    the amount of NEND due\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeem(uint256[])\":{\"params\":{\"_indexes\":\"the note indexes to redeem\"},\"returns\":{\"payout_\":\"    sum of payout sent, in NEND\"}},\"redeemAll(uint256)\":{\"details\":\"if possible, query indexesFor() off-chain and input in redeem() to save gas\",\"returns\":{\"_0\":\"sum of payout sent, in NEND\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"close(uint256)\":{\"notice\":\"disable existing market\"},\"deposit(uint256,uint256,uint256)\":{\"notice\":\"deposit quote tokens in exchange for a bond from a specified market\"},\"redeem(uint256[])\":{\"notice\":\"redeem notes for user\"},\"redeemAll(uint256)\":{\"notice\":\"redeem all redeemable markets for user\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bonding/BondDepository.sol\":\"BondDepository\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/access/MWOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract MWOwnable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(0x2F358B80eD2d296C09560d2b9F70a7f81d57e352);\\r\\n        // _transferOwnership(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier \\r\\n    onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x74bdfa3e963b95404e1b54bad52ae3f45163684fe644cd84b6b4054817cbff86\",\"license\":\"MIT\"},\"contracts/access/SimpleRoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract SimpleRoleAccess is MWOwnable {\\r\\n    mapping(address => mapping(string => bool)) public hasRole;\\r\\n\\r\\n    function authorize(\\r\\n        address operator,\\r\\n        string memory role,\\r\\n        bool authorized // onlyOwner\\r\\n    ) public {\\r\\n        hasRole[operator][role] = authorized;\\r\\n    }\\r\\n\\r\\n    modifier onlyRole(string memory _role) {\\r\\n        // require(\\r\\n        //     msg.sender == owner() || hasRole[msg.sender][_role],\\r\\n        //     \\\"Not authorized\\\"\\r\\n        // );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasAllRoles(string[] memory _roles) {\\r\\n        // for (uint256 i = 0; i < _roles.length; i++) {\\r\\n        //     require(hasRole[msg.sender][_roles[i]], \\\"Not authorized\\\");\\r\\n        // }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasSomeRoles(string[] memory _roles) {\\r\\n        // bool _hasRole;\\r\\n        // for (uint256 i = 0; i < _roles.length; i++) {\\r\\n        //     if (hasRole[msg.sender][_roles[i]]) {\\r\\n        //         _hasRole = true;\\r\\n        //         break;\\r\\n        //     }\\r\\n        // }\\r\\n        // require(_hasRole, \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfa22c01bc01559b14a4c692d1c7ca3ccd71541fbf54ecebefcf0b5a5e46da466\",\"license\":\"UNLICENSED\"},\"contracts/bonding/BondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./NoteKeeper.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./IBondDepository.sol\\\";\\r\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\r\\n\\r\\ncontract BondDepository is IBondDepository, NoteKeeper, SimpleRoleAccess {\\r\\n    /* ======== DEPENDENCIES ======== */\\r\\n\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /* ======== STATE VARIABLES ======== */\\r\\n\\r\\n    // Storage\\r\\n    Market[] public markets; // persistent market data\\r\\n    Terms[] public terms; // deposit construction data\\r\\n    Metadata[] public metadata; // extraneous market data\\r\\n    mapping(uint256 => Adjustment) public adjustments; // control variable changes\\r\\n    address public treasury;\\r\\n\\r\\n    // Queries\\r\\n    mapping(address => uint256[]) public marketsForQuote; // market IDs for quote token\\r\\n\\r\\n    /* ======== CONSTRUCTOR ======== */\\r\\n\\r\\n    constructor(\\r\\n        NEND _nend,\\r\\n        address insurance,\\r\\n        address _treasury\\r\\n    ) NoteKeeper(_nend, insurance) {\\r\\n        treasury = _treasury;\\r\\n    }\\r\\n\\r\\n    /* ======== DEPOSIT ======== */\\r\\n\\r\\n    /**\\r\\n     * @notice             deposit quote tokens in exchange for a bond from a specified market\\r\\n     * @param _id          the ID of the market\\r\\n     * @param _amount      the amount of quote token to spend\\r\\n     * @param _maxPrice    the maxeimum price at which to buy\\r\\n     * @return payout_     the amount of NEND due\\r\\n     * @return index_      the user index of the Note (usd to redeem or query information)\\r\\n     */\\r\\n    function deposit(\\r\\n        uint256 _id,\\r\\n        uint256 _amount,\\r\\n        uint256 _maxPrice\\r\\n    ) external override returns (uint256 payout_, uint256 index_) {\\r\\n        Market storage market = markets[_id];\\r\\n        Terms memory term = terms[_id];\\r\\n        uint48 currentTime = uint48(block.timestamp);\\r\\n\\r\\n        // Markets end at a defined timestamp\\r\\n        // |-------------------------------------| t\\r\\n        require(currentTime < term.conclusion, \\\"Depository: market concluded\\\");\\r\\n\\r\\n        // Debt and the control variable decay over time\\r\\n        _decay(_id, currentTime);\\r\\n\\r\\n        // Users input a maximum price, which protects them from price changes after\\r\\n        // entering the mempool. max price is a slippage mitigation measure\\r\\n        uint256 price = _marketPrice(_id);\\r\\n        require(price <= _maxPrice, \\\"Depository: more than max price\\\");\\r\\n\\r\\n        /**\\r\\n         * payout for the deposit = amount / price\\r\\n         *\\r\\n         * where\\r\\n         * payout = NEND out\\r\\n         * amount = quote tokens in\\r\\n         * price = quote tokens : NEND (i.e. 42069 DAI : NENDs)\\r\\n         *\\r\\n         * 1e27 = NEND decimals (18) + price decimals (9)\\r\\n         */\\r\\n        payout_ =\\r\\n            ((_amount * 1e27) / price) /\\r\\n            (10**metadata[_id].quoteDecimals);\\r\\n\\r\\n        // markets have a max payout amount, capping size because deposits\\r\\n        // do not experience slippage. max payout is recalculated upon tuning\\r\\n        require(payout_ <= market.maxPayout, \\\"Depository: max size exceeded\\\");\\r\\n\\r\\n        /*\\r\\n         * each market is initialized with a capacity\\r\\n         *\\r\\n         * this is either the number of NEND that the market can sell\\r\\n         * (if capacity in quote is false),\\r\\n         *\\r\\n         * or the number of quote tokens that the market can buy\\r\\n         * (if capacity in quote is true)\\r\\n         */\\r\\n        market.capacity -= market.capacityInQuote ? _amount : payout_;\\r\\n\\r\\n        /**\\r\\n         * bonds mature with a cliff at a set timestamp\\r\\n         * prior to the expiry timestamp, no payout tokens are accessible to the user\\r\\n         * after the expiry timestamp, the entire payout can be redeemed\\r\\n         *\\r\\n         * there are two types of bonds: fixed-term and fixed-expiration\\r\\n         *\\r\\n         * fixed-term bonds mature in a set amount of time from deposit\\r\\n         * i.e. term = 1 week. when alice deposits on day 1, her bond\\r\\n         * expires on day 8. when bob deposits on day 2, his bond expires day 9.\\r\\n         *\\r\\n         * fixed-expiration bonds mature at a set timestamp\\r\\n         * i.e. expiration = day 10. when alice deposits on day 1, her term\\r\\n         * is 9 days. when bob deposits on day 2, his term is 8 days.\\r\\n         */\\r\\n\\r\\n        // markets keep track of how many quote tokens have been\\r\\n        // purchased, and how much NEND has been sold\\r\\n        market.purchased += _amount;\\r\\n        market.sold += uint64(payout_);\\r\\n\\r\\n        // incrementing total debt raises the price of the next bond\\r\\n        market.totalDebt += uint64(payout_);\\r\\n\\r\\n        /**\\r\\n         * user data is stored as Notes. these are isolated array entries\\r\\n         * storing the amount due, the time created, the time when payout\\r\\n         * is redeemable, the time when payout was redeemed, and the ID\\r\\n         * of the market deposited into\\r\\n         */\\r\\n        index_ = addNote(uint48(_id), _amount, price, msg.sender, payout_);\\r\\n\\r\\n        // transfer payment to treasury\\r\\n        market.quoteToken.safeTransferFrom(msg.sender, treasury, _amount);\\r\\n\\r\\n        // if max debt is breached, the market is closed\\r\\n        // this a circuit breaker\\r\\n        if (term.maxDebt < market.totalDebt) {\\r\\n            market.capacity = 0;\\r\\n            emit CloseMarket(_id);\\r\\n        } else {\\r\\n            // if market will continue, the control variable is tuned to hit targets on time\\r\\n            _tune(_id, currentTime);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             decay debt, and adjust control variable if there is an active change\\r\\n     * @param _id          ID of market\\r\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\r\\n     */\\r\\n    function _decay(uint256 _id, uint48 _time) internal {\\r\\n        // Debt decay\\r\\n\\r\\n        /*\\r\\n         * Debt is a time-decayed sum of tokens spent in a market\\r\\n         * Debt is added when deposits occur and removed over time\\r\\n         * |\\r\\n         * |    debt falls with\\r\\n         * |   / \\\\  inactivity       / \\\\\\r\\n         * | /     \\\\              /\\\\/    \\\\\\r\\n         * |         \\\\           /         \\\\\\r\\n         * |           \\\\      /\\\\/            \\\\\\r\\n         * |             \\\\  /  and rises       \\\\\\r\\n         * |                with deposits\\r\\n         * |\\r\\n         * |------------------------------------| t\\r\\n         */\\r\\n        markets[_id].totalDebt -= _debtDecay(_id);\\r\\n        metadata[_id].lastDecay = _time;\\r\\n\\r\\n        // Control variable decay\\r\\n\\r\\n        // The bond control variable is continually tuned. When it is lowered (which\\r\\n        // lowers the market price), the change is carried out smoothly over time.\\r\\n        if (adjustments[_id].active) {\\r\\n            Adjustment storage adjustment = adjustments[_id];\\r\\n\\r\\n            (\\r\\n                uint256 adjustBy,\\r\\n                uint48 secondsSince,\\r\\n                bool stillActive\\r\\n            ) = _controlDecay(_id);\\r\\n            terms[_id].controlVariable -= adjustBy;\\r\\n\\r\\n            if (stillActive) {\\r\\n                adjustment.change -= adjustBy;\\r\\n                adjustment.timeToAdjusted -= secondsSince;\\r\\n                adjustment.lastAdjustment = _time;\\r\\n            } else {\\r\\n                adjustment.active = false;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             auto-adjust control variable to hit capacity/spend target\\r\\n     * @param _id          ID of market\\r\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\r\\n     */\\r\\n    function _tune(uint256 _id, uint48 _time) internal {\\r\\n        Metadata memory meta = metadata[_id];\\r\\n\\r\\n        if (_time >= meta.lastTune + meta.tuneInterval) {\\r\\n            Market memory market = markets[_id];\\r\\n\\r\\n            // compute seconds remaining until market will conclude\\r\\n            uint256 timeRemaining = terms[_id].conclusion - _time;\\r\\n            uint256 price = _marketPrice(_id);\\r\\n\\r\\n            // standardize capacity into an base token amount\\r\\n            // NEND decimals (9) + price decimals (9)\\r\\n            uint256 capacity = market.capacityInQuote\\r\\n                ? ((market.capacity * 1e27) / price) / (10**meta.quoteDecimals)\\r\\n                : market.capacity;\\r\\n\\r\\n            /**\\r\\n             * calculate the correct payout to complete on time assuming each bond\\r\\n             * will be max size in the desired deposit interval for the remaining time\\r\\n             *\\r\\n             * i.e. market has 10 days remaining. deposit interval is 1 day. capacity\\r\\n             * is 10,000 NEND. max payout would be 1,000 NEND (10,000 * 1 / 10).\\r\\n             */\\r\\n            markets[_id].maxPayout = uint64(\\r\\n                (capacity * meta.depositInterval) / timeRemaining\\r\\n            );\\r\\n\\r\\n            // calculate the ideal total debt to satisfy capacity in the remaining time\\r\\n            uint256 targetDebt = (capacity * meta.length) / timeRemaining;\\r\\n\\r\\n            // derive a new control variable from the target debt and current supply\\r\\n            uint64 newControlVariable = uint64(\\r\\n                (price * nend.timeSlicedCrossChainSupply()) / targetDebt\\r\\n            );\\r\\n\\r\\n            if (newControlVariable >= terms[_id].controlVariable) {\\r\\n                terms[_id].controlVariable = newControlVariable;\\r\\n            } else {\\r\\n                // if decrease, control variable change will be carried out over the tune interval\\r\\n                // this is because price will be lowered\\r\\n                uint256 change = terms[_id].controlVariable -\\r\\n                    newControlVariable;\\r\\n                adjustments[_id] = Adjustment(\\r\\n                    change,\\r\\n                    _time,\\r\\n                    meta.tuneInterval,\\r\\n                    true\\r\\n                );\\r\\n            }\\r\\n            metadata[_id].lastTune = _time;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ======== CREATE ======== */\\r\\n\\r\\n    function create(\\r\\n        IERC20 _quoteToken,\\r\\n        uint256 _capacity,\\r\\n        bool _capacityInQuote,\\r\\n        uint256 _initialPrice,\\r\\n        uint48 _conclusion,\\r\\n        uint32 _depositInterval,\\r\\n        uint32 _tuneInterval\\r\\n    ) external override onlyRole(\\\"admin\\\") returns (uint256 id_) {\\r\\n        uint256 secondsToConclusion = _conclusion - block.timestamp;\\r\\n\\r\\n        // the decimal count of the quote token\\r\\n        uint256 decimals = ERC20(address(_quoteToken)).decimals();\\r\\n\\r\\n        /*\\r\\n         * initial target debt is equal to capacity (this is the amount of debt\\r\\n         * that will decay over in the length of the program if price remains the same).\\r\\n         * it is converted into base token terms if passed in in quote token terms.\\r\\n         *\\r\\n         * 1e27 = NEND decimals (18) + initial price decimals (9)\\r\\n         */\\r\\n        uint256 targetDebt = _capacityInQuote\\r\\n            ? ((_capacity * 1e27) / _initialPrice) / 10**decimals\\r\\n            : _capacity;\\r\\n\\r\\n\\r\\n\\r\\n        // depositing into, or getting info for, the created market uses this ID\\r\\n        id_ = markets.length;\\r\\n\\r\\n        markets.push(\\r\\n            Market({\\r\\n                quoteToken: _quoteToken,\\r\\n                capacityInQuote: _capacityInQuote,\\r\\n                capacity: _capacity,\\r\\n                totalDebt: targetDebt,\\r\\n                maxPayout: (targetDebt * _depositInterval) / secondsToConclusion,\\r\\n                purchased: 0,\\r\\n                sold: 0\\r\\n            })\\r\\n        );\\r\\n\\r\\n        terms.push(\\r\\n            Terms({\\r\\n                controlVariable: (_initialPrice * nend.timeSlicedCrossChainSupply()) / targetDebt,\\r\\n                conclusion: uint48(_conclusion),\\r\\n                maxDebt: targetDebt + ((targetDebt * 1000000) / 1e5)\\r\\n            })\\r\\n        );\\r\\n\\r\\n        metadata.push(\\r\\n            Metadata({\\r\\n                lastTune: uint48(block.timestamp),\\r\\n                lastDecay: uint48(block.timestamp),\\r\\n                length: uint48(secondsToConclusion),\\r\\n                depositInterval: _depositInterval,\\r\\n                tuneInterval: _tuneInterval,\\r\\n                quoteDecimals: uint8(decimals)\\r\\n            })\\r\\n        );\\r\\n\\r\\n        marketsForQuote[address(_quoteToken)].push(id_);\\r\\n\\r\\n        emit CreateMarket(\\r\\n            id_,\\r\\n            address(_quoteToken),\\r\\n            uint48(_conclusion),\\r\\n            _capacityInQuote\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             disable existing market\\r\\n     * @param _id          ID of market to close\\r\\n     */\\r\\n    function close(uint256 _id) external override onlyRole(\\\"admin\\\") {\\r\\n        terms[_id].conclusion = uint48(block.timestamp);\\r\\n        markets[_id].capacity = 0;\\r\\n        emit CloseMarket(_id);\\r\\n    }\\r\\n\\r\\n    /* ======== EXTERNAL VIEW ======== */\\r\\n\\r\\n    function getMarketData(uint256 _id)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 currentPrice = _marketPrice(_id);\\r\\n\\r\\n        return (\\r\\n            currentPrice,\\r\\n            markets[_id].capacity,\\r\\n            (markets[_id].maxPayout *\\r\\n                (10**metadata[_id].quoteDecimals) *\\r\\n                currentPrice) / 1e27\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* ======== INTERNAL VIEW ======== */\\r\\n\\r\\n    function _debtDecay(uint256 _id) internal view returns (uint64) {\\r\\n        Metadata memory meta = metadata[_id];\\r\\n\\r\\n        uint256 secondsSince = block.timestamp - meta.lastDecay;\\r\\n\\r\\n        return uint64((markets[_id].totalDebt * secondsSince) / meta.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                  calculate current market price of quote token in base token\\r\\n     * @dev                     see marketPrice() for explanation of price computation\\r\\n     * @dev                     uses info from storage because data has been updated before call (vs marketPrice())\\r\\n     * @param _id               market ID\\r\\n     * @return                  price for market in NEND decimals\\r\\n     */\\r\\n    function _marketPrice(uint256 _id) internal view returns (uint256) {\\r\\n        return\\r\\n            (terms[_id].controlVariable * _debtRatio(_id)) /\\r\\n            (10**metadata[_id].quoteDecimals);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                  calculate debt factoring in decay\\r\\n     * @dev                     uses info from storage because data has been updated before call (vs debtRatio())\\r\\n     * @param _id               market ID\\r\\n     * @return                  current debt for market in quote decimals\\r\\n     */\\r\\n    function _debtRatio(uint256 _id) internal view returns (uint256) {\\r\\n        return\\r\\n            (markets[_id].totalDebt * (10**metadata[_id].quoteDecimals)) /\\r\\n            nend.timeSlicedCrossChainSupply();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                  amount to decay control variable by\\r\\n     * @param _id               ID of market\\r\\n     * @return decay_           change in control variable\\r\\n     * @return secondsSince_    seconds since last change in control variable\\r\\n     * @return active_          whether or not change remains active\\r\\n     */\\r\\n    function _controlDecay(uint256 _id)\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            uint256 decay_,\\r\\n            uint48 secondsSince_,\\r\\n            bool active_\\r\\n        )\\r\\n    {\\r\\n        Adjustment memory info = adjustments[_id];\\r\\n        if (!info.active) return (0, 0, false);\\r\\n\\r\\n        secondsSince_ = uint48(block.timestamp) - info.lastAdjustment;\\r\\n\\r\\n        active_ = secondsSince_ < info.timeToAdjusted;\\r\\n        decay_ = active_\\r\\n            ? (info.change * secondsSince_) / info.timeToAdjusted\\r\\n            : info.change;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x538b497123cef6c28359d3b40fe4bfbdc01610bb917f36fc35745b276bff5f4d\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/bonding/IBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IBondDepository {\\r\\n    event CreateMarket(\\r\\n        uint256 indexed id,\\r\\n        address indexed quoteToken,\\r\\n        uint48 conclusion,\\r\\n        bool capacityInQuote\\r\\n    );\\r\\n    event CloseMarket(uint256 indexed id);\\r\\n\\r\\n    // Info about each type of market\\r\\n    struct Market {\\r\\n        uint256 capacity; // capacity remaining\\r\\n        IERC20 quoteToken; // token to accept as payment\\r\\n        bool capacityInQuote; // capacity limit is in payment token (true) or in OHM (false, default)\\r\\n        uint256 totalDebt; // total debt from market\\r\\n        uint256 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\\r\\n        uint256 sold; // base tokens out\\r\\n        uint256 purchased; // quote tokens in\\r\\n    }\\r\\n\\r\\n    // Info for creating new markets\\r\\n    struct Terms {\\r\\n        uint256 controlVariable; // scaling variable for price\\r\\n        uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\r\\n        uint256 maxDebt; // 9 decimal debt maximum in OHM\\r\\n    }\\r\\n\\r\\n    // Additional info about market.\\r\\n    struct Metadata {\\r\\n        uint48 lastTune; // last timestamp when control variable was tuned\\r\\n        uint48 lastDecay; // last timestamp when market was created and debt was decayed\\r\\n        uint48 length; // time from creation to conclusion. used as speed to decay debt.\\r\\n        uint48 depositInterval; // target frequency of deposits\\r\\n        uint48 tuneInterval; // frequency of tuning\\r\\n        uint8 quoteDecimals; // decimals of quote token\\r\\n    }\\r\\n\\r\\n    // Control variable adjustment data\\r\\n    struct Adjustment {\\r\\n        uint256 change;\\r\\n        uint48 lastAdjustment;\\r\\n        uint48 timeToAdjusted;\\r\\n        bool active;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice deposit market\\r\\n     * @param _bid uint256\\r\\n     * @param _amount uint256\\r\\n     * @param _maxPrice uint256\\r\\n     * @return payout_ uint256\\r\\n     * @return index_ uint256\\r\\n     */\\r\\n    function deposit(\\r\\n        uint256 _bid,\\r\\n        uint256 _amount,\\r\\n        uint256 _maxPrice\\r\\n    ) external returns (uint256 payout_, uint256 index_);\\r\\n\\r\\n    function create(\\r\\n        IERC20 _quoteToken,\\r\\n        uint256 _capacity,\\r\\n        bool _capacityInQuote,\\r\\n        uint256 _initialPrice,\\r\\n        uint48 _conclusion,\\r\\n        uint32 _depositInterval,\\r\\n        uint32 _tuneInterval\\r\\n    ) external returns (uint256 id_);\\r\\n\\r\\n    function close(uint256 _id) external;\\r\\n\\r\\n    function getMarketData(uint256 _id)\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0xfccd55e2a01ab9301feb6322d492dcffe1b6c2931e28b32b90a853b4a1ce5b22\",\"license\":\"AGPL-3.0\"},\"contracts/bonding/INoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface INoteKeeper {\\r\\n    // Info for market note\\r\\n    struct Note {\\r\\n        uint256 payout; // Total NEND to be paid\\r\\n        uint256 payoutPerVesting; // Amount claimable every vesting\\r\\n        uint48 created; // time note was created\\r\\n        uint48 marketID; // market ID of deposit. uint48 to avoid adding a slot.\\r\\n        uint8 vestingCount; // Number of times vested\\r\\n    }\\r\\n\\r\\n    event NoteCreated(\\r\\n        address ownerAddress,\\r\\n        uint48 marketId,\\r\\n        uint256 noteId,\\r\\n        uint256 amount,\\r\\n        uint256 price,\\r\\n        uint256 payout,\\r\\n        uint256 payoutPerVesting,\\r\\n        uint48 created\\r\\n    );\\r\\n\\r\\n    event NotesRedeemed(\\r\\n        address ownerAddress,\\r\\n        uint256[] indexes,\\r\\n        uint8[] vestingCount,\\r\\n        uint256[] totalVested\\r\\n    );\\r\\n\\r\\n    function redeem(uint256[] memory _indexes) external returns (uint256);\\r\\n\\r\\n    function redeemAll(uint256 _marketId) external returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf336fa8e65c46a9367f77a4b9b8a072a7a96bcbfcea7fe902bc4d5597eb8115f\",\"license\":\"AGPL-3.0-only\"},\"contracts/bonding/NoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./INoteKeeper.sol\\\";\\r\\nimport \\\"../token/ERC20/NEND.sol\\\";\\r\\n\\r\\nabstract contract NoteKeeper is INoteKeeper, Testing {\\r\\n    mapping(address => Note[]) public notes; // user deposit data\\r\\n    address public insurance;\\r\\n    NEND public nend;\\r\\n    uint8 public immutable totalVestingCount = 5; // 5 times in 5 days\\r\\n    uint16 public commissionRate = 30; // Commission in basis point\\r\\n    uint48 public immutable vestingInverval = 1 days;\\r\\n    uint48 public immutable testVestingInverval = 10 minutes;\\r\\n\\r\\n    constructor(NEND _nend, address _insurance) {\\r\\n        insurance = _insurance;\\r\\n        nend = _nend;\\r\\n    }\\r\\n\\r\\n    // if treasury address changes on authority, update it\\r\\n    function updateNend(NEND _nend) external onlyOwner {\\r\\n        nend = _nend;\\r\\n    }\\r\\n\\r\\n    function updateInsurance(address _insurance) external onlyOwner {\\r\\n        insurance = _insurance;\\r\\n    }\\r\\n\\r\\n    function updateCommissionRate(uint16 _commissionRate) external onlyOwner {\\r\\n        require(\\r\\n            _commissionRate >= 0 && _commissionRate <= 10000,\\r\\n            \\\"Invalid basis point\\\"\\r\\n        );\\r\\n        commissionRate = _commissionRate;\\r\\n    }\\r\\n\\r\\n    /* ========== ADD ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice             adds a new Note for a user, stores the front end & DAO rewards, and mints & stakes payout & rewards\\r\\n     * @param _marketId    id of the market that created the note\\r\\n     * @param _amount      amount of quote token bonded\\r\\n     * @param _price       the bond price\\r\\n     * @param _user        the user that owns the Note\\r\\n     * @param _payout      the amount of NEND due to the user\\r\\n     * @return index_      the index of the Note in the user's array\\r\\n     */\\r\\n    function addNote(\\r\\n        uint48 _marketId,\\r\\n        uint256 _amount,\\r\\n        uint256 _price,\\r\\n        address _user,\\r\\n        uint256 _payout\\r\\n    ) internal returns (uint256 index_) {\\r\\n        uint256 insuranceFund = (_payout * commissionRate) / 10000;\\r\\n        uint256 userPayout = _payout - insuranceFund;\\r\\n\\r\\n        index_ = notes[_user].length;\\r\\n\\r\\n        // the new note is pushed to the user's array\\r\\n        notes[_user].push(\\r\\n            Note({\\r\\n                payout: userPayout,\\r\\n                payoutPerVesting: userPayout / 5,\\r\\n                created: uint48(block.timestamp),\\r\\n                marketID: _marketId,\\r\\n                vestingCount: 0\\r\\n            })\\r\\n        );\\r\\n\\r\\n        nend.mint(insurance, insuranceFund);\\r\\n\\r\\n        emit NoteCreated(\\r\\n            msg.sender,\\r\\n            _marketId,\\r\\n            index_,\\r\\n            _amount,\\r\\n            _price,\\r\\n            userPayout,\\r\\n            userPayout / 5,\\r\\n            uint48(block.timestamp)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* ========== REDEEM ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice             redeem notes for user\\r\\n     * @param _indexes     the note indexes to redeem\\r\\n     * @return payout_     sum of payout sent, in NEND\\r\\n     */\\r\\n    function redeem(uint256[] memory _indexes)\\r\\n        public\\r\\n        override\\r\\n        returns (uint256 payout_)\\r\\n    {\\r\\n        require(_indexes.length > 0, \\\"Nothing to redeem\\\");\\r\\n\\r\\n        uint8[] memory vestingCount = new uint8[](_indexes.length);\\r\\n        uint256[] memory totalVested = new uint256[](_indexes.length);\\r\\n\\r\\n        for (uint256 i = 0; i < _indexes.length; i++) {\\r\\n            Note storage note = notes[msg.sender][_indexes[i]];\\r\\n            uint8 pendingVestingCount = getPendingVestingCount(\\r\\n                msg.sender,\\r\\n                _indexes[i]\\r\\n            );\\r\\n\\r\\n            require(pendingVestingCount > 0, \\\"No pending vesting\\\");\\r\\n\\r\\n            note.vestingCount += pendingVestingCount;\\r\\n            payout_ += note.payoutPerVesting * pendingVestingCount;\\r\\n\\r\\n            vestingCount[i] = note.vestingCount;\\r\\n            totalVested[i] = note.vestingCount * note.payoutPerVesting;\\r\\n        }\\r\\n\\r\\n        nend.mint(msg.sender, payout_);\\r\\n        emit NotesRedeemed(msg.sender, _indexes, vestingCount, totalVested);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             redeem all redeemable markets for user\\r\\n     * @dev                if possible, query indexesFor() off-chain and input in redeem() to save gas\\r\\n     * @return             sum of payout sent, in NEND\\r\\n     */\\r\\n    function redeemAll(uint256 _marketId) external override returns (uint256) {\\r\\n        return redeem(indexesFor(msg.sender, _marketId));\\r\\n    }\\r\\n\\r\\n    /* ========== VIEW ========== */\\r\\n\\r\\n    // Note info\\r\\n\\r\\n    /**\\r\\n     * @notice             all pending notes for user\\r\\n     * @param _user        the user to query notes for\\r\\n     * @param _marketId    the market to query notes for\\r\\n     * @return             the pending notes for the user\\r\\n     */\\r\\n    function indexesFor(address _user, uint256 _marketId)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        Note[] memory info = notes[_user];\\r\\n\\r\\n        uint256 length;\\r\\n        for (uint256 i = 0; i < info.length; i++) {\\r\\n            if (\\r\\n                info[i].marketID == _marketId &&\\r\\n                getPendingVestingCount(_user, i) > 0\\r\\n            ) length++;\\r\\n        }\\r\\n\\r\\n        uint256[] memory indexes = new uint256[](length);\\r\\n        uint256 position;\\r\\n\\r\\n        for (uint256 i = 0; i < info.length; i++) {\\r\\n            if (\\r\\n                info[i].marketID == _marketId &&\\r\\n                getPendingVestingCount(_user, i) > 0\\r\\n            ) {\\r\\n                indexes[position] = i;\\r\\n                position++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return indexes;\\r\\n    }\\r\\n\\r\\n    function getPendingVestingCount(address _owner, uint256 _noteId)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint8)\\r\\n    {\\r\\n        Note memory note = notes[_owner][_noteId];\\r\\n\\r\\n        // Max vesting\\r\\n        if (note.vestingCount == totalVestingCount) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 secondsElapsed = block.timestamp - note.created;\\r\\n        uint256 invervalsElapsed = secondsElapsed /\\r\\n            (testing ? testVestingInverval : vestingInverval);\\r\\n\\r\\n        return\\r\\n            uint8(\\r\\n                invervalsElapsed > totalVestingCount\\r\\n                    ? totalVestingCount\\r\\n                    : invervalsElapsed\\r\\n            ) - note.vestingCount;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeed0b237cf578561faf9b4657626ce63781595ca0eb5ea48b6970c8116052cb7\",\"license\":\"AGPL-3.0-only\"},\"contracts/bridge/NENDBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract NENDBridge is ERC20, MWOwnable {\\r\\n    event EnterBridge(\\r\\n        uint48 enteredAt,\\r\\n        uint256 targetChainId,\\r\\n        address sender,\\r\\n        address receiver,\\r\\n        uint256 amount,\\r\\n        uint256 nonce\\r\\n    );\\r\\n\\r\\n    modifier validDestinationChain(uint256 chainId) {\\r\\n        require(\\r\\n            _isChainSupported(chainId) && block.chainid != chainId,\\r\\n            \\\"Invalid destination chain\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => mapping(uint256 => bool))\\r\\n        private chainNonceToExecutedMapping;\\r\\n    uint256 private nonce;\\r\\n\\r\\n    uint256[] public supportedChainIds;\\r\\n\\r\\n    constructor(uint256[] memory _supportedChainIds) {\\r\\n        require(\\r\\n            _supportedChainIds.length > 1,\\r\\n            \\\"Must have at least two destination chains\\\"\\r\\n        );\\r\\n        supportedChainIds = _supportedChainIds;\\r\\n        require(\\r\\n            _isChainSupported(block.chainid),\\r\\n            \\\"The hosted chain must be one of the supported chains\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function enterBridge(\\r\\n        uint256 _targetChainId,\\r\\n        address _receiver,\\r\\n        uint256 _amount\\r\\n    ) external validDestinationChain(_targetChainId) {\\r\\n        require(_amount > 0, \\\"Invalid amount\\\");\\r\\n        require(balanceOf(msg.sender) > _amount, \\\"Insufficient balance\\\");\\r\\n\\r\\n        _burn(msg.sender, _amount);\\r\\n\\r\\n        emit EnterBridge(\\r\\n            uint48(block.timestamp),\\r\\n            _targetChainId,\\r\\n            msg.sender,\\r\\n            _receiver,\\r\\n            _amount,\\r\\n            nonce++\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function leaveBridge(\\r\\n        uint256 _sourceChainId,\\r\\n        address _receiver,\\r\\n        uint256 _amount,\\r\\n        uint256 _nonce\\r\\n    ) external onlyOwner {\\r\\n        // Duplicate request, already left bridge\\r\\n        if (chainNonceToExecutedMapping[_sourceChainId][_nonce]) {\\r\\n            return;\\r\\n        }\\r\\n        chainNonceToExecutedMapping[_sourceChainId][_nonce] = true;\\r\\n\\r\\n        _mint(_receiver, _amount);\\r\\n    }\\r\\n\\r\\n    function _isChainSupported(uint256 chainId) internal view returns (bool) {\\r\\n        for (uint256 i = 0; i < supportedChainIds.length; i++) {\\r\\n            if (supportedChainIds[i] == chainId) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd741ff23c72bcc3ea68109a579655255bd171cb691129c43849ff9fa0260d9da\",\"license\":\"UNLICENSED\"},\"contracts/inflation/Inflation.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../staking/interfaces/ILendingPoolStaking.sol\\\";\\r\\nimport \\\"../vault/Vault.sol\\\";\\r\\nimport \\\"../test/Testing.sol\\\";\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract Inflation is ERC20, MWOwnable, Testing {\\r\\n    ILendingPoolStaking public staking;\\r\\n\\r\\n    // The number of inflations carried out\\r\\n    uint8 public inflationCount;\\r\\n\\r\\n    // Decay rate * 10000\\r\\n    uint16 public inflationDecay = 125; // 1.25%\\r\\n\\r\\n    // The time of last inflation\\r\\n    uint48 public lastInflation;\\r\\n\\r\\n    uint48 public immutable inflationInterval = 1 weeks;\\r\\n\\r\\n    uint48 public immutable testInflationInterval = 10 minutes;\\r\\n\\r\\n    // The inflation amount\\r\\n    uint256 public inflationAmount;\\r\\n\\r\\n    constructor(uint256 _inflationAmount) {\\r\\n        inflationAmount = _inflationAmount;\\r\\n    }\\r\\n\\r\\n    function setStaking(address _staking) external onlyOwner {\\r\\n        staking = ILendingPoolStaking(_staking);\\r\\n    }\\r\\n\\r\\n    function setInflationCount(uint8 _inflationCount) external onlyOwner {\\r\\n        inflationCount = _inflationCount;\\r\\n    }\\r\\n\\r\\n    function setInflationDecay(uint16 _inflationDecay) external onlyOwner {\\r\\n        inflationDecay = _inflationDecay;\\r\\n    }\\r\\n\\r\\n    function setLastInflation(uint48 _lastInflation) external onlyOwner {\\r\\n        lastInflation = _lastInflation;\\r\\n    }\\r\\n\\r\\n    function setInflationAmount(uint256 _inflationAmount) external onlyOwner {\\r\\n        inflationAmount = _inflationAmount;\\r\\n    }\\r\\n\\r\\n    function canStartEpoch() external view returns (bool) {\\r\\n        return\\r\\n            inflationCount < 208 &&\\r\\n            block.timestamp >=\\r\\n            lastInflation +\\r\\n                (testing ? testInflationInterval : inflationInterval);\\r\\n    }\\r\\n\\r\\n    function startEpoch() external onlyOwner {\\r\\n        require(address(staking) != address(0), \\\"Staking not set\\\");\\r\\n        // require(inflationCount < 208, \\\"Maximum epoch\\\");\\r\\n        // require(\\r\\n        //     block.timestamp >=\\r\\n        //         lastInflation +\\r\\n        //             (testing ? testInflationInterval : inflationInterval),\\r\\n        //     \\\"Last epoch not ended\\\"\\r\\n        // );\\r\\n\\r\\n        inflationCount++;\\r\\n        lastInflation = uint48(block.timestamp);\\r\\n\\r\\n        if (inflationCount > 52) {\\r\\n            inflationAmount -= (inflationAmount * inflationDecay) / 10000;\\r\\n        }\\r\\n\\r\\n        _mint(address(staking), inflationAmount);\\r\\n\\r\\n        staking.distributeInflationRewards(inflationAmount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3f2b822107652206d456162c03691046c9a6e7fd493e7cd3740b1107ce78265e\",\"license\":\"UNLICENSED\"},\"contracts/staking/interfaces/ILendingPoolStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILendingPoolStaking {\\r\\n    error InsufficientBalance();\\r\\n    error InvalidArgument(string details);\\r\\n    error InvalidState();\\r\\n    error Unauthorized();\\r\\n\\r\\n    enum StakeStatus {\\r\\n        DEFAULT, // Not staked, only applicable to escrowed reward\\r\\n        STAKED, // Stake ongoing\\r\\n        FULFILLED, // Stake ended gracefully\\r\\n        CANCELED // Stake ended because of early unstake by user\\r\\n    }\\r\\n\\r\\n    enum EscrowStatus {\\r\\n        DEFAULT, // Not issued\\r\\n        ISSUED,\\r\\n        CLAIMED,\\r\\n        CANCELED // Canceled due to early unstake by user\\r\\n    }\\r\\n\\r\\n    struct Stake {\\r\\n        // Staker address\\r\\n        address staker;\\r\\n        // Stake token address\\r\\n        address token;\\r\\n        // The time of deposit\\r\\n        uint48 start;\\r\\n        // The time of withdrawal\\r\\n        uint48 end;\\r\\n        // The amount staked by each stake duration\\r\\n        uint256[3] amountsPerDuration;\\r\\n        // The amount of stake token that will be rewarded upon finishing the stake duration\\r\\n        uint256 rewardAllocated;\\r\\n        // The idx of reward allocation to this stake\\r\\n        uint8 rewardAllocationId;\\r\\n        // Ids of child escrows\\r\\n        uint256[] childIds;\\r\\n        // Stake ids that created this stake as escrowed reward\\r\\n        uint256[] parentIds;\\r\\n        // Status of eab\\r\\n        EscrowStatus escrowStatus;\\r\\n        // Status of stake\\r\\n        StakeStatus stakeStatus;\\r\\n    }\\r\\n\\r\\n    event Staked(\\r\\n        uint256 stakeId,\\r\\n        address staker,\\r\\n        address token,\\r\\n        uint48 start,\\r\\n        uint48 end,\\r\\n        uint256 amount,\\r\\n        uint8 rewardAllocationId,\\r\\n        uint256[] parentIds\\r\\n    );\\r\\n    event RewardsAllocated(uint256[] stakeIds, uint256[] rewardsAllocated);\\r\\n    event StakeStatusChanged(uint256 stakeId, StakeStatus status);\\r\\n    event EscrowStatusChanged(uint256 stakeId, EscrowStatus status);\\r\\n\\r\\n    function deposit(\\r\\n        address _stakeToken,\\r\\n        uint256 _amount,\\r\\n        uint8 _durationId\\r\\n    ) external payable;\\r\\n\\r\\n    function stakeEscrowedReward(uint256 _stakeId) external ;\\r\\n\\r\\n    function distributeInflationRewards(uint256 _inflationReward) external;\\r\\n\\r\\n    function distributeNonInflationRewards() external;\\r\\n\\r\\n    function claimEscrowedReward(uint256 _stakeId) external;\\r\\n\\r\\n    function unstake(uint256 _stakeId) external;\\r\\n\\r\\n    function addStakeToken(address _stakeToken) external;\\r\\n\\r\\n    function removeStakeToken(address _stakeToken) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x7ea30ad2a125f202a0d9f14749de515059474c01a5725b7bef682e13951e858f\",\"license\":\"UNLICENSED\"},\"contracts/test/Testing.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract Testing is MWOwnable {\\r\\n    bool public testing = true;\\r\\n\\r\\n    function setTesting(bool _testing) external onlyOwner {\\r\\n        testing = _testing;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3dfdc5be3d00ff111ce1b7835a3c371fb86282a0d915f3613716d25eee946ce9\",\"license\":\"Unlicense\"},\"contracts/token/ERC20/NEND.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../bridge/NENDBridge.sol\\\";\\r\\nimport \\\"./NENDAirdrop.sol\\\";\\r\\nimport \\\"./NENDCrowdSale.sol\\\";\\r\\nimport \\\"./NENDCrossChainSupply.sol\\\";\\r\\nimport \\\"../../inflation/Inflation.sol\\\";\\r\\nimport \\\"../../access/SimpleRoleAccess.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\n\\r\\ncontract NEND is\\r\\n    NENDAirdrop,\\r\\n    NENDCrowdSale,\\r\\n    NENDBridge,\\r\\n    NENDCrossChainSupply,\\r\\n    SimpleRoleAccess,\\r\\n    ERC20Burnable\\r\\n{\\r\\n    uint256 public marketing;\\r\\n    uint256 public team;\\r\\n    uint256 public advisor;\\r\\n    bool public isMintChain;\\r\\n\\r\\n    function mint(address _receiver, uint256 _amount)\\r\\n        external\\r\\n        onlyRole(\\\"minter\\\")\\r\\n    {\\r\\n        _mint(_receiver, _amount);\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        bool _isMainChain,\\r\\n        uint256[] memory _chains,\\r\\n        uint256 _inflationAmount\\r\\n    ) ERC20(\\\"NEND\\\", \\\"N\\\") NENDBridge(_chains) Inflation(_inflationAmount) {\\r\\n        isMintChain = _isMainChain;\\r\\n        if (isMintChain) {\\r\\n            airdrop = 5000000 ether;\\r\\n            marketing = 5000000 ether;\\r\\n            team = 10000000 ether;\\r\\n            advisor = 5000000 ether;\\r\\n            sale = 10000000 ether;\\r\\n            _mint(\\r\\n                address(this),\\r\\n                    airdrop +\\r\\n                    marketing +\\r\\n                    team +\\r\\n                    advisor +\\r\\n                    sale\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdf73910eae71454f3e5a8fb720631f0f4023b38ddda4bf592ced0387028b0bb6\",\"license\":\"UNLICENSED\"},\"contracts/token/ERC20/NENDAirdrop.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\nabstract contract NENDAirdrop is ERC20 {\\r\\n\\r\\n    uint airdrop;\\r\\n\\r\\n    event AirdropCreated(address indexed addresses, uint256 amount);\\r\\n\\r\\n    function createAirdrop(\\r\\n        address _receiver,\\r\\n        uint256 _amount // onlyOwner\\r\\n    ) external {\\r\\n        require(airdrop >= _amount, \\\"Not enough airdrop funds\\\");\\r\\n\\r\\n        airdrop -= _amount;\\r\\n\\r\\n        _transfer(address(this), _receiver, _amount);\\r\\n        emit AirdropCreated(_receiver, _amount);\\r\\n    }\\r\\n\\r\\n    function createAirdropBatch(address[] memory _receivers, uint256 _amount)\\r\\n        external\\r\\n    // onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            airdrop > _receivers.length * _amount,\\r\\n            \\\"Not enough airdrop funds\\\"\\r\\n        );\\r\\n\\r\\n        airdrop -= _receivers.length * _amount;\\r\\n\\r\\n        for (uint256 i = 0; i < _receivers.length; i++) {\\r\\n            _transfer(address(this), _receivers[i], _amount);\\r\\n            emit AirdropCreated(_receivers[i], _amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe4774e443bf5c12c445f4a61d6ae91ae6447181ba51cfaca5f35e39c2417ca39\",\"license\":\"UNLICENSED\"},\"contracts/token/ERC20/NENDCrossChainSupply.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../../inflation/Inflation.sol\\\";\\r\\n\\r\\nabstract contract NENDCrossChainSupply is Inflation {\\r\\n    uint256 public crossChainSupply;\\r\\n    uint256 public crossChainInflationAmount;\\r\\n\\r\\n    function update(\\r\\n        uint256 _crossChainSupply,\\r\\n        uint256 _crossChainInflationAmount\\r\\n    ) external onlyOwner {\\r\\n        crossChainSupply = _crossChainSupply;\\r\\n        crossChainInflationAmount = _crossChainInflationAmount;\\r\\n    }\\r\\n\\r\\n    function timeSlicedCrossChainSupply() external view returns (uint256) {\\r\\n        if (lastInflation == 0) {\\r\\n            return crossChainSupply;\\r\\n        }\\r\\n\\r\\n        uint256 timeElapsed = block.timestamp - lastInflation;\\r\\n        uint256 elapsedPct = (timeElapsed * 10000) / 1 weeks;\\r\\n        if (elapsedPct > 10000) {\\r\\n            elapsedPct = 10000;\\r\\n        }\\r\\n\\r\\n        return\\r\\n            crossChainSupply + (crossChainInflationAmount * elapsedPct) / 10000;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xaf04f73d9114c51ed3ac99764b3a7c6733296caf520dd45088a668ca3b176da3\",\"license\":\"UNLICENSED\"},\"contracts/token/ERC20/NENDCrowdSale.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\nabstract contract NENDCrowdSale is ERC20 {\\r\\n\\r\\n    event SaleCreated(address indexed buyer, uint256 amount);\\r\\n\\r\\n    uint256 public constant tokenExchangeRate = 5000; // 5000 NEND tokens per 1 ETH\\r\\n    uint256 public sale;\\r\\n    bool public onSale;\\r\\n\\r\\n    function startSale() external // onlyOwner\\r\\n    {\\r\\n        require(!onSale, \\\"Already on sale\\\");\\r\\n        require(sale > 0, \\\"Not enough sale funds\\\");\\r\\n        onSale = true;\\r\\n    }\\r\\n\\r\\n    function endSale() external // onlyOwner\\r\\n    {\\r\\n        require(onSale, \\\"Sale not started\\\");\\r\\n        onSale = false;\\r\\n    }\\r\\n\\r\\n    function buyNEND() external payable {\\r\\n        require(onSale, \\\"Not on sale\\\");\\r\\n\\r\\n        uint256 nendsBought = msg.value * tokenExchangeRate;\\r\\n\\r\\n        require(sale >= nendsBought, \\\"Not enough sale funds\\\");\\r\\n\\r\\n        sale -= nendsBought;\\r\\n\\r\\n        _transfer(address(this), msg.sender, nendsBought);\\r\\n\\r\\n        emit SaleCreated(msg.sender, nendsBought);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd26a5e45071e0d041f3d3db28b3161d07de606428ff4426b6d689df2faf5e03b\",\"license\":\"UNLICENSED\"},\"contracts/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\r\\n\\r\\ncontract Vault is SimpleRoleAccess {\\r\\n    bytes4 private ERC1155_INTERFACE_ID = 0xd9b67a26;\\r\\n    string public name;\\r\\n\\r\\n    mapping(address => bool) public authorizedOperators;\\r\\n    mapping(address => bool) public authorizedSpenders;\\r\\n    // Balance name => token => amount\\r\\n    mapping(string => mapping(address => uint256)) public namedBalances;\\r\\n\\r\\n    constructor(string memory _name) {\\r\\n        name = _name;\\r\\n    }\\r\\n\\r\\n    function approveERC20Transfer(\\r\\n        address _tokenAddress,\\r\\n        address _spender,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.approve(_spender, _amount);\\r\\n    }\\r\\n\\r\\n    function transferERC20(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.transfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function setERC721ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function transferERC721(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.transferFrom(address(this), _to, _tokenId);\\r\\n    }\\r\\n\\r\\n    function transferERC1155(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeTransferFrom(address(this), _to, _id, _value, _data);\\r\\n    }\\r\\n\\r\\n    function transferERC1155Batch(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeBatchTransferFrom(address(this), _to, _ids, _values, _data);\\r\\n    }\\r\\n\\r\\n    function setERC1155ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function getNativeBalance() external view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function transferNative(address payable _to, uint256 _amount)\\r\\n        public\\r\\n        payable\\r\\n        onlyRole(\\\"spender\\\")\\r\\n    {\\r\\n        (bool sent, ) = _to.call{ value: _amount }(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n\\r\\n    function burn(address _token, uint256 _amount)\\r\\n        public\\r\\n        onlyRole(\\\"spender\\\")\\r\\n    {\\r\\n        ERC20Burnable(_token).burn(_amount);\\r\\n    }\\r\\n\\r\\n    function namedBalanceReceive(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        namedBalances[_name][_token] += _amount;\\r\\n    }\\r\\n\\r\\n    function namedBalanceSpend(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        require(\\r\\n            namedBalances[_name][_token] >= _amount,\\r\\n            \\\"Insufficient balance\\\"\\r\\n        );\\r\\n        namedBalances[_name][_token] -= _amount;\\r\\n    }\\r\\n\\r\\n    function getNamedBalance(string memory _name, address _token)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 balance = namedBalances[_name][_token];\\r\\n        uint256 actualBalance = IERC20(_token).balanceOf(address(this));\\r\\n\\r\\n        return balance <= actualBalance ? balance : actualBalance;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x7672753c5a5fc18ca172629386e8b21426b0eade7e9676cbb91d56e2cbbceb63\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e034620000bb57601f6200304238819003918201601f19168301916001600160401b03831184841017620000c057808492606094604052833981010312620000bb5780516200007b916200005482620000d6565b60406020820151916200006783620000d6565b0151916200007583620000d6565b620000e8565b604051612e929081620001b08239608051818181610cf00152612d74015260a05181818161094b0152612e30015260c051818181610c120152612ddf0152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811603620000bb57565b90916000549174012f358b80ed2d296c09560d2b9f70a7f81d57e35260018060a01b0393732f358b80ed2d296c09560d2b9f70a7f81d57e3528582167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a36001600160a81b031916176000556005608052600380546201518060a05261025860c052600280546001600160a01b03199081169787169790971790556001600160b01b03191691841691909117600f60a11b17905560098054909316911617905556fe60806040526004361015610013575b600080fd5b60003560e01c8062aeef8a1461025657806308ed8d161461024d5780630aebeb4e14610244578063217fe6c61461023b57806321858b9e14610232578063231259d91461022957806339d2525f146102205780633eca1cf01461021757806345fd86ac1461020e5780635ea1d6f8146102055780636088d109146101fc57806361d027b3146101f35780637136a7a6146101ea578063715018a6146101e15780637ecb084d146101d857806382952200146101cf57806389cf3204146101c65780638d03b102146101bd5780638da5cb5b146101b457806399d508c0146101ab578063b1283e77146101a2578063bc3b2b1214610199578063bfacba3d14610190578063c0680e2014610187578063c0aa0e8a1461017e578063e0b117ff14610175578063e3684e391461016c578063f2fde38b146101635763f9afb26a1461015b57600080fd5b61000e611334565b5061000e611241565b5061000e6111a4565b5061000e611109565b5061000e611057565b5061000e610f89565b5061000e610e57565b5061000e610dfe565b5061000e610d74565b5061000e610cd5565b5061000e610cad565b5061000e610c86565b5061000e610c5e565b5061000e610c36565b5061000e610bf2565b5061000e610b91565b5061000e610a55565b5061000e610a2d565b5061000e610995565b5061000e61096f565b5061000e61092b565b5061000e6108a4565b5061000e6107fa565b5061000e6107b3565b5061000e61076c565b5061000e6106dd565b5061000e610485565b5061000e610440565b503461000e57606036600319011261000e5760043560243561027782610d2b565b509161028281610fe4565b5061028c90611417565b9265ffffffffffff9381838642169260208101516102af9065ffffffffffff1690565b65ffffffffffff1684106102c290611466565b6102cc848361184f565b6102d5826124a5565b6102e36044358211156114b2565b806102ed89611515565b906102f79161156d565b61030084610f1e565b505460f01c60ff166103119061158d565b61031a9161156d565b97600385015489111561032c906115ac565b80600186019a8a8c546103439060ff9060a01c1690565b600014966103d1956103bd946103af9460409a61042d57610366825b8d546115f8565b8c5560058c0161037783825461160f565b90556103a5600267ffffffffffffffff87169d8e61039a6004830191825461160f565b9055019c8d5461160f565b8c5533931661272e565b9a546001600160a01b031690565b6009546001600160a01b0316903390611627565b01519054111561041d5750600090557f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe56000604051a25b604080519182526020820192909252f35b0390f35b905061042891611bfd565b610408565b6103668561035f565b8015150361000e57565b503461000e57602036600319011261000e5760043561045e81610436565b6104666113bf565b6000805460ff60a01b191691151560a01b60ff60a01b16919091179055005b503461000e57602036600319011261000e5760006004356104a4611ea6565b506104ce6104b182610fe4565b50600101805465ffffffffffff19164265ffffffffffff16179055565b816104d882610d2b565b5055604051907f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe58383a2f35b6001600160a01b0381160361000e57565b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161054057604052565b610548610515565b604052565b60a0810190811067ffffffffffffffff82111761054057604052565b6040810190811067ffffffffffffffff82111761054057604052565b90601f8019910116810190811067ffffffffffffffff82111761054057604052565b604051906080820182811067ffffffffffffffff82111761054057604052565b6040519060e0820182811067ffffffffffffffff82111761054057604052565b604051906060820182811067ffffffffffffffff82111761054057604052565b6040519060c0820182811067ffffffffffffffff82111761054057604052565b604051906106348261054d565b565b60209067ffffffffffffffff8111610654575b601f01601f19160190565b61065c610515565b610649565b81601f8201121561000e5780359061067882610636565b926106866040519485610585565b8284526020838301011161000e57816000926020809301838601378301015290565b918091926000905b8282106106c85750116106c1575050565b6000910152565b915080602091830151818601520182916106b0565b503461000e57604036600319011261000e576004356106fb81610504565b60243567ffffffffffffffff811161000e5761074f6020610419936001600160a01b0361072e60ff953690600401610661565b911660005260048252604060002082604051948386809551938492016106a8565b820190815203019020546040519116151581529081906020820190565b503461000e57602036600319011261000e576001600160a01b0360043561079281610504565b61079a6113bf565b166001600160a01b031960025416176002556000604051f35b503461000e57602036600319011261000e576001600160a01b036004356107d981610504565b6107e16113bf565b166001600160a01b031960035416176003556000604051f35b503461000e57606036600319011261000e5760043561081881610504565b60243567ffffffffffffffff811161000e57602061083d610872923690600401610661565b6001600160a01b036044359461085286610436565b1660005260048252604060002082604051948386809551938492016106a8565b8201908152030190209060ff8019835416911515161790556000604051f35b60c4359063ffffffff8216820361000e57565b503461000e5760e036600319011261000e576004356108c281610504565b604435906108cf82610436565b6084359165ffffffffffff8316830361000e5760a43563ffffffff8116810361000e576104199361091093610902610891565b936064359160243590611ec7565b6040519081529081906020820190565b600091031261000e57565b503461000e57600036600319011261000e57602060405165ffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e57600036600319011261000e57602061ffff60035460a01c16604051908152f35b503461000e57602036600319011261000e5760043561ffff811680820361000e57612710906109c26113bf565b116109e8576003805461ffff60a01b191660a09290921b61ffff60a01b16919091179055005b60405162461bcd60e51b815260206004820152601360248201527f496e76616c696420626173697320706f696e74000000000000000000000000006044820152606490fd5b503461000e57600036600319011261000e5760206001600160a01b0360095416604051908152f35b503461000e57602036600319011261000e57600435610a8f610a8a336001600160a01b03166000526001602052604060002090565b612cca565b6000805b8251811015610b06578365ffffffffffff610ac16060610ab3858861298b565b51015165ffffffffffff1690565b161480610af1575b610adc575b610ad79061297b565b610a93565b90610ae9610ad79161297b565b919050610ace565b5060ff610afe8233612d32565b161515610ac9565b50610b1090612949565b6000805b8351811015610b85578465ffffffffffff610b346060610ab3858961298b565b161480610b70575b610b4f575b610b4a9061297b565b610b14565b90610b688183610b62610b4a948761298b565b5261297b565b919050610b41565b5060ff610b7d8233612d32565b161515610b3c565b61041961091084612ab5565b503461000e57600080600319360112610bef57610bac6113bf565b80546001600160a01b031981168255816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e57602060405165ffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e57600036600319011261000e5760206001600160a01b0360035416604051908152f35b503461000e57600036600319011261000e5760206001600160a01b0360025416604051908152f35b503461000e57600036600319011261000e57602060ff60005460a01c166040519015158152f35b503461000e57600036600319011261000e5760206001600160a01b0360005416604051908152f35b503461000e57600036600319011261000e57602060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50634e487b7160e01b600052603260045260246000fd5b600690600554811015610d67575b6005600052027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00190600090565b610d6f610d14565b610d39565b503461000e57602036600319011261000e5760043560055481101561000e57610d9c90610d2b565b5080546001820154600283015460038401546004850154600590950154604080519586526001600160a01b038516602087015260ff60a095861c16151590860152606085019290925260808401529082019290925260c081019190915260e090f35b503461000e57602036600319011261000e5760043560005260086020526080604060002060ff6001825492015460405192835265ffffffffffff80821660208501528160301c16604084015260601c1615156060820152f35b503461000e57602036600319011261000e57600435610e75816124a5565b6104196b033b2e3c9fd0803ce8000000610ef383610eee610e9587610d2b565b505496610ee860ff6003610ea884610d2b565b50015492600754811015610f11575b60076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688015460f01c1661158d565b9061155a565b61155a565b04604051938493846040919493926060820195825260208201520152565b610f19610d14565b610eb7565b600754811015610f56575b60076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880190600090565b610f5e610d14565b610f29565b8054821015610f7c575b60005260206000200190600090565b610f84610d14565b610f6d565b503461000e57604036600319011261000e57600435610fa781610504565b6001600160a01b036024359116600052600a6020526040600020805482101561000e57602091610fd691610f63565b90546040519160031b1c8152f35b600390600654811015611020575b6006600052027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0190600090565b611028610d14565b610ff2565b805482101561104a575b6000526003602060002091020190600090565b611052610d14565b611037565b503461000e57602036600319011261000e5760043560065481101561000e576003606091600660005202807ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0154907ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4165ffffffffffff7ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d40830154169101549060405192835260208301526040820152f35b503461000e57604036600319011261000e5760043561112781610504565b6001600160a01b0360243591166000526001602052604060002090815481101561000e576111549161102d565b508054600182015460029092015460408051928352602083019390935265ffffffffffff80821693830193909352603081901c9092166060808301919091529190911c60ff16608082015260a090f35b503461000e57602036600319011261000e5760043560075481101561000e5760076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801546040805165ffffffffffff8084168252603084901c81166020830152606084811c821693830193909352609084901c81169282019290925260c083811c909216608082015260f09290921c60ff1660a083015290f35b503461000e57602036600319011261000e5760043561125f81610504565b6112676113bf565b6001600160a01b038091169081156112b957600091825491816001600160a01b0319841617845560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b60209067ffffffffffffffff8111611327575b60051b0190565b61132f610515565b611320565b503461000e5760208060031936011261000e5760043567ffffffffffffffff811161000e573660238201121561000e578060040135906113738261130d565b916113816040519384610585565b80835260248484019160051b8301019136831161000e57602401905b8282106113b05761041961091085612ab5565b8135815290840190840161139d565b6001600160a01b036000541633036113d357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b906040516060810181811067ffffffffffffffff821117611459575b6040526040600282948054845265ffffffffffff60018201541660208501520154910152565b611461610515565b611433565b1561146d57565b60405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c75646564000000006044820152606490fd5b156114b957565b60405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d6178207072696365006044820152606490fd5b50634e487b7160e01b600052601160045260246000fd5b6b033b2e3c9fd0803ce8000000908060001904821181151516611536570290565b61153e6114fe565b0290565b620f4240908060001904821181151516611536570290565b8060001904821181151516611536570290565b8115611577570490565b634e487b7160e01b600052601260045260246000fd5b60ff16604d811161159f575b600a0a90565b6115a76114fe565b611599565b156115b357565b60405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a652065786365656465640000006044820152606490fd5b818110611603570390565b61160b6114fe565b0390565b8119811161161b570190565b6116236114fe565b0190565b6000916116c6949383926040519560208701936323b872dd60e01b85526001600160a01b03938480921660248a015216604488015260648701526064865261166e8661054d565b1690826040519561167e87610569565b602087527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460208801526116b4843b1515611762565b51925af16116c06117ae565b906117de565b8051806116d1575050565b816020806116e69361063495010191016116eb565b611703565b9081602091031261000e575161170081610436565b90565b1561170a57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b1561176957565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b3d156117d9573d906117bf82610636565b916117cd6040519384610585565b82523d6000602084013e565b606090565b909190156117ea575090565b8151156117fa5750805190602001fd5b6044604051809262461bcd60e51b82526020600483015261182a81518092816024860152602086860191016106a8565b601f01601f19168101030190fd5b65ffffffffffff9182169116818110611603570390565b90600754821015611a26575b60076000526118dd6118d06118d0611894857fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801611a33565b65ffffffffffff60406118c682602085015116804210611a19575b60026118ba8b610d2b565b5091420391015461155a565b920151169061156d565b67ffffffffffffffff1690565b6118f560026118eb85610d2b565b50019182546115f8565b90556119298161190484610f1e565b509065ffffffffffff60301b82549160301b169065ffffffffffff60301b1916179055565b61194d6001611942846000526008602052604060002090565b015460601c60ff1690565b611955575050565b611969826000526008602052604060002090565b9161197f611976826125a5565b91929093610fe4565b5061198b8382546115f8565b905515611a06576119c66001856119a96119ed9461063498546115f8565b815501926119c1845465ffffffffffff9060301c1690565b611838565b82546bffffffffffff000000000000191660309190911b65ffffffffffff60301b16178255565b9065ffffffffffff1665ffffffffffff19825416179055565b505050600101805460ff60601b19169055565b611a216114fe565b6118af565b611a2e610d14565b61185b565b9060405160c0810181811067ffffffffffffffff821117611a99575b60405260a060ff82945465ffffffffffff8082168552808260301c166020860152808260601c166040860152808260901c1660608601528160c01c16608085015260f01c16910152565b611aa1610515565b611a4f565b9065ffffffffffff808093169116809203811161161b570190565b9060405160e0810181811067ffffffffffffffff821117611b37575b60405260c06005829480548452611b1260ff60018301546001600160a01b038116602088015260a01c16604086019015159052565b6002810154606085015260038101546080850152600481015460a08501520154910152565b611b3f610515565b611add565b9081602091031261000e575190565b506040513d6000823e3d90fd5b50634e487b7160e01b600052600060045260246000fd5b60606001611bf992845181550192611bde65ffffffffffff611bb381602085015116879065ffffffffffff1665ffffffffffff19825416179055565b604083015186546bffffffffffff0000000000001916911660301b65ffffffffffff60301b16178555565b0151825460ff60601b191690151560601b60ff60601b161790565b9055565b90611c10611c0a83610f1e565b50611a33565b805165ffffffffffff1692611c47611c3c6080840195611c36875165ffffffffffff1690565b90611aa6565b65ffffffffffff1690565b65ffffffffffff84161015611c5d575b50505050565b611de193611d986118d085611ce36004611d4a611dc798611ce389610ee8611c3c6040611cb5611c3c611c98611c9287610d2b565b50611ac1565b9b6119c16001611ca789610fe4565b50015465ffffffffffff1690565b95611cbf856124a5565b9a8b611ccd84830151151590565b15611e9e57611ce890611ce3611d049351611515565b61156d565b611cfe611cf960a085015160ff1690565b61158d565b9061156d565b945b6003611d3a611d346118d06118d08c611ce3611d2e611c3c60608b015165ffffffffffff1690565b8d61155a565b92610d2b565b500155015165ffffffffffff1690565b926020611d6e611d626003546001600160a01b031690565b6001600160a01b031690565b604051633fdaeac760e11b815293849182905afa918215611e91575b600092611e61575b5061155a565b9067ffffffffffffffff611dab84610fe4565b50549216918210611dea5750611dc082610fe4565b5055610f1e565b509065ffffffffffff1665ffffffffffff19825416179055565b38808080611c57565b611e3c611e14611e07611e5c94611e0087610fe4565b50546115f8565b925165ffffffffffff1690565b611e1c6105a7565b92835265ffffffffffff8716602084015265ffffffffffff166040830152565b60016060820152611e57836000526008602052604060002090565b611b77565b610f1e565b611e8391925060203d8111611e8a575b611e7b8183610585565b810190611b44565b9038611d92565b503d611e71565b611e99611b53565b611d8a565b505194611d06565b60405190611eb382610569565b600582526430b236b4b760d91b6020830152565b90939491959295611ed6611ea6565b50611ee94265ffffffffffff88166115f8565b906040519763313ce56760e01b89526020896004816001600160a01b0388165afa9889156121aa575b600099612179575b5081156121715787611f3e611f3283611ce38b611515565b611cfe60ff8d166121d0565b915b6005549a8b9986611f5763ffffffff8b168761155a565b90611f619161156d565b611f696105c7565b9182526001600160a01b03891660208301528615156040830152856060830152608082015260a081016000905260c0810160009052611fa7906121de565b600354604051633fdaeac760e11b815291908590839081906001600160a01b03165a92600491602094fa80159b6120d763ffffffff6001600160a01b039d7fabc443215e32d8be9e2437c2c0032632966baa3b53a06e4a3ddcb16d3cc3d1e49f65ffffffffffff6121449e61208e6120f79e60209e6120846120f29f60ff9f6120e79e611ce38c9f6120699461204d946120c79d612164575b60009261214a575061155a565b9361206361205a82611542565b620186a0900490565b9061160f565b916120726105e7565b93845265ffffffffffff166020840152565b604082015261229d565b6120b782421661209c610607565b65ffffffffffff821681529e8f019065ffffffffffff169052565b1665ffffffffffff1660408c0152565b1665ffffffffffff166060890152565b1665ffffffffffff166080860152565b1660ff1660a0830152565b61231a565b61211f8661211a8686166001600160a01b0316600052600a602052604060002090565b612460565b60405193849316968390929160209065ffffffffffff60408401951683521515910152565b0390a390565b6020611e839293503d602011611e8a57611e7b8183610585565b61216c611b53565b612040565b878791611f40565b61219c91995060203d6020116121a3575b6121948183610585565b8101906121b7565b9738611f1a565b503d61218a565b6121b2611b53565b611f12565b9081602091031261000e575160ff8116810361000e5790565b604d811161159f57600a0a90565b600560c06121ff8254600160401b811015612290575b600181018455610d2b565b939093612283575b8051845561225e6001850161223f6001600160a01b0360208501511682906001600160a01b03166001600160a01b0319825416179055565b6040830151815460ff60a01b191690151560a01b60ff60a01b16179055565b606081015160028501556080810151600385015560a081015160048501550151910155565b61228b611b60565b612207565b612298610515565b6121f4565b600260406122c0600654600160401b81101561230d575b60018101600655610fe4565b939093612300575b805184556122f965ffffffffffff602083015116600186019065ffffffffffff1665ffffffffffff19825416179055565b0151910155565b612308611b60565b6122c8565b612315610515565b6122b4565b6106349061242c60a0612342600754600160401b811015612453575b60018101600755610f1e565b939093612446575b805184546020830151604084015160608086015191901b71ffffffffffff0000000000000000000000001660309290921b65ffffffffffff60301b1665ffffffffffff9485167fffffffffffffffff00000000000000000000000000000000000000000000000090941693909317929092171760909190911b77ffffffffffff000000000000000000000000000000000000161785556080820151612424911685547fffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff1660c09190911b65ffffffffffff60c01b16178555565b015160ff1690565b815460ff60f01b191660f09190911b60ff60f01b16179055565b61244e611b60565b61234a565b61245b610515565b612336565b805461247e91600160401b821015612498575b600182018155610f63565b819291549060031b600019811b9283911b16911916179055565b6124a0610515565b612473565b61170090611cfe611cf961256061255a6124be85610fe4565b5054610ee8600461251960026124d38a610d2b565b5001546007548a1015612598575b60076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6888a0154610ee89060f01c60ff1661158d565b6020612530611d626003546001600160a01b031690565b604051633fdaeac760e11b815293849182905afa91821561258b575b60009261256b575b5061156d565b93610f1e565b505460f01c60ff1690565b61258491925060203d8111611e8a57611e7b8183610585565b9038612554565b612593611b53565b61254c565b6125a0610d14565b6124e1565b6000908152600860205260408120906001604051926080840184811067ffffffffffffffff821117612662575b6040528054845201549165ffffffffffff9283811680602084015260ff6040840192868160301c16845260601c1615801560608501526126575761261890854216611838565b9361262c611c3c835165ffffffffffff1690565b9085169081109350831561265157611c3c611e07611cfe9261264e955161155a565b92565b50505192565b505050809150918190565b61266a610515565b6125d2565b60ff60806002612697611bf994805490600160401b821015612721575b60018201815561102d565b612714575b855181556020860151600182015560408601519101805465ffffffffffff191665ffffffffffff92831617815594906126fa90606083015187546bffffffffffff0000000000001916911660301b65ffffffffffff60301b16178655565b0151835460ff60601b1916911660601b60ff60601b161790565b61271c611b60565b61269c565b612729610515565b61268c565b909192949361276c61276561275d61275761275060035461ffff9060a01c1690565b61ffff1690565b8461155a565b612710900490565b80926115f8565b6127a761278c886001600160a01b03166000526001602052604060002090565b54976001600160a01b03166000526001602052604060002090565b9060058104906127f565ffffffffffff4216936127c2610627565b8381526020810185905265ffffffffffff861660408201529065ffffffffffff881660608301526000608083015261266f565b61280a611d626003546001600160a01b031690565b9661281d6002546001600160a01b031690565b96883b1561000e576040516340c10f1960e01b81526001600160a01b0398909816600489015260248801959095527f129794f6f9aa0adfa6dda6ca7d08d05812fea954f80008e5cf68ae7b9fa898b4978a976128d296916000908290604490829084905af180156128f0575b6128d7575b506040805133815265ffffffffffff9889166020820152908101989098526060880152608087015260a086015260c085015290911660e08301528190610100820190565b0390a1565b806128e46128ea9261052c565b80610920565b3861288e565b6128f8611b53565b612889565b1561290457565b60405162461bcd60e51b815260206004820152601160248201527f4e6f7468696e6720746f2072656465656d0000000000000000000000000000006044820152606490fd5b906129538261130d565b6129606040519182610585565b8281528092612971601f199161130d565b0190602036910137565b600190600019811461161b570190565b60209181518110156129a0575b60051b010190565b6129a8610d14565b612998565b156129b457565b60405162461bcd60e51b815260206004820152601260248201527f4e6f2070656e64696e672076657374696e6700000000000000000000000000006044820152606490fd5b60ff8091169116908160ff03811161161b570190565b90815180825260208080930193019160005b828110612a2f575050505090565b835185529381019392810192600101612a21565b906001600160a01b039095949295168152612a6a6020956080878401526080830190612a0f565b818103604083015285808551928381520194019060005b818110612a9e575050506117009394506060818403910152612a0f565b825160ff1686529487019491870191600101612a81565b90600091612ac5815115156128fd565b612acf8151612949565b90612ada8151612949565b9160005b8251811015612bbb57336000908152600160205260409020612b00828561298b565b51612b0a9161102d565b50612b15828561298b565b51612b209033612d32565b9660ff9081891692831515612b34906129ad565b600281018054909a9060601c60ff1690612b4d916129f9565b8a5460ff60601b191660609190911b60ff60601b16178a556001015492612b74908461155a565b612b7d9161160f565b975460601c60ff1680612b90858761298b565b60ff90911690521690612ba29161155a565b612bac828661298b565b52612bb69061297b565b612ade565b5090612bd2611d626003546001600160a01b031690565b803b1561000e576040516340c10f1960e01b8152336004820152602481018790527f5a21b90378728eb82fe7be28a8f4a46d422e5c1f08ac7521b84ef5c190b0cc86946128d2929091906000908290604490829084905af18015612c57575b612c44575b506040519384933385612a43565b806128e4612c519261052c565b38612c36565b612c5f611b53565b612c31565b9060405160a0810181811067ffffffffffffffff821117612cbd575b604052608060ff600283958054855260018101546020860152015465ffffffffffff80821660408601528160301c16606085015260601c16910152565b612cc5610515565b612c80565b908154612cd68161130d565b92612ce46040519485610585565b818452600090815260208082208186015b848410612d03575050505050565b600383600192612d1285612c64565b815201920193019290612cf5565b60ff9182169116818110611603570390565b612d6191612d56612d5b926001600160a01b03166000526001602052604060002090565b61102d565b50612c64565b6080810160ff612d72825160ff1690565b7f0000000000000000000000000000000000000000000000000000000000000000821691168114612e5457612e1860ff91612e06612dc8612dc2611c3c604061170099015165ffffffffffff1690565b426115f8565b60005460a01c60ff1615612e275765ffffffffffff7f00000000000000000000000000000000000000000000000000000000000000005b169061156d565b81811115612e1f5750925b5160ff1690565b9116612d20565b905092612e11565b65ffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000612dff565b50505060009056fea26469706673582212204b81c0a131fc05caf0a77a473b1df0bf24a77179132e9192db612241fdc3c72964736f6c634300080e0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c8062aeef8a1461025657806308ed8d161461024d5780630aebeb4e14610244578063217fe6c61461023b57806321858b9e14610232578063231259d91461022957806339d2525f146102205780633eca1cf01461021757806345fd86ac1461020e5780635ea1d6f8146102055780636088d109146101fc57806361d027b3146101f35780637136a7a6146101ea578063715018a6146101e15780637ecb084d146101d857806382952200146101cf57806389cf3204146101c65780638d03b102146101bd5780638da5cb5b146101b457806399d508c0146101ab578063b1283e77146101a2578063bc3b2b1214610199578063bfacba3d14610190578063c0680e2014610187578063c0aa0e8a1461017e578063e0b117ff14610175578063e3684e391461016c578063f2fde38b146101635763f9afb26a1461015b57600080fd5b61000e611334565b5061000e611241565b5061000e6111a4565b5061000e611109565b5061000e611057565b5061000e610f89565b5061000e610e57565b5061000e610dfe565b5061000e610d74565b5061000e610cd5565b5061000e610cad565b5061000e610c86565b5061000e610c5e565b5061000e610c36565b5061000e610bf2565b5061000e610b91565b5061000e610a55565b5061000e610a2d565b5061000e610995565b5061000e61096f565b5061000e61092b565b5061000e6108a4565b5061000e6107fa565b5061000e6107b3565b5061000e61076c565b5061000e6106dd565b5061000e610485565b5061000e610440565b503461000e57606036600319011261000e5760043560243561027782610d2b565b509161028281610fe4565b5061028c90611417565b9265ffffffffffff9381838642169260208101516102af9065ffffffffffff1690565b65ffffffffffff1684106102c290611466565b6102cc848361184f565b6102d5826124a5565b6102e36044358211156114b2565b806102ed89611515565b906102f79161156d565b61030084610f1e565b505460f01c60ff166103119061158d565b61031a9161156d565b97600385015489111561032c906115ac565b80600186019a8a8c546103439060ff9060a01c1690565b600014966103d1956103bd946103af9460409a61042d57610366825b8d546115f8565b8c5560058c0161037783825461160f565b90556103a5600267ffffffffffffffff87169d8e61039a6004830191825461160f565b9055019c8d5461160f565b8c5533931661272e565b9a546001600160a01b031690565b6009546001600160a01b0316903390611627565b01519054111561041d5750600090557f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe56000604051a25b604080519182526020820192909252f35b0390f35b905061042891611bfd565b610408565b6103668561035f565b8015150361000e57565b503461000e57602036600319011261000e5760043561045e81610436565b6104666113bf565b6000805460ff60a01b191691151560a01b60ff60a01b16919091179055005b503461000e57602036600319011261000e5760006004356104a4611ea6565b506104ce6104b182610fe4565b50600101805465ffffffffffff19164265ffffffffffff16179055565b816104d882610d2b565b5055604051907f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe58383a2f35b6001600160a01b0381160361000e57565b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161054057604052565b610548610515565b604052565b60a0810190811067ffffffffffffffff82111761054057604052565b6040810190811067ffffffffffffffff82111761054057604052565b90601f8019910116810190811067ffffffffffffffff82111761054057604052565b604051906080820182811067ffffffffffffffff82111761054057604052565b6040519060e0820182811067ffffffffffffffff82111761054057604052565b604051906060820182811067ffffffffffffffff82111761054057604052565b6040519060c0820182811067ffffffffffffffff82111761054057604052565b604051906106348261054d565b565b60209067ffffffffffffffff8111610654575b601f01601f19160190565b61065c610515565b610649565b81601f8201121561000e5780359061067882610636565b926106866040519485610585565b8284526020838301011161000e57816000926020809301838601378301015290565b918091926000905b8282106106c85750116106c1575050565b6000910152565b915080602091830151818601520182916106b0565b503461000e57604036600319011261000e576004356106fb81610504565b60243567ffffffffffffffff811161000e5761074f6020610419936001600160a01b0361072e60ff953690600401610661565b911660005260048252604060002082604051948386809551938492016106a8565b820190815203019020546040519116151581529081906020820190565b503461000e57602036600319011261000e576001600160a01b0360043561079281610504565b61079a6113bf565b166001600160a01b031960025416176002556000604051f35b503461000e57602036600319011261000e576001600160a01b036004356107d981610504565b6107e16113bf565b166001600160a01b031960035416176003556000604051f35b503461000e57606036600319011261000e5760043561081881610504565b60243567ffffffffffffffff811161000e57602061083d610872923690600401610661565b6001600160a01b036044359461085286610436565b1660005260048252604060002082604051948386809551938492016106a8565b8201908152030190209060ff8019835416911515161790556000604051f35b60c4359063ffffffff8216820361000e57565b503461000e5760e036600319011261000e576004356108c281610504565b604435906108cf82610436565b6084359165ffffffffffff8316830361000e5760a43563ffffffff8116810361000e576104199361091093610902610891565b936064359160243590611ec7565b6040519081529081906020820190565b600091031261000e57565b503461000e57600036600319011261000e57602060405165ffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e57600036600319011261000e57602061ffff60035460a01c16604051908152f35b503461000e57602036600319011261000e5760043561ffff811680820361000e57612710906109c26113bf565b116109e8576003805461ffff60a01b191660a09290921b61ffff60a01b16919091179055005b60405162461bcd60e51b815260206004820152601360248201527f496e76616c696420626173697320706f696e74000000000000000000000000006044820152606490fd5b503461000e57600036600319011261000e5760206001600160a01b0360095416604051908152f35b503461000e57602036600319011261000e57600435610a8f610a8a336001600160a01b03166000526001602052604060002090565b612cca565b6000805b8251811015610b06578365ffffffffffff610ac16060610ab3858861298b565b51015165ffffffffffff1690565b161480610af1575b610adc575b610ad79061297b565b610a93565b90610ae9610ad79161297b565b919050610ace565b5060ff610afe8233612d32565b161515610ac9565b50610b1090612949565b6000805b8351811015610b85578465ffffffffffff610b346060610ab3858961298b565b161480610b70575b610b4f575b610b4a9061297b565b610b14565b90610b688183610b62610b4a948761298b565b5261297b565b919050610b41565b5060ff610b7d8233612d32565b161515610b3c565b61041961091084612ab5565b503461000e57600080600319360112610bef57610bac6113bf565b80546001600160a01b031981168255816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e57602060405165ffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e57600036600319011261000e5760206001600160a01b0360035416604051908152f35b503461000e57600036600319011261000e5760206001600160a01b0360025416604051908152f35b503461000e57600036600319011261000e57602060ff60005460a01c166040519015158152f35b503461000e57600036600319011261000e5760206001600160a01b0360005416604051908152f35b503461000e57600036600319011261000e57602060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50634e487b7160e01b600052603260045260246000fd5b600690600554811015610d67575b6005600052027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00190600090565b610d6f610d14565b610d39565b503461000e57602036600319011261000e5760043560055481101561000e57610d9c90610d2b565b5080546001820154600283015460038401546004850154600590950154604080519586526001600160a01b038516602087015260ff60a095861c16151590860152606085019290925260808401529082019290925260c081019190915260e090f35b503461000e57602036600319011261000e5760043560005260086020526080604060002060ff6001825492015460405192835265ffffffffffff80821660208501528160301c16604084015260601c1615156060820152f35b503461000e57602036600319011261000e57600435610e75816124a5565b6104196b033b2e3c9fd0803ce8000000610ef383610eee610e9587610d2b565b505496610ee860ff6003610ea884610d2b565b50015492600754811015610f11575b60076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688015460f01c1661158d565b9061155a565b61155a565b04604051938493846040919493926060820195825260208201520152565b610f19610d14565b610eb7565b600754811015610f56575b60076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880190600090565b610f5e610d14565b610f29565b8054821015610f7c575b60005260206000200190600090565b610f84610d14565b610f6d565b503461000e57604036600319011261000e57600435610fa781610504565b6001600160a01b036024359116600052600a6020526040600020805482101561000e57602091610fd691610f63565b90546040519160031b1c8152f35b600390600654811015611020575b6006600052027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0190600090565b611028610d14565b610ff2565b805482101561104a575b6000526003602060002091020190600090565b611052610d14565b611037565b503461000e57602036600319011261000e5760043560065481101561000e576003606091600660005202807ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0154907ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4165ffffffffffff7ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d40830154169101549060405192835260208301526040820152f35b503461000e57604036600319011261000e5760043561112781610504565b6001600160a01b0360243591166000526001602052604060002090815481101561000e576111549161102d565b508054600182015460029092015460408051928352602083019390935265ffffffffffff80821693830193909352603081901c9092166060808301919091529190911c60ff16608082015260a090f35b503461000e57602036600319011261000e5760043560075481101561000e5760076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801546040805165ffffffffffff8084168252603084901c81166020830152606084811c821693830193909352609084901c81169282019290925260c083811c909216608082015260f09290921c60ff1660a083015290f35b503461000e57602036600319011261000e5760043561125f81610504565b6112676113bf565b6001600160a01b038091169081156112b957600091825491816001600160a01b0319841617845560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b60209067ffffffffffffffff8111611327575b60051b0190565b61132f610515565b611320565b503461000e5760208060031936011261000e5760043567ffffffffffffffff811161000e573660238201121561000e578060040135906113738261130d565b916113816040519384610585565b80835260248484019160051b8301019136831161000e57602401905b8282106113b05761041961091085612ab5565b8135815290840190840161139d565b6001600160a01b036000541633036113d357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b906040516060810181811067ffffffffffffffff821117611459575b6040526040600282948054845265ffffffffffff60018201541660208501520154910152565b611461610515565b611433565b1561146d57565b60405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c75646564000000006044820152606490fd5b156114b957565b60405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d6178207072696365006044820152606490fd5b50634e487b7160e01b600052601160045260246000fd5b6b033b2e3c9fd0803ce8000000908060001904821181151516611536570290565b61153e6114fe565b0290565b620f4240908060001904821181151516611536570290565b8060001904821181151516611536570290565b8115611577570490565b634e487b7160e01b600052601260045260246000fd5b60ff16604d811161159f575b600a0a90565b6115a76114fe565b611599565b156115b357565b60405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a652065786365656465640000006044820152606490fd5b818110611603570390565b61160b6114fe565b0390565b8119811161161b570190565b6116236114fe565b0190565b6000916116c6949383926040519560208701936323b872dd60e01b85526001600160a01b03938480921660248a015216604488015260648701526064865261166e8661054d565b1690826040519561167e87610569565b602087527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460208801526116b4843b1515611762565b51925af16116c06117ae565b906117de565b8051806116d1575050565b816020806116e69361063495010191016116eb565b611703565b9081602091031261000e575161170081610436565b90565b1561170a57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b1561176957565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b3d156117d9573d906117bf82610636565b916117cd6040519384610585565b82523d6000602084013e565b606090565b909190156117ea575090565b8151156117fa5750805190602001fd5b6044604051809262461bcd60e51b82526020600483015261182a81518092816024860152602086860191016106a8565b601f01601f19168101030190fd5b65ffffffffffff9182169116818110611603570390565b90600754821015611a26575b60076000526118dd6118d06118d0611894857fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801611a33565b65ffffffffffff60406118c682602085015116804210611a19575b60026118ba8b610d2b565b5091420391015461155a565b920151169061156d565b67ffffffffffffffff1690565b6118f560026118eb85610d2b565b50019182546115f8565b90556119298161190484610f1e565b509065ffffffffffff60301b82549160301b169065ffffffffffff60301b1916179055565b61194d6001611942846000526008602052604060002090565b015460601c60ff1690565b611955575050565b611969826000526008602052604060002090565b9161197f611976826125a5565b91929093610fe4565b5061198b8382546115f8565b905515611a06576119c66001856119a96119ed9461063498546115f8565b815501926119c1845465ffffffffffff9060301c1690565b611838565b82546bffffffffffff000000000000191660309190911b65ffffffffffff60301b16178255565b9065ffffffffffff1665ffffffffffff19825416179055565b505050600101805460ff60601b19169055565b611a216114fe565b6118af565b611a2e610d14565b61185b565b9060405160c0810181811067ffffffffffffffff821117611a99575b60405260a060ff82945465ffffffffffff8082168552808260301c166020860152808260601c166040860152808260901c1660608601528160c01c16608085015260f01c16910152565b611aa1610515565b611a4f565b9065ffffffffffff808093169116809203811161161b570190565b9060405160e0810181811067ffffffffffffffff821117611b37575b60405260c06005829480548452611b1260ff60018301546001600160a01b038116602088015260a01c16604086019015159052565b6002810154606085015260038101546080850152600481015460a08501520154910152565b611b3f610515565b611add565b9081602091031261000e575190565b506040513d6000823e3d90fd5b50634e487b7160e01b600052600060045260246000fd5b60606001611bf992845181550192611bde65ffffffffffff611bb381602085015116879065ffffffffffff1665ffffffffffff19825416179055565b604083015186546bffffffffffff0000000000001916911660301b65ffffffffffff60301b16178555565b0151825460ff60601b191690151560601b60ff60601b161790565b9055565b90611c10611c0a83610f1e565b50611a33565b805165ffffffffffff1692611c47611c3c6080840195611c36875165ffffffffffff1690565b90611aa6565b65ffffffffffff1690565b65ffffffffffff84161015611c5d575b50505050565b611de193611d986118d085611ce36004611d4a611dc798611ce389610ee8611c3c6040611cb5611c3c611c98611c9287610d2b565b50611ac1565b9b6119c16001611ca789610fe4565b50015465ffffffffffff1690565b95611cbf856124a5565b9a8b611ccd84830151151590565b15611e9e57611ce890611ce3611d049351611515565b61156d565b611cfe611cf960a085015160ff1690565b61158d565b9061156d565b945b6003611d3a611d346118d06118d08c611ce3611d2e611c3c60608b015165ffffffffffff1690565b8d61155a565b92610d2b565b500155015165ffffffffffff1690565b926020611d6e611d626003546001600160a01b031690565b6001600160a01b031690565b604051633fdaeac760e11b815293849182905afa918215611e91575b600092611e61575b5061155a565b9067ffffffffffffffff611dab84610fe4565b50549216918210611dea5750611dc082610fe4565b5055610f1e565b509065ffffffffffff1665ffffffffffff19825416179055565b38808080611c57565b611e3c611e14611e07611e5c94611e0087610fe4565b50546115f8565b925165ffffffffffff1690565b611e1c6105a7565b92835265ffffffffffff8716602084015265ffffffffffff166040830152565b60016060820152611e57836000526008602052604060002090565b611b77565b610f1e565b611e8391925060203d8111611e8a575b611e7b8183610585565b810190611b44565b9038611d92565b503d611e71565b611e99611b53565b611d8a565b505194611d06565b60405190611eb382610569565b600582526430b236b4b760d91b6020830152565b90939491959295611ed6611ea6565b50611ee94265ffffffffffff88166115f8565b906040519763313ce56760e01b89526020896004816001600160a01b0388165afa9889156121aa575b600099612179575b5081156121715787611f3e611f3283611ce38b611515565b611cfe60ff8d166121d0565b915b6005549a8b9986611f5763ffffffff8b168761155a565b90611f619161156d565b611f696105c7565b9182526001600160a01b03891660208301528615156040830152856060830152608082015260a081016000905260c0810160009052611fa7906121de565b600354604051633fdaeac760e11b815291908590839081906001600160a01b03165a92600491602094fa80159b6120d763ffffffff6001600160a01b039d7fabc443215e32d8be9e2437c2c0032632966baa3b53a06e4a3ddcb16d3cc3d1e49f65ffffffffffff6121449e61208e6120f79e60209e6120846120f29f60ff9f6120e79e611ce38c9f6120699461204d946120c79d612164575b60009261214a575061155a565b9361206361205a82611542565b620186a0900490565b9061160f565b916120726105e7565b93845265ffffffffffff166020840152565b604082015261229d565b6120b782421661209c610607565b65ffffffffffff821681529e8f019065ffffffffffff169052565b1665ffffffffffff1660408c0152565b1665ffffffffffff166060890152565b1665ffffffffffff166080860152565b1660ff1660a0830152565b61231a565b61211f8661211a8686166001600160a01b0316600052600a602052604060002090565b612460565b60405193849316968390929160209065ffffffffffff60408401951683521515910152565b0390a390565b6020611e839293503d602011611e8a57611e7b8183610585565b61216c611b53565b612040565b878791611f40565b61219c91995060203d6020116121a3575b6121948183610585565b8101906121b7565b9738611f1a565b503d61218a565b6121b2611b53565b611f12565b9081602091031261000e575160ff8116810361000e5790565b604d811161159f57600a0a90565b600560c06121ff8254600160401b811015612290575b600181018455610d2b565b939093612283575b8051845561225e6001850161223f6001600160a01b0360208501511682906001600160a01b03166001600160a01b0319825416179055565b6040830151815460ff60a01b191690151560a01b60ff60a01b16179055565b606081015160028501556080810151600385015560a081015160048501550151910155565b61228b611b60565b612207565b612298610515565b6121f4565b600260406122c0600654600160401b81101561230d575b60018101600655610fe4565b939093612300575b805184556122f965ffffffffffff602083015116600186019065ffffffffffff1665ffffffffffff19825416179055565b0151910155565b612308611b60565b6122c8565b612315610515565b6122b4565b6106349061242c60a0612342600754600160401b811015612453575b60018101600755610f1e565b939093612446575b805184546020830151604084015160608086015191901b71ffffffffffff0000000000000000000000001660309290921b65ffffffffffff60301b1665ffffffffffff9485167fffffffffffffffff00000000000000000000000000000000000000000000000090941693909317929092171760909190911b77ffffffffffff000000000000000000000000000000000000161785556080820151612424911685547fffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff1660c09190911b65ffffffffffff60c01b16178555565b015160ff1690565b815460ff60f01b191660f09190911b60ff60f01b16179055565b61244e611b60565b61234a565b61245b610515565b612336565b805461247e91600160401b821015612498575b600182018155610f63565b819291549060031b600019811b9283911b16911916179055565b6124a0610515565b612473565b61170090611cfe611cf961256061255a6124be85610fe4565b5054610ee8600461251960026124d38a610d2b565b5001546007548a1015612598575b60076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6888a0154610ee89060f01c60ff1661158d565b6020612530611d626003546001600160a01b031690565b604051633fdaeac760e11b815293849182905afa91821561258b575b60009261256b575b5061156d565b93610f1e565b505460f01c60ff1690565b61258491925060203d8111611e8a57611e7b8183610585565b9038612554565b612593611b53565b61254c565b6125a0610d14565b6124e1565b6000908152600860205260408120906001604051926080840184811067ffffffffffffffff821117612662575b6040528054845201549165ffffffffffff9283811680602084015260ff6040840192868160301c16845260601c1615801560608501526126575761261890854216611838565b9361262c611c3c835165ffffffffffff1690565b9085169081109350831561265157611c3c611e07611cfe9261264e955161155a565b92565b50505192565b505050809150918190565b61266a610515565b6125d2565b60ff60806002612697611bf994805490600160401b821015612721575b60018201815561102d565b612714575b855181556020860151600182015560408601519101805465ffffffffffff191665ffffffffffff92831617815594906126fa90606083015187546bffffffffffff0000000000001916911660301b65ffffffffffff60301b16178655565b0151835460ff60601b1916911660601b60ff60601b161790565b61271c611b60565b61269c565b612729610515565b61268c565b909192949361276c61276561275d61275761275060035461ffff9060a01c1690565b61ffff1690565b8461155a565b612710900490565b80926115f8565b6127a761278c886001600160a01b03166000526001602052604060002090565b54976001600160a01b03166000526001602052604060002090565b9060058104906127f565ffffffffffff4216936127c2610627565b8381526020810185905265ffffffffffff861660408201529065ffffffffffff881660608301526000608083015261266f565b61280a611d626003546001600160a01b031690565b9661281d6002546001600160a01b031690565b96883b1561000e576040516340c10f1960e01b81526001600160a01b0398909816600489015260248801959095527f129794f6f9aa0adfa6dda6ca7d08d05812fea954f80008e5cf68ae7b9fa898b4978a976128d296916000908290604490829084905af180156128f0575b6128d7575b506040805133815265ffffffffffff9889166020820152908101989098526060880152608087015260a086015260c085015290911660e08301528190610100820190565b0390a1565b806128e46128ea9261052c565b80610920565b3861288e565b6128f8611b53565b612889565b1561290457565b60405162461bcd60e51b815260206004820152601160248201527f4e6f7468696e6720746f2072656465656d0000000000000000000000000000006044820152606490fd5b906129538261130d565b6129606040519182610585565b8281528092612971601f199161130d565b0190602036910137565b600190600019811461161b570190565b60209181518110156129a0575b60051b010190565b6129a8610d14565b612998565b156129b457565b60405162461bcd60e51b815260206004820152601260248201527f4e6f2070656e64696e672076657374696e6700000000000000000000000000006044820152606490fd5b60ff8091169116908160ff03811161161b570190565b90815180825260208080930193019160005b828110612a2f575050505090565b835185529381019392810192600101612a21565b906001600160a01b039095949295168152612a6a6020956080878401526080830190612a0f565b818103604083015285808551928381520194019060005b818110612a9e575050506117009394506060818403910152612a0f565b825160ff1686529487019491870191600101612a81565b90600091612ac5815115156128fd565b612acf8151612949565b90612ada8151612949565b9160005b8251811015612bbb57336000908152600160205260409020612b00828561298b565b51612b0a9161102d565b50612b15828561298b565b51612b209033612d32565b9660ff9081891692831515612b34906129ad565b600281018054909a9060601c60ff1690612b4d916129f9565b8a5460ff60601b191660609190911b60ff60601b16178a556001015492612b74908461155a565b612b7d9161160f565b975460601c60ff1680612b90858761298b565b60ff90911690521690612ba29161155a565b612bac828661298b565b52612bb69061297b565b612ade565b5090612bd2611d626003546001600160a01b031690565b803b1561000e576040516340c10f1960e01b8152336004820152602481018790527f5a21b90378728eb82fe7be28a8f4a46d422e5c1f08ac7521b84ef5c190b0cc86946128d2929091906000908290604490829084905af18015612c57575b612c44575b506040519384933385612a43565b806128e4612c519261052c565b38612c36565b612c5f611b53565b612c31565b9060405160a0810181811067ffffffffffffffff821117612cbd575b604052608060ff600283958054855260018101546020860152015465ffffffffffff80821660408601528160301c16606085015260601c16910152565b612cc5610515565b612c80565b908154612cd68161130d565b92612ce46040519485610585565b818452600090815260208082208186015b848410612d03575050505050565b600383600192612d1285612c64565b815201920193019290612cf5565b60ff9182169116818110611603570390565b612d6191612d56612d5b926001600160a01b03166000526001602052604060002090565b61102d565b50612c64565b6080810160ff612d72825160ff1690565b7f0000000000000000000000000000000000000000000000000000000000000000821691168114612e5457612e1860ff91612e06612dc8612dc2611c3c604061170099015165ffffffffffff1690565b426115f8565b60005460a01c60ff1615612e275765ffffffffffff7f00000000000000000000000000000000000000000000000000000000000000005b169061156d565b81811115612e1f5750925b5160ff1690565b9116612d20565b905092612e11565b65ffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000612dff565b50505060009056fea26469706673582212204b81c0a131fc05caf0a77a473b1df0bf24a77179132e9192db612241fdc3c72964736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "close(uint256)": {
        "params": {
          "_id": "ID of market to close"
        }
      },
      "deposit(uint256,uint256,uint256)": {
        "params": {
          "_amount": "the amount of quote token to spend",
          "_id": "the ID of the market",
          "_maxPrice": "the maxeimum price at which to buy"
        },
        "returns": {
          "index_": "     the user index of the Note (usd to redeem or query information)",
          "payout_": "    the amount of NEND due"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeem(uint256[])": {
        "params": {
          "_indexes": "the note indexes to redeem"
        },
        "returns": {
          "payout_": "    sum of payout sent, in NEND"
        }
      },
      "redeemAll(uint256)": {
        "details": "if possible, query indexesFor() off-chain and input in redeem() to save gas",
        "returns": {
          "_0": "sum of payout sent, in NEND"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "close(uint256)": {
        "notice": "disable existing market"
      },
      "deposit(uint256,uint256,uint256)": {
        "notice": "deposit quote tokens in exchange for a bond from a specified market"
      },
      "redeem(uint256[])": {
        "notice": "redeem notes for user"
      },
      "redeemAll(uint256)": {
        "notice": "redeem all redeemable markets for user"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8357,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 24014,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "testing",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9557,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "notes",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_struct(Note)9496_storage)dyn_storage)"
      },
      {
        "astId": 9559,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "insurance",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9562,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "nend",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(NEND)24137"
      },
      {
        "astId": 9568,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "commissionRate",
        "offset": 20,
        "slot": "3",
        "type": "t_uint16"
      },
      {
        "astId": 8472,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "hasRole",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))"
      },
      {
        "astId": 8531,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "markets",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(Market)9403_storage)dyn_storage"
      },
      {
        "astId": 8535,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "terms",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(Terms)9410_storage)dyn_storage"
      },
      {
        "astId": 8539,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "metadata",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(Metadata)9423_storage)dyn_storage"
      },
      {
        "astId": 8544,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "adjustments",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Adjustment)9432_storage)"
      },
      {
        "astId": 8546,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "treasury",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 8551,
        "contract": "contracts/bonding/BondDepository.sol:BondDepository",
        "label": "marketsForQuote",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Market)9403_storage)dyn_storage": {
        "base": "t_struct(Market)9403_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Metadata)9423_storage)dyn_storage": {
        "base": "t_struct(Metadata)9423_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Metadata[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Note)9496_storage)dyn_storage": {
        "base": "t_struct(Note)9496_storage",
        "encoding": "dynamic_array",
        "label": "struct INoteKeeper.Note[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Terms)9410_storage)dyn_storage": {
        "base": "t_struct(Terms)9410_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Terms[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)4822": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(NEND)24137": {
        "encoding": "inplace",
        "label": "contract NEND",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Note)9496_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct INoteKeeper.Note[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Note)9496_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Adjustment)9432_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBondDepository.Adjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(Adjustment)9432_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Adjustment)9432_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Adjustment",
        "members": [
          {
            "astId": 9425,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "change",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9427,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "lastAdjustment",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 9429,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "timeToAdjusted",
            "offset": 6,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 9431,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "active",
            "offset": 12,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Market)9403_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Market",
        "members": [
          {
            "astId": 9389,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "capacity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9392,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "quoteToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)4822"
          },
          {
            "astId": 9394,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "capacityInQuote",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 9396,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "totalDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9398,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "maxPayout",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9400,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "sold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9402,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "purchased",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Metadata)9423_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Metadata",
        "members": [
          {
            "astId": 9412,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "lastTune",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 9414,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "lastDecay",
            "offset": 6,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 9416,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "length",
            "offset": 12,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 9418,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "depositInterval",
            "offset": 18,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 9420,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "tuneInterval",
            "offset": 24,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 9422,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "quoteDecimals",
            "offset": 30,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Note)9496_storage": {
        "encoding": "inplace",
        "label": "struct INoteKeeper.Note",
        "members": [
          {
            "astId": 9487,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9489,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "payoutPerVesting",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9491,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "created",
            "offset": 0,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 9493,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "marketID",
            "offset": 6,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 9495,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "vestingCount",
            "offset": 12,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Terms)9410_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Terms",
        "members": [
          {
            "astId": 9405,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "controlVariable",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9407,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "conclusion",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 9409,
            "contract": "contracts/bonding/BondDepository.sol:BondDepository",
            "label": "maxDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}