{
  "address": "0x667ca0ca759a05221D92bcD86E00F42bF86c4A18",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Vault",
          "name": "_rewardPool",
          "type": "address"
        },
        {
          "internalType": "contract NEND",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address[4]",
          "name": "_vpcAddresses",
          "type": "address[4]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "curationHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "votersRedeemableCard",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "votersRewarded",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "rewards",
          "type": "uint256[]"
        }
      ],
      "name": "CurationEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "curationHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "VPCRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "accept",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "bet",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "leverageLending",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "loanAmount",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "duration",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "apr",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "cardLevel",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cardId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "voteTime",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "curationHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "VoteCasted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_accept",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_bet",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_leverageLending",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "_loanAmount",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_duration",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_apr",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_cardLevel",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_cardId",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "_curationEnd",
          "type": "uint48"
        },
        {
          "internalType": "bytes32",
          "name": "_curationHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "castVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "curationHashToEndTime",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "curationHashToEnded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "curationHash",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "rejected",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "winningOption",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "totalRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "winningPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICuration.EndCurationArgs",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "endCuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nend",
      "outputs": [
        {
          "internalType": "contract NEND",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_curationHash",
          "type": "bytes32"
        }
      ],
      "name": "redeemVpc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPool",
      "outputs": [
        {
          "internalType": "contract Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract NEND",
          "name": "_nend",
          "type": "address"
        }
      ],
      "name": "setNend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Vault",
          "name": "_rewardPool",
          "type": "address"
        }
      ],
      "name": "setRewardPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_level",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setVPCAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[4]",
          "name": "_addresses",
          "type": "address[4]"
        }
      ],
      "name": "setVPCAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "accept",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "bet",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "leverageLending",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "vpcRedeemable",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "rewardsClaimed",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "loanAmount",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "duration",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "apr",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "cardLevel",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "cardId",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "voteTime",
          "type": "uint48"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vpcAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7e2f05522690893a595c678f56f04c702df9f86076e7e4e9f43bb06e103f4c73",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x2F358B80eD2d296C09560d2b9F70a7f81d57e352",
    "contractAddress": null,
    "transactionIndex": 18,
    "gasUsed": "2352971",
    "logsBloom": "0x
    "blockHash": "0x6b362a13ed5fda06ef44e401cc410e453a37968294a901aae476dee8b5f24ec2",
    "transactionHash": "0x7e2f05522690893a595c678f56f04c702df9f86076e7e4e9f43bb06e103f4c73",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 11349754,
        "transactionHash": "0x7e2f05522690893a595c678f56f04c702df9f86076e7e4e9f43bb06e103f4c73",
        "address": "0x667ca0ca759a05221D92bcD86E00F42bF86c4A18",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002f358b80ed2d296c09560d2b9f70a7f81d57e352"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x6b362a13ed5fda06ef44e401cc410e453a37968294a901aae476dee8b5f24ec2"
      }
    ],
    "blockNumber": 11349754,
    "cumulativeGasUsed": "7080837",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xeBAB3161F43080ABAbff2be89D81ac3aF44509ED",
    "0x235D5eb29E540DB5D58Ba7CC4cC1fbf0118A1Fa2",
    [
      "0x8c33B884dBB47e3b15885020E0C4B37C9aF2734E",
      "0x3A0c725ebE634767A163bb4dA482dd675b710239",
      "0xF4AbB7062d50B854BbAAb27259E4c1bf85Bd1204",
      "0x2ffc28980dA9098E857367335af46c0c5BfE7cE4"
    ]
  ],
  "numDeployments": 17,
  "solcInputHash": "e6a8509ab9edc0773d6a6bd4cf2732fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Vault\",\"name\":\"_rewardPool\",\"type\":\"address\"},{\"internalType\":\"contract NEND\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address[4]\",\"name\":\"_vpcAddresses\",\"type\":\"address[4]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"curationHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"votersRedeemableCard\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"votersRewarded\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"CurationEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"curationHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"VPCRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"accept\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"bet\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"leverageLending\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"loanAmount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"duration\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"apr\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"cardLevel\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"voteTime\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"curationHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"VoteCasted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_accept\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_bet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_leverageLending\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_loanAmount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_duration\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_apr\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_cardLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"_curationEnd\",\"type\":\"uint48\"},{\"internalType\":\"bytes32\",\"name\":\"_curationHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"curationHashToEndTime\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"curationHashToEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"curationHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"rejected\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"winningOption\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winningPower\",\"type\":\"uint256\"}],\"internalType\":\"struct ICuration.EndCurationArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"endCuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nend\",\"outputs\":[{\"internalType\":\"contract NEND\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_curationHash\",\"type\":\"bytes32\"}],\"name\":\"redeemVpc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract NEND\",\"name\":\"_nend\",\"type\":\"address\"}],\"name\":\"setNend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Vault\",\"name\":\"_rewardPool\",\"type\":\"address\"}],\"name\":\"setRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setVPCAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[4]\",\"name\":\"_addresses\",\"type\":\"address[4]\"}],\"name\":\"setVPCAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"accept\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"bet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"leverageLending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"vpcRedeemable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"rewardsClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"loanAmount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"duration\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"apr\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"cardLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"voteTime\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vpcAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/voting/PeriFiCuration.sol\":\"PeriFiCuration\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x56035505d62f05f5e5040532b749ab25237f6dd87c7a514614acda96af996751\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, ERC721Upgradeable {\\n    function __ERC721URIStorage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xbd5c6f8268a1d477f6a746ebedaf7fbcf412186f0c1c54ee104547cfb5e18edd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProofUpgradeable {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4c91e851f295b7f07a789d92ccb0ced46dce55fef30a5a076889721a9f6eed21\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/access/MWOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract MWOwnable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(0x2F358B80eD2d296C09560d2b9F70a7f81d57e352);\\r\\n        // _transferOwnership(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier \\r\\n    onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x74bdfa3e963b95404e1b54bad52ae3f45163684fe644cd84b6b4054817cbff86\",\"license\":\"MIT\"},\"contracts/access/SimpleRoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract SimpleRoleAccess is MWOwnable {\\r\\n    mapping(address => mapping(string => bool)) public hasRole;\\r\\n\\r\\n    function authorize(\\r\\n        address operator,\\r\\n        string memory role,\\r\\n        bool authorized // onlyOwner\\r\\n    ) public {\\r\\n        hasRole[operator][role] = authorized;\\r\\n    }\\r\\n\\r\\n    modifier onlyRole(string memory _role) {\\r\\n        // require(\\r\\n        //     msg.sender == owner() || hasRole[msg.sender][_role],\\r\\n        //     \\\"Not authorized\\\"\\r\\n        // );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasAllRoles(string[] memory _roles) {\\r\\n        // for (uint256 i = 0; i < _roles.length; i++) {\\r\\n        //     require(hasRole[msg.sender][_roles[i]], \\\"Not authorized\\\");\\r\\n        // }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasSomeRoles(string[] memory _roles) {\\r\\n        // bool _hasRole;\\r\\n        // for (uint256 i = 0; i < _roles.length; i++) {\\r\\n        //     if (hasRole[msg.sender][_roles[i]]) {\\r\\n        //         _hasRole = true;\\r\\n        //         break;\\r\\n        //     }\\r\\n        // }\\r\\n        // require(_hasRole, \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfa22c01bc01559b14a4c692d1c7ca3ccd71541fbf54ecebefcf0b5a5e46da466\",\"license\":\"UNLICENSED\"},\"contracts/bridge/NENDBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract NENDBridge is ERC20, MWOwnable {\\r\\n    event EnterBridge(\\r\\n        uint48 enteredAt,\\r\\n        uint256 targetChainId,\\r\\n        address sender,\\r\\n        address receiver,\\r\\n        uint256 amount,\\r\\n        uint256 nonce\\r\\n    );\\r\\n\\r\\n    modifier validDestinationChain(uint256 chainId) {\\r\\n        require(\\r\\n            _isChainSupported(chainId) && block.chainid != chainId,\\r\\n            \\\"Invalid destination chain\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => mapping(uint256 => bool))\\r\\n        private chainNonceToExecutedMapping;\\r\\n    uint256 private nonce;\\r\\n\\r\\n    uint256[] public supportedChainIds;\\r\\n\\r\\n    constructor(uint256[] memory _supportedChainIds) {\\r\\n        require(\\r\\n            _supportedChainIds.length > 1,\\r\\n            \\\"Must have at least two destination chains\\\"\\r\\n        );\\r\\n        supportedChainIds = _supportedChainIds;\\r\\n        require(\\r\\n            _isChainSupported(block.chainid),\\r\\n            \\\"The hosted chain must be one of the supported chains\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function enterBridge(\\r\\n        uint256 _targetChainId,\\r\\n        address _receiver,\\r\\n        uint256 _amount\\r\\n    ) external validDestinationChain(_targetChainId) {\\r\\n        require(_amount > 0, \\\"Invalid amount\\\");\\r\\n        require(balanceOf(msg.sender) > _amount, \\\"Insufficient balance\\\");\\r\\n\\r\\n        _burn(msg.sender, _amount);\\r\\n\\r\\n        emit EnterBridge(\\r\\n            uint48(block.timestamp),\\r\\n            _targetChainId,\\r\\n            msg.sender,\\r\\n            _receiver,\\r\\n            _amount,\\r\\n            nonce++\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function leaveBridge(\\r\\n        uint256 _sourceChainId,\\r\\n        address _receiver,\\r\\n        uint256 _amount,\\r\\n        uint256 _nonce\\r\\n    ) external onlyOwner {\\r\\n        // Duplicate request, already left bridge\\r\\n        if (chainNonceToExecutedMapping[_sourceChainId][_nonce]) {\\r\\n            return;\\r\\n        }\\r\\n        chainNonceToExecutedMapping[_sourceChainId][_nonce] = true;\\r\\n\\r\\n        _mint(_receiver, _amount);\\r\\n    }\\r\\n\\r\\n    function _isChainSupported(uint256 chainId) internal view returns (bool) {\\r\\n        for (uint256 i = 0; i < supportedChainIds.length; i++) {\\r\\n            if (supportedChainIds[i] == chainId) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd741ff23c72bcc3ea68109a579655255bd171cb691129c43849ff9fa0260d9da\",\"license\":\"UNLICENSED\"},\"contracts/helpers/SignatureHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract SignatureHelper {\\r\\n    function recoverSigner(bytes32 messageHash, bytes memory signature)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address)\\r\\n    {\\r\\n        (bytes32 r, bytes32 s, uint8 v) = splitSig(signature);\\r\\n\\r\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\r\\n        bytes32 prefixedHashMessage = keccak256(\\r\\n            abi.encodePacked(prefix, messageHash)\\r\\n        );\\r\\n\\r\\n        return ecrecover(prefixedHashMessage, v, r, s);\\r\\n    }\\r\\n\\r\\n    function splitSig(bytes memory signature)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            bytes32 r,\\r\\n            bytes32 s,\\r\\n            uint8 v\\r\\n        )\\r\\n    {\\r\\n        assembly {\\r\\n            r := mload(add(signature, 32))\\r\\n            s := mload(add(signature, 64))\\r\\n            v := and(mload(add(signature, 65)), 255)\\r\\n        }\\r\\n        if (v < 27) v += 27;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc28918b5510532314112bdd8bab4431e5ab80cc9c33d447b7154983a610b6a92\",\"license\":\"UNLICENSED\"},\"contracts/inflation/Inflation.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../staking/interfaces/ILendingPoolStaking.sol\\\";\\r\\nimport \\\"../vault/Vault.sol\\\";\\r\\nimport \\\"../test/Testing.sol\\\";\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract Inflation is ERC20, MWOwnable, Testing {\\r\\n    ILendingPoolStaking public staking;\\r\\n\\r\\n    // The number of inflations carried out\\r\\n    uint8 public inflationCount;\\r\\n\\r\\n    // Decay rate * 10000\\r\\n    uint16 public inflationDecay = 125; // 1.25%\\r\\n\\r\\n    // The time of last inflation\\r\\n    uint48 public lastInflation;\\r\\n\\r\\n    uint48 public immutable inflationInterval = 1 weeks;\\r\\n\\r\\n    uint48 public immutable testInflationInterval = 10 minutes;\\r\\n\\r\\n    // The inflation amount\\r\\n    uint256 public inflationAmount;\\r\\n\\r\\n    constructor(uint256 _inflationAmount) {\\r\\n        inflationAmount = _inflationAmount;\\r\\n    }\\r\\n\\r\\n    function setStaking(address _staking) external onlyOwner {\\r\\n        staking = ILendingPoolStaking(_staking);\\r\\n    }\\r\\n\\r\\n    function setInflationCount(uint8 _inflationCount) external onlyOwner {\\r\\n        inflationCount = _inflationCount;\\r\\n    }\\r\\n\\r\\n    function setInflationDecay(uint16 _inflationDecay) external onlyOwner {\\r\\n        inflationDecay = _inflationDecay;\\r\\n    }\\r\\n\\r\\n    function setLastInflation(uint48 _lastInflation) external onlyOwner {\\r\\n        lastInflation = _lastInflation;\\r\\n    }\\r\\n\\r\\n    function setInflationAmount(uint256 _inflationAmount) external onlyOwner {\\r\\n        inflationAmount = _inflationAmount;\\r\\n    }\\r\\n\\r\\n    function canStartEpoch() external view returns (bool) {\\r\\n        return\\r\\n            inflationCount < 208 &&\\r\\n            block.timestamp >=\\r\\n            lastInflation +\\r\\n                (testing ? testInflationInterval : inflationInterval);\\r\\n    }\\r\\n\\r\\n    function startEpoch() external onlyOwner {\\r\\n        require(address(staking) != address(0), \\\"Staking not set\\\");\\r\\n        // require(inflationCount < 208, \\\"Maximum epoch\\\");\\r\\n        // require(\\r\\n        //     block.timestamp >=\\r\\n        //         lastInflation +\\r\\n        //             (testing ? testInflationInterval : inflationInterval),\\r\\n        //     \\\"Last epoch not ended\\\"\\r\\n        // );\\r\\n\\r\\n        inflationCount++;\\r\\n        lastInflation = uint48(block.timestamp);\\r\\n\\r\\n        if (inflationCount > 52) {\\r\\n            inflationAmount -= (inflationAmount * inflationDecay) / 10000;\\r\\n        }\\r\\n\\r\\n        _mint(address(staking), inflationAmount);\\r\\n\\r\\n        staking.distributeInflationRewards(inflationAmount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3f2b822107652206d456162c03691046c9a6e7fd493e7cd3740b1107ce78265e\",\"license\":\"UNLICENSED\"},\"contracts/staking/interfaces/ILendingPoolStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILendingPoolStaking {\\r\\n    error InsufficientBalance();\\r\\n    error InvalidArgument(string details);\\r\\n    error InvalidState();\\r\\n    error Unauthorized();\\r\\n\\r\\n    enum StakeStatus {\\r\\n        DEFAULT, // Not staked, only applicable to escrowed reward\\r\\n        STAKED, // Stake ongoing\\r\\n        FULFILLED, // Stake ended gracefully\\r\\n        CANCELED // Stake ended because of early unstake by user\\r\\n    }\\r\\n\\r\\n    enum EscrowStatus {\\r\\n        DEFAULT, // Not issued\\r\\n        ISSUED,\\r\\n        CLAIMED,\\r\\n        CANCELED // Canceled due to early unstake by user\\r\\n    }\\r\\n\\r\\n    struct Stake {\\r\\n        // Staker address\\r\\n        address staker;\\r\\n        // Stake token address\\r\\n        address token;\\r\\n        // The time of deposit\\r\\n        uint48 start;\\r\\n        // The time of withdrawal\\r\\n        uint48 end;\\r\\n        // The amount staked by each stake duration\\r\\n        uint256[3] amountsPerDuration;\\r\\n        // The amount of stake token that will be rewarded upon finishing the stake duration\\r\\n        uint256 rewardAllocated;\\r\\n        // The idx of reward allocation to this stake\\r\\n        uint8 rewardAllocationId;\\r\\n        // Ids of child escrows\\r\\n        uint256[] childIds;\\r\\n        // Stake ids that created this stake as escrowed reward\\r\\n        uint256[] parentIds;\\r\\n        // Status of eab\\r\\n        EscrowStatus escrowStatus;\\r\\n        // Status of stake\\r\\n        StakeStatus stakeStatus;\\r\\n    }\\r\\n\\r\\n    event Staked(\\r\\n        uint256 stakeId,\\r\\n        address staker,\\r\\n        address token,\\r\\n        uint48 start,\\r\\n        uint48 end,\\r\\n        uint256 amount,\\r\\n        uint8 rewardAllocationId,\\r\\n        uint256[] parentIds\\r\\n    );\\r\\n    event RewardsAllocated(uint256[] stakeIds, uint256[] rewardsAllocated);\\r\\n    event StakeStatusChanged(uint256 stakeId, StakeStatus status);\\r\\n    event EscrowStatusChanged(uint256 stakeId, EscrowStatus status);\\r\\n\\r\\n    function deposit(\\r\\n        address _stakeToken,\\r\\n        uint256 _amount,\\r\\n        uint8 _durationId\\r\\n    ) external payable;\\r\\n\\r\\n    function stakeEscrowedReward(uint256 _stakeId) external ;\\r\\n\\r\\n    function distributeInflationRewards(uint256 _inflationReward) external;\\r\\n\\r\\n    function distributeNonInflationRewards() external;\\r\\n\\r\\n    function claimEscrowedReward(uint256 _stakeId) external;\\r\\n\\r\\n    function unstake(uint256 _stakeId) external;\\r\\n\\r\\n    function addStakeToken(address _stakeToken) external;\\r\\n\\r\\n    function removeStakeToken(address _stakeToken) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x7ea30ad2a125f202a0d9f14749de515059474c01a5725b7bef682e13951e858f\",\"license\":\"UNLICENSED\"},\"contracts/test/Testing.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract Testing is MWOwnable {\\r\\n    bool public testing = true;\\r\\n\\r\\n    function setTesting(bool _testing) external onlyOwner {\\r\\n        testing = _testing;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3dfdc5be3d00ff111ce1b7835a3c371fb86282a0d915f3613716d25eee946ce9\",\"license\":\"Unlicense\"},\"contracts/token/ERC20/NEND.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../bridge/NENDBridge.sol\\\";\\r\\nimport \\\"./NENDAirdrop.sol\\\";\\r\\nimport \\\"./NENDCrowdSale.sol\\\";\\r\\nimport \\\"./NENDCrossChainSupply.sol\\\";\\r\\nimport \\\"../../inflation/Inflation.sol\\\";\\r\\nimport \\\"../../access/SimpleRoleAccess.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\n\\r\\ncontract NEND is\\r\\n    NENDAirdrop,\\r\\n    NENDCrowdSale,\\r\\n    NENDBridge,\\r\\n    NENDCrossChainSupply,\\r\\n    SimpleRoleAccess,\\r\\n    ERC20Burnable\\r\\n{\\r\\n    uint256 public marketing;\\r\\n    uint256 public team;\\r\\n    uint256 public advisor;\\r\\n    bool public isMintChain;\\r\\n\\r\\n    function mint(address _receiver, uint256 _amount)\\r\\n        external\\r\\n        onlyRole(\\\"minter\\\")\\r\\n    {\\r\\n        _mint(_receiver, _amount);\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        bool _isMainChain,\\r\\n        uint256[] memory _chains,\\r\\n        uint256 _inflationAmount\\r\\n    ) ERC20(\\\"NEND\\\", \\\"N\\\") NENDBridge(_chains) Inflation(_inflationAmount) {\\r\\n        isMintChain = _isMainChain;\\r\\n        if (isMintChain) {\\r\\n            airdrop = 5000000 ether;\\r\\n            marketing = 5000000 ether;\\r\\n            team = 10000000 ether;\\r\\n            advisor = 5000000 ether;\\r\\n            sale = 10000000 ether;\\r\\n            _mint(\\r\\n                address(this),\\r\\n                    airdrop +\\r\\n                    marketing +\\r\\n                    team +\\r\\n                    advisor +\\r\\n                    sale\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdf73910eae71454f3e5a8fb720631f0f4023b38ddda4bf592ced0387028b0bb6\",\"license\":\"UNLICENSED\"},\"contracts/token/ERC20/NENDAirdrop.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\nabstract contract NENDAirdrop is ERC20 {\\r\\n\\r\\n    uint airdrop;\\r\\n\\r\\n    event AirdropCreated(address indexed addresses, uint256 amount);\\r\\n\\r\\n    function createAirdrop(\\r\\n        address _receiver,\\r\\n        uint256 _amount // onlyOwner\\r\\n    ) external {\\r\\n        require(airdrop >= _amount, \\\"Not enough airdrop funds\\\");\\r\\n\\r\\n        airdrop -= _amount;\\r\\n\\r\\n        _transfer(address(this), _receiver, _amount);\\r\\n        emit AirdropCreated(_receiver, _amount);\\r\\n    }\\r\\n\\r\\n    function createAirdropBatch(address[] memory _receivers, uint256 _amount)\\r\\n        external\\r\\n    // onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            airdrop > _receivers.length * _amount,\\r\\n            \\\"Not enough airdrop funds\\\"\\r\\n        );\\r\\n\\r\\n        airdrop -= _receivers.length * _amount;\\r\\n\\r\\n        for (uint256 i = 0; i < _receivers.length; i++) {\\r\\n            _transfer(address(this), _receivers[i], _amount);\\r\\n            emit AirdropCreated(_receivers[i], _amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe4774e443bf5c12c445f4a61d6ae91ae6447181ba51cfaca5f35e39c2417ca39\",\"license\":\"UNLICENSED\"},\"contracts/token/ERC20/NENDCrossChainSupply.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../../inflation/Inflation.sol\\\";\\r\\n\\r\\nabstract contract NENDCrossChainSupply is Inflation {\\r\\n    uint256 public crossChainSupply;\\r\\n    uint256 public crossChainInflationAmount;\\r\\n\\r\\n    function update(\\r\\n        uint256 _crossChainSupply,\\r\\n        uint256 _crossChainInflationAmount\\r\\n    ) external onlyOwner {\\r\\n        crossChainSupply = _crossChainSupply;\\r\\n        crossChainInflationAmount = _crossChainInflationAmount;\\r\\n    }\\r\\n\\r\\n    function timeSlicedCrossChainSupply() external view returns (uint256) {\\r\\n        if (lastInflation == 0) {\\r\\n            return crossChainSupply;\\r\\n        }\\r\\n\\r\\n        uint256 timeElapsed = block.timestamp - lastInflation;\\r\\n        uint256 elapsedPct = (timeElapsed * 10000) / 1 weeks;\\r\\n        if (elapsedPct > 10000) {\\r\\n            elapsedPct = 10000;\\r\\n        }\\r\\n\\r\\n        return\\r\\n            crossChainSupply + (crossChainInflationAmount * elapsedPct) / 10000;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xaf04f73d9114c51ed3ac99764b3a7c6733296caf520dd45088a668ca3b176da3\",\"license\":\"UNLICENSED\"},\"contracts/token/ERC20/NENDCrowdSale.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\nabstract contract NENDCrowdSale is ERC20 {\\r\\n\\r\\n    event SaleCreated(address indexed buyer, uint256 amount);\\r\\n\\r\\n    uint256 public constant tokenExchangeRate = 5000; // 5000 NEND tokens per 1 ETH\\r\\n    uint256 public sale;\\r\\n    bool public onSale;\\r\\n\\r\\n    function startSale() external // onlyOwner\\r\\n    {\\r\\n        require(!onSale, \\\"Already on sale\\\");\\r\\n        require(sale > 0, \\\"Not enough sale funds\\\");\\r\\n        onSale = true;\\r\\n    }\\r\\n\\r\\n    function endSale() external // onlyOwner\\r\\n    {\\r\\n        require(onSale, \\\"Sale not started\\\");\\r\\n        onSale = false;\\r\\n    }\\r\\n\\r\\n    function buyNEND() external payable {\\r\\n        require(onSale, \\\"Not on sale\\\");\\r\\n\\r\\n        uint256 nendsBought = msg.value * tokenExchangeRate;\\r\\n\\r\\n        require(sale >= nendsBought, \\\"Not enough sale funds\\\");\\r\\n\\r\\n        sale -= nendsBought;\\r\\n\\r\\n        _transfer(address(this), msg.sender, nendsBought);\\r\\n\\r\\n        emit SaleCreated(msg.sender, nendsBought);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd26a5e45071e0d041f3d3db28b3161d07de606428ff4426b6d689df2faf5e03b\",\"license\":\"UNLICENSED\"},\"contracts/vault/BalanceNames.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract BalanceNames {\\r\\n    string internal interestForPoolBalanceName = \\\"ifp\\\";\\r\\n    string internal interestForLenderBalanceName = \\\"ifl\\\";\\r\\n    string internal tradeCommissionBalanceName = \\\"tc\\\";\\r\\n    string internal bondingCommissionBalanceName = \\\"bc\\\";\\r\\n}\\r\\n\",\"keccak256\":\"0xd6ce3f7eb90d05e918d705b7afea89d3ee88aaab98be74a8b8ac6522a277743d\",\"license\":\"MIT\"},\"contracts/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\r\\n\\r\\ncontract Vault is SimpleRoleAccess {\\r\\n    bytes4 private ERC1155_INTERFACE_ID = 0xd9b67a26;\\r\\n    string public name;\\r\\n\\r\\n    mapping(address => bool) public authorizedOperators;\\r\\n    mapping(address => bool) public authorizedSpenders;\\r\\n    // Balance name => token => amount\\r\\n    mapping(string => mapping(address => uint256)) public namedBalances;\\r\\n\\r\\n    constructor(string memory _name) {\\r\\n        name = _name;\\r\\n    }\\r\\n\\r\\n    function approveERC20Transfer(\\r\\n        address _tokenAddress,\\r\\n        address _spender,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.approve(_spender, _amount);\\r\\n    }\\r\\n\\r\\n    function transferERC20(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") returns (bool) {\\r\\n        IERC20 erc20 = IERC20(_tokenAddress);\\r\\n        return erc20.transfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function setERC721ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function transferERC721(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC721 erc721 = IERC721(_tokenAddress);\\r\\n        erc721.transferFrom(address(this), _to, _tokenId);\\r\\n    }\\r\\n\\r\\n    function transferERC1155(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeTransferFrom(address(this), _to, _id, _value, _data);\\r\\n    }\\r\\n\\r\\n    function transferERC1155Batch(\\r\\n        address _tokenAddress,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.safeBatchTransferFrom(address(this), _to, _ids, _values, _data);\\r\\n    }\\r\\n\\r\\n    function setERC1155ApprovalForAll(\\r\\n        address _tokenAddress,\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        IERC1155 erc1155 = IERC1155(_tokenAddress);\\r\\n        require(\\r\\n            erc1155.supportsInterface(ERC1155_INTERFACE_ID),\\r\\n            \\\"given token address doesn't support ERC1155\\\"\\r\\n        );\\r\\n        erc1155.setApprovalForAll(_operator, _approved);\\r\\n    }\\r\\n\\r\\n    function getNativeBalance() external view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function transferNative(address payable _to, uint256 _amount)\\r\\n        public\\r\\n        payable\\r\\n        onlyRole(\\\"spender\\\")\\r\\n    {\\r\\n        (bool sent, ) = _to.call{ value: _amount }(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n\\r\\n    function burn(address _token, uint256 _amount)\\r\\n        public\\r\\n        onlyRole(\\\"spender\\\")\\r\\n    {\\r\\n        ERC20Burnable(_token).burn(_amount);\\r\\n    }\\r\\n\\r\\n    function namedBalanceReceive(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        namedBalances[_name][_token] += _amount;\\r\\n    }\\r\\n\\r\\n    function namedBalanceSpend(\\r\\n        string memory _name,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external onlyRole(\\\"spender\\\") {\\r\\n        require(\\r\\n            namedBalances[_name][_token] >= _amount,\\r\\n            \\\"Insufficient balance\\\"\\r\\n        );\\r\\n        namedBalances[_name][_token] -= _amount;\\r\\n    }\\r\\n\\r\\n    function getNamedBalance(string memory _name, address _token)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 balance = namedBalances[_name][_token];\\r\\n        uint256 actualBalance = IERC20(_token).balanceOf(address(this));\\r\\n\\r\\n        return balance <= actualBalance ? balance : actualBalance;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x7672753c5a5fc18ca172629386e8b21426b0eade7e9676cbb91d56e2cbbceb63\",\"license\":\"MIT\"},\"contracts/voting/PeriFiCuration.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../helpers/SignatureHelper.sol\\\";\\r\\nimport \\\"../vault/Vault.sol\\\";\\r\\nimport \\\"./ScenarioOneV2.sol\\\";\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\nimport \\\"../token/ERC20/NEND.sol\\\";\\r\\nimport \\\"./ScenarioOneV2.sol\\\";\\r\\nimport \\\"../vault/BalanceNames.sol\\\";\\r\\nimport \\\"./interfaces/ICuration.sol\\\";\\r\\n\\r\\ncontract PeriFiCuration is ICuration, MWOwnable, SignatureHelper, BalanceNames {\\r\\n    // Curation hash => votes\\r\\n    mapping(bytes32 => Vote[]) public votes;\\r\\n    mapping(bytes32 => uint48) public curationHashToEndTime;\\r\\n    mapping(bytes32 => bool) public curationHashToEnded;\\r\\n    address[4] public vpcAddresses;\\r\\n    uint256 ongoingCurationCount;\\r\\n    Vault public rewardPool;\\r\\n    \\r\\n    NEND public nend;\\r\\n\\r\\n    constructor(\\r\\n        Vault _rewardPool,\\r\\n        NEND _rewardToken,\\r\\n        address[4] memory _vpcAddresses\\r\\n    ) {\\r\\n        require(_vpcAddresses.length == 4, \\\"Invalid number of vpc addresses\\\");\\r\\n        rewardPool = _rewardPool;\\r\\n        nend = _rewardToken;\\r\\n        vpcAddresses = _vpcAddresses;\\r\\n    }\\r\\n\\r\\n    function setRewardPool(Vault _rewardPool) external onlyOwner {\\r\\n        rewardPool = _rewardPool;\\r\\n    }\\r\\n\\r\\n    function setNend(NEND _nend) external onlyOwner {\\r\\n        nend = _nend;\\r\\n    }\\r\\n\\r\\n    function setVPCAddress(uint8 _level, address _address) external onlyOwner {\\r\\n        vpcAddresses[_level - 1] = _address;\\r\\n    }\\r\\n\\r\\n    function setVPCAddresses(address[4] memory _addresses) external onlyOwner {\\r\\n        vpcAddresses = _addresses;\\r\\n    }\\r\\n\\r\\n    function castVote(\\r\\n        bool _accept,\\r\\n        bool _bet,\\r\\n        bool _leverageLending,\\r\\n        uint8 _loanAmount,\\r\\n        uint8 _duration,\\r\\n        uint8 _apr,\\r\\n        uint8 _cardLevel,\\r\\n        uint256 _cardId,\\r\\n        uint48 _curationEnd,\\r\\n        bytes32 _curationHash,\\r\\n        bytes memory _signature\\r\\n    ) external override {\\r\\n        bytes32 messageHash = keccak256(\\r\\n            abi.encodePacked(_curationEnd, msg.sender, _curationHash)\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            recoverSigner(messageHash, _signature) == owner(),\\r\\n            \\\"Invalid signature\\\"\\r\\n        );\\r\\n\\r\\n        require(_cardLevel >= 1 && _cardLevel < 5, \\\"Invalid card level\\\");\\r\\n\\r\\n        require(\\r\\n            PERIv2(vpcAddresses[_cardLevel - 1]).revealChecked(_cardId),\\r\\n            \\\"Card not releaved\\\"\\r\\n        );\\r\\n\\r\\n        if (curationHashToEndTime[_curationHash] != 0) {\\r\\n            require(\\r\\n                curationHashToEndTime[_curationHash] == _curationEnd,\\r\\n                \\\"Curation end mismatch\\\"\\r\\n            );\\r\\n        } else {\\r\\n            curationHashToEndTime[_curationHash] = _curationEnd;\\r\\n            ongoingCurationCount++;\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < votes[_curationHash].length; i++) {\\r\\n            if (votes[_curationHash][i].voter == msg.sender) {\\r\\n                revert(\\\"Already voted\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(\\r\\n            vpcAddresses[_cardLevel - 1] != address(0),\\r\\n            \\\"VPC address not set\\\"\\r\\n        );\\r\\n\\r\\n        IERC721(vpcAddresses[_cardLevel - 1]).transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _cardId\\r\\n        );\\r\\n\\r\\n        uint48 voteTime = uint48(block.timestamp);\\r\\n\\r\\n        votes[_curationHash].push(\\r\\n            Vote(\\r\\n                _accept,\\r\\n                _bet,\\r\\n                _leverageLending,\\r\\n                false,\\r\\n                false,\\r\\n                _loanAmount,\\r\\n                _duration,\\r\\n                _apr,\\r\\n                _cardLevel,\\r\\n                _cardId,\\r\\n                voteTime,\\r\\n                msg.sender\\r\\n            )\\r\\n        );\\r\\n\\r\\n        emit VoteCasted(\\r\\n            _accept,\\r\\n            _bet,\\r\\n            _leverageLending,\\r\\n            _loanAmount,\\r\\n            _duration,\\r\\n            _apr,\\r\\n            _cardLevel,\\r\\n            _cardId,\\r\\n            voteTime,\\r\\n            _curationHash,\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function redeemVpc(bytes32 _curationHash) external override {\\r\\n        Vote[] storage _votes = votes[_curationHash];\\r\\n\\r\\n        for (uint i = 0; i < _votes.length; i++) {\\r\\n            Vote storage _vote = _votes[i];\\r\\n            if (_vote.voter == msg.sender && _vote.vpcRedeemable) {\\r\\n                _vote.vpcRedeemable = false;\\r\\n                IERC721(vpcAddresses[_vote.cardLevel - 1]).transferFrom(\\r\\n                    address(this),\\r\\n                    _vote.voter,\\r\\n                    _vote.cardId\\r\\n                );\\r\\n\\r\\n                emit VPCRedeemed(_curationHash, msg.sender);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        revert(\\\"No vote valid for vpc redeem\\\");\\r\\n    }\\r\\n\\r\\n    function endCuration(EndCurationArgs memory args) external override  onlyOwner {\\r\\n        require(!curationHashToEnded[args.curationHash], \\\"Curation ended\\\");\\r\\n\\r\\n        require(\\r\\n            curationHashToEndTime[args.curationHash] == 0 ||\\r\\n                block.timestamp >= curationHashToEndTime[args.curationHash],\\r\\n            \\\"Curation end time not reached\\\"\\r\\n        );\\r\\n\\r\\n        curationHashToEnded[args.curationHash] = true;\\r\\n\\r\\n        // No vote for the curation was casted on this chain\\r\\n        if (curationHashToEndTime[args.curationHash] == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        Vote[] storage _votes = votes[args.curationHash];\\r\\n\\r\\n        uint256[] memory values = new uint256[](6); // numCardsRedeemed, numVotersRewarded, redeemIdx, rewardIdx, burnAmount, iflRewardPerVote\\r\\n\\r\\n        for (uint256 i = 0; i < _votes.length; i++) {\\r\\n            Vote memory _vote = _votes[i];\\r\\n\\r\\n            if (\\r\\n                args.rejected ||\\r\\n                !_vote.bet ||\\r\\n                _vote.loanAmount == args.winningOption\\r\\n            ) {\\r\\n                values[0]++;\\r\\n            }\\r\\n\\r\\n            if (\\r\\n                !args.rejected &&\\r\\n                _vote.bet &&\\r\\n                _vote.loanAmount == args.winningOption\\r\\n            ) {\\r\\n                values[1]++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (ongoingCurationCount > 0 && values[1] > 0) {\\r\\n            values[5] =\\r\\n                rewardPool.getNamedBalance(\\r\\n                    interestForLenderBalanceName,\\r\\n                    address(nend)\\r\\n                ) /\\r\\n                ongoingCurationCount /\\r\\n                values[1];\\r\\n        }\\r\\n\\r\\n        address[] memory votersCardRedeemable = new address[](values[0]);\\r\\n        address[] memory votersRewarded = new address[](values[1]);\\r\\n        uint256[] memory rewards = new uint256[](values[1]);\\r\\n\\r\\n        for (uint256 i = 0; i < _votes.length; i++) {\\r\\n            Vote storage _vote = _votes[i];\\r\\n\\r\\n            if (\\r\\n                args.rejected ||\\r\\n                !_vote.bet ||\\r\\n                _vote.loanAmount == args.winningOption\\r\\n            ) {\\r\\n                _vote.vpcRedeemable = true;\\r\\n                votersCardRedeemable[values[2]++] = _vote.voter;\\r\\n            }\\r\\n\\r\\n            if (!args.rejected && _vote.bet) {\\r\\n                // Reward winning votes with NEND\\r\\n                if (_vote.loanAmount == args.winningOption) {\\r\\n                    uint256 vpcSaleReward = (_vote.cardLevel *\\r\\n                        args.totalRewards) / args.winningPower;\\r\\n                    rewards[values[3]] = vpcSaleReward + values[5];\\r\\n                    votersRewarded[values[3]++] = _vote.voter;\\r\\n                    _vote.rewardsClaimed = true;\\r\\n\\r\\n                    nend.mint(_vote.voter, vpcSaleReward);\\r\\n                    rewardPool.transferERC20(\\r\\n                        address(nend),\\r\\n                        _vote.voter,\\r\\n                        values[5]\\r\\n                    );\\r\\n                    rewardPool.namedBalanceSpend(\\r\\n                        interestForLenderBalanceName,\\r\\n                        address(nend),\\r\\n                        values[5]\\r\\n                    );\\r\\n                }\\r\\n                // Burn NEND from losing votes\\r\\n                else {\\r\\n                    values[4] += PERIv2(vpcAddresses[_vote.cardLevel - 1])\\r\\n                        .MINT_PRICE();\\r\\n                }\\r\\n\\r\\n                // End result on all chains: Total Burned == Total rewarded => Change in supply = 0\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (values[4] > 0) {\\r\\n            rewardPool.burn(address(nend), values[4]);\\r\\n        }\\r\\n\\r\\n        ongoingCurationCount--;\\r\\n\\r\\n        emit CurationEnded(\\r\\n            args.curationHash,\\r\\n            votersCardRedeemable,\\r\\n            votersRewarded,\\r\\n            rewards\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd373fa3ed9c693c62c6099febb79defd8e8f2df82276d80c095f9919a645477e\",\"license\":\"UNLICENSED\"},\"contracts/voting/ScenarioOneV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Inheritance\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\\\";\\r\\n\\r\\n// Internal references\\r\\nimport \\\"./interfaces/WETH.sol\\\";\\r\\nimport \\\"./interfaces/INextScenario.sol\\\";\\r\\nimport \\\"./interfaces/ITicket.sol\\\";\\r\\n\\r\\n// @author The Peri Finanace team\\r\\n// @title A Peri NFT Contract\\r\\ncontract PERIv2 is\\r\\n    ERC721Upgradeable,\\r\\n    ERC721URIStorageUpgradeable,\\r\\n    ERC721EnumerableUpgradeable,\\r\\n    OwnableUpgradeable\\r\\n{\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    //Index of tokens to sell\\r\\n    uint256 public mintIndexForSale;\\r\\n\\r\\n    //Number of blocks to start selling\\r\\n    uint256 public mintStartBlockNumber;\\r\\n\\r\\n    //Selling price\\r\\n    uint256 public MINT_PRICE;\\r\\n\\r\\n    //Notify token reveal start\\r\\n    bool public isRevealed;\\r\\n\\r\\n    //Notify token public mint start\\r\\n    bool public isEnabledPublicMint;\\r\\n\\r\\n    //Notify token ticket mint start\\r\\n    bool public isEnabledTicketMint;\\r\\n\\r\\n    //Notify token whitelist mint start\\r\\n    bool public isEnabledWhitelistMint;\\r\\n\\r\\n    //Is it connected to the next scenario contract\\r\\n    bool public isEnabledNextScenario;\\r\\n\\r\\n    //Merkle root for verifying whitelist\\r\\n    bytes32 public merkleRoot;\\r\\n\\r\\n    //The maximum quantity sold\\r\\n    uint256 public MAX_SALE_AMOUNT;\\r\\n\\r\\n    //Default URL of revealed tokens\\r\\n    string private baseURI;\\r\\n\\r\\n    //Default URL of unreveal tokens\\r\\n    string private notRevealedURI;\\r\\n\\r\\n    //Mapping owner address to last block number\\r\\n    mapping(address => uint256) private _lastCallBlockNumber;\\r\\n\\r\\n    //Mapping from owner address to token URI\\r\\n    mapping(uint256 => string) private _tokenURIs;\\r\\n\\r\\n    //Mapping from token ID to reveal checked (true & false)\\r\\n    mapping(uint256 => bool) public revealChecked;\\r\\n\\r\\n    //Number of mints per address\\r\\n    mapping(address => uint256) public whitelistMintLimit;\\r\\n\\r\\n    //Interface for next scenario\\r\\n    INextScenario private _nextScenario;\\r\\n\\r\\n    //Interface for trading with wETH contract\\r\\n    WETH private _wETH;\\r\\n\\r\\n    //interface\\r\\n    ITicket private _ticket;\\r\\n\\r\\n    /* ========== Initializer ========== */\\r\\n    function initialize(\\r\\n        string calldata name,\\r\\n        string calldata symbol,\\r\\n        address wETH,\\r\\n        address ticket,\\r\\n        uint256 mintPrice\\r\\n    ) public initializer {\\r\\n        __ERC721_init(name, symbol);\\r\\n        __ERC721URIStorage_init();\\r\\n        __Ownable_init();\\r\\n\\r\\n        isRevealed = false;\\r\\n        isEnabledTicketMint = false;\\r\\n        isEnabledWhitelistMint = false;\\r\\n        isEnabledPublicMint = false;\\r\\n        isEnabledNextScenario = false;\\r\\n        MAX_SALE_AMOUNT = 10000;\\r\\n        mintIndexForSale = 1;\\r\\n        _wETH = WETH(wETH);\\r\\n        _ticket = ITicket(ticket);\\r\\n        MINT_PRICE = mintPrice;\\r\\n    }\\r\\n\\r\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @dev Only those who have tickets can mint.\\r\\n     * @param requestedCount quantity to mint\\r\\n     */\\r\\n\\r\\n    function ticketMint(uint256 requestedCount) external {\\r\\n        require(isEnabledTicketMint, \\\"The ticket sale is not enabled!\\\");\\r\\n        require(\\r\\n            mintIndexForSale + requestedCount <= MAX_SALE_AMOUNT,\\r\\n            \\\"Exceed max amount\\\"\\r\\n        );\\r\\n\\r\\n        _ticket.transferFrom(msg.sender, owner(), requestedCount);\\r\\n\\r\\n        for (uint256 i = 0; i < requestedCount; i++) {\\r\\n            _mint(msg.sender, mintIndexForSale + i);\\r\\n            _setTokenURI(mintIndexForSale, notRevealedURI);\\r\\n            revealChecked[mintIndexForSale] = false;\\r\\n        }\\r\\n        mintIndexForSale += requestedCount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Functions that only validated whitelists can mint\\r\\n     * @param requestedCount quantity to mint\\r\\n     * @param _merkleProof Array of Merkle Trees\\r\\n     */\\r\\n    function whitelistMint(\\r\\n        uint256 requestedCount,\\r\\n        bytes32[] calldata _merkleProof\\r\\n    ) external {\\r\\n        require(isEnabledWhitelistMint, \\\"The whitelist sale is not enabled!\\\");\\r\\n        require(\\r\\n            whitelistMintLimit[msg.sender] + requestedCount <= 30,\\r\\n            \\\"Exceed max requested count\\\"\\r\\n        );\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\r\\n        require(\\r\\n            MerkleProofUpgradeable.verify(_merkleProof, merkleRoot, leaf),\\r\\n            \\\"Invalid proof!\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < requestedCount; i++) {\\r\\n            _mint(msg.sender, mintIndexForSale + i);\\r\\n            _setTokenURI(mintIndexForSale, notRevealedURI);\\r\\n            revealChecked[mintIndexForSale] = false;\\r\\n        }\\r\\n\\r\\n        whitelistMintLimit[msg.sender] =\\r\\n            whitelistMintLimit[msg.sender] +\\r\\n            requestedCount;\\r\\n        mintIndexForSale += requestedCount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that anyone can mint. Before reveal, it is minted in the unreveal state\\r\\n     * @param requestedCount quantity to mint\\r\\n     */\\r\\n    function publicMint(uint256 requestedCount) external {\\r\\n        require(isEnabledPublicMint, \\\"The public sale is not enabled!\\\");\\r\\n        require(\\r\\n            mintIndexForSale + requestedCount <= MAX_SALE_AMOUNT,\\r\\n            \\\"Exceed max amount\\\"\\r\\n        );\\r\\n\\r\\n        _wETH.transferFrom(msg.sender, owner(), requestedCount * MINT_PRICE);\\r\\n\\r\\n        for (uint256 i = 0; i < requestedCount; i++) {\\r\\n            _mint(msg.sender, mintIndexForSale + i);\\r\\n            _setTokenURI(mintIndexForSale, notRevealedURI);\\r\\n            revealChecked[mintIndexForSale] = false;\\r\\n        }\\r\\n        mintIndexForSale += requestedCount;\\r\\n        _lastCallBlockNumber[msg.sender] = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that can be repaired in the event of an unintended error when revealed. Only the owner can execute it\\r\\n     * @param tokenId The ID of the token you want to repair\\r\\n     * @param tokenHash The unique hash value of the token\\r\\n     */\\r\\n    function repairTokenURI(uint256 tokenId, string calldata tokenHash)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        string memory _revealURI = string(\\r\\n            abi.encodePacked(baseURI, tokenHash, \\\".json\\\")\\r\\n        );\\r\\n        _tokenURIs[tokenId] = _revealURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that revises tokens that have not yet been revealed. It issues tokens in the next scenario at the same time\\r\\n     * @param tokenIds The ID of the tokens you want to reveal\\r\\n     * @param tokenHash The unique hash value of the token\\r\\n     */\\r\\n    function revealTokens(\\r\\n        uint256[] calldata tokenIds,\\r\\n        string[] calldata tokenHash\\r\\n    ) public {\\r\\n        require(isRevealed == true, \\\"Not yet started\\\");\\r\\n        require(bytes(baseURI).length > 0, \\\"Invalid BaseURI\\\");\\r\\n        require(\\r\\n            isEnabledNextScenario == true,\\r\\n            \\\"The next scenario is not enabled!\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            require(\\r\\n                ownerOf(tokenIds[i]) == msg.sender,\\r\\n                \\\"Token owner is not false\\\"\\r\\n            );\\r\\n            require(\\r\\n                revealChecked[tokenIds[i]] == false,\\r\\n                \\\"Already Revealed token!\\\"\\r\\n            );\\r\\n            string memory _revealURI = string(\\r\\n                abi.encodePacked(baseURI, tokenHash[i], \\\".json\\\")\\r\\n            );\\r\\n            revealChecked[tokenIds[i]] = true;\\r\\n            _tokenURIs[tokenIds[i]] = _revealURI;\\r\\n            _NextScenarioMint(msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set base URI of reveal tokens. Only the owner can do it\\r\\n     * @param _newBaseURI Base URI of revealed tokens\\r\\n     */\\r\\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\\r\\n        baseURI = _newBaseURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set base URI of unreveal tokens. Only the owner can do it\\r\\n     * @param _newNotRevealedURI Base URI of unreveal tokens\\r\\n     */\\r\\n    function setNotRevealedURI(string memory _newNotRevealedURI)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        notRevealedURI = _newNotRevealedURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows users to start reveal\\r\\n     * @param _state True & False, Allow reveal\\r\\n     */\\r\\n    function setRevealState(bool _state) public onlyOwner {\\r\\n        isRevealed = _state;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Functions that allow users to initiate ticket minting\\r\\n     * @param _state True & False, Allow ticket Minting\\r\\n     */\\r\\n    function setTicketMintState(bool _state) public onlyOwner {\\r\\n        isEnabledTicketMint = _state;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Functions that allow users to initiate whitelist minting\\r\\n     * @param _state True & False, Allow Whitelist Minting\\r\\n     */\\r\\n    function setWhitelistMintState(bool _state) public onlyOwner {\\r\\n        isEnabledWhitelistMint = _state;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows users to start mint\\r\\n     * @param _state True & False, Allow mint\\r\\n     */\\r\\n    function setPublicMintState(bool _state) public onlyOwner {\\r\\n        isEnabledPublicMint = _state;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevent bot, set timer to start minting, only owner can run\\r\\n     * @param mintPrice Setup Mint price\\r\\n     */\\r\\n    function setupSale(uint256 mintPrice) external onlyOwner {\\r\\n        MINT_PRICE = mintPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Functions that associate with the following collection of scenarios\\r\\n     * @param nextScenario Address of the next scenario contract\\r\\n     */\\r\\n    function setNextScenarioConenct(address nextScenario) public onlyOwner {\\r\\n        _nextScenario = INextScenario(nextScenario);\\r\\n        isEnabledNextScenario = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Functions that set the required Merklute of whitelist validation\\r\\n     * @param _merkleRoot White List's Merkle root\\r\\n     */\\r\\n    function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {\\r\\n        merkleRoot = _merkleRoot;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that mints the following collection of scenarios\\r\\n     * @param tokenOwner The address of the token owner to mint\\r\\n     */\\r\\n    function _NextScenarioMint(address tokenOwner) private {\\r\\n        _nextScenario.publicMint(tokenOwner);\\r\\n    }\\r\\n\\r\\n    /* ========== VIEWS ========== */\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721Upgradeable, ERC721EnumerableUpgradeable)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC721Upgradeable, ERC721URIStorageUpgradeable)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721URIStorage: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        if (revealChecked[tokenId] == false) {\\r\\n            return notRevealedURI;\\r\\n        }\\r\\n        string memory _tokenURI = _tokenURIs[tokenId];\\r\\n        return _tokenURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns. About Minting\\r\\n     */\\r\\n    function mintingInformation() external view returns (uint256[3] memory) {\\r\\n        uint256[3] memory info = [\\r\\n            mintIndexForSale,\\r\\n            MAX_SALE_AMOUNT,\\r\\n            MINT_PRICE\\r\\n        ];\\r\\n        return info;\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId)\\r\\n        internal\\r\\n        virtual\\r\\n        override(ERC721Upgradeable, ERC721URIStorageUpgradeable)\\r\\n    {\\r\\n        super._burn(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x796f120ea0234a4b8dc106250cd495142ce9dac329e1c16a5c5642801f4a4072\",\"license\":\"MIT\"},\"contracts/voting/interfaces/ICuration.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ICuration {\\r\\n    event VoteCasted(\\r\\n        bool accept,\\r\\n        bool bet,\\r\\n        bool leverageLending,\\r\\n        uint8 loanAmount,\\r\\n        uint8 duration,\\r\\n        uint8 apr,\\r\\n        uint8 cardLevel,\\r\\n        uint256 cardId,\\r\\n        uint48 voteTime,\\r\\n        bytes32 curationHash,\\r\\n        address voter\\r\\n    );\\r\\n\\r\\n    event CurationEnded(\\r\\n        bytes32 curationHash,\\r\\n        address[] votersRedeemableCard,\\r\\n        address[] votersRewarded,\\r\\n        uint256[] rewards\\r\\n    );\\r\\n\\r\\n    event VPCRedeemed(\\r\\n        bytes32 curationHash,\\r\\n        address voter\\r\\n    );\\r\\n\\r\\n    struct Vote {\\r\\n        bool accept;\\r\\n        bool bet;\\r\\n        bool leverageLending;\\r\\n        bool vpcRedeemable;\\r\\n        bool rewardsClaimed;\\r\\n        uint8 loanAmount;\\r\\n        uint8 duration;\\r\\n        uint8 apr;\\r\\n        uint8 cardLevel;\\r\\n        uint256 cardId;\\r\\n        uint48 voteTime;\\r\\n        address voter;\\r\\n    }\\r\\n\\r\\n    struct EndCurationArgs {\\r\\n        bytes32 curationHash;\\r\\n        bool rejected;\\r\\n        uint8 winningOption;\\r\\n        uint256 totalRewards;\\r\\n        uint256 winningPower;\\r\\n    }\\r\\n\\r\\n    function castVote(\\r\\n        bool _accept,\\r\\n        bool _bet,\\r\\n        bool _leverageLending,\\r\\n        uint8 _loanAmount,\\r\\n        uint8 _duration,\\r\\n        uint8 _apr,\\r\\n        uint8 _cardLevel,\\r\\n        uint256 _cardId,\\r\\n        uint48 _curationEnd,\\r\\n        bytes32 _curationHash,\\r\\n        bytes memory _signature\\r\\n    ) external;\\r\\n\\r\\n    function redeemVpc(bytes32 _curationHash) external;\\r\\n\\r\\n    function endCuration(EndCurationArgs memory _args) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x7aa834ad93aeda26fdbcae54cdd494993df0108ff7f61474080ed6e4ae51cf8b\",\"license\":\"UNLICENSED\"},\"contracts/voting/interfaces/INextScenario.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface INextScenario {\\r\\n    function publicMint(address _tokenOwner) external;\\r\\n}\",\"keccak256\":\"0x00a7b6833cba533f27010a402059422b315316614a69462b95f5c50f6ed206bf\",\"license\":\"MIT\"},\"contracts/voting/interfaces/ITicket.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Inheritance\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ITicket is IERC20 {\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns(bool);\\r\\n}\",\"keccak256\":\"0x841b119bd6fbe826e1f6e6b9cb098b770df2521e36045d749e34c5d56538bf36\",\"license\":\"MIT\"},\"contracts/voting/interfaces/WETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Inheritance\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n\\r\\ninterface WETH is IERC20 {\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns(bool);\\r\\n}\",\"keccak256\":\"0xeaefde6c08f90fb1fe67054c063de35fb7220cd7c8132305bf785f888b4b71ec\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8357,
        "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 24636,
        "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
        "label": "interestForPoolBalanceName",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 24639,
        "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
        "label": "interestForLenderBalanceName",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 24642,
        "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
        "label": "tradeCommissionBalanceName",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 24645,
        "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
        "label": "bondingCommissionBalanceName",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 26216,
        "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
        "label": "votes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_array(t_struct(Vote)29878_storage)dyn_storage)"
      },
      {
        "astId": 26220,
        "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
        "label": "curationHashToEndTime",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_uint48)"
      },
      {
        "astId": 26224,
        "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
        "label": "curationHashToEnded",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 26228,
        "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
        "label": "vpcAddresses",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)4_storage"
      },
      {
        "astId": 26230,
        "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
        "label": "ongoingCurationCount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 26233,
        "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
        "label": "rewardPool",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(Vault)25234"
      },
      {
        "astId": 26236,
        "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
        "label": "nend",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(NEND)24137"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)4_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_struct(Vote)29878_storage)dyn_storage": {
        "base": "t_struct(Vote)29878_storage",
        "encoding": "dynamic_array",
        "label": "struct ICuration.Vote[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(NEND)24137": {
        "encoding": "inplace",
        "label": "contract NEND",
        "numberOfBytes": "20"
      },
      "t_contract(Vault)25234": {
        "encoding": "inplace",
        "label": "contract Vault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_array(t_struct(Vote)29878_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ICuration.Vote[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Vote)29878_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint48)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint48)",
        "numberOfBytes": "32",
        "value": "t_uint48"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Vote)29878_storage": {
        "encoding": "inplace",
        "label": "struct ICuration.Vote",
        "members": [
          {
            "astId": 29855,
            "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
            "label": "accept",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 29857,
            "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
            "label": "bet",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 29859,
            "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
            "label": "leverageLending",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 29861,
            "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
            "label": "vpcRedeemable",
            "offset": 3,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 29863,
            "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
            "label": "rewardsClaimed",
            "offset": 4,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 29865,
            "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
            "label": "loanAmount",
            "offset": 5,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 29867,
            "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
            "label": "duration",
            "offset": 6,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 29869,
            "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
            "label": "apr",
            "offset": 7,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 29871,
            "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
            "label": "cardLevel",
            "offset": 8,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 29873,
            "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
            "label": "cardId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 29875,
            "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
            "label": "voteTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 29877,
            "contract": "contracts/voting/PeriFiCuration.sol:PeriFiCuration",
            "label": "voter",
            "offset": 6,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}