{
  "address": "0x84524220eB4a2F6b27e7C9009C4166CCf635799A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nend",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "farmId",
          "type": "uint256"
        }
      ],
      "name": "FarmClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "farmId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "start",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "end",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalReward",
          "type": "uint256"
        }
      ],
      "name": "FarmCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardClaimed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "lastClaimedAt",
          "type": "uint48"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "farmId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "start",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "unstakedAt",
          "type": "uint48"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "authorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "calculateReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_farmId",
          "type": "uint256"
        }
      ],
      "name": "claimBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakeToken",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "_end",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "_totalReward",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_farmId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "farms",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "start",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "end",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "totalReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nend",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "farmId",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "start",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "end",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "lastClaimedAt",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1faa9db1b7f09c92b864f4a18230425eec0b6e28d6fd8727d05c1623d938d7ef",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x2F358B80eD2d296C09560d2b9F70a7f81d57e352",
    "contractAddress": null,
    "transactionIndex": 18,
    "gasUsed": "1347042",
    "logsBloom": "0x
    "blockHash": "0xf7598b8c1770ad8e9527cb7671a4afe8f3fcf26b3974763139af66b668d4c3a6",
    "transactionHash": "0x1faa9db1b7f09c92b864f4a18230425eec0b6e28d6fd8727d05c1623d938d7ef",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 11349753,
        "transactionHash": "0x1faa9db1b7f09c92b864f4a18230425eec0b6e28d6fd8727d05c1623d938d7ef",
        "address": "0x84524220eB4a2F6b27e7C9009C4166CCf635799A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002f358b80ed2d296c09560d2b9f70a7f81d57e352"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0xf7598b8c1770ad8e9527cb7671a4afe8f3fcf26b3974763139af66b668d4c3a6"
      }
    ],
    "blockNumber": 11349753,
    "cumulativeGasUsed": "8678107",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x235D5eb29E540DB5D58Ba7CC4cC1fbf0118A1Fa2"
  ],
  "numDeployments": 2,
  "solcInputHash": "e6a8509ab9edc0773d6a6bd4cf2732fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nend\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"farmId\",\"type\":\"uint256\"}],\"name\":\"FarmClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"farmId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"end\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"name\":\"FarmCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"lastClaimedAt\",\"type\":\"uint48\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"farmId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"unstakedAt\",\"type\":\"uint48\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_farmId\",\"type\":\"uint256\"}],\"name\":\"claimBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_end\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"_totalReward\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_farmId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"farms\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"end\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"farmId\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"end\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lastClaimedAt\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/LiquidityPoolStaking.sol\":\"LiquidityPoolStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/access/MWOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract MWOwnable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(0x2F358B80eD2d296C09560d2b9F70a7f81d57e352);\\r\\n        // _transferOwnership(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier \\r\\n    onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x74bdfa3e963b95404e1b54bad52ae3f45163684fe644cd84b6b4054817cbff86\",\"license\":\"MIT\"},\"contracts/access/SimpleRoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../access/MWOwnable.sol\\\";\\r\\n\\r\\nabstract contract SimpleRoleAccess is MWOwnable {\\r\\n    mapping(address => mapping(string => bool)) public hasRole;\\r\\n\\r\\n    function authorize(\\r\\n        address operator,\\r\\n        string memory role,\\r\\n        bool authorized // onlyOwner\\r\\n    ) public {\\r\\n        hasRole[operator][role] = authorized;\\r\\n    }\\r\\n\\r\\n    modifier onlyRole(string memory _role) {\\r\\n        // require(\\r\\n        //     msg.sender == owner() || hasRole[msg.sender][_role],\\r\\n        //     \\\"Not authorized\\\"\\r\\n        // );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasAllRoles(string[] memory _roles) {\\r\\n        // for (uint256 i = 0; i < _roles.length; i++) {\\r\\n        //     require(hasRole[msg.sender][_roles[i]], \\\"Not authorized\\\");\\r\\n        // }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasSomeRoles(string[] memory _roles) {\\r\\n        // bool _hasRole;\\r\\n        // for (uint256 i = 0; i < _roles.length; i++) {\\r\\n        //     if (hasRole[msg.sender][_roles[i]]) {\\r\\n        //         _hasRole = true;\\r\\n        //         break;\\r\\n        //     }\\r\\n        // }\\r\\n        // require(_hasRole, \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfa22c01bc01559b14a4c692d1c7ca3ccd71541fbf54ecebefcf0b5a5e46da466\",\"license\":\"UNLICENSED\"},\"contracts/staking/LiquidityPoolStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/ILiquidityPoolStaking.sol\\\";\\r\\nimport \\\"../access/SimpleRoleAccess.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract LiquidityPoolStaking is ILiquidityPoolStaking, SimpleRoleAccess {\\r\\n    address public nend;\\r\\n    Farm[] public farms;\\r\\n    Stake[] public stakes;\\r\\n\\r\\n    constructor(address _nend) {\\r\\n        nend = _nend;\\r\\n    }\\r\\n\\r\\n    function create(\\r\\n        address _stakeToken,\\r\\n        uint48 _end,\\r\\n        uint256 _totalReward\\r\\n    ) external override onlyRole(\\\"admin\\\") {\\r\\n        require(_end > block.timestamp, \\\"Invalid end time\\\");\\r\\n        require(\\r\\n            IERC20(nend).balanceOf(address(this)) >= _totalReward,\\r\\n            \\\"Not enough liquidity supply\\\"\\r\\n        );\\r\\n\\r\\n        farms.push(\\r\\n            Farm(_stakeToken, uint48(block.timestamp), _end, _totalReward, 0)\\r\\n        );\\r\\n\\r\\n        emit FarmCreated(\\r\\n            farms.length - 1,\\r\\n            _stakeToken,\\r\\n            uint48(block.timestamp),\\r\\n            _end,\\r\\n            _totalReward\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 _farmId, uint256 _amount) external override {\\r\\n        Farm storage _farm = farms[_farmId];\\r\\n        require(_farm.end > block.timestamp, \\\"Farm closed\\\");\\r\\n        require(\\r\\n            IERC20(_farm.token).balanceOf(msg.sender) >= _amount,\\r\\n            \\\"Insufficient lp token balance\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(_farm.token).transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _amount\\r\\n        );\\r\\n\\r\\n        _farm.totalStaked += _amount;\\r\\n\\r\\n        stakes.push(\\r\\n            Stake(\\r\\n                msg.sender,\\r\\n                _farmId,\\r\\n                uint48(block.timestamp),\\r\\n                0,\\r\\n                uint48(block.timestamp),\\r\\n                _amount,\\r\\n                0\\r\\n            )\\r\\n        );\\r\\n\\r\\n        emit Staked(\\r\\n            stakes.length - 1,\\r\\n            msg.sender,\\r\\n            _farmId,\\r\\n            uint48(block.timestamp),\\r\\n            _amount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function unstake(uint256 _stakeId) external override {\\r\\n        Stake storage _stake = stakes[_stakeId];\\r\\n        Farm storage _farm = farms[_stake.farmId];\\r\\n        require(_stake.end == 0, \\\"Already unstaked\\\");\\r\\n\\r\\n        _claim(_stakeId);\\r\\n        _stake.end = uint48(block.timestamp);\\r\\n        _farm.totalStaked -= _stake.amount;\\r\\n        IERC20(_farm.token).transfer(_stake.staker, _stake.amount);\\r\\n\\r\\n        emit Unstaked(_stakeId, uint48(block.timestamp));\\r\\n    }\\r\\n\\r\\n    function claim(uint256 _stakeId) external override {\\r\\n        require(stakes[_stakeId].staker == msg.sender, \\\"Not own stake\\\");\\r\\n        require(stakes[_stakeId].end == 0, \\\"Already unstaked\\\");\\r\\n\\r\\n        _claim(_stakeId);\\r\\n    }\\r\\n\\r\\n    function claimBatch(uint256 _farmId) external override {\\r\\n        for (uint i = 0; i < stakes.length; i++) {\\r\\n            Stake memory _stake = stakes[i];\\r\\n\\r\\n            if (_stake.farmId != _farmId || _stake.end != 0) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            _claim(i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _claim(uint256 _stakeId) internal {\\r\\n        Stake storage _stake = stakes[_stakeId];\\r\\n        Farm storage _farm = farms[_stake.farmId];\\r\\n        uint256 reward = calculateReward(_stakeId);\\r\\n\\r\\n        if (reward > 0) {\\r\\n            require(\\r\\n                IERC20(nend).balanceOf(address(this)) >= reward,\\r\\n                \\\"Insufficient liquidity supply\\\"\\r\\n            );\\r\\n\\r\\n            _farm.totalReward -= reward;\\r\\n            _stake.rewardClaimed += reward;\\r\\n            _stake.lastClaimedAt = uint48(block.timestamp);\\r\\n            IERC20(nend).transfer(_stake.staker, reward);\\r\\n\\r\\n            emit RewardClaimed(_stakeId, _stake.rewardClaimed, uint48(_stake.lastClaimedAt));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateReward(uint256 _stakeId) public view returns (uint256) {\\r\\n        Stake memory _stake = stakes[_stakeId];\\r\\n        // Unstaked\\r\\n        if (_stake.end != 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        Farm memory _farm = farms[_stake.farmId];\\r\\n        uint48 elapsed = (\\r\\n            block.timestamp <= _farm.end ? uint48(block.timestamp) : _farm.end\\r\\n        ) - _stake.lastClaimedAt;\\r\\n\\r\\n        return\\r\\n            (_stake.amount * _farm.totalReward * elapsed) /\\r\\n            _farm.totalStaked /\\r\\n            (_farm.end - _farm.start);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb639a544d00736f742f8002596e520debbd9eed3d762ee6111f7df1a4ea0ecda\",\"license\":\"UNLICENSED\"},\"contracts/staking/interfaces/ILiquidityPoolStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILiquidityPoolStaking {\\r\\n    event FarmCreated(\\r\\n        uint256 farmId,\\r\\n        address token,\\r\\n        uint48 start,\\r\\n        uint48 end,\\r\\n        uint256 totalReward\\r\\n    );\\r\\n    event FarmClosed(\\r\\n        uint256 farmId\\r\\n    );\\r\\n    event Staked(\\r\\n        uint256 stakeId,\\r\\n        address staker,\\r\\n        uint256 farmId,\\r\\n        uint48 start,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event Unstaked(uint256 stakeId, uint48 unstakedAt);\\r\\n    event RewardClaimed(uint256 stakeId, uint256 rewardClaimed, uint48 lastClaimedAt);\\r\\n\\r\\n    struct Farm {\\r\\n        address token;\\r\\n        uint48 start;\\r\\n        uint48 end;\\r\\n        uint256 totalReward;\\r\\n        uint256 totalStaked;\\r\\n    }\\r\\n\\r\\n    struct Stake {\\r\\n        // Staker address\\r\\n        address staker;\\r\\n        // Stake token address\\r\\n        uint256 farmId;\\r\\n        // The time of deposit\\r\\n        uint48 start;\\r\\n        // The time of unstake\\r\\n        uint48 end;\\r\\n        // The time of last reward claim\\r\\n        uint48 lastClaimedAt;\\r\\n        // The staked amount\\r\\n        uint256 amount;\\r\\n        // The amount of NEND claimed\\r\\n        uint256 rewardClaimed;\\r\\n    }\\r\\n\\r\\n    function create(\\r\\n        address _stakeToken,\\r\\n        uint48 _end,\\r\\n        uint256 _totalReward\\r\\n    ) external;\\r\\n\\r\\n    function deposit(\\r\\n        uint256 _farmId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function unstake(uint256 _stakeId) external;\\r\\n\\r\\n    function claim(uint256 _stakeId) external;\\r\\n\\r\\n    function claimBatch(uint256 _farmId) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x495399da8e2a631cd86da8f3c3e77cfa3517d47b64968bade0f3e103e6634e8f\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60803461006757601f61176438819003918201601f19168301916001600160401b0383118484101761006c5780849260209460405283398101031261006757516001600160a01b03811681036100675761005890610082565b60405161167a90816100ea8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b600054732f358b80ed2d296c09560d2b9f70a7f81d57e3529160018060a01b031992808484161760005560018060a01b038093167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a31690600254161760025556fe60806040526004361015610013575b600080fd5b60003560e01c8063217fe6c61461012b5780632d97712f146101225780632e17de7814610119578063379607f51461011057806339d2525f14610107578063715018a6146100fe5780637da470ea146100f557806382952200146100ec5780638da5cb5b146100e3578063b7314ef9146100da578063d2d7231f146100d1578063d5a44f86146100c8578063e2bbb158146100bf5763f2fde38b146100b757600080fd5b61000e610ca0565b5061000e610acb565b5061000e610a30565b5061000e6109c0565b5061000e61081e565b5061000e6107f6565b5061000e6107ce565b5061000e610761565b5061000e6106a2565b5061000e6105e5565b5061000e610545565b5061000e61039d565b5061000e61030d565b5061000e610251565b600435906001600160a01b038216820361000e57565b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761017d57604052565b61018561014a565b604052565b90601f8019910116810190811067ffffffffffffffff82111761017d57604052565b6040519060a0820182811067ffffffffffffffff82111761017d57604052565b6040519060e0820182811067ffffffffffffffff82111761017d57604052565b81601f8201121561000e5780359067ffffffffffffffff8211610244575b60405192610222601f8401601f19166020018561018a565b8284526020838301011161000e57816000926020809301838601378301015290565b61024c61014a565b61020a565b503461000e57604036600319011261000e5761026b610134565b60243567ffffffffffffffff811161000e576102936001600160a01b039136906004016101ec565b9116600052602090600182526040600020604051918051906000905b8282106102fa576102eb6102d986888188888089116102ef575b8201908152030190205460ff1690565b60405190151581529081906020820190565b0390f35b6000818401526102c9565b81810186015185830152908501906102af565b503461000e5760208060031936011261000e57600480359160005b825481101561039b57806103466103406001936109e7565b5061119f565b85848201511490811591610385575b506103805761036381611295565b6000198114610373575b01610328565b61037b610f3a565b61036d565b610363565b65ffffffffffff91506060015116151538610355565b005b503461000e57602036600319011261000e577f2db5acd5bced5f44f73d621255e9e4f7f24d6d2d9682a513df5ea7043fd693d26004356103dc816109e7565b50906104d860206103f0600185015461071a565b50600285019461045665ffffffffffff61041f816104188a5465ffffffffffff9060301c1690565b1615611153565b61042887611295565b42168097906bffffffffffff00000000000082549160301b16906bffffffffffff0000000000001916179055565b6104a16104936104876104876003850195865461047860028301918254610f6e565b9055546001600160a01b031690565b6001600160a01b031690565b91546001600160a01b031690565b915460405163a9059cbb60e01b81526001600160a01b03909316600484015260248301529092839190829060009082906044820190565b03925af18015610538575b61050a575b506040805191825265ffffffffffff909216602082015290819081015b0390a1005b61052a9060203d8111610531575b610522818361018a565b81019061100b565b50386104e8565b503d610518565b610540610e1b565b6104e3565b503461000e57602036600319011261000e576004356001600160a01b0361056b826109e7565b50541633036105a657806105a165ffffffffffff610418600261059061039b966109e7565b50015460301c65ffffffffffff1690565b611295565b60405162461bcd60e51b815260206004820152600d60248201526c4e6f74206f776e207374616b6560981b6044820152606490fd5b8015150361000e57565b503461000e57606036600319011261000e576105ff610134565b60243567ffffffffffffffff811161000e5761061f9036906004016101ec565b6001600160a01b0360443592610634846105db565b166000526020600181526040600020916040519281849251906000905b8583831061068c5750508110610681575b8201908152030190209060ff8019835416911515161790556000604051f35b600081840152610662565b8282018101518884015287955090910190610651565b503461000e57600080600319360112610700576106bd610d68565b80546001600160a01b031981168255816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b50634e487b7160e01b600052603260045260246000fd5b6003908154811015610754575b81600052027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b61075c610703565b610727565b503461000e57602036600319011261000e5760043560035481101561000e5761078b60a09161071a565b508054906002600182015491015490604051926001600160a01b038116845265ffffffffffff81861c16602085015260d01c604084015260608301526080820152f35b503461000e57600036600319011261000e5760206001600160a01b0360025416604051908152f35b503461000e57600036600319011261000e5760206001600160a01b0360005416604051908152f35b503461000e57606036600319011261000e57610838610134565b65ffffffffffff602435818116929183820361000e577f15c2d2647680bb2008b9c7ebba268afb710b03da5b18d7e39cf399b7e081770f936105059161089f604435926430b236b4b760d91b602060405161089281610161565b6005815201524210610dc0565b6108f3826108bb6104876104876002546001600160a01b031690565b6040516370a0823160e01b815230600482015290602090829060249082905afa9081156109b3575b600091610985575b501015610e28565b42169261093b6109016101ac565b6001600160a01b038716815265ffffffffffff8616602082015265ffffffffffff8316604082015283606082015260006080820152610e8b565b610946600354610f51565b936040519586958691936001600160a01b036080949297969560a0850198855216602084015265ffffffffffff80921660408401521660608201520152565b6109a6915060203d81116109ac575b61099e818361018a565b810190610e0c565b386108eb565b503d610994565b6109bb610e1b565b6108e3565b503461000e57602036600319011261000e5760206109df600435611549565b604051908152f35b600590600454811015610a23575b6004600052027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b610a2b610703565b6109f5565b503461000e57602036600319011261000e5760043560045481101561000e57610a58906109e7565b508054600182015460028301546003840154600490940154604080516001600160a01b039095168552602085019390935265ffffffffffff80831693850193909352603082901c83166060808601919091529190911c909116608083015260a082019290925260c081019190915260e090f35b503461000e5760408060031936011261000e576000907f8fa1b1e2223dcdbb644ad66a5181f5667692fc6c202efb5c90eae671dc569f1e600435602435610c46610b148361071a565b509160026001600160a01b038454610b30428260d01c11610f85565b88516370a0823160e01b8152336004820152602096929190911690610b709085908881602481875afa908115610c93575b8d91610c76575b501015610fbf565b88516323b872dd60e01b815233600482015230602482015260448101859052908690829060649082908e905af18015610c69575b610c4c575b5001610bb6828254611023565b9055610c0865ffffffffffff42169385610bce6101cc565b3381529182015265ffffffffffff8516888201526060810189905265ffffffffffff851660808201528260a08201528860c082015261103b565b610c13600454610f51565b8651908152336020820152604081019490945265ffffffffffff90921660608401526080830191909152819060a0820190565b0390a151f35b610c6290863d881161053157610522818361018a565b5038610ba9565b610c71610e1b565b610ba4565b610c8d9150893d8b116109ac5761099e818361018a565b38610b68565b610c9b610e1b565b610b61565b503461000e57602036600319011261000e57610cba610134565b610cc2610d68565b6001600160a01b03809116908115610d1457600091825491816001600160a01b0319841617845560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6001600160a01b03600054163303610d7c57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15610dc757565b60405162461bcd60e51b815260206004820152601060248201527f496e76616c696420656e642074696d65000000000000000000000000000000006044820152606490fd5b9081602091031261000e575190565b506040513d6000823e3d90fd5b15610e2f57565b60405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656e6f756768206c697175696469747920737570706c7900000000006044820152606490fd5b50634e487b7160e01b600052600060045260246000fd5b60026080610eb360035468010000000000000000811015610f2d575b6001810160035561071a565b939093610f20575b8051602082015160408301516001600160a01b0390921660a09190911b65ffffffffffff60a01b161760d09190911b7fffffffffffff000000000000000000000000000000000000000000000000000016178455606081015160018501550151910155565b610f28610e74565b610ebb565b610f3561014a565b610ea7565b50634e487b7160e01b600052601160045260246000fd5b60018110610f61575b6000190190565b610f69610f3a565b610f5a565b818110610f79570390565b610f81610f3a565b0390565b15610f8c57565b60405162461bcd60e51b815260206004820152600b60248201526a11985c9b4818db1bdcd95960aa1b6044820152606490fd5b15610fc657565b60405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c7020746f6b656e2062616c616e63650000006044820152606490fd5b9081602091031261000e5751611020816105db565b90565b8119811161102f570190565b611037610f3a565b0190565b600460c0611061825468010000000000000000811015611146575b6001810184556109e7565b939093611139575b8051845473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0391909116178455602081015160018501556111286002850165ffffffffffff60408401511665ffffffffffff198254161781556110ff6110d5606085015165ffffffffffff1690565b82546bffffffffffff000000000000191660309190911b6bffffffffffff00000000000016178255565b6080830151815465ffffffffffff60601b191660609190911b65ffffffffffff60601b16179055565b60a081015160038501550151910155565b611141610e74565b611069565b61114e61014a565b611056565b1561115a57565b60405162461bcd60e51b815260206004820152601060248201527f416c726561647920756e7374616b6564000000000000000000000000000000006044820152606490fd5b9060405160e0810181811067ffffffffffffffff82111761123c575b60405260c0600482946001600160a01b0381541684526001810154602085015261122b600282015465ffffffffffff90611202828216604089019065ffffffffffff169052565b65ffffffffffff603082901c831616606088015260601c16608086019065ffffffffffff169052565b600381015460a08501520154910152565b61124461014a565b6111bb565b1561125057565b60405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c697175696469747920737570706c790000006044820152606490fd5b61129e816109e7565b506112ac600182015461071a565b50916112b781611549565b806112c3575b50505050565b611401611428917f13e74023f2254e8a849a98d1797107bbe684613be7b7717f205affdd644b16a59560016113066104876104876002546001600160a01b031690565b6040516370a0823160e01b8152306004820152602093916113469186918690829060249082905afa90811561147c575b60009161145f575b501015611249565b01611352838254610f6e565b90556113de816004880193611368818654611023565b855560028901805465ffffffffffff60601b19164260601b65ffffffffffff60601b16178155986113aa6104936104876104876002546001600160a01b031690565b600060405180968195829463a9059cbb60e01b845260048401602090939291936001600160a01b0360408201951681520152565b03925af18015611452575b611434575b505054935460601c65ffffffffffff1690565b6040519384938491604091949365ffffffffffff9160608501968552602085015216910152565b0390a1388080806112bd565b8161144a92903d1061053157610522818361018a565b5038806113ee565b61145a610e1b565b6113e9565b6114769150863d88116109ac5761099e818361018a565b3861133e565b611484610e1b565b611336565b9060405160a0810181811067ffffffffffffffff8211176114e6575b60405260806002829480546001600160a01b038116855265ffffffffffff8160a01c16602086015260d01c6040850152600181015460608501520154910152565b6114ee61014a565b6114a5565b65ffffffffffff9182169116818110610f79570390565b806000190482118115151661151d570290565b611525610f3a565b0290565b8115611533570490565b634e487b7160e01b600052601260045260246000fd5b610340611555916109e7565b65ffffffffffff80611570606084015165ffffffffffff1690565b1661163d5761162961161e836115dc60206116106116036115f86115a261159c856110209c015161071a565b50611489565b9560408701996115b88b5165ffffffffffff1690565b808216421161162f57506115f060a06115e28342165b608086015165ffffffffffff165b906114f3565b93015160608a01519061150a565b91169061150a565b608086015190611529565b965165ffffffffffff1690565b92015165ffffffffffff1690565b65ffffffffffff1690565b90611529565b60a06115e26115f0926115ce565b505060009056fea26469706673582212206418c6f6638814972b63888d07e9db05a09cf48a3b852db6250def44cf67f6fd64736f6c634300080e0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c8063217fe6c61461012b5780632d97712f146101225780632e17de7814610119578063379607f51461011057806339d2525f14610107578063715018a6146100fe5780637da470ea146100f557806382952200146100ec5780638da5cb5b146100e3578063b7314ef9146100da578063d2d7231f146100d1578063d5a44f86146100c8578063e2bbb158146100bf5763f2fde38b146100b757600080fd5b61000e610ca0565b5061000e610acb565b5061000e610a30565b5061000e6109c0565b5061000e61081e565b5061000e6107f6565b5061000e6107ce565b5061000e610761565b5061000e6106a2565b5061000e6105e5565b5061000e610545565b5061000e61039d565b5061000e61030d565b5061000e610251565b600435906001600160a01b038216820361000e57565b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761017d57604052565b61018561014a565b604052565b90601f8019910116810190811067ffffffffffffffff82111761017d57604052565b6040519060a0820182811067ffffffffffffffff82111761017d57604052565b6040519060e0820182811067ffffffffffffffff82111761017d57604052565b81601f8201121561000e5780359067ffffffffffffffff8211610244575b60405192610222601f8401601f19166020018561018a565b8284526020838301011161000e57816000926020809301838601378301015290565b61024c61014a565b61020a565b503461000e57604036600319011261000e5761026b610134565b60243567ffffffffffffffff811161000e576102936001600160a01b039136906004016101ec565b9116600052602090600182526040600020604051918051906000905b8282106102fa576102eb6102d986888188888089116102ef575b8201908152030190205460ff1690565b60405190151581529081906020820190565b0390f35b6000818401526102c9565b81810186015185830152908501906102af565b503461000e5760208060031936011261000e57600480359160005b825481101561039b57806103466103406001936109e7565b5061119f565b85848201511490811591610385575b506103805761036381611295565b6000198114610373575b01610328565b61037b610f3a565b61036d565b610363565b65ffffffffffff91506060015116151538610355565b005b503461000e57602036600319011261000e577f2db5acd5bced5f44f73d621255e9e4f7f24d6d2d9682a513df5ea7043fd693d26004356103dc816109e7565b50906104d860206103f0600185015461071a565b50600285019461045665ffffffffffff61041f816104188a5465ffffffffffff9060301c1690565b1615611153565b61042887611295565b42168097906bffffffffffff00000000000082549160301b16906bffffffffffff0000000000001916179055565b6104a16104936104876104876003850195865461047860028301918254610f6e565b9055546001600160a01b031690565b6001600160a01b031690565b91546001600160a01b031690565b915460405163a9059cbb60e01b81526001600160a01b03909316600484015260248301529092839190829060009082906044820190565b03925af18015610538575b61050a575b506040805191825265ffffffffffff909216602082015290819081015b0390a1005b61052a9060203d8111610531575b610522818361018a565b81019061100b565b50386104e8565b503d610518565b610540610e1b565b6104e3565b503461000e57602036600319011261000e576004356001600160a01b0361056b826109e7565b50541633036105a657806105a165ffffffffffff610418600261059061039b966109e7565b50015460301c65ffffffffffff1690565b611295565b60405162461bcd60e51b815260206004820152600d60248201526c4e6f74206f776e207374616b6560981b6044820152606490fd5b8015150361000e57565b503461000e57606036600319011261000e576105ff610134565b60243567ffffffffffffffff811161000e5761061f9036906004016101ec565b6001600160a01b0360443592610634846105db565b166000526020600181526040600020916040519281849251906000905b8583831061068c5750508110610681575b8201908152030190209060ff8019835416911515161790556000604051f35b600081840152610662565b8282018101518884015287955090910190610651565b503461000e57600080600319360112610700576106bd610d68565b80546001600160a01b031981168255816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b50634e487b7160e01b600052603260045260246000fd5b6003908154811015610754575b81600052027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b61075c610703565b610727565b503461000e57602036600319011261000e5760043560035481101561000e5761078b60a09161071a565b508054906002600182015491015490604051926001600160a01b038116845265ffffffffffff81861c16602085015260d01c604084015260608301526080820152f35b503461000e57600036600319011261000e5760206001600160a01b0360025416604051908152f35b503461000e57600036600319011261000e5760206001600160a01b0360005416604051908152f35b503461000e57606036600319011261000e57610838610134565b65ffffffffffff602435818116929183820361000e577f15c2d2647680bb2008b9c7ebba268afb710b03da5b18d7e39cf399b7e081770f936105059161089f604435926430b236b4b760d91b602060405161089281610161565b6005815201524210610dc0565b6108f3826108bb6104876104876002546001600160a01b031690565b6040516370a0823160e01b815230600482015290602090829060249082905afa9081156109b3575b600091610985575b501015610e28565b42169261093b6109016101ac565b6001600160a01b038716815265ffffffffffff8616602082015265ffffffffffff8316604082015283606082015260006080820152610e8b565b610946600354610f51565b936040519586958691936001600160a01b036080949297969560a0850198855216602084015265ffffffffffff80921660408401521660608201520152565b6109a6915060203d81116109ac575b61099e818361018a565b810190610e0c565b386108eb565b503d610994565b6109bb610e1b565b6108e3565b503461000e57602036600319011261000e5760206109df600435611549565b604051908152f35b600590600454811015610a23575b6004600052027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b610a2b610703565b6109f5565b503461000e57602036600319011261000e5760043560045481101561000e57610a58906109e7565b508054600182015460028301546003840154600490940154604080516001600160a01b039095168552602085019390935265ffffffffffff80831693850193909352603082901c83166060808601919091529190911c909116608083015260a082019290925260c081019190915260e090f35b503461000e5760408060031936011261000e576000907f8fa1b1e2223dcdbb644ad66a5181f5667692fc6c202efb5c90eae671dc569f1e600435602435610c46610b148361071a565b509160026001600160a01b038454610b30428260d01c11610f85565b88516370a0823160e01b8152336004820152602096929190911690610b709085908881602481875afa908115610c93575b8d91610c76575b501015610fbf565b88516323b872dd60e01b815233600482015230602482015260448101859052908690829060649082908e905af18015610c69575b610c4c575b5001610bb6828254611023565b9055610c0865ffffffffffff42169385610bce6101cc565b3381529182015265ffffffffffff8516888201526060810189905265ffffffffffff851660808201528260a08201528860c082015261103b565b610c13600454610f51565b8651908152336020820152604081019490945265ffffffffffff90921660608401526080830191909152819060a0820190565b0390a151f35b610c6290863d881161053157610522818361018a565b5038610ba9565b610c71610e1b565b610ba4565b610c8d9150893d8b116109ac5761099e818361018a565b38610b68565b610c9b610e1b565b610b61565b503461000e57602036600319011261000e57610cba610134565b610cc2610d68565b6001600160a01b03809116908115610d1457600091825491816001600160a01b0319841617845560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6001600160a01b03600054163303610d7c57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15610dc757565b60405162461bcd60e51b815260206004820152601060248201527f496e76616c696420656e642074696d65000000000000000000000000000000006044820152606490fd5b9081602091031261000e575190565b506040513d6000823e3d90fd5b15610e2f57565b60405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656e6f756768206c697175696469747920737570706c7900000000006044820152606490fd5b50634e487b7160e01b600052600060045260246000fd5b60026080610eb360035468010000000000000000811015610f2d575b6001810160035561071a565b939093610f20575b8051602082015160408301516001600160a01b0390921660a09190911b65ffffffffffff60a01b161760d09190911b7fffffffffffff000000000000000000000000000000000000000000000000000016178455606081015160018501550151910155565b610f28610e74565b610ebb565b610f3561014a565b610ea7565b50634e487b7160e01b600052601160045260246000fd5b60018110610f61575b6000190190565b610f69610f3a565b610f5a565b818110610f79570390565b610f81610f3a565b0390565b15610f8c57565b60405162461bcd60e51b815260206004820152600b60248201526a11985c9b4818db1bdcd95960aa1b6044820152606490fd5b15610fc657565b60405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c7020746f6b656e2062616c616e63650000006044820152606490fd5b9081602091031261000e5751611020816105db565b90565b8119811161102f570190565b611037610f3a565b0190565b600460c0611061825468010000000000000000811015611146575b6001810184556109e7565b939093611139575b8051845473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0391909116178455602081015160018501556111286002850165ffffffffffff60408401511665ffffffffffff198254161781556110ff6110d5606085015165ffffffffffff1690565b82546bffffffffffff000000000000191660309190911b6bffffffffffff00000000000016178255565b6080830151815465ffffffffffff60601b191660609190911b65ffffffffffff60601b16179055565b60a081015160038501550151910155565b611141610e74565b611069565b61114e61014a565b611056565b1561115a57565b60405162461bcd60e51b815260206004820152601060248201527f416c726561647920756e7374616b6564000000000000000000000000000000006044820152606490fd5b9060405160e0810181811067ffffffffffffffff82111761123c575b60405260c0600482946001600160a01b0381541684526001810154602085015261122b600282015465ffffffffffff90611202828216604089019065ffffffffffff169052565b65ffffffffffff603082901c831616606088015260601c16608086019065ffffffffffff169052565b600381015460a08501520154910152565b61124461014a565b6111bb565b1561125057565b60405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c697175696469747920737570706c790000006044820152606490fd5b61129e816109e7565b506112ac600182015461071a565b50916112b781611549565b806112c3575b50505050565b611401611428917f13e74023f2254e8a849a98d1797107bbe684613be7b7717f205affdd644b16a59560016113066104876104876002546001600160a01b031690565b6040516370a0823160e01b8152306004820152602093916113469186918690829060249082905afa90811561147c575b60009161145f575b501015611249565b01611352838254610f6e565b90556113de816004880193611368818654611023565b855560028901805465ffffffffffff60601b19164260601b65ffffffffffff60601b16178155986113aa6104936104876104876002546001600160a01b031690565b600060405180968195829463a9059cbb60e01b845260048401602090939291936001600160a01b0360408201951681520152565b03925af18015611452575b611434575b505054935460601c65ffffffffffff1690565b6040519384938491604091949365ffffffffffff9160608501968552602085015216910152565b0390a1388080806112bd565b8161144a92903d1061053157610522818361018a565b5038806113ee565b61145a610e1b565b6113e9565b6114769150863d88116109ac5761099e818361018a565b3861133e565b611484610e1b565b611336565b9060405160a0810181811067ffffffffffffffff8211176114e6575b60405260806002829480546001600160a01b038116855265ffffffffffff8160a01c16602086015260d01c6040850152600181015460608501520154910152565b6114ee61014a565b6114a5565b65ffffffffffff9182169116818110610f79570390565b806000190482118115151661151d570290565b611525610f3a565b0290565b8115611533570490565b634e487b7160e01b600052601260045260246000fd5b610340611555916109e7565b65ffffffffffff80611570606084015165ffffffffffff1690565b1661163d5761162961161e836115dc60206116106116036115f86115a261159c856110209c015161071a565b50611489565b9560408701996115b88b5165ffffffffffff1690565b808216421161162f57506115f060a06115e28342165b608086015165ffffffffffff165b906114f3565b93015160608a01519061150a565b91169061150a565b608086015190611529565b965165ffffffffffff1690565b92015165ffffffffffff1690565b65ffffffffffff1690565b90611529565b60a06115e26115f0926115ce565b505060009056fea26469706673582212206418c6f6638814972b63888d07e9db05a09cf48a3b852db6250def44cf67f6fd64736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8357,
        "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8472,
        "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
        "label": "hasRole",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))"
      },
      {
        "astId": 23129,
        "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
        "label": "nend",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 23133,
        "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
        "label": "farms",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(Farm)23809_storage)dyn_storage"
      },
      {
        "astId": 23137,
        "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
        "label": "stakes",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Stake)23824_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Farm)23809_storage)dyn_storage": {
        "base": "t_struct(Farm)23809_storage",
        "encoding": "dynamic_array",
        "label": "struct ILiquidityPoolStaking.Farm[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Stake)23824_storage)dyn_storage": {
        "base": "t_struct(Stake)23824_storage",
        "encoding": "dynamic_array",
        "label": "struct ILiquidityPoolStaking.Stake[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Farm)23809_storage": {
        "encoding": "inplace",
        "label": "struct ILiquidityPoolStaking.Farm",
        "members": [
          {
            "astId": 23800,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 23802,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "start",
            "offset": 20,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 23804,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "end",
            "offset": 26,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 23806,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "totalReward",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 23808,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "totalStaked",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Stake)23824_storage": {
        "encoding": "inplace",
        "label": "struct ILiquidityPoolStaking.Stake",
        "members": [
          {
            "astId": 23811,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "staker",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 23813,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "farmId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 23815,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "start",
            "offset": 0,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 23817,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "end",
            "offset": 6,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 23819,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "lastClaimedAt",
            "offset": 12,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 23821,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 23823,
            "contract": "contracts/staking/LiquidityPoolStaking.sol:LiquidityPoolStaking",
            "label": "rewardClaimed",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}