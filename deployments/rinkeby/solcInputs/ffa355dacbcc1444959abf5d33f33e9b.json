{
  "language": "Solidity",
  "sources": {
    "contracts/loan/PeriFiLoan.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport \"./PeriFiLoanAdmin.sol\";\r\nimport \"../PeriFiAdmin.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"../interfaces/INonStandardERC721Transfer.sol\";\r\n\r\n// @title  Main contract for Loan. This contract manages the ability to create\r\n//         NFT-backed peer-to-peer loans.\r\n// @author smartcontractdev.eth, creator of wrappedkitties.eth, cwhelper.eth, and\r\n//         kittybounties.eth\r\n// @notice There are five steps needed to commence an NFT-backed loan. First,\r\n//         the borrower calls nftContract.approveAll(), approving the loan\r\n//         contract to move their NFT's on their behalf. Second, the borrower\r\n//         signs an off-chain message for each NFT that they would like to\r\n//         put up for collateral. This prevents borrowers from accidentally\r\n//         lending an NFT that they didn't mean to lend, due to approveAll()\r\n//         approving their entire collection. Third, the lender calls\r\n//         erc20Contract.approve(), allowing loan to move the lender's\r\n//         ERC20 tokens on their behalf. Fourth, the lender signs an off-chain\r\n//         message, proposing the amount, rate, and duration of a loan for a\r\n//         particular NFT. Fifth, the borrower calls beginLoan() to\r\n//         accept these terms and enter into the loan. The NFT is stored in the\r\n//         contract, the borrower receives the loan principal in the specified\r\n//         ERC20 currency, and the lender receives a promissory note (in\r\n//         ERC721 form) that represents the rights to either the\r\n//         principal-plus-interest, or the underlying NFT collateral if the\r\n//         borrower does not pay back in time. The lender can freely transfer\r\n//         and trade this ERC721 promissory note as they wish, with the\r\n//         knowledge that transferring the ERC721 promissory note tranfsers the\r\n//         rights to principal-plus-interest and/or collateral, and that they\r\n//         will no longer have a claim on the loan. The ERC721 promissory note\r\n//         itself represents that claim.\r\n// @notice A loan may end in one of two ways. First, a borrower may call\r\n//         payBackLoan() and pay back the loan plus interest at any time,\r\n//         in which case they receive their NFT back in the same transaction.\r\n//         Second, if the loan's duration has passed and the loan has not been\r\n//         paid back yet, a lender can call liquidateOverdueLoan(), in\r\n//         which case they receive the underlying NFT collateral and forfeit\r\n//         the rights to the principal-plus-interest, which the borrower now\r\n//         keeps.\r\n// @notice If the loan was agreed to be a pro-rata interest loan, then the user\r\n//         only pays the principal plus pro-rata interest if repaid early.\r\n//         However, if the loan was agreed to be a fixed-repayment loan (by\r\n//         specifying UINT32_MAX as the value for\r\n//         loanInterestRateForDurationInBasisPoints), then the borrower pays\r\n//         the repaymentAmount regardless of whether they repay early\r\n//         or not.\r\ncontract PeriFiLoan is PeriFiLoanAdmin, ERC721 {\r\n\r\n    // @notice OpenZeppelin's SafeMath library is used for all arithmetic\r\n    //         operations to avoid overflows/underflows.\r\n    using SafeMath for uint256;\r\n    using ECDSA for bytes32;\r\n\r\n    /* ********** */\r\n    /* DATA TYPES */\r\n    /* ********** */\r\n\r\n    // @notice The main Loan struct. The struct fits in six 256-bits words due\r\n    //         to Solidity's rules for struct packing.\r\n    struct Loan {\r\n        // A unique identifier for this particular loan, sourced from the\r\n        // continuously increasing parameter totalNumLoans.\r\n        uint256 index;\r\n\r\n        // The original sum of money transferred from lender to borrower at the\r\n        // beginning of the loan, measured in paymentToken's smallest\r\n        // units.\r\n        uint256 loanAmount;\r\n\r\n        // The original sum of money transferred from leverage pool to borrower\r\n        // at the beginnig of the loan, measured in paymentToken's \r\n        // smallest units.\r\n        uint256 loanLeveragedAmount;\r\n\r\n        // The maximum amount of money that the borrower would be required to\r\n        // repay retrieve their collateral, measured in paymentToken's\r\n        // smallest units. If interestIsProRated is set to false, then the\r\n        // borrower will always have to pay this amount to retrieve their\r\n        // collateral, regardless of whether they repay early.\r\n        uint256 repaymentAmount;\r\n        // The ID within the tokenAddress for the NFT being used as\r\n        // collateral for this loan. The NFT is stored within this contract\r\n        // during the duration of the loan.\r\n        uint256 tokenId;\r\n\r\n        // The block.timestamp when the loan first began (measured in seconds).\r\n        uint64 loanStartTime;\r\n\r\n        // The amount of time (measured in seconds) that can elapse before the\r\n        // lender can liquidate the loan and seize the underlying collateral.\r\n        uint32 loanDuration;\r\n\r\n        // If interestIsProRated is set to true, then this is the interest rate\r\n        // (measured in basis points, e.g. hundreths of a percent) for the loan,\r\n        // that must be repaid pro-rata by the borrower at the conclusion of\r\n        // the loan or risk seizure of their nft collateral. Note that if\r\n        // interestIsProRated is set to false, then this value is not used and\r\n        // is irrelevant.\r\n        // uint32 loanInterestRateForDurationInBasisPoints;\r\n\r\n        // The percent (measured in basis points) of the interest earned that\r\n        // will be taken as a fee by the contract admins when the loan is\r\n        // repaid. The fee is stored here to prevent an attack where the\r\n        // contract admins could adjust the fee right before a loan is repaid,\r\n        // and take all of the interest earned.\r\n        uint32 interestForIVInBasisPoints;\r\n        // The ERC721 contract of the NFT collateral\r\n        address tokenAddress;\r\n\r\n        // The ERC20 contract of the currency being used as principal/interest\r\n        // for this loan.\r\n        address paymentToken;\r\n\r\n        // The address of the borrower.\r\n        address borrower;\r\n\r\n        // A boolean value determining whether the interest will be pro-rated\r\n        // if the loan is repaid early, or whether the borrower will simply\r\n        // pay repaymentAmount.\r\n        // bool interestIsProRated;\r\n\r\n        bool liquidateViaAuction;\r\n    }\r\n\r\n    /* ****** */\r\n    /* EVENTS */\r\n    /* ****** */\r\n\r\n    // @notice This event is fired whenever a borrower begins a loan by calling\r\n    //         beginLoan(), which can only occur after both the lender\r\n    //         and borrower have approved their ERC721 and ERC20 contracts to\r\n    //         use the loan contract, and when they both have signed off-chain messages that\r\n    //         agree on the terms of the loan.\r\n    // @param  loanId - A unique identifier for this particular loan, sourced\r\n    //         from the continuously increasing parameter totalNumLoans.\r\n    // @param  borrower - The address of the borrower.\r\n    // @param  lender - The address of the lender. The lender can change their\r\n    //         address by transferring the ERC721 token that they\r\n    //         received when the loan began.\r\n    // @param  loanAmount - The original sum of money transferred from\r\n    //         lender to borrower at the beginning of the loan, measured in\r\n    //         paymentToken's smallest units.\r\n    // @param  repaymentAmount - The maximum amount of money that the\r\n    //         borrower would be required to retrieve their collateral. If\r\n    //         interestIsProRated is set to false, then the borrower will\r\n    //         always have to pay this amount to retrieve their collateral.\r\n    // @param  tokenId - The ID within the tokenAddress for the\r\n    //         NFT being used as collateral for this loan. The NFT is stored\r\n    //         within this contract during the duration of the loan.\r\n    // @param  loanStartTime - The block.timestamp when the loan first began\r\n    //         (measured in seconds).\r\n    // @param  loanDuration - The amount of time (measured in seconds) that can\r\n    //         elapse before the lender can liquidate the loan and seize the\r\n    //         underlying collateral NFT.\r\n    // @param  loanInterestRateForDurationInBasisPoints - If interestIsProRated\r\n    //         is set to true, then this is the interest rate (measured in\r\n    //         basis points, e.g. hundreths of a percent) for the loan, that\r\n    //         must be repaid pro-rata by the borrower at the conclusion of the\r\n    //         loan or risk seizure of their nft collateral. Note that if\r\n    //         interestIsProRated is set to false, then this value is not used\r\n    //         and is irrelevant.\r\n    // @param  tokenAddress - The ERC721 contract of the NFT collateral\r\n    // @param  paymentToken - The ERC20 contract of the currency being\r\n    //         used as principal/interest for this loan.\r\n    // @param  interestIsProRated - A boolean value determining whether the\r\n    //         interest will be pro-rated if the loan is repaid early, or\r\n    //         whether the borrower will simply pay repaymentAmount.\r\n    event LoanStarted(\r\n        uint256 loanId,\r\n        address borrower,\r\n        address lender,\r\n        uint256 loanAmount,\r\n        uint256 loanLeveragedAmount,\r\n        uint256 repaymentAmount,\r\n        uint256 tokenId,\r\n        uint256 loanStartTime,\r\n        uint256 loanDuration,\r\n        // uint256 loanInterestRateForDurationInBasisPoints,\r\n        address tokenAddress,\r\n        address paymentToken,\r\n        bool    liquidateViaAuction\r\n        // bool interestIsProRated\r\n    );\r\n\r\n    // @notice This event is fired whenever a borrower successfully repays\r\n    //         their loan, paying principal-plus-interest-minus-fee to the\r\n    //         lender in paymentToken, paying fee to owner in\r\n    //         paymentToken, and receiving their NFT collateral back.\r\n    // @param  loanId - A unique identifier for this particular loan, sourced\r\n    //         from the continuously increasing parameter totalNumLoans.\r\n    // @param  borrower - The address of the borrower.\r\n    // @param  lender - The address of the lender. The lender can change their\r\n    //         address by transferring the ERC721 token that they\r\n    //         received when the loan began.\r\n    // @param  loanAmount - The original sum of money transferred from\r\n    //         lender to borrower at the beginning of the loan, measured in\r\n    //         paymentToken's smallest units.\r\n    // @param  tokenId - The ID within the tokenAddress for the\r\n    //         NFT being used as collateral for this loan. The NFT is stored\r\n    //         within this contract during the duration of the loan.\r\n    // @param  amountPaidToLender The amount of ERC20 that the borrower paid to\r\n    //         the lender, measured in the smalled units of\r\n    //         paymentToken.\r\n    // @param  adminFee The amount of interest paid to the contract admins,\r\n    //         measured in the smalled units of paymentToken and\r\n    //         determined by adminFeeInBasisPoints. This amount never exceeds\r\n    //         the amount of interest earned.\r\n    // @param  tokenAddress - The ERC721 contract of the NFT collateral\r\n    // @param  paymentToken - The ERC20 contract of the currency being\r\n    //         used as principal/interest for this loan.\r\n    event LoanRepaid(\r\n        uint256 loanId,\r\n        address borrower,\r\n        address lender,\r\n        uint256 loanAmount,\r\n        uint256 tokenId,\r\n        uint256 amountPaidToLender,\r\n        uint256 interestForIV,\r\n        address tokenAddress,\r\n        address paymentToken\r\n    );\r\n\r\n    // @notice This event is fired whenever a lender liquidates an outstanding\r\n    //         loan that is owned to them that has exceeded its duration. The\r\n    //         lender receives the underlying NFT collateral, and the borrower\r\n    //         no longer needs to repay the loan principal-plus-interest.\r\n    // @param  loanId - A unique identifier for this particular loan, sourced\r\n    //         from the continuously increasing parameter totalNumLoans.\r\n    // @param  borrower - The address of the borrower.\r\n    // @param  lender - The address of the lender. The lender can change their\r\n    //         address by transferring the ERC721 token that they\r\n    //         received when the loan began.\r\n    // @param  loanAmount - The original sum of money transferred from\r\n    //         lender to borrower at the beginning of the loan, measured in\r\n    //         paymentToken's smallest units.\r\n    // @param  tokenId - The ID within the tokenAddress for the\r\n    //         NFT being used as collateral for this loan. The NFT is stored\r\n    //         within this contract during the duration of the loan.\r\n    // @param  loanMaturityDate - The unix time (measured in seconds) that the\r\n    //         loan became due and was eligible for liquidation.\r\n    // @param  loanLiquidationDate - The unix time (measured in seconds) that\r\n    //         liquidation occurred.\r\n    // @param  tokenAddress - The ERC721 contract of the NFT collateral\r\n    event LoanLiquidated(\r\n        uint256 loanId,\r\n        address borrower,\r\n        address lender,\r\n        uint256 loanAmount,\r\n        uint256 tokenId,\r\n        uint256 loanMaturityDate,\r\n        uint256 loanLiquidationDate,\r\n        address tokenAddress\r\n    );\r\n\r\n\r\n    /* ******* */\r\n    /* STORAGE */\r\n    /* ******* */\r\n\r\n    // @notice A continuously increasing counter that simultaneously allows\r\n    //         every loan to have a unique ID and provides a running count of\r\n    //         how many loans have been started by this contract.\r\n    uint256 public totalNumLoans = 0;\r\n\r\n    // @notice A counter of the number of currently outstanding loans.\r\n    uint256 public totalActiveLoans = 0;\r\n\r\n    address public perifiAdmin;\r\n\r\n    // @notice A mapping from a loan's identifier to the loan's details,\r\n    //         represted by the loan struct. To fetch the lender, call\r\n    //         ownerOf(loanId).\r\n    mapping (uint256 => Loan) public loanIdToLoan;\r\n\r\n    // @notice A mapping tracking whether a loan has either been repaid or\r\n    //         liquidated. This prevents an attacker trying to repay or\r\n    //         liquidate the same loan twice.\r\n    mapping (uint256 => bool) public loanRepaidOrLiquidated;\r\n\r\n    // @notice A mapping that takes both a user's address and a loan nonce\r\n    //         that was first used when signing an off-chain order and checks\r\n    //         whether that nonce has previously either been used for a loan,\r\n    //         or has been pre-emptively cancelled. The nonce referred to here\r\n    //         is not the same as an Ethereum account's nonce. We are referring\r\n    //         instead to nonces that are used by both the lender and the\r\n    //         borrower when they are first signing off-chain orders.\r\n    //         These nonces can be any uint256 value that the user has not\r\n    //         previously used to sign an off-chain order. Each nonce can be\r\n    //         used at most once per user within this contract, regardless of whether\r\n    //         they are the lender or the borrower in that situation. This\r\n    //         serves two purposes. First, it prevents replay attacks where an\r\n    //         attacker would submit a user's off-chain order more than once.\r\n    //         Second, it allows a user to cancel an off-chain order by calling\r\n    //         cancelLoanCommitmentBeforeLoanHasBegun(), which marks the\r\n    //         nonce as used and prevents any future loan from using the user's\r\n    //         off-chain order that contains that nonce.\r\n    mapping (address => mapping (uint256 => bool)) private _nonceHasBeenUsedForUser;\r\n\r\n    /* *********** */\r\n    /* CONSTRUCTOR */\r\n    /* *********** */\r\n\r\n    constructor(address _periFiAdminAddr, address _leveragePoolAddr, address _insuranceVaultAddr) \r\n        PeriFiLoanAdmin(_periFiAdminAddr, _leveragePoolAddr, _insuranceVaultAddr)\r\n        ERC721(\"PeriFi Loan Promissory Note\", \"PFL\") {\r\n        }\r\n\r\n    /* ********* */\r\n    /* FUNCTIONS */\r\n    /* ********* */\r\n\r\n    // @notice This function is called by a borrower when they want to commence\r\n    //         a loan, but can only be called after first: (1) the borrower has\r\n    //         called approve() or approveAll() on the NFT contract for the NFT\r\n    //         that will be used as collateral, (2) the borrower has signed an\r\n    //         off-chain message indicating that they are willing to use this\r\n    //         NFT as collateral, (3) the lender has called approve() on the\r\n    //         ERC20 contract of the principal, and (4) the lender has signed\r\n    //         an off-chain message agreeing to the terms of this loan supplied\r\n    //         in this transaction.\r\n    // @notice Note that a user may submit UINT32_MAX as the value for\r\n    //         _loanInterestRateForDurationInBasisPoints to indicate that they\r\n    //         wish to take out a fixed-repayment loan, where the interest is\r\n    //         not pro-rated if repaid early.\r\n    // @param  _loanAmount - The original sum of money transferred\r\n    //         from lender to borrower at the beginning of the loan, measured\r\n    //         in paymentToken's smallest units.\r\n    // @param  _repaymentAmount - The maximum amount of money that the\r\n    //         borrower would be required to retrieve their collateral,\r\n    //         measured in the smallest units of the ERC20 currency used for\r\n    //         the loan. If interestIsProRated is set to false (by submitting\r\n    //         a value of UINT32_MAX for\r\n    //         _loanInterestRateForDurationInBasisPoints), then the borrower\r\n    //         will always have to pay this amount to retrieve their\r\n    //         collateral, regardless of whether they repay early.\r\n    // @param  _tokenId - The ID within the tokenAddress for\r\n    //         the NFT being used as collateral for this loan. The NFT is\r\n    //         stored within this contract during the duration of the loan.\r\n    // @param  _loanDuration - The amount of time (measured in seconds) that can\r\n    //         elapse before the lender can liquidate the loan and seize the\r\n    //         underlying collateral NFT.\r\n    // @param  _loanInterestRateForDurationInBasisPoints - The interest rate\r\n    //         (measured in basis points, e.g. hundreths of a percent) for the\r\n    //         loan, that must be repaid pro-rata by the borrower at the\r\n    //         conclusion of the loan or risk seizure of their nft collateral.\r\n    //         However, a user may submit UINT32_MAX as the value for\r\n    //         _loanInterestRateForDurationInBasisPoints to indicate that they\r\n    //         wish to take out a fixed-repayment loan, where the interest is\r\n    //         not pro-rated if repaid early. Instead, repaymentAmount\r\n    //         will always be the amount to be repaid.\r\n    // @param  _adminFeeInBasisPoints - The percent (measured in basis\r\n    //         points) of the interest earned that will be taken as a fee by\r\n    //         the contract admins when the loan is repaid. The fee is stored\r\n    //         in the loan struct to prevent an attack where the contract\r\n    //         admins could adjust the fee right before a loan is repaid, and\r\n    //         take all of the interest earned.\r\n    // @param  _borrowerAndLenderNonces - An array of two UINT256 values, the\r\n    //         first of which is the _borrowerNonce and the second of which is\r\n    //         the _lenderNonce. The nonces referred to here are not the same\r\n    //         as an Ethereum account's nonce. We are referring instead to\r\n    //         nonces that are used by both the lender and the borrower when\r\n    //         they are first signing off-chain orders. These nonces can\r\n    //         be any uint256 value that the user has not previously used to\r\n    //         sign an off-chain order. Each nonce can be used at most once per\r\n    //         user within this contract, regardless of whether they are the lender or\r\n    //         the borrower in that situation. This serves two purposes. First,\r\n    //         it prevents replay attacks where an attacker would submit a\r\n    //         user's off-chain order more than once. Second, it allows a user\r\n    //         to cancel an off-chain order by calling\r\n    //         cancelLoanCommitmentBeforeLoanHasBegun(), which marks the\r\n    //         nonce as used and prevents any future loan from using the user's\r\n    //         off-chain order that contains that nonce.\r\n    // @param  _tokenAddress - The address of the ERC721 contract of\r\n    //         the NFT collateral.\r\n    // @param  _paymentToken - The address of the ERC20 contract of\r\n    //         the currency being used as principal/interest for this loan.\r\n    // @param  _lender - The address of the lender. The lender can change their\r\n    //         address by transferring the ERC721 token that they\r\n    //         received when the loan began.\r\n    // @param  _borrowerSignature - The ECDSA signature of the borrower,\r\n    //         obtained off-chain ahead of time, signing the following\r\n    //         combination of parameters: _tokenId, _borrowerNonce,\r\n    //         _tokenAddress, _borrower.\r\n    // @param  _lenderSignature - The ECDSA signature of the lender,\r\n    //         obtained off-chain ahead of time, signing the following\r\n    //         combination of parameters: _loanAmount,\r\n    //         _repaymentAmount _tokenId, _loanDuration,\r\n    //         _loanInterestRateForDurationInBasisPoints, _lenderNonce,\r\n    //         _tokenAddress, _paymentToken, _lender,\r\n    //         _interestIsProRated.\r\n    function beginLoan(\r\n        uint256 _loanAmount,\r\n        uint256 _loanLeveragedAmount,\r\n        uint256 _repaymentAmount,\r\n        uint256 _tokenId,\r\n        uint256 _loanDuration,\r\n        // uint256 _loanInterestRateForDurationInBasisPoints,\r\n        uint256 _interestForIVInBasisPoints,\r\n        uint256[2] memory _borrowerAndLenderNonces,\r\n        address _tokenAddress,\r\n        address _paymentToken,\r\n        address _lender,\r\n        bytes memory _borrowerSignature,\r\n        bytes memory _lenderSignature,\r\n        bool _liquidateViaAuction\r\n    ) public whenNotPaused nonReentrant {\r\n\r\n        // Save loan details to a struct in memory first, to save on gas if any\r\n        // of the below checks fail, and to avoid the \"Stack Too Deep\" error by\r\n        // clumping the parameters together into one struct held in memory.\r\n        Loan memory loan = Loan({\r\n            index: totalNumLoans, //currentLoanId,\r\n            loanAmount: _loanAmount,\r\n            loanLeveragedAmount: _loanLeveragedAmount,\r\n            repaymentAmount: _repaymentAmount,\r\n            tokenId: _tokenId,\r\n            loanStartTime: uint64(block.timestamp), //_loanStartTime\r\n            loanDuration: uint32(_loanDuration),\r\n            // loanInterestRateForDurationInBasisPoints: uint32(_loanInterestRateForDurationInBasisPoints),\r\n            interestForIVInBasisPoints: uint32(_interestForIVInBasisPoints),\r\n            tokenAddress: _tokenAddress,\r\n            paymentToken: _paymentToken,\r\n            borrower: msg.sender, //borrower\r\n            // interestIsProRated: (_loanInterestRateForDurationInBasisPoints != ~(uint32(0))),\r\n            liquidateViaAuction: _liquidateViaAuction\r\n        });\r\n\r\n        // Sanity check loan values.\r\n        require(loan.repaymentAmount >= loan.loanAmount, 'Negative interest rate loans are not allowed.');\r\n        require(uint256(loan.loanDuration) <= maximumLoanDuration, 'Loan duration exceeds maximum loan duration');\r\n        require(uint256(loan.loanDuration) != 0, 'Loan duration cannot be zero');\r\n        require(uint256(loan.interestForIVInBasisPoints) == interestForIVInBasisPoints, 'The admin fee has changed since this order was signed.');\r\n\r\n        require(loan.loanAmount > loan.loanLeveragedAmount, 'Leveraged value exceeds total loan amount');\r\n        // Check that both the collateral and the principal come from supported\r\n        // contracts.\r\n        // Todo: put back the code on production\r\n        // require(PeriFiAdmin(perifiAdmin).erc20CurrencyIsWhitelisted(loan.paymentToken), 'Currency denomination is not whitelisted to be used by this contract');\r\n        // require(PeriFiAdmin(perifiAdmin).nftContractIsWhitelisted(loan.tokenAddress), 'NFT collateral contract is not whitelisted to be used by this contract');\r\n\r\n        // Check loan nonces. These are different from Ethereum account nonces.\r\n        // Here, these are uint256 numbers that should uniquely identify\r\n        // each signature for each user (i.e. each user should only create one\r\n        // off-chain signature for each nonce, with a nonce being any arbitrary\r\n        // uint256 value that they have not used yet for an off-chain\r\n        // signature).\r\n        require(!_nonceHasBeenUsedForUser[msg.sender][_borrowerAndLenderNonces[0]], 'Borrower nonce invalid, borrower has either cancelled/begun this loan, or reused this nonce when signing');\r\n        _nonceHasBeenUsedForUser[msg.sender][_borrowerAndLenderNonces[0]] = true;\r\n        require(!_nonceHasBeenUsedForUser[_lender][_borrowerAndLenderNonces[1]], 'Lender nonce invalid, lender has either cancelled/begun this loan, or reused this nonce when signing');\r\n        _nonceHasBeenUsedForUser[_lender][_borrowerAndLenderNonces[1]] = true;\r\n\r\n        // Check that both signatures are valid.\r\n        require(isValidBorrowerSignature(\r\n            loan.tokenId,\r\n            _borrowerAndLenderNonces[0],//_borrowerNonce,\r\n            loan.tokenAddress,\r\n            msg.sender,      //borrower,\r\n            _borrowerSignature\r\n        ), 'Borrower signature is invalid');\r\n\r\n        require(isValidLenderSignature(\r\n            loan.loanAmount,\r\n            loan.loanLeveragedAmount,\r\n            loan.repaymentAmount,\r\n            loan.tokenId,\r\n            loan.loanDuration,\r\n            // loan.loanInterestRateForDurationInBasisPoints,\r\n            loan.interestForIVInBasisPoints,\r\n            _borrowerAndLenderNonces[1],//_lenderNonce,\r\n            loan.tokenAddress,\r\n            loan.paymentToken,\r\n            _lender,\r\n            loan.liquidateViaAuction,\r\n            // loan.interestIsProRated,\r\n            _lenderSignature\r\n        ), 'Lender signature is invalid');\r\n\r\n        // Add the loan to storage before moving collateral/principal to follow\r\n        // the Checks-Effects-Interactions pattern.\r\n        loanIdToLoan[totalNumLoans] = loan;\r\n        totalNumLoans = totalNumLoans.add(1);\r\n\r\n        // Update number of active loans.\r\n        totalActiveLoans = totalActiveLoans.add(1);\r\n        require(totalActiveLoans <= maximumNumberOfActiveLoans, 'Contract has reached the maximum number of active loans allowed by admins');\r\n\r\n        // Transfer collateral from borrower to this contract to be held until\r\n        // loan completion.liquidateOverdueLoan\r\n        IERC721(loan.tokenAddress).transferFrom(msg.sender, address(this), loan.tokenId);\r\n\r\n        uint256 loanFromLender = loan.loanAmount - loan.loanLeveragedAmount;\r\n        // Transfer principal from lender to borrower.\r\n        IERC20(loan.paymentToken).transferFrom(_lender, msg.sender, loanFromLender);\r\n        IERC20(loan.paymentToken).transferFrom(leveragePoolAddr, msg.sender, loan.loanLeveragedAmount);\r\n\r\n        // Issue an ERC721 promissory note to the lender that gives them the\r\n        // right to either the principal-plus-interest or the collateral.\r\n        _mint(_lender, loan.index);\r\n\r\n        // Emit an event with all relevant details from this transaction.\r\n        emit LoanStarted(\r\n            loan.index,\r\n            msg.sender,      //borrower,\r\n            _lender,\r\n            loan.loanAmount,\r\n            loan.loanLeveragedAmount,\r\n            loan.repaymentAmount,\r\n            loan.tokenId,\r\n            block.timestamp,             //_loanStartTime\r\n            loan.loanDuration,\r\n            // loan.loanInterestRateForDurationInBasisPoints,\r\n            loan.tokenAddress,\r\n            loan.paymentToken,\r\n            loan.liquidateViaAuction\r\n            // loan.interestIsProRated\r\n        );\r\n    }\r\n\r\n    // @notice This function is called by a borrower when they want to repay\r\n    //         their loan. It can be called at any time after the loan has\r\n    //         begun. The borrower will pay a pro-rata portion of their\r\n    //         interest if the loan is paid off early. The interest will\r\n    //         continue to accrue after the loan has expired. This function can\r\n    //         continue to be called by the borrower even after the loan has\r\n    //         expired to retrieve their NFT. Note that the lender can call\r\n    //         liquidateOverdueLoan() at any time after the loan has\r\n    //         expired, so a borrower should avoid paying their loan after the\r\n    //         due date, as they risk their collateral being seized. However,\r\n    //         if a lender has called liquidateOverdueLoan() before a\r\n    //         borrower could call payBackLoan(), the borrower will get\r\n    //         to keep the principal-plus-interest.\r\n    // @notice This function is purposefully not pausable in order to prevent\r\n    //         an attack where the contract admin's pause the contract and hold\r\n    //         hostage the NFT's that are still within it.\r\n    // @param _loanId  A unique identifier for this particular loan, sourced\r\n    //        from the continuously increasing parameter totalNumLoans.\r\n    function payBackLoan(uint256 _loanIndex) external nonReentrant {\r\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have\r\n        // never been called on this loanId. Depending on how the rest of the\r\n        // code turns out, this check may be unnecessary.\r\n        require(!loanRepaidOrLiquidated[_loanIndex], 'Loan has already been repaid or liquidated');\r\n\r\n        // Fetch loan details from storage, but store them in memory for the\r\n        // sake of saving gas.\r\n        Loan memory loan = loanIdToLoan[_loanIndex];\r\n\r\n        // Check that the borrower is the caller, only the borrower is entitled\r\n        // to the collateral.\r\n        require(msg.sender == loan.borrower, 'Only the borrower can pay back a loan and reclaim the underlying NFT');\r\n\r\n        // Fetch current owner of loan promissory note.\r\n        address lender = ownerOf(_loanIndex);\r\n\r\n        // Calculate amounts to send to lender and admins\r\n        uint256 interestDue = (loan.repaymentAmount).sub(loan.loanAmount);\r\n        // if(loan.interestIsProRated == true){\r\n        //     interestDue = _computeInterestDue(\r\n        //         loan.loanAmount,\r\n        //         loan.repaymentAmount,\r\n        //         block.timestamp.sub(uint256(loan.loanStartTime)),\r\n        //         uint256(loan.loanDuration),\r\n        //         uint256(loan.loanInterestRateForDurationInBasisPoints)\r\n        //     );\r\n        // }\r\n        uint256 iv = _computeInterestForIV(interestDue, uint256(loan.interestForIVInBasisPoints));\r\n        uint256 interestForLender = computeInterestDistributionForLender(loan.loanAmount, loan.loanLeveragedAmount, interestDue);\r\n\r\n        uint256 payoffAmount = (loan.loanAmount.sub(loan.loanLeveragedAmount)).add(interestForLender);\r\n        uint256 poolPayoffAmount = (loan.loanLeveragedAmount).add(interestDue.sub(iv).sub(interestForLender));\r\n        // uint256 payoffAmount = ((loan.loanAmount).add(interestDue)).sub(iv);\r\n\r\n        // Mark loan as repaid before doing any external transfers to follow\r\n        // the Checks-Effects-Interactions design pattern.\r\n        loanRepaidOrLiquidated[_loanIndex] = true;\r\n\r\n        // Update number of active loans.\r\n        totalActiveLoans = totalActiveLoans.sub(1);\r\n\r\n        // use suggested calculation for leverage\r\n        // Transfer principal-plus-interest from borrower to lender\r\n        IERC20(loan.paymentToken).transferFrom(loan.borrower, lender, payoffAmount);\r\n\r\n        // Transfer principal-plus-interest from borrower to leverage pool\r\n\r\n        IERC20(loan.paymentToken).transferFrom(loan.borrower, leveragePoolAddr, poolPayoffAmount);\r\n\r\n        // Transfer fees from borrower to insurance vault\r\n        IERC20(loan.paymentToken).transferFrom(loan.borrower, insuranceVaultAddr, iv);\r\n\r\n        // Transfer collateral from this contract to borrower.\r\n        require(_transferNftToAddress(\r\n            loan.tokenAddress,\r\n            loan.tokenId,\r\n            loan.borrower\r\n        ), 'NFT was not successfully transferred');\r\n\r\n        // Destroy the lender's promissory note.\r\n        _burn(_loanIndex);\r\n\r\n        // Emit an event with all relevant details from this transaction.\r\n        emit LoanRepaid(\r\n            _loanIndex,\r\n            loan.borrower,\r\n            lender,\r\n            loan.loanAmount,\r\n            loan.tokenId,\r\n            payoffAmount,\r\n            loan.interestForIVInBasisPoints,\r\n            loan.tokenAddress,\r\n            loan.paymentToken\r\n        );\r\n\r\n        // Delete the loan from storage in order to achieve a substantial gas\r\n        // savings and to lessen the burden of storage on Ethereum nodes, since\r\n        // we will never access this loan's details again, and the details are\r\n        // still available through event data.\r\n        delete loanIdToLoan[_loanIndex];\r\n    }\r\n\r\n    // @notice This function is called by a lender once a loan has finished its\r\n    //         duration and the borrower still has not repaid. The lender\r\n    //         can call this function to seize the underlying NFT collateral,\r\n    //         although the lender gives up all rights to the\r\n    //         principal-plus-collateral by doing so.\r\n    // @notice This function is purposefully not pausable in order to prevent\r\n    //         an attack where the contract admin's pause the contract and hold\r\n    //         hostage the NFT's that are still within it.\r\n    // @notice We intentionally allow anybody to call this function, although\r\n    //         only the lender will end up receiving the seized collateral. We\r\n    //         are exploring the possbility of incentivizing users to call this\r\n    //         function by using some of the admin funds.\r\n    // @param _loanId  A unique identifier for this particular loan, sourced\r\n    //        from the continuously increasing parameter totalNumLoans.\r\n    function liquidateOverdueLoan(uint256 _loanId) external nonReentrant {\r\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have\r\n        // never been called on this loanId. Depending on how the rest of the\r\n        // code turns out, this check may be unnecessary.\r\n        require(!loanRepaidOrLiquidated[_loanId], 'Loan has already been repaid or liquidated');\r\n\r\n        // Fetch loan details from storage, but store them in memory for the\r\n        // sake of saving gas.\r\n        Loan memory loan = loanIdToLoan[_loanId];\r\n\r\n        // Ensure that the loan is indeed overdue, since we can only liquidate\r\n        // overdue loans.\r\n        uint256 loanMaturityDate = (uint256(loan.loanStartTime)).add(uint256(loan.loanDuration));\r\n        require(block.timestamp > loanMaturityDate, 'Loan is not overdue yet');\r\n\r\n        // Fetch the current lender of the promissory note corresponding to\r\n        // this overdue loan.\r\n\r\n        address lender = ownerOf(_loanId);\r\n        // If the loan is leveraged, the lender must pay for the leverage and its interest.\r\n        if (loan.loanLeveragedAmount > 0)\r\n        {\r\n            uint256 interestDue = (loan.repaymentAmount).sub(loan.loanAmount);\r\n            uint256 iv = _computeInterestForIV(interestDue, uint256(loan.interestForIVInBasisPoints));\r\n            uint256 lenderToPay = computePriceOfLenderToPay(\r\n                loan.loanAmount,\r\n                loan.loanLeveragedAmount,\r\n                loan.repaymentAmount);\r\n            uint256 poolAmount = lenderToPay.sub(iv);\r\n            \r\n            IERC20(loan.paymentToken).transferFrom(lender, leveragePoolAddr, poolAmount);\r\n            IERC20(loan.paymentToken).transferFrom(loan.borrower, insuranceVaultAddr, iv);\r\n        }\r\n\r\n        // Mark loan as liquidated before doing any external transfers to\r\n        // follow the Checks-Effects-Interactions design pattern.\r\n        loanRepaidOrLiquidated[_loanId] = true;\r\n\r\n        // Update number of active loans.\r\n        totalActiveLoans = totalActiveLoans.sub(1);\r\n\r\n        // Transfer collateral from this contract to the lender, since the\r\n        // lender is seizing collateral for an overdue loan.\r\n        require(_transferNftToAddress(\r\n            loan.tokenAddress,\r\n            loan.tokenId,\r\n            lender\r\n        ), 'NFT was not successfully transferred');\r\n\r\n\r\n        // Destroy the lender's promissory note for this loan, since by seizing\r\n        // the collateral, the lender has forfeit the rights to the loan\r\n        // principal-plus-interest.\r\n        _burn(_loanId);\r\n\r\n        // Emit an event with all relevant details from this transaction.\r\n        emit LoanLiquidated(\r\n            _loanId,\r\n            loan.borrower,\r\n            lender,\r\n            loan.loanAmount,\r\n            loan.tokenId,\r\n            loanMaturityDate,\r\n            block.timestamp,\r\n            loan.tokenAddress\r\n        );\r\n\r\n        // Delete the loan from storage in order to achieve a substantial gas\r\n        // savings and to lessen the burden of storage on Ethereum nodes, since\r\n        // we will never access this loan's details again, and the details are\r\n        // still available through event data.\r\n        delete loanIdToLoan[_loanId];\r\n    }\r\n\r\n    // @notice This function can be called by either a lender or a borrower to\r\n    //         cancel all off-chain orders that they have signed that contain\r\n    //         this nonce. If the off-chain orders were created correctly,\r\n    //         there should only be one off-chain order that contains this\r\n    //         nonce at all.\r\n    // @param  _nonce - The nonce referred to here is not the same as an\r\n    //         Ethereum account's nonce. We are referring instead to nonces\r\n    //         that are used by both the lender and the borrower when they are\r\n    //         first signing off-chain orders. These nonces can be any\r\n    //         uint256 value that the user has not previously used to sign an\r\n    //         off-chain order. Each nonce can be used at most once per user\r\n    //         within this contract, regardless of whether they are the lender or the\r\n    //         borrower in that situation. This serves two purposes. First, it\r\n    //         prevents replay attacks where an attacker would submit a user's\r\n    //         off-chain order more than once. Second, it allows a user to\r\n    //         cancel an off-chain order by calling\r\n    //         cancelLoanCommitmentBeforeLoanHasBegun(), which marks the\r\n    //         nonce as used and prevents any future loan from using the user's\r\n    //         off-chain order that contains that nonce.\r\n    function cancelLoanCommitmentBeforeLoanHasBegun(uint256 _nonce) external {\r\n        require(!_nonceHasBeenUsedForUser[msg.sender][_nonce], 'Nonce invalid, user has either cancelled/begun this loan, or reused a nonce when signing');\r\n        _nonceHasBeenUsedForUser[msg.sender][_nonce] = true;\r\n    }\r\n\r\n    /* ******************* */\r\n    /* READ-ONLY FUNCTIONS */\r\n    /* ******************* */\r\n\r\n    // @notice This function can be used to view the current quantity of the\r\n    //         ERC20 currency used in the specified loan required by the\r\n    //         borrower to repay their loan, measured in the smallest unit of\r\n    //         the ERC20 currency. Note that since interest accrues every\r\n    //         second, once a borrower calls repayLoan(), the amount will have\r\n    //         increased slightly.\r\n    // @param  _loanId  A unique identifier for this particular loan, sourced\r\n    //         from the continuously increasing parameter totalNumLoans.\r\n    // @return The amount of the specified ERC20 currency required to pay back\r\n    //         this loan, measured in the smallest unit of the specified ERC20\r\n    //         currency.\r\n    function getPayoffAmount(uint256 _loanId) public view returns (uint256) {\r\n        Loan storage loan = loanIdToLoan[_loanId];\r\n        // if(loan.interestIsProRated == false){\r\n        //     return loan.repaymentAmount;\r\n        // } else {\r\n        //     uint256 loanDurationSoFarInSeconds = block.timestamp.sub(uint256(loan.loanStartTime));\r\n        //     uint256 interestDue = _computeInterestDue(loan.loanAmount, loan.repaymentAmount, loanDurationSoFarInSeconds, uint256(loan.loanDuration), uint256(loan.loanInterestRateForDurationInBasisPoints));\r\n        //     return (loan.loanAmount).add(interestDue);\r\n        // }\r\n        \r\n        return loan.repaymentAmount;\r\n    }\r\n\r\n    // @notice This function can be used to view whether a particular nonce\r\n    //         for a particular user has already been used, either from a\r\n    //         successful loan or a cancelled off-chain order.\r\n    // @param  _user - The address of the user. This function works for both\r\n    //         lenders and borrowers alike.\r\n    // @param  _nonce - The nonce referred to here is not the same as an\r\n    //         Ethereum account's nonce. We are referring instead to nonces\r\n    //         that are used by both the lender and the borrower when they are\r\n    //         first signing off-chain orders. These nonces can be any\r\n    //         uint256 value that the user has not previously used to sign an\r\n    //         off-chain order. Each nonce can be used at most once per user\r\n    //         within this contract, regardless of whether they are the lender or the\r\n    //         borrower in that situation. This serves two purposes. First, it\r\n    //         prevents replay attacks where an attacker would submit a user's\r\n    //         off-chain order more than once. Second, it allows a user to\r\n    //         cancel an off-chain order by calling\r\n    //         cancelLoanCommitmentBeforeLoanHasBegun(), which marks the\r\n    //         nonce as used and prevents any future loan from using the user's\r\n    //         off-chain order that contains that nonce.\r\n    // @return A bool representing whether or not this nonce has been used for\r\n    //         this user.\r\n    function getWhetherNonceHasBeenUsedForUser(address _user, uint256 _nonce) public view returns (bool) {\r\n        return _nonceHasBeenUsedForUser[_user][_nonce];\r\n    }\r\n\r\n    /* ****************** */\r\n    /* INTERNAL FUNCTIONS */\r\n    /* ****************** */\r\n\r\n    // @notice A convenience function that calculates the amount of interest\r\n    //         currently due for a given loan. The interest is capped at\r\n    //         _repaymentAmount minus _loanAmount.\r\n    // @param  _loanAmount - The total quantity of principal first\r\n    //         loaned to the borrower, measured in the smallest units of the\r\n    //         ERC20 currency used for the loan.\r\n    // @param  _repaymentAmount - The maximum amount of money that the\r\n    //         borrower would be required to retrieve their collateral. If\r\n    //         interestIsProRated is set to false, then the borrower will\r\n    //         always have to pay this amount to retrieve their collateral.\r\n    // @param  _loanDurationSoFarInSeconds - The elapsed time (in seconds) that\r\n    //         has occurred so far since the loan began until repayment.\r\n    // @param  _loanTotalDurationAgreedTo - The original duration that the\r\n    //         borrower and lender agreed to, by which they measured the\r\n    //         interest that would be due.\r\n    // @param  _loanInterestRateForDurationInBasisPoints - The interest rate\r\n    ///        that the borrower and lender agreed would be due after the\r\n    //         totalDuration passed.\r\n    // @return The quantity of interest due, measured in the smallest units of\r\n    //         the ERC20 currency used to pay this loan.\r\n    function _computeInterestDue(uint256 _loanAmount, uint256 _repaymentAmount, uint256 _loanDurationSoFarInSeconds, uint256 _loanTotalDurationAgreedTo, uint256 _loanInterestRateForDurationInBasisPoints) internal pure returns (uint256) {\r\n        uint256 interestDueAfterEntireDuration = (_loanAmount.mul(_loanInterestRateForDurationInBasisPoints)).div(uint256(10000));\r\n        uint256 interestDueAfterElapsedDuration = (interestDueAfterEntireDuration.mul(_loanDurationSoFarInSeconds)).div(_loanTotalDurationAgreedTo);\r\n        if(_loanAmount.add(interestDueAfterElapsedDuration) > _repaymentAmount){\r\n            return _repaymentAmount.sub(_loanAmount);\r\n        } else {\r\n            return interestDueAfterElapsedDuration;\r\n        }\r\n    }\r\n\r\n    // @notice A convenience function computing the adminFee taken from a\r\n    //         specified quantity of interest\r\n    // @param  _interestDue - The amount of interest due, measured in the\r\n    //         smallest quantity of the ERC20 currency being used to pay the\r\n    //         interest.\r\n    // @param  _adminFeeInBasisPoints - The percent (measured in basis\r\n    //         points) of the interest earned that will be taken as a fee by\r\n    //         the contract admins when the loan is repaid. The fee is stored\r\n    //         in the loan struct to prevent an attack where the contract\r\n    //         admins could adjust the fee right before a loan is repaid, and\r\n    //         take all of the interest earned.\r\n    // @return The quantity of ERC20 currency (measured in smalled units of\r\n    //         that ERC20 currency) that is due as an admin fee.\r\n    function _computeInterestForIV(uint256 _interestDue, uint256 _interestForIVInBasisPoints) internal pure returns (uint256) {\r\n    \treturn (_interestDue.mul(_interestForIVInBasisPoints)).div(10000);\r\n    }\r\n\r\n    // @notice We call this function when we wish to transfer an NFT from our\r\n    //         contract to another destination. Since some prominent NFT\r\n    //         contracts do not conform to the same standard, we try multiple\r\n    //         variations on transfer/transferFrom, and check whether any\r\n    //         succeeded.\r\n    // @notice Some nft contracts will not allow you to approve your own\r\n    //         address or do not allow you to call transferFrom() when you are\r\n    //         the sender, (for example, CryptoKitties does not allow you to),\r\n    //         while other nft contracts do not implement transfer() (since it\r\n    //         is not part of the official ERC721 standard but is implemented\r\n    //         in some prominent nft projects such as Cryptokitties), so we\r\n    //         must try calling transferFrom() and transfer(), and see if one\r\n    //         succeeds.\r\n    // @param  _nftContract - The NFT contract that we are attempting to\r\n    //         transfer an NFT from.\r\n    // @param  _nftId - The ID of the NFT that we are attempting to transfer.\r\n    // @param  _recipient - The destination of the NFT that we are attempting\r\n    //         to transfer.\r\n    // @return A bool value indicating whether the transfer attempt succeeded.\r\n    function _transferNftToAddress(address _nftContract, uint256 _nftId, address _recipient) internal returns (bool) {\r\n        // Try to call transferFrom()\r\n        bool transferFromSucceeded = _attemptTransferFrom(_nftContract, _nftId, _recipient);\r\n        if(transferFromSucceeded){\r\n            return true;\r\n        } else {\r\n            // Try to call transfer()\r\n            bool transferSucceeded = _attemptTransfer(_nftContract, _nftId, _recipient);\r\n            return transferSucceeded;\r\n        }\r\n    }\r\n\r\n    // @notice This function attempts to call transferFrom() on the specified\r\n    //         NFT contract, returning whether it succeeded.\r\n    // @notice We only call this function from within _transferNftToAddress(),\r\n    //         which is function attempts to call the various ways that\r\n    //         different NFT contracts have implemented transfer/transferFrom.\r\n    // @param  _nftContract - The NFT contract that we are attempting to\r\n    //         transfer an NFT from.\r\n    // @param  _nftId - The ID of the NFT that we are attempting to transfer.\r\n    // @param  _recipient - The destination of the NFT that we are attempting\r\n    //         to transfer.\r\n    // @return A bool value indicating whether the transfer attempt succeeded.\r\n    function _attemptTransferFrom(address _nftContract, uint256 _nftId, address _recipient) internal returns (bool) {\r\n        // @notice Some NFT contracts will not allow you to approve an NFT that\r\n        //         you own, so we cannot simply call approve() here, we have to\r\n        //         try to call it in a manner that allows the call to fail.\r\n        (bool success, ) = _nftContract.call(abi.encodeWithSelector(IERC721(_nftContract).approve.selector, address(this), _nftId));\r\n\r\n        // @notice Some NFT contracts will not allow you to call transferFrom()\r\n        //         for an NFT that you own but that is not approved, so we\r\n        //         cannot simply call transferFrom() here, we have to try to\r\n        //         call it in a manner that allows the call to fail.\r\n        (success, ) = _nftContract.call(abi.encodeWithSelector(IERC721(_nftContract).transferFrom.selector, address(this), _recipient, _nftId));\r\n        return success;\r\n    }\r\n\r\n    // @notice This function attempts to call transfer() on the specified\r\n    //         NFT contract, returning whether it succeeded.\r\n    // @notice We only call this function from within _transferNftToAddress(),\r\n    //         which is function attempts to call the various ways that\r\n    //         different NFT contracts have implemented transfer/transferFrom.\r\n    // @param  _nftContract - The NFT contract that we are attempting to\r\n    //         transfer an NFT from.\r\n    // @param  _nftId - The ID of the NFT that we are attempting to transfer.\r\n    // @param  _recipient - The destination of the NFT that we are attempting\r\n    //         to transfer.\r\n    // @return A bool value indicating whether the transfer attempt succeeded.\r\n    function _attemptTransfer(address _nftContract, uint256 _nftId, address _recipient) internal returns (bool) {\r\n        // @notice Some NFT contracts do not implement transfer(), since it is\r\n        //         not a part of the official ERC721 standard, but many\r\n        //         prominent NFT projects do implement it (such as\r\n        //         Cryptokitties), so we cannot simply call transfer() here, we\r\n        //         have to try to call it in a manner that allows the call to\r\n        //         fail.\r\n        (bool success, ) = _nftContract.call(abi.encodeWithSelector(INonStandardERC721Transfer(_nftContract).transfer.selector, _recipient, _nftId));\r\n        return success;\r\n    }\r\n\r\n    /* ***************** */\r\n    /* FALLBACK FUNCTION */\r\n    /* ***************** */\r\n\r\n    // @notice By calling 'revert' in the fallback function, we prevent anyone\r\n    //         from accidentally sending funds directly to this contract.\r\n    fallback() external payable {\r\n        revert();\r\n    }\r\n    receive() external payable {\r\n        revert();\r\n    }\r\n\r\n        // @notice This function gets the current chain ID.\r\n    function getChainID() public view returns (uint256) {\r\n        uint256 id;\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        return id;\r\n    }\r\n\r\n    // @notice This function is called in beginLoan() to validate the\r\n    //         borrower's signature that the borrower provided off-chain to\r\n    //         verify that they did indeed want to use this NFT for this loan.\r\n    // @param  _tokenId - The ID within the tokenAddress for\r\n    //         the NFT being used as collateral for this loan. The NFT is\r\n    //         stored within this contract during the duration of the loan.\r\n    // @param  _borrowerNonce - The nonce referred to here\r\n    //         is not the same as an Ethereum account's nonce. We are referring\r\n    //         instead to nonces that are used by both the lender and the\r\n    //         borrower when they are first signing off-chain orders.\r\n    //         These nonces can be any uint256 value that the user has not\r\n    //         previously used to sign an off-chain order. Each nonce can be\r\n    //         used at most once per user within this contract, regardless of whether\r\n    //         they are the lender or the borrower in that situation. This\r\n    //         serves two purposes. First, it prevents replay attacks where an\r\n    //         attacker would submit a user's off-chain order more than once.\r\n    //         Second, it allows a user to cancel an off-chain order by calling\r\n    //         cancelLoanCommitmentBeforeLoanHasBegun(), which marks the\r\n    //         nonce as used and prevents any future loan from using the user's\r\n    //         off-chain order that contains that nonce.\r\n    // @param  _tokenAddress - The ERC721 contract of the NFT\r\n    //         collateral\r\n    // @param  _borrower - The address of the borrower.\r\n    // @param  _borrowerSignature - The ECDSA signature of the borrower,\r\n    //         obtained off-chain ahead of time, signing the following\r\n    //         combination of parameters: _tokenId, _borrowerNonce,\r\n    //         _tokenAddress, _borrower.\r\n    // @return A bool representing whether verification succeeded, showing that\r\n    //         this signature matched this address and parameters.\r\n    function isValidBorrowerSignature(\r\n        uint256 _tokenId,\r\n        uint256 _borrowerNonce,\r\n        address _tokenAddress,\r\n        address _borrower,\r\n        bytes memory _borrowerSignature\r\n    ) public view returns(bool) {\r\n        if(_borrower == address(0)){\r\n            return false;\r\n        } else {\r\n            uint256 chainId;\r\n            chainId = getChainID();\r\n            bytes32 message = keccak256(abi.encodePacked(\r\n                _tokenId,\r\n                _borrowerNonce,\r\n                _tokenAddress,\r\n                _borrower,\r\n                chainId\r\n            ));\r\n            \r\n            bytes32 messageWithEthSignPrefix = message.toEthSignedMessageHash();\r\n\r\n            return (messageWithEthSignPrefix.recover(_borrowerSignature) == _borrower);\r\n        }\r\n    }\r\n\r\n    // @notice This function is called in beginLoan() to validate the\r\n    //         lender's signature that the lender provided off-chain to\r\n    //         verify that they did indeed want to agree to this loan according\r\n    //         to these terms.\r\n    // @param  _loanAmount - The original sum of money transferred\r\n    //         from lender to borrower at the beginning of the loan, measured\r\n    //         in paymentToken's smallest units.\r\n    // @param  _repaymentAmount - The maximum amount of money that the\r\n    //         borrower would be required to retrieve their collateral. If\r\n    //         interestIsProRated is set to false, then the borrower will\r\n    //         always have to pay this amount to retrieve their collateral.\r\n    // @param  _tokenId - The ID within the tokenAddress for\r\n    //         the NFT being used as collateral for this loan. The NFT is\r\n    //         stored within this contract during the duration of the loan.\r\n    // @param  _loanDuration - The amount of time (measured in seconds) that can\r\n    //         elapse before the lender can liquidate the loan and seize the\r\n    //         underlying collateral NFT.\r\n    // @param  _loanInterestRateForDurationInBasisPoints - The interest rate\r\n    //         (measured in basis points, e.g. hundreths of a percent) for the\r\n    //         loan, that must be repaid pro-rata by the borrower at the\r\n    //         conclusion of the loan or risk seizure of their nft collateral.\r\n    // @param  _adminFeeInBasisPoints - The percent (measured in basis\r\n    //         points) of the interest earned that will be taken as a fee by\r\n    //         the contract admins when the loan is repaid. The fee is stored\r\n    //         in the loan struct to prevent an attack where the contract\r\n    //         admins could adjust the fee right before a loan is repaid, and\r\n    //         take all of the interest earned.\r\n    // @param  _lenderNonce - The nonce referred to here\r\n    //         is not the same as an Ethereum account's nonce. We are referring\r\n    //         instead to nonces that are used by both the lender and the\r\n    //         borrower when they are first signing off-chain orders.\r\n    //         These nonces can be any uint256 value that the user has not\r\n    //         previously used to sign an off-chain order. Each nonce can be\r\n    //         used at most once per user within this contract, regardless of whether\r\n    //         they are the lender or the borrower in that situation. This\r\n    //         serves two purposes. First, it prevents replay attacks where an\r\n    //         attacker would submit a user's off-chain order more than once.\r\n    //         Second, it allows a user to cancel an off-chain order by calling\r\n    //         cancelLoanCommitmentBeforeLoanHasBegun(), which marks the\r\n    //         nonce as used and prevents any future loan from using the user's\r\n    //         off-chain order that contains that nonce.\r\n    // @param  _tokenAddress - The ERC721 contract of the NFT\r\n    //         collateral\r\n    // @param  _paymentToken - The ERC20 contract of the currency being\r\n    //         used as principal/interest for this loan.\r\n    // @param  _lender - The address of the lender. The lender can change their\r\n    //         address by transferring the ERC721 token that they\r\n    //         received when the loan began.\r\n    // @param  _interestIsProRated - A boolean value determining whether the\r\n    //         interest will be pro-rated if the loan is repaid early, or\r\n    //         whether the borrower will simply pay repaymentAmount.\r\n    // @param  _lenderSignature - The ECDSA signature of the lender,\r\n    //         obtained off-chain ahead of time, signing the following\r\n    //         combination of parameters: _loanAmount,\r\n    //         _repaymentAmount _tokenId, _loanDuration,\r\n    //         _loanInterestRateForDurationInBasisPoints, _lenderNonce,\r\n    //         _tokenAddress, _paymentToken, _lender,\r\n    //         _interestIsProRated.\r\n    // @return A bool representing whether verification succeeded, showing that\r\n    //         this signature matched this address and parameters.\r\n    function isValidLenderSignature(\r\n        uint256 _loanAmount,\r\n        uint256 _loanLeveragedAmount,\r\n        uint256 _repaymentAmount,\r\n        uint256 _tokenId,\r\n        uint256 _loanDuration,\r\n        // uint256 _loanInterestRateForDurationInBasisPoints,\r\n        uint256 _adminFeeInBasisPoints,\r\n        uint256 _lenderNonce,\r\n        address _tokenAddress,\r\n        address _paymentToken,\r\n        address _lender,\r\n        bool _liquidateViaAuction,\r\n        // bool _interestIsProRated,\r\n        bytes memory _lenderSignature\r\n    ) public view returns(bool) {\r\n        if(_lender == address(0)){\r\n            return false;\r\n        } else {\r\n            uint256 chainId;\r\n            chainId = getChainID();\r\n            bytes32 message = keccak256(abi.encodePacked(\r\n                _loanAmount,\r\n                _loanLeveragedAmount,\r\n                _repaymentAmount,\r\n                _tokenId,\r\n                _loanDuration,\r\n                _adminFeeInBasisPoints,\r\n                _lenderNonce,\r\n                _tokenAddress,\r\n                _paymentToken,\r\n                _lender,\r\n                _liquidateViaAuction,\r\n                chainId\r\n            ));\r\n\r\n            bytes32 messageWithEthSignPrefix = message.toEthSignedMessageHash();\r\n\r\n            return (messageWithEthSignPrefix.recover(_lenderSignature) == _lender);\r\n        }\r\n    }\r\n\r\n    function computeInterestDistributionForLender(\r\n        uint256 _loanAmount, \r\n        uint256 _loanLeveragedAmount,\r\n        uint256 _interestDue\r\n        ) public pure returns(uint256) {\r\n            uint256 rate = 55;\r\n            if (_loanLeveragedAmount != 0) {\r\n                uint256 leveraged = (_loanAmount).div(_loanLeveragedAmount);\r\n                if (leveraged <= 30) {\r\n                    rate = 50;\r\n                }\r\n                else if (leveraged <= 50) {\r\n                    rate = 45;\r\n                }\r\n                else if (leveraged <= 60) {\r\n                    rate = 40;\r\n                }\r\n                else if (leveraged <= 70) {\r\n                    rate = 35;\r\n                }\r\n                else if (leveraged <= 80) {\r\n                    rate = 25;\r\n                }\r\n                else if (leveraged <= 90) {\r\n                    rate = 15;\r\n                }\r\n                else {\r\n                    rate = 5;\r\n                }\r\n            }\r\n            return (_interestDue).mul(rate).div(10000);\r\n    }\r\n\r\n    function computePriceOfLenderToPay(uint256 loanAmount, uint256 leveragedAmount, uint256 repaymentAmount) public pure returns(uint256) {\r\n        uint256 interestDue = (repaymentAmount).sub(loanAmount);\r\n            uint256 interestForLender = computeInterestDistributionForLender(\r\n                loanAmount,\r\n                leveragedAmount,\r\n                interestDue\r\n            );\r\n            return leveragedAmount.add(interestDue).sub(interestForLender);\r\n    }\r\n}"
    },
    "contracts/loan/PeriFiLoanAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\n// @title Admin contract for the loan. Holds owner-only functions to adjust\r\n//        contract-wide fees, parameters, etc.\r\n// @author smartcontractdev.eth, creator of wrappedkitties.eth, cwhelper.eth, and\r\n//         kittybounties.eth\r\ncontract PeriFiLoanAdmin is Ownable, Pausable, ReentrancyGuard {\r\n    /* ****** */\r\n    /* EVENTS */\r\n    /* ****** */\r\n\r\n    // @notice This event is fired whenever the admins change the percent of\r\n    //         interest rates earned that they charge as a fee. Note that\r\n    //         newAdminFee can never exceed 10,000, since the fee is measured\r\n    //         in basis points.\r\n    // @param  newAdminFee - The new admin fee measured in basis points. This\r\n    //         is a percent of the interest paid upon a loan's completion that\r\n    //         go to the contract admins.\r\n    event InterestForIVUpdated(\r\n        uint256 interestForIV\r\n    );\r\n\r\n    /* ******* */\r\n    /* STORAGE */\r\n    /* ******* */\r\n\r\n    // @notice The maximum duration of any loan started on this platform,\r\n    //         measured in seconds. This is both a sanity-check for borrowers\r\n    //         and an upper limit on how long admins will have to support v1 of\r\n    //         this contract if they eventually deprecate it, as well as a check\r\n    //         to ensure that the loan duration never exceeds the space alotted\r\n    //         for it in the loan struct.\r\n    uint256 public maximumLoanDuration = 53 weeks;\r\n\r\n    // @notice The maximum number of active loans allowed on this platform.\r\n    //         This parameter is used to limit the risk while\r\n    //         the project is first getting started.\r\n    uint256 public maximumNumberOfActiveLoans = 100;\r\n\r\n    // @notice The percentage of interest earned by lenders on this platform\r\n    //         that is taken by the contract admin's as a fee, measured in\r\n    //         basis points (hundreths of a percent).\r\n    uint256 public interestForIVInBasisPoints = 5;\r\n\r\n    address public periFiAdminAddr;\r\n\r\n    address public leveragePoolAddr;\r\n\r\n    address public insuranceVaultAddr;\r\n    /* *********** */\r\n    /* CONSTRUCTOR */\r\n    /* *********** */\r\n\r\n    constructor(address _periFiAdminAddr, address _leveragePoolAddr, address _insuranceVaultAddr) {\r\n        periFiAdminAddr = _periFiAdminAddr;\r\n        leveragePoolAddr = _leveragePoolAddr;\r\n        insuranceVaultAddr = _insuranceVaultAddr;\r\n    }\r\n\r\n    /* ********* */\r\n    /* FUNCTIONS */\r\n    /* ********* */\r\n\r\n    // @notice This function can be called by admins to change the\r\n    //         maximumLoanDuration. Note that they can never change\r\n    //         maximumLoanDuration to be greater than UINT32_MAX, since that's\r\n    //         the maximum space alotted for the duration in the loan struct.\r\n    // @param  _newMaximumLoanDuration - The new maximum loan duration, measured\r\n    //         in seconds.\r\n    function updateMaximumLoanDuration(uint256 _newMaximumLoanDuration) external onlyOwner {\r\n        require(_newMaximumLoanDuration <= uint256(~uint32(0)), 'loan duration cannot exceed space alotted in struct');\r\n        maximumLoanDuration = _newMaximumLoanDuration;\r\n    }\r\n\r\n    // @notice This function can be called by admins to change the\r\n    //         maximumNumberOfActiveLoans. \r\n    // @param  _newMaximumNumberOfActiveLoans - The new maximum number of\r\n    //         active loans, used to limit the risk while the\r\n    //         project is first getting started.\r\n    function updateMaximumNumberOfActiveLoans(uint256 _newMaximumNumberOfActiveLoans) external onlyOwner {\r\n        maximumNumberOfActiveLoans = _newMaximumNumberOfActiveLoans;\r\n    }\r\n\r\n    // @notice This function can be called by admins to change the percent of\r\n    //         interest rates earned that they charge as a fee. Note that\r\n    //         newAdminFee can never exceed 10,000, since the fee is measured\r\n    //         in basis points.\r\n    // @param  _newInterestForIVBasisPoints - The new admin fee measured in basis points. This\r\n    //         is a percent of the interest paid upon a loan's completion that\r\n    //         go to the contract admins.\r\n    function updateInterestForIV(uint256 _newInterestForIVInBasisPoints) external onlyOwner {\r\n        require(_newInterestForIVInBasisPoints <= 10000, 'By definition, basis points cannot exceed 10000');\r\n        interestForIVInBasisPoints = _newInterestForIVInBasisPoints;\r\n        emit InterestForIVUpdated(_newInterestForIVInBasisPoints);\r\n    }\r\n}"
    },
    "contracts/PeriFiAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract PeriFiAdmin is Ownable {\r\n\r\n    // @notice A mapping from from an ERC20 currency address to whether that\r\n    //         currency is whitelisted to be used by this contract.\r\n    mapping (address => bool) public erc20CurrencyIsWhitelisted;\r\n\r\n    // @notice A mapping from from an NFT contract's address to whether that\r\n    //         contract is whitelisted to be used by this contract.\r\n    // mapping (address => bool) public nftContractIsWhitelisted;\r\n\r\n\r\n    // @notice This function can be called by admins to change the whitelist\r\n    //         status of an ERC20 currency. This includes both adding an ERC20\r\n    //         currency to the whitelist and removing it.\r\n    // @param  _erc20Currency - The address of the ERC20 currency whose whitelist\r\n    //         status changed.\r\n    // @param  _setAsWhitelisted - The new status of whether the currency is\r\n    //         whitelisted or not.\r\n    function whitelistERC20Currency(address _erc20Currency, bool _setAsWhitelisted) external onlyOwner {\r\n        erc20CurrencyIsWhitelisted[_erc20Currency] = _setAsWhitelisted;\r\n    }\r\n\r\n    // @notice This function can be called by admins to change the whitelist\r\n    //         status of an NFT contract. This includes both adding an NFT\r\n    //         contract to the whitelist and removing it.\r\n    // @param  _nftContract - The address of the NFT contract whose whitelist\r\n    //         status changed.\r\n    // @param  _setAsWhitelisted - The new status of whether the contract is\r\n    //         whitelisted or not.\r\n    // function whitelistNFTContract(address _nftContract, bool _setAsWhitelisted) external onlyOwner {\r\n    //     nftContractIsWhitelisted[_nftContract] = _setAsWhitelisted;\r\n    // }\r\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/interfaces/INonStandardERC721Transfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\ninterface INonStandardERC721Transfer {\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "debug": {
      "debugInfo": []
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}